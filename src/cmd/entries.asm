# byte exec1(byte a, byte b)
7ffdadfbb768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte Slot0(byte a, byte b)
7ffdadfbb780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte Slot1(byte a, byte b)
7ffdadfbb798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte Slot2(byte a, byte b)
7ffdadfbb7b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte Slot3(byte a, byte b)
7ffdadfbb7c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte Slot4(byte a, byte b)
7ffdadfbb7e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte Slot5(byte a, byte b)
7ffdadfbb7f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte Slot6(byte a, byte b)
7ffdadfbb810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte Slot7(byte a, byte b)
7ffdadfbb828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte Slot8(byte a, byte b)
7ffdadfbb840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte Slot9(byte a, byte b)
7ffdadfbb858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte SlotA(byte a, byte b)
7ffdadfbb870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte SlotB(byte a, byte b)
7ffdadfbb888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte SlotC(byte a, byte b)
7ffdadfbb8a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte SlotD(byte a, byte b)
7ffdadfbb8b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte SlotE(byte a, byte b)
7ffdadfbb8d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte SlotF(byte a, byte b)
7ffdadfbb8e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte filler(byte a, byte b)
7ffdadfbb900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit CF()
7ffdadf4ba80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void CF(bit f)
7ffdadf4ba98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit PF()
7ffdadf4bab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void PF(bit pf)
7ffdadf4bac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit AF()
7ffdadf4bae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void AF(bit f)
7ffdadf4baf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit OF()
7ffdadf4bb10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void OF(bit f)
7ffdadf4bb28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit SF()
7ffdadf4bb40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void SF(bit f)
7ffdadf4bb58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit ZF()
7ffdadf4bb70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void ZF(bit f)
7ffdadf4bb88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit NO()
7ffdadf4bba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit NC()
7ffdadf4bbb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit NZ()
7ffdadf4bbd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit NS()
7ffdadf4bbe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit NP()
7ffdadf4bc00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit LT()
7ffdadf4bc18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit A()
7ffdadf4bc30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit NA()
7ffdadf4bc48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit Read(StatusFlagIndex i)
7ffdadf4bc60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void Write(StatusFlagIndex index, bit b)
7ffdadf4bc78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string Format()
7ffdadf4bcc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatusFlags op_Implicit(RFlagBits src)
7ffdadf4bd38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RFlagBits op_Implicit(StatusFlags src)
7ffdadf4bd50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatusFlags op_Implicit(StatusFlagBits src)
7ffdadf4bd68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatusFlagBits op_Implicit(StatusFlags src)
7ffdadf4bd80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort op_Explicit(StatusFlags src)
7ffdadf4bd98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint op_Explicit(StatusFlags src)
7ffdadf4bdb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatusFlags get_Zero()
7ffdadf4bdc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool PrintMembers(StringBuilder builder)
7ffdadf4bde0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool op_Inequality(StatusFlags left, StatusFlags right)
7ffdadf4bdf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool op_Equality(StatusFlags left, StatusFlags right)
7ffdadf4be10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RFlagBits bits(RFlagIndex src)
7ffdadf4b5b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hash32 get_Hash()
7ffdadf4b600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit CF()
7ffdadf4b618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void CF(bit f)
7ffdadf4b630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit PF()
7ffdadf4b648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void PF(bit pf)
7ffdadf4b660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit AF()
7ffdadf4b678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void AF(bit f)
7ffdadf4b690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit OF()
7ffdadf4b6a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void OF(bit f)
7ffdadf4b6c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit SF()
7ffdadf4b6d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void SF(bit f)
7ffdadf4b6f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit ZF()
7ffdadf4b708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void ZF(bit f)
7ffdadf4b720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit NO()
7ffdadf4b738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit NC()
7ffdadf4b750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit NZ()
7ffdadf4b768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit NS()
7ffdadf4b780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit NP()
7ffdadf4b798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit LT()
7ffdadf4b7b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit A()
7ffdadf4b7c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit NA()
7ffdadf4b7e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit TF()
7ffdadf4b7f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit IF()
7ffdadf4b810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit DF()
7ffdadf4b828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit RF()
7ffdadf4b840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit VM()
7ffdadf4b858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit AC()
7ffdadf4b870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit VIF()
7ffdadf4b888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit VIP()
7ffdadf4b8a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit ID()
7ffdadf4b8b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit Read(RFlagIndex i)
7ffdadf4b8d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void Write(RFlagIndex index, bit b)
7ffdadf4b8e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RFlags op_Implicit(StatusFlagBits src)
7ffdadf4b960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RFlags op_Implicit(RFlagBits src)
7ffdadf4b978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool PrintMembers(StringBuilder builder)
7ffdadf4b9c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool op_Inequality(RFlags left, RFlags right)
7ffdadf4b9d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool op_Equality(RFlags left, RFlags right)
7ffdadf4b9f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmRegSets create()
7ffdadf49cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<char> Buffer()
7ffdadf49d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint Emit(in AsciGrid src, StreamWriter dst)
7ffdadf49d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet RegNames(RegClassCode class, Nullable<NativeSize> size)
7ffdadf49d58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq Regs(RegClassCode class, Nullable<NativeSize> size)
7ffdadf49d70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq GpRegs()
7ffdadf49d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq XmmRegs()
7ffdadf49da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq YmmRegs()
7ffdadf49db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq ZmmRegs()
7ffdadf49dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq Gp8HiRegs()
7ffdadf49de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq Gp8LoRegs()
7ffdadf49e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq Gp8Regs()
7ffdadf49e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq Gp16Regs()
7ffdadf49e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq Gp32Regs()
7ffdadf49e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq Gp64Regs()
7ffdadf49e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq GpRegs(NativeSizeCode width)
7ffdadf49e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet GpRegNames(NativeSizeCode width)
7ffdadf49e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq MaskRegs()
7ffdadf49ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq CrRegs()
7ffdadf49ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq DbRegs()
7ffdadf49ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq MmxRegs()
7ffdadf49ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq TmmRegs()
7ffdadf49f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq BndRegs()
7ffdadf49f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq SegRegs()
7ffdadf49f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq FpuRegs()
7ffdadf49f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet GpRegNames()
7ffdadf49f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet Gp8RegNames()
7ffdadf49f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet Gp16RegNames()
7ffdadf49f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet Gp32RegNames()
7ffdadf49fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet Gp64RegNames()
7ffdadf49fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet XmmRegNames()
7ffdadf49fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet YmmRegNames()
7ffdadf49ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet ZmmRegNames()
7ffdadf4a010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet MaskRegNames()
7ffdadf4a028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet MmxRegNames()
7ffdadf4a040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet SegRegNames()
7ffdadf4a058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet BndRegNames()
7ffdadf4a070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet CrRegNames()
7ffdadf4a088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet DbRegNames()
7ffdadf4a0a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet FpuRegNames()
7ffdadf4a0b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq RegSeq(NativeSizeCode size, RegClassCode class, byte count)
7ffdadf4a0d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet Names(RegClassCode class, RegOpSeq src)
7ffdadf4a0e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet Names(string name, RegOpSeq src)
7ffdadf4a100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConcurrentDictionary<string,dynamic> get__Data()
7ffdadf4a118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void ClearCache()
7ffdadf4a148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format(RegClassCode src)
7ffdadf4a160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <GpRegs>g__Load^6_0()
7ffdadf4a190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <XmmRegs>b__7_0()
7ffdadf4a1a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <YmmRegs>b__8_0()
7ffdadf4a1c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <ZmmRegs>b__9_0()
7ffdadf4a1d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <Gp8HiRegs>g__Load^10_0()
7ffdadf4a1f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <Gp8LoRegs>g__Load^11_0()
7ffdadf4a208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <Gp8Regs>g__Load^12_0()
7ffdadf4a220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <Gp16Regs>g__Load^13_0()
7ffdadf4a238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <Gp32Regs>g__Load^14_0()
7ffdadf4a250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <Gp64Regs>g__Load^15_0()
7ffdadf4a268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <MaskRegs>g__Load^18_0()
7ffdadf4a280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <CrRegs>g__Load^19_0()
7ffdadf4a298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <DbRegs>g__Load^20_0()
7ffdadf4a2b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <MmxRegs>g__Load^21_0()
7ffdadf4a2c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <TmmRegs>g__Load^22_0()
7ffdadf4a2e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <BndRegs>g__Load^23_0()
7ffdadf4a2f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <SegRegs>g__Load^24_0()
7ffdadf4a310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOpSeq <FpuRegs>g__Load^25_0()
7ffdadf4a328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet <GpRegNames>b__26_0()
7ffdadf4a340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet <Gp8RegNames>b__27_0()
7ffdadf4a358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet <Gp16RegNames>b__28_0()
7ffdadf4a370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet <Gp32RegNames>b__29_0()
7ffdadf4a388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet <Gp64RegNames>b__30_0()
7ffdadf4a3a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet <XmmRegNames>b__31_0()
7ffdadf4a3b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet <YmmRegNames>b__32_0()
7ffdadf4a3d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet <ZmmRegNames>b__33_0()
7ffdadf4a3e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet <MaskRegNames>b__34_0()
7ffdadf4a400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet <MmxRegNames>b__35_0()
7ffdadf4a418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet <SegRegNames>b__36_0()
7ffdadf4a430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet <BndRegNames>b__37_0()
7ffdadf4a448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet <CrRegNames>b__38_0()
7ffdadf4a460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet <DbRegNames>b__39_0()
7ffdadf4a478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegNameSet <FpuRegNames>b__40_0()
7ffdadf4a490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# al get_al()
7ffdadf48408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# cl get_cl()
7ffdadf48420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# dl get_dl()
7ffdadf48438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bl get_bl()
7ffdadf48450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sil get_sil()
7ffdadf48468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# dil get_dil()
7ffdadf48480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# spl get_spl()
7ffdadf48498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bpl get_bpl()
7ffdadf484b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r8b get_r8b()
7ffdadf484c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r9b get_r9b()
7ffdadf484e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r10b get_r10b()
7ffdadf484f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r11b get_r11b()
7ffdadf48510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r12b get_r12b()
7ffdadf48528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r13b get_r13b()
7ffdadf48540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r14b get_r14b()
7ffdadf48558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r15b get_r15b()
7ffdadf48570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ah get_ah()
7ffdadf48588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ch get_ch()
7ffdadf485a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# dh get_dh()
7ffdadf485b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bh get_bh()
7ffdadf485d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ax get_ax()
7ffdadf485e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# cx get_cx()
7ffdadf48600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# dx get_dx()
7ffdadf48618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bx get_bx()
7ffdadf48630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# si get_si()
7ffdadf48648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# di get_di()
7ffdadf48660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sp get_sp()
7ffdadf48678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bp get_bp()
7ffdadf48690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r8w get_r8w()
7ffdadf486a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r9w get_r9w()
7ffdadf486c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r10w get_r10w()
7ffdadf486d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r11w get_r11w()
7ffdadf486f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r12w get_r12w()
7ffdadf48708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r13w get_r13w()
7ffdadf48720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r14w get_r14w()
7ffdadf48738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r15w get_r15w()
7ffdadf48750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# eax get_eax()
7ffdadf48768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ecx get_ecx()
7ffdadf48780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# edx get_edx()
7ffdadf48798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ebx get_ebx()
7ffdadf487b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# esi get_esi()
7ffdadf487c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# edi get_edi()
7ffdadf487e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# esp get_esp()
7ffdadf487f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ebp get_ebp()
7ffdadf48810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r8d get_r8d()
7ffdadf48828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r9d get_r9d()
7ffdadf48840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r10d get_r10d()
7ffdadf48858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r11d get_r11d()
7ffdadf48870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r12d get_r12d()
7ffdadf48888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r13d get_r13d()
7ffdadf488a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r14d get_r14d()
7ffdadf488b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r15d get_r15d()
7ffdadf488d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# rax get_rax()
7ffdadf488e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# rcx get_rcx()
7ffdadf48900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# rdx get_rdx()
7ffdadf48918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# rbx get_rbx()
7ffdadf48930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# rsi get_rsi()
7ffdadf48948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# rdi get_rdi()
7ffdadf48960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# rsp get_rsp()
7ffdadf48978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# rbp get_rbp()
7ffdadf48990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r8q get_r8()
7ffdadf489a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r9q get_r9()
7ffdadf489c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r10q get_r10()
7ffdadf489d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r11q get_r11()
7ffdadf489f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r12q get_r12()
7ffdadf48a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r13q get_r13()
7ffdadf48a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r14q get_r14()
7ffdadf48a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r15q get_r15()
7ffdadf48a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm0 get_xmm0()
7ffdadf48a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm1 get_xmm1()
7ffdadf48a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm2 get_xmm2()
7ffdadf48a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm3 get_xmm3()
7ffdadf48ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm4 get_xmm4()
7ffdadf48ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm5 get_xmm5()
7ffdadf48ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm6 get_xmm6()
7ffdadf48af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm7 get_xmm7()
7ffdadf48b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm8 get_xmm8()
7ffdadf48b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm9 get_xmm9()
7ffdadf48b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm10 get_xmm10()
7ffdadf48b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm11 get_xmm11()
7ffdadf48b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm12 get_xmm12()
7ffdadf48b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm13 get_xmm13()
7ffdadf48ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm14 get_xmm14()
7ffdadf48bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm15 get_xmm15()
7ffdadf48bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm16 get_xmm16()
7ffdadf48be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm17 get_xmm17()
7ffdadf48c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm18 get_xmm18()
7ffdadf48c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm19 get_xmm19()
7ffdadf48c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm20 get_xmm20()
7ffdadf48c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm21 get_xmm21()
7ffdadf48c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm22 get_xmm22()
7ffdadf48c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm23 get_xmm23()
7ffdadf48c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm24 get_xmm24()
7ffdadf48ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm25 get_xmm25()
7ffdadf48cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm26 get_xmm26()
7ffdadf48cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm27 get_xmm27()
7ffdadf48cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm28 get_xmm28()
7ffdadf48d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm29 get_xmm29()
7ffdadf48d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm30 get_xmm30()
7ffdadf48d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm31 get_xmm31()
7ffdadf48d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm0 get_ymm0()
7ffdadf48d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm1 get_ymm1()
7ffdadf48d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm2 get_ymm2()
7ffdadf48d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm3 get_ymm3()
7ffdadf48db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm4 get_ymm4()
7ffdadf48dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm5 get_ymm5()
7ffdadf48de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm6 get_ymm6()
7ffdadf48df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm7 get_ymm7()
7ffdadf48e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm8 get_ymm8()
7ffdadf48e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm9 get_ymm9()
7ffdadf48e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm10 get_ymm10()
7ffdadf48e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm11 get_ymm11()
7ffdadf48e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm12 get_ymm12()
7ffdadf48e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm13 get_ymm13()
7ffdadf48ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm14 get_ymm14()
7ffdadf48eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm15 get_ymm15()
7ffdadf48ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm16 get_ymm16()
7ffdadf48ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm17 get_ymm17()
7ffdadf48f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm18 get_ymm18()
7ffdadf48f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm19 get_ymm19()
7ffdadf48f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm20 get_ymm20()
7ffdadf48f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm21 get_ymm21()
7ffdadf48f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm22 get_ymm22()
7ffdadf48f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm23 get_ymm23()
7ffdadf48f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm24 get_ymm24()
7ffdadf48fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm25 get_ymm25()
7ffdadf48fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm26 get_ymm26()
7ffdadf48fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm27 get_ymm27()
7ffdadf48ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm28 get_ymm28()
7ffdadf49008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm29 get_ymm29()
7ffdadf49020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm30 get_ymm30()
7ffdadf49038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm31 get_ymm31()
7ffdadf49050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm0 get_zmm0()
7ffdadf49068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm1 get_zmm1()
7ffdadf49080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm2 get_zmm2()
7ffdadf49098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm3 get_zmm3()
7ffdadf490b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm4 get_zmm4()
7ffdadf490c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm5 get_zmm5()
7ffdadf490e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm6 get_zmm6()
7ffdadf490f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm7 get_zmm7()
7ffdadf49110h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm8 get_zmm8()
7ffdadf49128h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm9 get_zmm9()
7ffdadf49140h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm10 get_zmm10()
7ffdadf49158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm11 get_zmm11()
7ffdadf49170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm12 get_zmm12()
7ffdadf49188h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm13 get_zmm13()
7ffdadf491a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm14 get_zmm14()
7ffdadf491b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm15 get_zmm15()
7ffdadf491d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm16 get_zmm16()
7ffdadf491e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm17 get_zmm17()
7ffdadf49200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm18 get_zmm18()
7ffdadf49218h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm19 get_zmm19()
7ffdadf49230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm20 get_zmm20()
7ffdadf49248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm21 get_zmm21()
7ffdadf49260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm22 get_zmm22()
7ffdadf49278h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm23 get_zmm23()
7ffdadf49290h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm24 get_zmm24()
7ffdadf492a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm25 get_zmm25()
7ffdadf492c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm26 get_zmm26()
7ffdadf492d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm27 get_zmm27()
7ffdadf492f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm28 get_zmm28()
7ffdadf49308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm29 get_zmm29()
7ffdadf49320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm30 get_zmm30()
7ffdadf49338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm31 get_zmm31()
7ffdadf49350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# db0 get_db0()
7ffdadf49368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# db1 get_db1()
7ffdadf49380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# db2 get_db2()
7ffdadf49398h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# db3 get_db3()
7ffdadf493b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# db4 get_db4()
7ffdadf493c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# db5 get_db5()
7ffdadf493e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# db6 get_db6()
7ffdadf493f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# db7 get_db7()
7ffdadf49410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# cr0 get_cr0()
7ffdadf49428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# cr1 get_cr1()
7ffdadf49440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# cr2 get_cr2()
7ffdadf49458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# cr3 get_cr3()
7ffdadf49470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# cr4 get_cr4()
7ffdadf49488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# cr5 get_cr5()
7ffdadf494a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# cr6 get_cr6()
7ffdadf494b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# cr7 get_cr7()
7ffdadf494d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# k0 get_k0()
7ffdadf494e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# k0 get_k1()
7ffdadf49500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# k2 get_k2()
7ffdadf49518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# k3 get_k3()
7ffdadf49530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# k4 get_k4()
7ffdadf49548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# k5 get_k5()
7ffdadf49560h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# k6 get_k6()
7ffdadf49578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# k7 get_k7()
7ffdadf49590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# cs get_cs()
7ffdadf495a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ds get_ds()
7ffdadf495c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ss get_ss()
7ffdadf495d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# es get_es()
7ffdadf495f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# fs get_fs()
7ffdadf49608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# gs get_gs()
7ffdadf49620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VexPrefixC5 init()
7ffdadf42a18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VexPrefixC5 init(bit r, byte vvvv, VexLengthCode l, VexOpCodeExtension pp)
7ffdadf42a30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VexPrefixC5 define(byte b1)
7ffdadf42a48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit get_R()
7ffdadf42a60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void set_R(bit value)
7ffdadf42a78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_R_Bits()
7ffdadf42a90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_VVVV()
7ffdadf42aa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void set_VVVV(byte value)
7ffdadf42ac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_VVVV_Bits()
7ffdadf42ad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VexLengthCode get_L()
7ffdadf42af0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void set_L(VexLengthCode value)
7ffdadf42b08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_L_Bits()
7ffdadf42b20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VexOpCodeExtension get_PP()
7ffdadf42b38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void set_PP(VexOpCodeExtension value)
7ffdadf42b50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_PP_Bits()
7ffdadf42b68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VexPrefixCode get_Code()
7ffdadf42b80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_Size()
7ffdadf42b98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegIndex get_Reg()
7ffdadf42bb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string Bitstring()
7ffdadf42bc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string FormatSemantic()
7ffdadf42be0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string Format()
7ffdadf42bf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Segments segments()
7ffdadf42748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VexPrefixC4 init()
7ffdadf42760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VexPrefixC4 init(VexRXB rxb, VexM mmmmm, bit w, byte vvvv, VexLengthCode l, VexOpCodeExtension pp)
7ffdadf42778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VexPrefixC4 define(byte b1, byte b2)
7ffdadf42790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VexRXB get_RXB()
7ffdadf427a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void set_RXB(VexRXB value)
7ffdadf427c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_RXB_Bits()
7ffdadf427d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VexM get_MMMMM()
7ffdadf427f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void set_MMMMM(VexM value)
7ffdadf42808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_MMMMM_Bits()
7ffdadf42820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit get_W()
7ffdadf42838h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void set_W(bit value)
7ffdadf42850h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_W_Bits()
7ffdadf42868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_VVVV()
7ffdadf42880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void set_VVVV(byte value)
7ffdadf42898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_VVVV_Bits()
7ffdadf428b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VexLengthCode get_L()
7ffdadf428c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void set_L(VexLengthCode value)
7ffdadf428e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_L_Bits()
7ffdadf428f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VexOpCodeExtension get_PP()
7ffdadf42910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void set_PP(VexOpCodeExtension value)
7ffdadf42928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_PP_Bits()
7ffdadf42940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VexPrefixCode get_PrefixCode()
7ffdadf42958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegIndex get_Reg()
7ffdadf42970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_Size()
7ffdadf42988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string Bitstring()
7ffdadf429a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string FormatSemantic()
7ffdadf429b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string Format()
7ffdadf429d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScaleFactor factor(Sib src)
7ffdadf2a460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Sib init(byte src)
7ffdadf2a478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint3 get_Base()
7ffdadf2a4c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void set_Base(uint3 value)
7ffdadf2a4d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint3 get_Index()
7ffdadf2a4f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void set_Index(uint3 value)
7ffdadf2a508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint2 get_Scale()
7ffdadf2a520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void set_Scale(uint2 value)
7ffdadf2a538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool get_IsEmpty()
7ffdadf2a550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool get_IsNonEmpty()
7ffdadf2a580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool get_IsNonZero()
7ffdadf2a5b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte Value()
7ffdadf2a5c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Sib get_Empty()
7ffdadf2a5f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string Bitstring()
7ffdadf2a610h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string Format()
7ffdadf2a628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte op_Implicit(Sib src)
7ffdadf2a6d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Sib op_Explicit(byte src)
7ffdadf2a6e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool PrintMembers(StringBuilder builder)
7ffdadf2a700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool op_Inequality(Sib left, Sib right)
7ffdadf2a718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool op_Equality(Sib left, Sib right)
7ffdadf2a730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RexPrefix init()
7ffdadf29b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit get_W()
7ffdadf29ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void set_W(bit value)
7ffdadf29bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit get_R()
7ffdadf29bd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void set_R(bit value)
7ffdadf29bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit get_X()
7ffdadf29c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void set_X(bit value)
7ffdadf29c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit get_B()
7ffdadf29c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void set_B(bit value)
7ffdadf29c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_Encoded()
7ffdadf29c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool get_IsEmpty()
7ffdadf29c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool get_IsNonEmpty()
7ffdadf29cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte Value()
7ffdadf29cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string Format()
7ffdadf29d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string ToBitString()
7ffdadf29d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hex8 op_Implicit(RexPrefix src)
7ffdadf29d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RexPrefix op_Implicit(RexPrefixCode src)
7ffdadf29da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte op_Implicit(RexPrefix src)
7ffdadf29db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RexPrefix op_Implicit(byte src)
7ffdadf29dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RexPrefix get_Empty()
7ffdadf29de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<RexPrefix> Range()
7ffdadf29e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get__Range()
7ffdadf29e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool get_IsEmpty()
7ffdadeba778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool get_IsNonEmpty()
7ffdadeba7a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Data()
7ffdadeba7d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref RegOp get_Reg()
7ffdadeba7f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref MemOp get_Mem()
7ffdadeba808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Imm get_Imm()
7ffdadeba820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref RegMask get_RegMask()
7ffdadeba838h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Rel get_Rel()
7ffdadeba850h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Disp get_Disp()
7ffdadeba868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string Format()
7ffdadeba880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmOpClass Z0.Asm.IAsmOp.get_OpClass()
7ffdadeba8e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NativeSize Z0.Asm.IAsmOp.get_Size()
7ffdadeba910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmOpKind Z0.Asm.IAsmOp.get_OpKind()
7ffdadeba940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmOperand op_Implicit(Imm8 src)
7ffdadeba970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmOperand op_Implicit(Imm16 src)
7ffdadeba988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmOperand op_Implicit(Imm32 src)
7ffdadeba9a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmOperand op_Implicit(Imm64 src)
7ffdadeba9b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmOperand get_Empty()
7ffdadeba9d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool get_IsEmpty()
7ffdadf40618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool get_IsNonEmpty()
7ffdadf40630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_TokenCount()
7ffdadf40648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmOpCodeBits Include(AsmOcToken src)
7ffdadf40660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte IncTokenCount(out byte pos)
7ffdadf40678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void Enable(AsmOcTokenKind kind)
7ffdadf40690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmOpCodeBits get_Empty()
7ffdadf406a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte width(ImmKind src)
7ffdadf21ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NativeSizeCode size(ImmKind src)
7ffdadf21f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format(in Imm src)
7ffdadf21f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Imm inc(Imm src)
7ffdadf21f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Imm dec(Imm src)
7ffdadf21f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool lt(Imm a, Imm b)
7ffdadf21f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool gt(Imm a, Imm b)
7ffdadf21f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool eq(Imm a, Imm b)
7ffdadf21f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong get_Value()
7ffdadf21fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ImmKind get_ImmKind()
7ffdadf21fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmOpClass get_OpClass()
7ffdadf22040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmOpKind get_OpKind()
7ffdadf22070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NativeSize get_Size()
7ffdadf220a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitWidth get_Width()
7ffdadf220d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool get_Signed()
7ffdadf220e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong get_Imm64u()
7ffdadf22100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long get_Imm64i()
7ffdadf22118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint get_Imm32u()
7ffdadf22130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int get_Imm32i()
7ffdadf22148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort get_Imm16u()
7ffdadf22160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short get_Imm16i()
7ffdadf22178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_Imm8u()
7ffdadf22190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte get_Imm8i()
7ffdadf221a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool get_IsNonZero()
7ffdadf221c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string Format()
7ffdadf22250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Imm op_Increment(Imm src)
7ffdadf222b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Imm op_Decrement(Imm src)
7ffdadf222c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool op_Equality(Imm a, Imm b)
7ffdadf222e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool op_Inequality(Imm a, Imm b)
7ffdadf222f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool op_LessThan(Imm a, Imm b)
7ffdadf22310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool op_LessThanOrEqual(Imm a, Imm b)
7ffdadf22328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool op_GreaterThan(Imm a, Imm b)
7ffdadf22340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool op_GreaterThanOrEqual(Imm a, Imm b)
7ffdadf22358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Imm get_Empty()
7ffdadf22370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmHexWriter create()
7ffdadf29518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmHexWriter Clear()
7ffdadf29560h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref AsmHexCode get_Target()
7ffdadf29578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void encode(Hex8 a0, Imm8 a1, AsmHexWriter dst)
7ffdadf295f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void encode(RexPrefix a0, Hex8 a1, Imm64 a2, AsmHexWriter dst)
7ffdadf29608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Conditions create()
7ffdadf23d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format(in Jcc8Conditions src, bit alt)
7ffdadf23d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format(in Jcc32Conditions src, bit alt)
7ffdadf23d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<Jcc8Conditions> jcc8()
7ffdadf23d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint jcc8(Conditions src, Span<Jcc8Conditions> dst)
7ffdadf23d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<Jcc32Conditions> jcc32()
7ffdadf23d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint jcc32(Conditions src, Span<Jcc32Conditions> dst)
7ffdadf23d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void Alloc()
7ffdadf23de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void Load()
7ffdadf23e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<Condition> ConditionCodes(N0 n)
7ffdadf23e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ConditionAlt> ConditionCodes(N1 n)
7ffdadf23e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<Jcc8Code> JccCodes(W8 w, N0 n)
7ffdadf23e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<Jcc8AltCode> JccCodes(W8 w, N1 n)
7ffdadf23e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<Jcc32Code> JccCodes(W32 w, N0 n)
7ffdadf23e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<Jcc32AltCode> JccCodes(W32 w, N1 n)
7ffdadf23ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<asci8> Names(bit alt)
7ffdadf23eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref asci8 Name(Condition src)
7ffdadf23ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref asci8 Name(ConditionAlt src)
7ffdadf23ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref TextBlock Describe(Condition src)
7ffdadf23f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref TextBlock Describe(ConditionAlt src)
7ffdadf23f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref asci8 Name(Jcc8Code src)
7ffdadf23f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref TextBlock Describe(Jcc8Code src)
7ffdadf23f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref asci8 Name(Jcc8AltCode src)
7ffdadf23f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref TextBlock Describe(Jcc8AltCode src)
7ffdadf23f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref asci8 Name(Jcc32Code src)
7ffdadf23f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref TextBlock Describe(Jcc32Code src)
7ffdadf23fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref asci8 Name(Jcc32AltCode src)
7ffdadf23fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref TextBlock Describe(Jcc32AltCode src)
7ffdadf23fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MemoryAddress get_Base()
7ffdaded9578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MemoryAddress get_Max()
7ffdaded9590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MemoryAddress IP()
7ffdaded95a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool IP(MemoryAddress src)
7ffdaded95c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool Contains(MemoryAddress src)
7ffdaded95d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool Advance(Disp32 dx, out MemoryAddress dst)
7ffdaded95f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool Advance(byte sz, Disp32 dx, out MemoryAddress dst)
7ffdaded9608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte eval(Add f, byte x, byte y)
7ffdadfb8b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte eval(Sub f, byte x, byte y)
7ffdadfb8b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte eval(Mul f, byte x, byte y)
7ffdadfb8b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte eval(Div f, byte x, byte y)
7ffdadfb8ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte eval(And f, byte x, byte y)
7ffdadfb8bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte exec(byte a, byte b)
7ffdadfb8918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool equals(AsmSigExpr a, AsmSigExpr b)
7ffdadf702d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSigExpr expression(AsmMnemonic mnemonic, AsmSigOpExpr op0)
7ffdadf70348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSigExpr expression(AsmMnemonic mnemonic, AsmSigOpExpr op0, AsmSigOpExpr op1)
7ffdadf70360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSigExpr expression(AsmMnemonic mnemonic, AsmSigOpExpr op0, AsmSigOpExpr op1, AsmSigOpExpr op2)
7ffdadf70378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSigExpr expression(AsmMnemonic mnemonic, AsmSigOpExpr op0, AsmSigOpExpr op1, AsmSigOpExpr op2, AsmSigOpExpr op3)
7ffdadf70390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSigExpr expression(AsmMnemonic mnemonic, AsmSigOpExpr op0, AsmSigOpExpr op1, AsmSigOpExpr op2, AsmSigOpExpr op3, AsmSigOpExpr op4)
7ffdadf703a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSigExpr expression(AsmMnemonic mnemonic, ReadOnlySpan<string> ops)
7ffdadf703c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref AsmSigOpExpr operand(in AsmSigExpr src, byte i)
7ffdadf70510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint operands(in AsmSigExpr src, ref uint i, Span<char> dst)
7ffdadf70528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte operands(AsmSigExpr src, Span<AsmSigOpExpr> dst)
7ffdadf70540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Outcome parse(ReadOnlySpan<char> src, out AsmSig dst)
7ffdadf70588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSig sig(AsmMnemonic mnemonic, AsmSigOp[] ops)
7ffdadf705d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSigToken token(AsmSigTokenKind kind, byte value)
7ffdadf70678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSigOp operand<byte>(AsmSigTokenKind kind, byte value)
7ffdb05a13f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSigOp operand<ushort>(AsmSigTokenKind kind, ushort value)
7ffdb05a14d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSigOp operand<uint>(AsmSigTokenKind kind, uint value)
7ffdb05a1548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSigOp operand<ulong>(AsmSigTokenKind kind, ulong value)
7ffdb05a1638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shape shape(int n1, int n2, int n4, int n8)
7ffdadf701c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shape shape(ReadOnlySpan<byte> src)
7ffdadf701e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Shape shape(ReadOnlySpan<byte> src, ref Shape dst)
7ffdadf701f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmRegQuery query(ReadOnlySpan<RegOp> src)
7ffdadf49bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<RegOp> Where(RegClassCode class)
7ffdadf49c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<RegOp> Where(NativeSizeCode width)
7ffdadf49c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<RegOp> Where(RegClassCode class, NativeSizeCode width)
7ffdadf49c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint regops(RegClassCode class, NativeSizeCode w, Span<RegOp> dst)
7ffdadf48300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte regcount(RegClassCode class)
7ffdadf48318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<RegOp> gp()
7ffdadf48330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<NativeSizeCode> widths()
7ffdadf48348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<RegClassCode> classes()
7ffdadf48360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<RegIndexCode> indices()
7ffdadf48378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VexPrefix define(VexPrefixKind kind, byte b1)
7ffdadf29e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VexPrefix define(VexPrefixKind kind, byte b1, byte b2)
7ffdadf29e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort leading(VexM src)
7ffdadf29ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort width(VexM src)
7ffdadf29ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort value(VexOpCodeExtension src)
7ffdadf29ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte size(VexPrefixCode src)
7ffdadf29ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit rex(in OpCodeString src)
7ffdadf41c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit rex(byte src)
7ffdadf41c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vex(byte src)
7ffdadf41c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vex(uint src)
7ffdadf41c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit rex(in AsmHexCode src)
7ffdadf41c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vex(in AsmHexCode src)
7ffdadf41c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit evex(uint src)
7ffdadf41c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit opsz(byte src)
7ffdadf41ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit adsz(byte src)
7ffdadf41cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit opsz(RuntimeModeKind mode, OpszKind default, OpszKind effective)
7ffdadf41d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SizeOverride opsz()
7ffdadf41a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SizeOverride adsz()
7ffdadf41aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SizeOverride szov(bit ad)
7ffdadf41ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LockPrefix lock()
7ffdadf41ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RepPrefix repz()
7ffdadf41ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RepPrefix repnz()
7ffdadf41b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RepPrefix rep(bit z)
7ffdadf41b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RexPrefix rex(bit w, bit r, bit x, bit b)
7ffdadf41b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmPrefixKind kinds(ReadOnlySpan<byte> src)
7ffdadf41b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmPrefixClass class(AsmPrefixCode src)
7ffdadf41b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmPrefixClass class(AsmPrefixKind src)
7ffdadf41b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmPrefixKind kind(AsmPrefixCode code)
7ffdadf41b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmPrefixCode code(byte src)
7ffdadf41ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmInstruction and(r32 a, Imm32 b)
7ffdadf41950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmInstruction inst(in AsmMnemonic mnemonic, in AsmOpCodeSpec opcode, AsmOperand[] ops)
7ffdadf41968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmInstruction inst(in AsmMnemonic mnemonic, in AsmOpCodeSpec opcode, in AsmOperands ops)
7ffdadf41980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmInstruction inst(in AsmMnemonic mnemonic, in AsmOpCodeSpec opcode, out AsmInstruction dst)
7ffdadf41998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmInstruction inst(in AsmMnemonic mnemonic, in AsmOpCodeSpec opcode, in AsmOperand op0, out AsmInstruction dst)
7ffdadf419b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmInstruction inst(in AsmMnemonic mnemonic, in AsmOpCodeSpec opcode, in AsmOperand op0, in AsmOperand op1, out AsmInstruction dst)
7ffdadf419c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmInstruction inst(in AsmMnemonic mnemonic, in AsmOpCodeSpec opcode, in AsmOperand op0, in AsmOperand op1, in AsmOperand op2, out AsmInstruction dst)
7ffdadf419e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmInstruction inst(in AsmMnemonic mnemonic, in AsmOpCodeSpec opcode, in AsmOperand op0, in AsmOperand op1, in AsmOperand op2, in AsmOperand op3, out AsmInstruction dst)
7ffdadf419f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint filter(RegClassCode class, ReadOnlySpan<RegOp> src, Span<RegOp> dst)
7ffdadf41530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint filter(NativeSizeCode width, ReadOnlySpan<RegOp> src, Span<RegOp> dst)
7ffdadf41548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint filter(RegClassCode class, NativeSizeCode width, ReadOnlySpan<RegOp> src, Span<RegOp> dst)
7ffdadf41560h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit invalid(RegIndexCode src)
7ffdadf41578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit valid(RegIndexCode src)
7ffdadf41590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r8 next(r8 src)
7ffdadf415d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r16 next(r16 src)
7ffdadf415f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r32 next(r32 src)
7ffdadf41608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r64 next(r64 src)
7ffdadf41620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm next(xmm src)
7ffdadf41638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm next(ymm src)
7ffdadf41650h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm next(zmm src)
7ffdadf41668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# rK next(rK src)
7ffdadf41680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# rCr next(rCr src)
7ffdadf41698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# rDb next(rDb src)
7ffdadf416b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r8 prior(r8 src)
7ffdadf416c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r16 prior(r16 src)
7ffdadf416e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r32 prior(r32 src)
7ffdadf416f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# r64 prior(r64 src)
7ffdadf41710h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# xmm prior(xmm src)
7ffdadf41728h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ymm prior(ymm src)
7ffdadf41740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# zmm prior(zmm src)
7ffdadf41758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# rK prior(rK src)
7ffdadf41770h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# rCr prior(rCr src)
7ffdadf41788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# rDb prior(rDb src)
7ffdadf417a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp gp8(RegIndexCode r)
7ffdadf417b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp gp16(RegIndexCode r)
7ffdadf417d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp gp32(RegIndexCode r)
7ffdadf417e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp gp64(RegIndexCode r)
7ffdadf41800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp mask(RegIndexCode r)
7ffdadf41818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp v128(RegIndexCode r)
7ffdadf41830h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp v256(RegIndexCode r)
7ffdadf41848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp v512(RegIndexCode r)
7ffdadf41860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp rK(RegIndexCode r)
7ffdadf41878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp rK8(RegIndexCode r)
7ffdadf41890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp rK16(RegIndexCode r)
7ffdadf418a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp rK32(RegIndexCode r)
7ffdadf418c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp rK64(RegIndexCode r)
7ffdadf418d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp reg(RegKind kind)
7ffdadf418f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp reg(in AsmOperand src)
7ffdadf41908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp sptr(RegIndexCode r)
7ffdadf41920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp seg(RegIndexCode r)
7ffdadf41938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<Gp8LoReg> regs(W8 w)
7ffdadf413f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<Gp16Reg> regs(W16 w)
7ffdadf41410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<Gp32Reg> regs(W32 w)
7ffdadf41428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<Gp64Reg> regs(W64 w)
7ffdadf41440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Gp8LoReg reg(W8 w, byte index)
7ffdadf41458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Gp16Reg reg(W16 w, byte index)
7ffdadf41470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Gp32Reg reg(W32 w, byte index)
7ffdadf41488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Gp64Reg reg(W64 w, byte index)
7ffdadf414a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit slot(byte index, out Gp8LoReg dst)
7ffdadf414b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit slot(byte index, out Gp16Reg dst)
7ffdadf414d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit slot(byte index, out Gp32Reg dst)
7ffdadf414e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit slot(byte index, out Gp64Reg dst)
7ffdadf41500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmOpCodeSpec define(ReadOnlySpan<AsmOcToken> src)
7ffdadf406d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool rex(in AsmOpCodeSpec src)
7ffdadf40738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool evex(in AsmOpCodeSpec src)
7ffdadf40750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vex(in AsmOpCodeSpec src)
7ffdadf40768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool hex8(in AsmOpCodeSpec src, out AsmOcToken dst)
7ffdadf40780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool rex(in AsmOpCodeSpec src, out AsmOcToken dst)
7ffdadf40798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool imm(in AsmOpCodeSpec src, out AsmOcToken dst)
7ffdadf407b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vex(in AsmOpCodeSpec src, out AsmOcToken dst)
7ffdadf407c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool evex(in AsmOpCodeSpec src, out AsmOcToken dst)
7ffdadf407e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool regdigit(in AsmOpCodeSpec src, out AsmOcToken dst)
7ffdadf407f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool query(in AsmOpCodeSpec src, Func<AsmOcToken,bool> predicate, out AsmOcToken dst)
7ffdadf40810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSectionDirective section(asci16 name, CoffSectionFlags flags, CoffComDatKind comdat, AsmDirectiveOp data)
7ffdadf290f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSectionDirective section(asci16 name, CoffSectionFlags flags, CoffComDatKind comdat, string data)
7ffdadf29110h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSectionDirective section(asci16 name, CoffSectionFlags flags, CoffComDatKind comdat, AsmLabel label)
7ffdadf29128h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSectionDirective section(CoffSectionKind kind, CoffSectionFlags flags, CoffComDatKind comdat, AsmDirectiveOp data)
7ffdadf29140h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSectionDirective section(CoffSectionKind kind, CoffSectionFlags flags, CoffComDatKind comdat, string data)
7ffdadf29158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmSectionDirective section(CoffSectionKind kind, CoffSectionFlags flags, CoffComDatKind comdat, AsmLabel data)
7ffdadf29170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmDirectiveOp operand(string src)
7ffdadf29188h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmDirectiveOp operand(Hex8 src)
7ffdadf291a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmDirectiveOp operand(Hex16 src)
7ffdadf291b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmDirectiveOp operand(Hex32 src)
7ffdadf291d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmDirectiveOp operand(Hex64 src)
7ffdadf291e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmDirective byte(Hex8 src)
7ffdadf29200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmDirective word(Hex16 src)
7ffdadf29218h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmDirective dword(Hex32 src)
7ffdadf29230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmDirective qword(Hex64 src)
7ffdadf29248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmDirective define(asci16 name)
7ffdadf29260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmDirective define(asci16 name, AsmDirectiveOp op0, AsmDirectiveOp op1, AsmDirectiveOp op2)
7ffdadf29290h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmDirective define(asci16 name, ReadOnlySpan<AsmDirectiveOp> args)
7ffdadf292a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Outcome parse(string src, out AsmDirective dst)
7ffdadf292d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format(CoffSectionFlags src)
7ffdadf29320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool jmp(byte b0, byte b1)
7ffdadefb618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool ret(byte b0, byte b1)
7ffdadefb630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmAddress address(RegOp base, RegOp index, MemoryScale scale, Disp disp)
7ffdadefabf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmAddress address(r8 base, r8 index, MemoryScale scale, Disp8 disp)
7ffdadefac10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmAddress address(r16 base, r16 index, MemoryScale scale, Disp16 disp)
7ffdadefac28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmAddress address(r32 base, r32 index, MemoryScale scale, Disp32 disp)
7ffdadefac40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmAddress address(r64 base, r64 index, MemoryScale scale, Disp32 disp)
7ffdadefac58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmAddress address(W8 w, RegIndexCode base, RegIndexCode index, MemoryScale scale, Disp8 disp)
7ffdadefac70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmAddress address(W16 w, RegIndexCode base, RegIndexCode index, MemoryScale scale, Disp16 disp)
7ffdadefac88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmAddress address(W32 w, RegIndexCode base, RegIndexCode index, MemoryScale scale, Disp32 disp)
7ffdadefaca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmAddress address(W64 w, RegIndexCode base, RegIndexCode index, MemoryScale scale, Disp32 disp)
7ffdadefacb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmHexCode asmhex(ReadOnlySpan<byte> src)
7ffdadefacd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmHexCode asmhex(ulong src)
7ffdadeface8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmHexCode asmhex(string src)
7ffdadefad00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitstring(AsmHexCode src, Span<char> dst)
7ffdadefad18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string bitstring(in AsmHexCode src)
7ffdadefad30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmBlockSpec block(AsmBlockLabel label)
7ffdadefad48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmBlockSpec block(AsmBlockLabel label, AsmInstruction[] content)
7ffdadefad60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmBlockSpec block(AsmComment comment, AsmBlockLabel label, AsmInstruction[] content)
7ffdadefad78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmCell cell(string content, AsmCellKind kind)
7ffdadefad90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmComment comment(string src)
7ffdadefada8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmInlineComment comment(AsmCommentMarker marker, string src)
7ffdadefadc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Disp disp(ReadOnlySpan<byte> src, byte pos, NativeSize size)
7ffdadefadd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmFileSpec file(Identifier name, IAsmSourcePart[] parts)
7ffdadefae50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format(in AsmHexCode src)
7ffdadefae68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Imm imm(AsmHexCode src, byte pos, bool signed, NativeSize size)
7ffdadefae98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Imm imm(NativeSize size, bool signed, ulong value)
7ffdadefaeb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Imm imm(NativeSize size, long value)
7ffdadefaec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Imm imm(NativeSize size, ulong value)
7ffdadefaee0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Imm imm(ImmKind kind, ulong value)
7ffdadefaef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Imm8 imm8(byte src)
7ffdadefaf10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Imm16 imm16(ushort src)
7ffdadefaf28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Imm32 imm32(uint src)
7ffdadefaf40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Imm64 imm64(ulong src)
7ffdadefaf58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# InstructionId instid(uint docid, MemoryAddress ip, ReadOnlySpan<byte> encoding)
7ffdadefaf70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Jcc32 jcc32(Jcc32Code code, Disp32 disp)
7ffdadefaf88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Jcc32 jcc32(Jcc32AltCode code, Disp32 disp)
7ffdadefafa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Jcc8 jcc8(Jcc8Code code, Disp8 disp)
7ffdadefafb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Jcc8 jcc8(Jcc8AltCode code, Disp8 disp)
7ffdadefafd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmBlockLabel label(string name)
7ffdadefafe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MemOp mem(NativeSize size, RegOp base)
7ffdadefb000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MemOp mem(NativeSize size, RegOp base, RegOp index)
7ffdadefb018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MemOp mem(NativeSize size, RegOp base, RegOp index, Disp disp)
7ffdadefb030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MemOp mem(NativeSize size, RegOp base, MemoryScale scale, RegOp index)
7ffdadefb048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MemOp mem(NativeSize size, RegOp base, MemoryScale scale, RegOp index, Disp disp)
7ffdadefb060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m8 mem8(RegOp base)
7ffdadefb078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m8 mem8(AsmAddress address)
7ffdadefb090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m8 mem8(RegOp base, RegOp index)
7ffdadefb0a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m8 mem8(RegOp base, MemoryScale scale, RegOp index)
7ffdadefb0c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m8 mem8(RegOp base, MemoryScale scale, RegOp index, Disp disp)
7ffdadefb0d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m16 mem16(RegOp base)
7ffdadefb0f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m16 mem16(AsmAddress address)
7ffdadefb108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m16 mem16(RegOp base, RegOp index)
7ffdadefb120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m16 mem16(RegOp base, MemoryScale scale, RegOp index)
7ffdadefb138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m16 mem16(RegOp base, MemoryScale scale, RegOp index, Disp disp)
7ffdadefb150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m32 mem32(RegOp base)
7ffdadefb168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m32 mem32(AsmAddress address)
7ffdadefb180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m32 mem32(RegOp base, RegOp index)
7ffdadefb198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m32 mem32(RegOp base, MemoryScale scale, RegOp index)
7ffdadefb1b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m32 mem32(RegOp base, MemoryScale scale, RegOp index, Disp disp)
7ffdadefb1c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m64 mem64(RegOp base)
7ffdadefb1e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m64 mem64(AsmAddress address)
7ffdadefb1f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m64 mem64(RegOp base, RegOp index)
7ffdadefb210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m64 mem64(RegOp base, MemoryScale scale, RegOp index)
7ffdadefb228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m64 mem64(RegOp base, MemoryScale scale, RegOp index, Disp disp)
7ffdadefb240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m128 mem128(AsmAddress address)
7ffdadefb258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m128 mem128(RegOp base)
7ffdadefb270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m128 mem128(RegOp base, RegOp index)
7ffdadefb288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m128 mem128(RegOp base, RegOp index, MemoryScale scale, Disp disp)
7ffdadefb2a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m256 mem256(AsmAddress address)
7ffdadefb2b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m256 mem256(RegOp base)
7ffdadefb2d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m256 mem256(RegOp base, RegOp index)
7ffdadefb2e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m256 mem256(RegOp base, RegOp index, MemoryScale scale, Disp disp)
7ffdadefb300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m512 mem512(AsmAddress address)
7ffdadefb318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m512 mem512(RegOp base)
7ffdadefb330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m512 mem512(RegOp base, RegOp index)
7ffdadefb348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m512 mem512(RegOp base, RegOp index, MemoryScale scale, Disp disp)
7ffdadefb360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmOperand op(RegKind kind)
7ffdadefb378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmOperand op(RegOp target, RegIndex mask, RegMaskKind kind)
7ffdadefb390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool parse(ReadOnlySpan<char> src, out AsmHexCode dst)
7ffdadefb408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# FarPtr farptr(Address16 selector, long offset)
7ffdadefb420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NearPtr nearptr(MemoryAddress address)
7ffdadefb438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m8 ptr8(r64 reg)
7ffdadefb450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m16 ptr16(r64 reg)
7ffdadefb468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m32 ptr32(r64 reg)
7ffdadefb480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m64 ptr64(r64 reg)
7ffdadefb498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m128 ptr128(r64 reg)
7ffdadefb4b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m256 ptr256(r64 reg)
7ffdadefb4c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# m512 ptr512(r64 reg)
7ffdadefb4e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp reg(NativeSizeCode width, RegClassCode class, RegIndex r)
7ffdadefb528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegMask regmask(RegOp target, RegIndex mask, RegMaskKind kind)
7ffdadefb540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Rel8 rel8(byte src)
7ffdadefb558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Rel16 rel16(ushort src)
7ffdadefb570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Rel32 rel32(uint src)
7ffdadefb588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Rel rel(uint value, NativeSize size)
7ffdadefb5a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RelAddress rel(MemoryAddress base, MemoryAddress offset)
7ffdadefb5b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint render(AsmHexCode src, ref uint i, Span<char> dst)
7ffdadefb5e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmRegValue<byte> regval<byte>(AsmRegName name, byte value)
7ffdb0478540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmRegValue<ushort> regval<ushort>(AsmRegName name, ushort value)
7ffdb0478600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmRegValue<uint> regval<uint>(AsmRegName name, uint value)
7ffdb0478828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmRegValue<ulong> regval<ulong>(AsmRegName name, ulong value)
7ffdb04788d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<byte>(void* f)
7ffdb044b288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<sbyte>(void* f)
7ffdb044b2a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<ushort>(void* f)
7ffdb044b2b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<short>(void* f)
7ffdb044b2d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<uint>(void* f)
7ffdb044b2e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<int>(void* f)
7ffdb044b300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<ulong>(void* f)
7ffdb044b348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<long>(void* f)
7ffdb044b360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<byte>(MemoryAddress f)
7ffdb044b378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<sbyte>(MemoryAddress f)
7ffdb044b3a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<ushort>(MemoryAddress f)
7ffdb044b3d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<short>(MemoryAddress f)
7ffdb044b420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<uint>(MemoryAddress f)
7ffdb044b450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<int>(MemoryAddress f)
7ffdb044b480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<ulong>(MemoryAddress f)
7ffdb044b4b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<long>(MemoryAddress f)
7ffdb044b4f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop_ptr<byte>(void* f)
7ffdb044b528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop_ptr<sbyte>(void* f)
7ffdb044b558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop_ptr<ushort>(void* f)
7ffdb044b588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop_ptr<short>(void* f)
7ffdb044b5b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop_ptr<uint>(void* f)
7ffdb044b5e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop_ptr<int>(void* f)
7ffdb044b618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop_ptr<ulong>(void* f)
7ffdb044b648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop_ptr<long>(void* f)
7ffdb044b678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop_ptr<byte>(ReadOnlySpan<byte> code)
7ffdb044b6a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop_ptr<sbyte>(ReadOnlySpan<byte> code)
7ffdb044b720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop_ptr<ushort>(ReadOnlySpan<byte> code)
7ffdb044b798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop_ptr<short>(ReadOnlySpan<byte> code)
7ffdb044b7f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop_ptr<uint>(ReadOnlySpan<byte> code)
7ffdb044b918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop_ptr<int>(ReadOnlySpan<byte> code)
7ffdb044b978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop_ptr<ulong>(ReadOnlySpan<byte> code)
7ffdb044ba98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop_ptr<long>(ReadOnlySpan<byte> code)
7ffdb044bbb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<byte>(ReadOnlySpan<byte> code)
7ffdb044bc18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<sbyte>(ReadOnlySpan<byte> code)
7ffdb044bc30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<ushort>(ReadOnlySpan<byte> code)
7ffdb044bd50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<short>(ReadOnlySpan<byte> code)
7ffdb044be58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<uint>(ReadOnlySpan<byte> code)
7ffdb044beb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<int>(ReadOnlySpan<byte> code)
7ffdb044bed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<ulong>(ReadOnlySpan<byte> code)
7ffdb0470000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  binop<long>(ReadOnlySpan<byte> code)
7ffdb0470120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<byte>(void* f)
7ffdb0470168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<sbyte>(void* f)
7ffdb0470198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<ushort>(void* f)
7ffdb04701b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<short>(void* f)
7ffdb04701c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<uint>(void* f)
7ffdb04701e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<int>(void* f)
7ffdb04701f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<ulong>(void* f)
7ffdb0470228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<long>(void* f)
7ffdb04702e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<byte>(MemoryAddress f)
7ffdb0470330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<sbyte>(MemoryAddress f)
7ffdb0470408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<ushort>(MemoryAddress f)
7ffdb0470450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<short>(MemoryAddress f)
7ffdb0470468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<uint>(MemoryAddress f)
7ffdb0470480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<int>(MemoryAddress f)
7ffdb04704c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<ulong>(MemoryAddress f)
7ffdb04704e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<long>(MemoryAddress f)
7ffdb04704f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<byte>(ReadOnlySpan<byte> code)
7ffdb0470528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<sbyte>(ReadOnlySpan<byte> code)
7ffdb0470570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<ushort>(ReadOnlySpan<byte> code)
7ffdb04705d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<short>(ReadOnlySpan<byte> code)
7ffdb0470630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<uint>(ReadOnlySpan<byte> code)
7ffdb0470690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<int>(ReadOnlySpan<byte> code)
7ffdb04706f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<ulong>(ReadOnlySpan<byte> code)
7ffdb0470750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
#  unaryop<long>(ReadOnlySpan<byte> code)
7ffdb0470798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> invoke<byte>( f, Vector128<byte> a, Vector128<byte> b)
7ffdb04707e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> invoke<sbyte>( f, Vector128<sbyte> a, Vector128<sbyte> b)
7ffdb0470828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> invoke<ushort>( f, Vector128<ushort> a, Vector128<ushort> b)
7ffdb0470858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> invoke<short>( f, Vector128<short> a, Vector128<short> b)
7ffdb04708a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> invoke<uint>( f, Vector128<uint> a, Vector128<uint> b)
7ffdb04708d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> invoke<int>( f, Vector128<int> a, Vector128<int> b)
7ffdb0470918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> invoke<ulong>( f, Vector128<ulong> a, Vector128<ulong> b)
7ffdb0470a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> invoke<long>( f, Vector128<long> a, Vector128<long> b)
7ffdb0470a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> invoke<byte>( f, Vector256<byte> a, Vector256<byte> b)
7ffdb0470ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> invoke<sbyte>( f, Vector256<sbyte> a, Vector256<sbyte> b)
7ffdb0470ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> invoke<ushort>( f, Vector256<ushort> a, Vector256<ushort> b)
7ffdb0470af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> invoke<short>( f, Vector256<short> a, Vector256<short> b)
7ffdb0470b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> invoke<uint>( f, Vector256<uint> a, Vector256<uint> b)
7ffdb0470b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> invoke<int>( f, Vector256<int> a, Vector256<int> b)
7ffdb0470b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> invoke<ulong>( f, Vector256<ulong> a, Vector256<ulong> b)
7ffdb0470b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> invoke<long>( f, Vector256<long> a, Vector256<long> b)
7ffdb0470c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp reg(NativeSizeCode size, RegClassCode class, RegIndexCode index)
7ffdaded2ec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegOp reg(NativeSizeCode width, RegClassCode class, RegIndex r)
7ffdaded2ee0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegIndexCode index(RegKind src)
7ffdaded2ef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegIndexCode index(RegOp src)
7ffdaded2f10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegClassCode class(RegKind src)
7ffdaded2f28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegClassCode class(RegOp src)
7ffdaded2f40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NativeSizeCode width(RegKind src)
7ffdaded2f58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NativeSizeCode width(RegOp src)
7ffdaded2f70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegKind kind(RegIndexCode i, RegClassCode k, NativeSizeCode w)
7ffdaded2f88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RexPrefix rex(uint4 wrxb)
7ffdadebb348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RexPrefix rex(bit w, bit r, bit x, bit b)
7ffdadebb360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RexPrefix rex()
7ffdadebb378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmOpKind kind(AsmOpClass class, NativeSize size)
7ffdadeb9c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegBank intel64()
7ffdadeb11d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RegBank allocate(RegFile file)
7ffdadeb11e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# CpuPorts range(Address16 min, Address16 max)
7ffdade8bf00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# CpuPort Port(ushort index)
7ffdade8bf48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# CpuPort<ushort> Port(W16 w, ushort index)
7ffdade8bf60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# CpuPort<uint> Port(W32 w, ushort index)
7ffdade8bf78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteSize size(ReadOnlySpan<HexDataRow> src)
7ffdade8b150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteSize size(ReadOnlySpan<BinaryCode> src)
7ffdade8b168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool parse(ReadOnlySpan<char> src, out AsmHexCode dst)
7ffdade8b180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint Read(BinaryReader src, Span<byte> dst)
7ffdade8b1b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Outcome hexdat(FilePath src, out BinaryCode dst)
7ffdade8b1e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MemoryBlock max(ReadOnlySpan<MemoryBlock> src)
7ffdade8b1f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# EncodedMember member(in ApiEncoded src)
7ffdade8b210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MemoryAddress stub(MemoryAddress src, out AsmHexCode stub)
7ffdade8b228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void pack(in EncodingOffsets src, Span<byte> dst)
7ffdade8b240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ModRm modrm(byte mod, byte reg, byte rm)
7ffdade8b258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ModRm modrm(RegIndex reg, RegIndex rm)
7ffdade8b270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ModRm modrm(byte mod, RegIndex reg, RegIndex rm)
7ffdade8b288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Sib sib(uint3 base, uint3 index, uint2 scale)
7ffdade8b2a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint sib(Sib src, ref uint i, Span<char> dst)
7ffdade8b2d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint SibTable(Span<char> dst)
7ffdade8b2e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vsib(Vsib src, Span<char> dst)
7ffdade8b360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryCode code(in CodeBlock src, uint offset, byte size)
7ffdade8b378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void encode(RexPrefix a0, Hex8 a1, Imm64 a2, AsmHexWriter dst)
7ffdade8b390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte encode(RexPrefix a0, Hex8 a1, Imm64 a2, Span<byte> dst)
7ffdade8b3a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void encode(AsmRip a0, Jcc8 a1, AsmHexWriter dst)
7ffdade8b3c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte join(Pair<byte> a, Pair<byte> b, Pair<byte> c)
7ffdade8b3d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ActionSpec action(Identifier name, SegRef dst)
7ffdade8a778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SegRef load(ReadOnlySpan<byte> src, uint offset, in NativeBuffer dst)
7ffdade8a838h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOpSpec<byte> unaryop<byte>(Identifier name, SegRef dst)
7ffdb03d2580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOpSpec<ushort> unaryop<ushort>(Identifier name, SegRef dst)
7ffdb03d2df0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOpSpec<uint> unaryop<uint>(Identifier name, SegRef dst)
7ffdb03d3420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOpSpec<ulong> unaryop<ulong>(Identifier name, SegRef dst)
7ffdb03d3bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinOpSpec<byte> binop<byte>(Identifier name, SegRef dst)
7ffdb03d8210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinOpSpec<ushort> binop<ushort>(Identifier name, SegRef dst)
7ffdb03d87c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinOpSpec<uint> binop<uint>(Identifier name, SegRef dst)
7ffdb03d8d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinOpSpec<ulong> binop<ulong>(Identifier name, SegRef dst)
7ffdb03d9350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# EmitterSpec<byte> emitter<byte>(Identifier name, SegRef dst)
7ffdb03d98c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# EmitterSpec<ushort> emitter<ushort>(Identifier name, SegRef dst)
7ffdb03d9ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# EmitterSpec<uint> emitter<uint>(Identifier name, SegRef dst)
7ffdb03da448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# EmitterSpec<ulong> emitter<ulong>(Identifier name, SegRef dst)
7ffdb03daa60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Producer<byte> emitter<byte>(Identifier name, byte* pCode)
7ffdb03db090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Producer<ushort> emitter<ushort>(Identifier name, byte* pCode)
7ffdb03db3a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Producer<uint> emitter<uint>(Identifier name, byte* pCode)
7ffdb03db690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Producer<ulong> emitter<ulong>(Identifier name, byte* pCode)
7ffdb03db6f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Producer<byte> emitter<byte>(Identifier name, ReadOnlySpan<byte> code)
7ffdb03db9f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Producer<ushort> emitter<ushort>(Identifier name, ReadOnlySpan<byte> code)
7ffdb03dbfd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Producer<uint> emitter<uint>(Identifier name, ReadOnlySpan<byte> code)
7ffdb03f06d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Producer<ulong> emitter<ulong>(Identifier name, ReadOnlySpan<byte> code)
7ffdb03f0ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ApiMember member(MethodInfo src, ApiHostUri host)
7ffdade8a118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ApiMember member(MethodInfo src, OpUri uri)
7ffdade8a130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ApiMember member(in ResolvedMethod src)
7ffdade8a148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Index<ApiMember> members(JittedMethod[] src)
7ffdade8a160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ApiMembers jit(IApiPartCatalog src, IWfChannel channel)
7ffdade8a178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MemoryAddress fptr(MethodInfo src)
7ffdade8a190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MemoryAddress jit(MethodInfo src)
7ffdade8a1a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MemoryAddress jit(Delegate src)
7ffdade8a1c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# DynamicPointer jit(DynamicDelegate src)
7ffdade8a1d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Index<ApiMember> complete(Type src, IWfChannel log)
7ffdade8a208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MethodInfo[] complete(Type src, HashSet<string> exclusions)
7ffdade8a220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ApiMembers members(IApiHost src, IWfChannel emitter)
7ffdade8a238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void jit(IApiHost host, ConcurrentBag<ApiHostMembers> dst, IWfChannel channel)
7ffdade8a250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void jit(ApiCompleteType src, ConcurrentBag<ApiHostMembers> dst, IWfChannel channel)
7ffdade8a268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ApiHostMembers jit(IApiHost src, IWfChannel channel)
7ffdade8a280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ApiMembers jit(Type src, IWfChannel log)
7ffdade8a298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Index<ApiMember> jit(ApiCompleteType src)
7ffdade8a2b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ApiMember[] direct(Type src)
7ffdade8a2c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ApiMember[] generic(JittedMethod src, IWfChannel channel)
7ffdade8a310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ApiMsil msil(MemoryAddress base, OpUri uri, MethodInfo src)
7ffdade89fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MethodBase method(RuntimeMethodHandle src)
7ffdade89ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MsilCompilation compilation(DynamicMethod src)
7ffdade8a010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MsilCompilation compilation(DynamicDelegate src)
7ffdade8a028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MsilCompilation compilation(MemoryAddress base, MethodInfo src)
7ffdade8a040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RuntimeMethodHandle handle(DynamicMethod src)
7ffdade8a058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# DynamicPointer pointer(DynamicDelegate src)
7ffdade8a070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# DynamicPointer pointer(DynamicDelegate src, IntPtr handle)
7ffdade8a088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySeq<MethodSlot> slots(Type src)
7ffdade8a0d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte[] msildata(DynamicMethod src)
7ffdade8a100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void eval<byte>(Identifier name, ReadOnlySpan<byte> f, ReadOnlySpan<byte> a, ReadOnlySpan<byte> b, Span<byte> dst)
7ffdb03b0fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void eval<ushort>(Identifier name, ReadOnlySpan<byte> f, ReadOnlySpan<ushort> a, ReadOnlySpan<ushort> b, Span<ushort> dst)
7ffdb03b2250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void eval<uint>(Identifier name, ReadOnlySpan<byte> f, ReadOnlySpan<uint> a, ReadOnlySpan<uint> b, Span<uint> dst)
7ffdb03b25f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void eval<ulong>(Identifier name, ReadOnlySpan<byte> f, ReadOnlySpan<ulong> a, ReadOnlySpan<ulong> b, Span<ulong> dst)
7ffdb03b3150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<ulong> create<ulong>(Identifier name, ReadOnlySpan<byte> f)
7ffdb03b31c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<ulong> create<ulong>(Identifier name, byte* pCode)
7ffdb03b9830h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<ulong> create<ulong>(OpIdentity id, ReadOnlySpan<byte> code)
7ffdb03b9878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Outcome parse(string src, out Disp8 dst)
7ffdade891e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool parse(string src, out Disp16 dst)
7ffdade89200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool parse(string src, out Disp32 dst)
7ffdade89218h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool parse(string src, out Disp64 dst)
7ffdade89230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool parse(string src, NativeSize size, out Disp dst)
7ffdade89248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Disp8 disp8(MemoryAddress rip, MemoryAddress dst)
7ffdade836c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Disp16 disp16(MemoryAddress rip, MemoryAddress dst)
7ffdade836d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Disp32 disp32(MemoryAddress rip, MemoryAddress dst)
7ffdade836f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Disp64 disp64(MemoryAddress rip, MemoryAddress dst)
7ffdade83708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Disp8 disp8(AsmRip rip, MemoryAddress dst)
7ffdade83720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Disp16 disp16(AsmRip rip, MemoryAddress dst)
7ffdade83738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Disp32 disp32(AsmRip rip, MemoryAddress dst)
7ffdade83750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Disp64 disp64(AsmRip rip, MemoryAddress dst)
7ffdade83768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool isCall32(ReadOnlySpan<byte> encoding)
7ffdade83780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool isJmp8(ReadOnlySpan<byte> encoding)
7ffdade83798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Disp8 disp8(ReadOnlySpan<byte> encoding)
7ffdade837b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Disp32 disp32(ReadOnlySpan<byte> encoding)
7ffdade837c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# CallRel32 call(AsmRip rip, Disp32 disp)
7ffdade837e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmHexCode encode(CallRel32 spec)
7ffdade837f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MemoryAddress target(AsmRip rip, Disp8 disp)
7ffdade83810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmHexCode encode(JmpRel8 spec)
7ffdade83828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MemoryAddress target(MemoryAddress src, ReadOnlySpan<byte> encoding)
7ffdade83840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MemoryAddress target(AsmRip rip, Disp32 disp)
7ffdade83858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# MemoryAddress target(AsmRip rip, ReadOnlySpan<byte> encoding)
7ffdade83870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Address32 target(Disp32 disp)
7ffdade83888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# JmpStub stub32(MemoryAddress src, MemoryAddress dst)
7ffdade838a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# JmpStub stub8(MemoryAddress src, MemoryAddress dst)
7ffdade838b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# AsmOpKind kind(NativeSize size)
7ffdade838e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# JmpRel32 jmp32(AsmRip src, MemoryAddress dst)
7ffdade83900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# JmpRel32 jmp32(LocatedSymbol src, LocatedSymbol dst)
7ffdade83918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# JmpRel32 jmp32(AsmRip rip, Disp32 disp)
7ffdade83930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, byte value)
7ffdaeac2070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, Span<byte> value)
7ffdaeac2088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, byte[] value)
7ffdaeac20a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, ReadOnlySpan<byte> value)
7ffdaeac20b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, short value)
7ffdaeac20d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, Span<short> value)
7ffdaeac20e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, short[] value)
7ffdaeac2100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, ReadOnlySpan<short> value)
7ffdaeac2118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, IEnumerable<short> value)
7ffdaeac2130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, ushort value)
7ffdaeac2148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, Span<ushort> value)
7ffdaeac2160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, ushort[] value)
7ffdaeac2178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, ReadOnlySpan<ushort> value)
7ffdaeac2190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, IEnumerable<ushort> value)
7ffdaeac21a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, int value)
7ffdaeac21c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, Span<int> value)
7ffdaeac21d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, int[] value)
7ffdaeac21f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, ReadOnlySpan<int> value)
7ffdaeac2208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, IEnumerable<int> value)
7ffdaeac2220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, uint value)
7ffdaeac2238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, Span<uint> value)
7ffdaeac2250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, uint[] value)
7ffdaeac2268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, ReadOnlySpan<uint> value)
7ffdaeac2280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, IEnumerable<uint> value)
7ffdaeac2298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, long value)
7ffdaeac22b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, Span<long> value)
7ffdaeac22c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, long[] value)
7ffdaeac22e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, ReadOnlySpan<long> value)
7ffdaeac22f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, IEnumerable<long> value)
7ffdaeac2310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, ulong value)
7ffdaeac2328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, Span<ulong> value)
7ffdaeac2340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, ulong[] value)
7ffdaeac2358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, ReadOnlySpan<ulong> value)
7ffdaeac2370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, IEnumerable<ulong> value)
7ffdaeac2388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, float value)
7ffdaeac23a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, Span<float> value)
7ffdaeac23b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, float[] value)
7ffdaeac23d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, ReadOnlySpan<float> value)
7ffdaeac23e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, IEnumerable<float> value)
7ffdaeac2400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, double value)
7ffdaeac2418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, Span<double> value)
7ffdaeac2430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, double[] value)
7ffdaeac2448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, ReadOnlySpan<double> value)
7ffdaeac2460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# StatCollector op_Addition(StatCollector a, IEnumerable<double> value)
7ffdaeac2478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int get_Count()
7ffdaeac2490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double get_Mean()
7ffdaeac24a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double get_Variance()
7ffdaeac24c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double get_Stdev()
7ffdaeac24d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double get_Min()
7ffdaeac24f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double get_Max()
7ffdaeac2508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void Merge(double value)
7ffdaeac25b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string Format(int scale)
7ffdaeac25c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint mod(uint a)
7ffdaea68408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint div(uint a)
7ffdaea68420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool divisible(uint a)
7ffdaea68438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divrem(uint a, out uint q, out uint r)
7ffdaea68450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<uint> divrem(in ModN n, uint a, out ConstPair<uint> dst)
7ffdaea68468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint add(uint a, uint b)
7ffdaea68480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint mul(uint a, uint b)
7ffdaea68498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint get_N()
7ffdaea684b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool divisible(in ModN n, uint a)
7ffdaea684c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<uint> divrem(in ModN n, uint a)
7ffdaea684e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint add(in ModN n, uint a, uint b)
7ffdaea684f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint mul(in ModN n, uint a, uint b)
7ffdaea68510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint mod(in ModN n, uint a)
7ffdaea68528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint div(in ModN n, uint a)
7ffdaea68540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ModN create(uint n)
7ffdaea68558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteSize get_Size()
7ffdaea61ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<byte> get_Bytes()
7ffdaea61cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte get_First()
7ffdaea61d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte get_Item(int index)
7ffdaea61d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte get_Item(uint index)
7ffdaea61d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint get_PageCount()
7ffdaea61db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# PageBlockInfo Describe()
7ffdaea61dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float mod(float a, float b)
7ffdaeac3d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double mod(double a, double b)
7ffdaeac3d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float mod(float a, float b)
7ffdaeac3d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double mod(double a, double b)
7ffdaeac3d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<float> divmod(float a, float b)
7ffdaeac3d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<double> divmod(double a, double b)
7ffdaeac3d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<char> bitchars(byte value)
7ffdaeac39c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> select(byte value)
7ffdaeac39d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# char* bitcharP(byte value)
7ffdaeac3a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte* bitseqP(byte value)
7ffdaeac3a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitchars(byte src, Span<char> dst, int offset)
7ffdaeac3a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitchars(ushort src, Span<char> dst, int offset)
7ffdaeac3a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitchars(uint src, Span<char> dst, int offset)
7ffdaeac3ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitchars(ulong src, Span<char> dst, int offset)
7ffdaeac3ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitchars(sbyte src, Span<char> dst, int offset)
7ffdaeac3ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitchars(short src, Span<char> dst, int offset)
7ffdaeac3af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitchars(int src, Span<char> dst, int offset)
7ffdaeac3b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitchars(long src, Span<char> dst, int offset)
7ffdaeac3b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitchars(float src, Span<char> dst, int offset)
7ffdaeac3b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitchars(double src, Span<char> dst, int offset)
7ffdaeac3b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitseq(byte src, Span<byte> dst, int offset)
7ffdaeac3b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitseq(ushort src, Span<byte> dst, int offset)
7ffdaeac3b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitseq(uint src, Span<byte> dst, int offset)
7ffdaeac3ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitseq(ulong src, Span<byte> dst, int offset)
7ffdaeac3bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitseq(short src, Span<byte> dst, int offset)
7ffdaeac3bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitseq(sbyte src, Span<byte> dst, int offset)
7ffdaeac3be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitseq(int src, Span<byte> dst, int offset)
7ffdaeac3c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitseq(long src, Span<byte> dst, int offset)
7ffdaeac3c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitseq(float src, Span<byte> dst, int offset)
7ffdaeac3c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitseq(double src, Span<byte> dst, int offset)
7ffdaeac3c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitchars<byte>(byte src, Span<char> dst, int offset)
7ffdb03ba868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitchars<ushort>(ushort src, Span<char> dst, int offset)
7ffdb03bbbd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitchars<uint>(uint src, Span<char> dst, int offset)
7ffdb03d02d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitchars<ulong>(ulong src, Span<char> dst, int offset)
7ffdb03d04e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitseq<byte>(byte src, Span<byte> dst, int offset)
7ffdb03d3108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitseq<ushort>(ushort src, Span<byte> dst, int offset)
7ffdb03d3408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitseq<uint>(uint src, Span<byte> dst, int offset)
7ffdb03d3690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bitseq<ulong>(ulong src, Span<byte> dst, int offset)
7ffdb03d3930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> bitseq<byte>(byte src, int count)
7ffdb03d3c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> bitseq<ushort>(ushort src, int count)
7ffdb03d8ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> bitseq<uint>(uint src, int count)
7ffdb03d9890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> bitseq<ulong>(ulong src, int count)
7ffdb03da6d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void storeseq<byte>(byte src, Span<byte> dst, int offset)
7ffdb0c11440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void storeseq<ushort>(ushort src, Span<byte> dst, int offset)
7ffdb0c11530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void storeseq<uint>(uint src, Span<byte> dst, int offset)
7ffdb0c115c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void storeseq<ulong>(ulong src, Span<byte> dst, int offset)
7ffdb0c11650h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte packseq(ReadOnlySpan<byte> src, out byte dst)
7ffdaeac3828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort packseq(ReadOnlySpan<byte> src, out ushort dst)
7ffdaeac3840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint packseq(ReadOnlySpan<byte> src, out uint dst)
7ffdaeac3858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong packseq(ReadOnlySpan<byte> src, out ulong dst)
7ffdaeac3870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte packseq<byte>(ReadOnlySpan<byte> src, out byte dst)
7ffdb0c108e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte packseq<sbyte>(ReadOnlySpan<byte> src, out sbyte dst)
7ffdb0c10978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort packseq<ushort>(ReadOnlySpan<byte> src, out ushort dst)
7ffdb0c109d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short packseq<short>(ReadOnlySpan<byte> src, out short dst)
7ffdb0c10a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint packseq<uint>(ReadOnlySpan<byte> src, out uint dst)
7ffdb0c10ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int packseq<int>(ReadOnlySpan<byte> src, out int dst)
7ffdb0c10b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong packseq<ulong>(ReadOnlySpan<byte> src, out ulong dst)
7ffdb0c10be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long packseq<long>(ReadOnlySpan<byte> src, out long dst)
7ffdb0c10c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte packseq2<byte>(ReadOnlySpan<byte> src, out byte dst)
7ffdb0c10ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte packseq2<sbyte>(ReadOnlySpan<byte> src, out sbyte dst)
7ffdb0c10e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort packseq2<ushort>(ReadOnlySpan<byte> src, out ushort dst)
7ffdb0c10eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short packseq2<short>(ReadOnlySpan<byte> src, out short dst)
7ffdb0c10ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint packseq2<uint>(ReadOnlySpan<byte> src, out uint dst)
7ffdb0c10f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int packseq2<int>(ReadOnlySpan<byte> src, out int dst)
7ffdb0c10fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong packseq2<ulong>(ReadOnlySpan<byte> src, out ulong dst)
7ffdb0c11020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long packseq2<long>(ReadOnlySpan<byte> src, out long dst)
7ffdb0c11050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<ulong>(ClosedInterval<ulong> src, Span<ulong> dst)
7ffdb0b31ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte length<byte>(Interval<byte> src)
7ffdb0be0ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte length<sbyte>(Interval<sbyte> src)
7ffdb0be1068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort length<ushort>(Interval<ushort> src)
7ffdb0be1188h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short length<short>(Interval<short> src)
7ffdb0be1350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint length<uint>(Interval<uint> src)
7ffdb0be1428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int length<int>(Interval<int> src)
7ffdb0be15a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong length<ulong>(Interval<ulong> src)
7ffdb0be15f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long length<long>(Interval<long> src)
7ffdb0be16f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float length<float>(Interval<float> src)
7ffdb0be2088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double length<double>(Interval<double> src)
7ffdb0be20e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<Interval<byte>> width<byte>(Interval<byte> src, byte width)
7ffdb0be2178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<byte> integral<byte>(Interval<byte> src, byte width)
7ffdb0be2790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<Interval<sbyte>> width<sbyte>(Interval<sbyte> src, sbyte width)
7ffdb0be29a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<sbyte> integral<sbyte>(Interval<sbyte> src, sbyte width)
7ffdb0be2cb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<Interval<ushort>> width<ushort>(Interval<ushort> src, ushort width)
7ffdb0be2e08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<ushort> integral<ushort>(Interval<ushort> src, ushort width)
7ffdb0be3168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<Interval<short>> width<short>(Interval<short> src, short width)
7ffdb0be3288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<short> integral<short>(Interval<short> src, short width)
7ffdb0be35a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<Interval<uint>> width<uint>(Interval<uint> src, uint width)
7ffdb0be3660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<uint> integral<uint>(Interval<uint> src, uint width)
7ffdb0be3978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<Interval<int>> width<int>(Interval<int> src, int width)
7ffdb0be3a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<int> integral<int>(Interval<int> src, int width)
7ffdb0be3d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<Interval<ulong>> width<ulong>(Interval<ulong> src, ulong width)
7ffdb0be3de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<ulong> integral<ulong>(Interval<ulong> src, ulong width)
7ffdb0be8330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<Interval<long>> width<long>(Interval<long> src, long width)
7ffdb0be8438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<long> integral<long>(Interval<long> src, long width)
7ffdb0be8750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<Interval<float>> width<float>(Interval<float> src, float width)
7ffdb0be87f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<float> floating<float>(Interval<float> src, float width)
7ffdb0be8b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<Interval<double>> width<double>(Interval<double> src, double width)
7ffdb0be8bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<double> floating<double>(Interval<double> src, double width)
7ffdb0be8ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<byte> increments<byte>(Span<byte> dst)
7ffdb0be98a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<sbyte> increments<sbyte>(Span<sbyte> dst)
7ffdb0be9950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<ushort> increments<ushort>(Span<ushort> dst)
7ffdb0be9998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<short> increments<short>(Span<short> dst)
7ffdb0be99b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<uint> increments<uint>(Span<uint> dst)
7ffdb0be9a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<int> increments<int>(Span<int> dst)
7ffdb0be9a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<ulong> increments<ulong>(Span<ulong> dst)
7ffdb0be9ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<long> increments<long>(Span<long> dst)
7ffdb0be9b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<byte>(byte first, uint count, ref byte dst)
7ffdb0be9c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<sbyte>(sbyte first, uint count, ref sbyte dst)
7ffdb0be9ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<ushort>(ushort first, uint count, ref ushort dst)
7ffdb0be9da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<short>(short first, uint count, ref short dst)
7ffdb0be9e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<uint>(uint first, uint count, ref uint dst)
7ffdb0be9f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<int>(int first, uint count, ref int dst)
7ffdb0be9fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<ulong>(ulong first, uint count, ref ulong dst)
7ffdb0bea058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<long>(long first, uint count, ref long dst)
7ffdb0bea0e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<byte>(uint count, ref byte dst)
7ffdb0bea190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<sbyte>(uint count, ref sbyte dst)
7ffdb0bea268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<ushort>(uint count, ref ushort dst)
7ffdb0bea280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<short>(uint count, ref short dst)
7ffdb0bea2f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<uint>(uint count, ref uint dst)
7ffdb0bea358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<int>(uint count, ref int dst)
7ffdb0bea370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<ulong>(uint count, ref ulong dst)
7ffdb0bea430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<long>(uint count, ref long dst)
7ffdb0bea460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<byte>(byte k, Span<byte> dst)
7ffdb0bea4f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<ushort>(ushort k, Span<ushort> dst)
7ffdb0bea5c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<uint>(uint k, Span<uint> dst)
7ffdb0bea670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<ulong>(ulong k, Span<ulong> dst)
7ffdb0bea718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<byte>(ClosedInterval<byte> src, Span<byte> dst)
7ffdb0bea7c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<ushort>(ClosedInterval<ushort> src, Span<ushort> dst)
7ffdb0bea958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void increments<uint>(ClosedInterval<uint> src, Span<uint> dst)
7ffdb0beaa18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# KrD<byte> init<byte>(byte i, byte j)
7ffdb0bab5e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# KrD<ushort> init<ushort>(ushort i, ushort j)
7ffdb0bab798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# KrD<uint> init<uint>(uint i, uint j)
7ffdb0bab948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# KrD<ulong> init<ulong>(ulong i, ulong j)
7ffdb0babac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint seq<byte>(byte i0, byte i1, byte j0, byte j1, Span<KrD<byte>> dst)
7ffdb0babca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint seq<ushort>(ushort i0, ushort i1, ushort j0, ushort j1, Span<KrD<ushort>> dst)
7ffdb0be01b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint seq<uint>(uint i0, uint i1, uint j0, uint j1, Span<KrD<uint>> dst)
7ffdb0be0678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint seq<ulong>(ulong i0, ulong i1, ulong j0, ulong j1, Span<KrD<ulong>> dst)
7ffdb0be0a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool between(ulong src, ulong min, ulong max)
7ffdaeac1d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool parse(string src, ClosedInterval<int> bounds, out int dst, out Outcome outcome)
7ffdaeac1e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong[] partition(in ClosedInterval<ulong> src, ulong width)
7ffdaeac1e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void partition(ulong min, ulong max, ulong width, ulong[] dst)
7ffdaeac1ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool contains<ulong>(ClosedInterval<ulong> src, ulong point)
7ffdb0abae80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool contains<byte>(ClosedInterval<byte> src, byte point)
7ffdb0ba9ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool contains<ushort>(ClosedInterval<ushort> src, ushort point)
7ffdb0ba9bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool contains<uint>(ClosedInterval<uint> src, uint point)
7ffdb0ba9ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<byte> define<byte>(byte min, byte max, IntervalKind kind)
7ffdb0ba9f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<ushort> define<ushort>(ushort min, ushort max, IntervalKind kind)
7ffdb0ba9f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<uint> define<uint>(uint min, uint max, IntervalKind kind)
7ffdb0ba9f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<ulong> define<ulong>(ulong min, ulong max, IntervalKind kind)
7ffdb0baa010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<byte> closed<byte>(byte min, byte max)
7ffdb0baa0a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<ushort> closed<ushort>(ushort min, ushort max)
7ffdb0baa0d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<uint> closed<uint>(uint min, uint max)
7ffdb0baa118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<ulong> closed<ulong>(ulong min, ulong max)
7ffdb0baa178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<byte> lopen<byte>(byte min, byte max)
7ffdb0baa190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<ushort> lopen<ushort>(ushort min, ushort max)
7ffdb0baa280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<uint> lopen<uint>(uint min, uint max)
7ffdb0baa7d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<ulong> lopen<ulong>(ulong min, ulong max)
7ffdb0baabb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<byte> ropen<byte>(byte min, byte max)
7ffdb0baabc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<ushort> ropen<ushort>(ushort min, ushort max)
7ffdb0baac10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<uint> ropen<uint>(uint min, uint max)
7ffdb0baacb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<ulong> ropen<ulong>(ulong min, ulong max)
7ffdb0baacd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<byte> lclosed<byte>(byte min, byte max)
7ffdb0baace8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<ushort> lclosed<ushort>(ushort min, ushort max)
7ffdb0baad00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<uint> lclosed<uint>(uint min, uint max)
7ffdb0baad48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<ulong> lclosed<ulong>(ulong min, ulong max)
7ffdb0baadc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<byte> rclosed<byte>(byte min, byte max)
7ffdb0baadd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<ushort> rclosed<ushort>(ushort min, ushort max)
7ffdb0baae08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<uint> rclosed<uint>(uint min, uint max)
7ffdb0baae50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<ulong> rclosed<ulong>(ulong min, ulong max)
7ffdb0baaeb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<byte> open<byte>(byte min, byte max)
7ffdb0baaec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<ushort> open<ushort>(ushort min, ushort max)
7ffdb0baaf10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<uint> open<uint>(uint min, uint max)
7ffdb0baaf88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Interval<ulong> open<ulong>(ulong min, ulong max)
7ffdb0baafa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Partition<byte> partition<byte>(Span<byte> src, ReadOnlySpan<uint> offsets)
7ffdb0baafe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Partition<ushort> partition<ushort>(Span<ushort> src, ReadOnlySpan<uint> offsets)
7ffdb0bab0a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Partition<uint> partition<uint>(Span<uint> src, ReadOnlySpan<uint> offsets)
7ffdb0bab120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Partition<ulong> partition<ulong>(Span<ulong> src, ReadOnlySpan<uint> offsets)
7ffdb0bab210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void traverse<byte>(ClosedInterval<byte> src, Action<byte> f)
7ffdb0bab288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void traverse<ushort>(ClosedInterval<ushort> src, Action<ushort> f)
7ffdb0bab360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void traverse<uint>(ClosedInterval<uint> src, Action<uint> f)
7ffdb0bab420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void traverse<ulong>(ClosedInterval<ulong> src, Action<ulong> f)
7ffdb0bab4e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# U01<ulong> unit<ulong>()
7ffdb0bab540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<byte>(in RangeLoop<uint,byte> loop, ReadOnlySpan<byte> src)
7ffdb0ba1410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<ushort>(in RangeLoop<uint,ushort> loop, ReadOnlySpan<ushort> src)
7ffdb0ba1560h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<uint>(in RangeLoop<uint,uint> loop, ReadOnlySpan<uint> src)
7ffdb0ba1608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<ulong>(in RangeLoop<uint,ulong> loop, ReadOnlySpan<ulong> src)
7ffdb0ba16e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<byte>(uint min, uint max, uint step, byte* pSrc, Action<uint,byte> dst)
7ffdb0ba17b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<ushort>(uint min, uint max, uint step, ushort* pSrc, Action<uint,ushort> dst)
7ffdb0ba18f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<uint>(uint min, uint max, uint step, uint* pSrc, Action<uint,uint> dst)
7ffdb0ba1968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<ulong>(uint min, uint max, uint step, ulong* pSrc, Action<uint,ulong> dst)
7ffdb0ba19e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<byte>(ReadOnlySpan<byte> src, Action<uint,byte> dst)
7ffdb0ba1a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<ushort>(ReadOnlySpan<ushort> src, Action<uint,ushort> dst)
7ffdb0ba1a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<uint>(ReadOnlySpan<uint> src, Action<uint,uint> dst)
7ffdb0ba1ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<ulong>(ReadOnlySpan<ulong> src, Action<uint,ulong> dst)
7ffdb0ba1ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Accrue<byte> run<byte>(RangeLoop<byte> loop, ref Accrue<byte> dst)
7ffdb0ba1b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Accrue<ushort> run<ushort>(RangeLoop<ushort> loop, ref Accrue<ushort> dst)
7ffdb0ba25b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Accrue<uint> run<uint>(RangeLoop<uint> loop, ref Accrue<uint> dst)
7ffdb0ba26d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Accrue<ulong> run<ulong>(RangeLoop<ulong> loop, ref Accrue<ulong> dst)
7ffdb0ba27d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RangeLoop<byte> define<byte>(Interval<byte> bounds, byte step)
7ffdb0ba28e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RangeLoop<ushort> define<ushort>(Interval<ushort> bounds, ushort step)
7ffdb0ba2910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RangeLoop<uint> define<uint>(Interval<uint> bounds, uint step)
7ffdb0ba2a78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RangeLoop<ulong> define<ulong>(Interval<ulong> bounds, ulong step)
7ffdb0ba2ad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<byte>(Pair<byte> limits, Func<byte,byte> f, Action<byte> g)
7ffdb0ba2af0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<sbyte>(Pair<sbyte> limits, Func<sbyte,sbyte> f, Action<sbyte> g)
7ffdb0ba2b98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<ushort>(Pair<ushort> limits, Func<ushort,ushort> f, Action<ushort> g)
7ffdb0ba2f10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<short>(Pair<short> limits, Func<short,short> f, Action<short> g)
7ffdb0ba2f88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<uint>(Pair<uint> limits, Func<uint,uint> f, Action<uint> g)
7ffdb0ba3c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<int>(Pair<int> limits, Func<int,int> f, Action<int> g)
7ffdb0ba3c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<ulong>(Pair<ulong> limits, Func<ulong,ulong> f, Action<ulong> g)
7ffdb0ba8030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<long>(Pair<long> limits, Func<long,long> f, Action<long> g)
7ffdb0ba80f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<float>(Pair<float> limits, Func<float,float> f, Action<float> g)
7ffdb0ba8528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<double>(Pair<double> limits, Func<double,double> f, Action<double> g)
7ffdb0ba8948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<byte>(in byte min, in byte max, Action<byte> f, in byte step)
7ffdb0ba8d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<sbyte>(in sbyte min, in sbyte max, Action<sbyte> f, in sbyte step)
7ffdb0ba8dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<ushort>(in ushort min, in ushort max, Action<ushort> f, in ushort step)
7ffdb0ba8e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<short>(in short min, in short max, Action<short> f, in short step)
7ffdb0ba8e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<uint>(in uint min, in uint max, Action<uint> f, in uint step)
7ffdb0ba8ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<int>(in int min, in int max, Action<int> f, in int step)
7ffdb0ba8eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<ulong>(in ulong min, in ulong max, Action<ulong> f, in ulong step)
7ffdb0ba8ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<long>(in long min, in long max, Action<long> f, in long step)
7ffdb0ba9140h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<float>(in float min, in float max, Action<float> f, in float step)
7ffdb0ba9818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void run<double>(in double min, in double max, Action<double> f, in double step)
7ffdb0ba9830h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void sort(ulong[] src)
7ffdaea7b858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte avg<byte>(ReadOnlySpan<byte> src, bool checked)
7ffdb0a427a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte avg<sbyte>(ReadOnlySpan<sbyte> src, bool checked)
7ffdb0a42988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort avg<ushort>(ReadOnlySpan<ushort> src, bool checked)
7ffdb0a42d00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short avg<short>(ReadOnlySpan<short> src, bool checked)
7ffdb0a43000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint avg<uint>(ReadOnlySpan<uint> src, bool checked)
7ffdb0a43360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int avg<int>(ReadOnlySpan<int> src, bool checked)
7ffdb0a434c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong avg<ulong>(ReadOnlySpan<ulong> src, bool checked)
7ffdb0a436f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long avg<long>(ReadOnlySpan<long> src, bool checked)
7ffdb0a43810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float avg<float>(ReadOnlySpan<float> src, bool checked)
7ffdb0a439d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float favg<float>(ReadOnlySpan<float> src, bool checked)
7ffdb0a43ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double avg<double>(ReadOnlySpan<double> src, bool checked)
7ffdb0a43bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double favg<double>(ReadOnlySpan<double> src, bool checked)
7ffdb0a43cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte avg<byte>(ReadOnlySpan<byte> src)
7ffdb0a43dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte avg<sbyte>(ReadOnlySpan<sbyte> src)
7ffdb0a43e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort avg<ushort>(ReadOnlySpan<ushort> src)
7ffdb0a43e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short avg<short>(ReadOnlySpan<short> src)
7ffdb0a43ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint avg<uint>(ReadOnlySpan<uint> src)
7ffdb0a43ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int avg<int>(ReadOnlySpan<int> src)
7ffdb0a43f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong avg<ulong>(ReadOnlySpan<ulong> src)
7ffdb0a482e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long avg<long>(ReadOnlySpan<long> src)
7ffdb0a48450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float avg<float>(ReadOnlySpan<float> src)
7ffdb0a48540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double avg<double>(ReadOnlySpan<double> src)
7ffdb0a48798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte avg<byte>(Span<byte> src, bool checked)
7ffdb0a489d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte avg<sbyte>(Span<sbyte> src, bool checked)
7ffdb0a494b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort avg<ushort>(Span<ushort> src, bool checked)
7ffdb0a4a208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short avg<short>(Span<short> src, bool checked)
7ffdb0a4b390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint avg<uint>(Span<uint> src, bool checked)
7ffdb0a70cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int avg<int>(Span<int> src, bool checked)
7ffdb0a70d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong avg<ulong>(Span<ulong> src, bool checked)
7ffdb0a70dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long avg<long>(Span<long> src, bool checked)
7ffdb0a70de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float avg<float>(Span<float> src, bool checked)
7ffdb0a70e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double avg<double>(Span<double> src, bool checked)
7ffdb0a70eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte avg<byte>(Span<byte> src)
7ffdb0a70f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte avg<sbyte>(Span<sbyte> src)
7ffdb0a70f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort avg<ushort>(Span<ushort> src)
7ffdb0a70fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short avg<short>(Span<short> src)
7ffdb0a71050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint avg<uint>(Span<uint> src)
7ffdb0a71110h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int avg<int>(Span<int> src)
7ffdb0a71488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong avg<ulong>(Span<ulong> src)
7ffdb0a716e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long avg<long>(Span<long> src)
7ffdb0a718d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float avg<float>(Span<float> src)
7ffdb0a71b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double avg<double>(Span<double> src)
7ffdb0a71e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte avgz<byte>(ReadOnlySpan<byte> src)
7ffdb0a71f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte avgz<sbyte>(ReadOnlySpan<sbyte> src)
7ffdb0a72160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort avgz<ushort>(ReadOnlySpan<ushort> src)
7ffdb0a72358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short avgz<short>(ReadOnlySpan<short> src)
7ffdb0a724f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint avgz<uint>(ReadOnlySpan<uint> src)
7ffdb0a725c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int avgz<int>(ReadOnlySpan<int> src)
7ffdb0a726a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong avgz<ulong>(ReadOnlySpan<ulong> src)
7ffdb0a72790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long avgz<long>(ReadOnlySpan<long> src)
7ffdb0a72880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float avgz<float>(ReadOnlySpan<float> src)
7ffdb0a72a18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double avgz<double>(ReadOnlySpan<double> src)
7ffdb0a72ca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte avgz<byte>(Span<byte> src)
7ffdb0a72fb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte avgz<sbyte>(Span<sbyte> src)
7ffdb0a73348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort avgz<ushort>(Span<ushort> src)
7ffdb0a733c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short avgz<short>(Span<short> src)
7ffdb0a73450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint avgz<uint>(Span<uint> src)
7ffdb0a734b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int avgz<int>(Span<int> src)
7ffdb0a73690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong avgz<ulong>(Span<ulong> src)
7ffdb0a73768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long avgz<long>(Span<long> src)
7ffdb0a738b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float avgz<float>(Span<float> src)
7ffdb0a739d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double avgz<double>(Span<double> src)
7ffdb0a73a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bin<byte> bin<byte>(in ClosedInterval<byte> src, uint count)
7ffdb0a73b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bin<ushort> bin<ushort>(in ClosedInterval<ushort> src, uint count)
7ffdb0a781f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bin<uint> bin<uint>(in ClosedInterval<uint> src, uint count)
7ffdb0a787c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bin<ulong> bin<ulong>(in ClosedInterval<ulong> src, uint count)
7ffdb0a788b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bins<byte>(in Histogram<byte> src, Span<Bin<byte>> dst)
7ffdb0a789d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ClosedInterval<byte> segment<byte>(in Histogram<byte> src, uint index)
7ffdb0a78dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint count<byte>(in Histogram<byte> src, uint index)
7ffdb0a78df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte point<byte>(in Histogram<byte> src, uint ix)
7ffdb0a78ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bins<ushort>(in Histogram<ushort> src, Span<Bin<ushort>> dst)
7ffdb0a79560h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ClosedInterval<ushort> segment<ushort>(in Histogram<ushort> src, uint index)
7ffdb0a79938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint count<ushort>(in Histogram<ushort> src, uint index)
7ffdb0a79950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort point<ushort>(in Histogram<ushort> src, uint ix)
7ffdb0a79a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bins<uint>(in Histogram<uint> src, Span<Bin<uint>> dst)
7ffdb0a79bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ClosedInterval<uint> segment<uint>(in Histogram<uint> src, uint index)
7ffdb0a7a0b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint count<uint>(in Histogram<uint> src, uint index)
7ffdb0a7a0d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint point<uint>(in Histogram<uint> src, uint ix)
7ffdb0a7a298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bins<ulong>(in Histogram<ulong> src, Span<Bin<ulong>> dst)
7ffdb0a7a328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ClosedInterval<ulong> segment<ulong>(in Histogram<ulong> src, uint index)
7ffdb0a7ad48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint count<ulong>(in Histogram<ulong> src, uint index)
7ffdb0a7ad78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong point<ulong>(in Histogram<ulong> src, uint ix)
7ffdb0a7aeb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ClosedInterval<uint> bounds<byte>(in Histogram<byte> src)
7ffdb0a7b198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ClosedInterval<uint> bounds<ushort>(in Histogram<ushort> src)
7ffdb0a7b288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ClosedInterval<uint> bounds<uint>(in Histogram<uint> src)
7ffdb0a7b420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ClosedInterval<uint> bounds<ulong>(in Histogram<ulong> src)
7ffdb0a7b648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit contains<byte>(Interval<byte> src, byte point)
7ffdb0a7b840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit contains<sbyte>(Interval<sbyte> src, sbyte point)
7ffdb0ab0408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit contains<ushort>(Interval<ushort> src, ushort point)
7ffdb0ab0d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit contains<short>(Interval<short> src, short point)
7ffdb0ab1470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit contains<uint>(Interval<uint> src, uint point)
7ffdb0ab1d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit contains<int>(Interval<int> src, int point)
7ffdb0ab1de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit contains<ulong>(Interval<ulong> src, ulong point)
7ffdb0ab2568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit contains<long>(Interval<long> src, long point)
7ffdb0ab2c10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit contains<uint>(Span<uint> xs, uint match)
7ffdb0ab39c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit contains<uint>(in uint src, uint match, uint length)
7ffdb0ab3b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit search<uint>(N8 n, in uint src, uint match, uint offset)
7ffdb0ab3b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit search<uint>(N4 n, in uint src, uint match, uint offset)
7ffdb0ab3b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long count<byte>(byte min, byte max)
7ffdb0ab8498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long count<ushort>(ushort min, ushort max)
7ffdb0ab8630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long count<uint>(uint min, uint max)
7ffdb0ab8738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long count<ulong>(ulong min, ulong max)
7ffdb0ab8810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<byte>(int count, ref byte dst)
7ffdb0ab89f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<sbyte>(int count, ref sbyte dst)
7ffdb0ab8ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<ushort>(int count, ref ushort dst)
7ffdb0ab8e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<short>(int count, ref short dst)
7ffdb0ab8e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<uint>(int count, ref uint dst)
7ffdb0ab8f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<int>(int count, ref int dst)
7ffdb0ab8f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<ulong>(int count, ref ulong dst)
7ffdb0ab8ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<long>(int count, ref long dst)
7ffdb0ab9038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<byte>(byte first, int count, ref byte dst)
7ffdb0ab9110h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<sbyte>(sbyte first, int count, ref sbyte dst)
7ffdb0ab91b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<ushort>(ushort first, int count, ref ushort dst)
7ffdb0ab93b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<short>(short first, int count, ref short dst)
7ffdb0ab9458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<uint>(uint first, int count, ref uint dst)
7ffdb0ab9518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<int>(int first, int count, ref int dst)
7ffdb0ab9578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<ulong>(ulong first, int count, ref ulong dst)
7ffdb0ab95f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<long>(long first, int count, ref long dst)
7ffdb0ab96c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<byte>(byte lead, Span<byte> dst)
7ffdb0ab9968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<sbyte>(sbyte lead, Span<sbyte> dst)
7ffdb0ab9a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<ushort>(ushort lead, Span<ushort> dst)
7ffdb0ab9d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<short>(short lead, Span<short> dst)
7ffdb0ab9f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<uint>(uint lead, Span<uint> dst)
7ffdb0aba250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<int>(int lead, Span<int> dst)
7ffdb0aba460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<ulong>(ulong lead, Span<ulong> dst)
7ffdb0aba718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decrements<long>(long lead, Span<long> dst)
7ffdb0aba7f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void deposit<ulong>(ReadOnlySpan<ulong> src, in Histogram<ulong> dst)
7ffdb0abaa48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint index<ulong>(in Histogram<ulong> src, ulong point)
7ffdb0abaaf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void deposit<byte>(byte src, in Histogram<byte> dst, Action<byte> undeposited)
7ffdb0abb078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void deposit<ushort>(ushort src, in Histogram<ushort> dst, Action<ushort> undeposited)
7ffdb0abbc18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void deposit<uint>(uint src, in Histogram<uint> dst, Action<uint> undeposited)
7ffdb0abbf18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void deposit<ulong>(ulong src, in Histogram<ulong> dst, Action<ulong> undeposited)
7ffdb0af01e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<float> fabs<float>(ReadOnlySpan<float> src, Span<float> dst)
7ffdb0af06f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<double> fabs<double>(ReadOnlySpan<double> src, Span<double> dst)
7ffdb0af0c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float favg<float>(ReadOnlySpan<float> src)
7ffdb0af1548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double favg<double>(ReadOnlySpan<double> src)
7ffdb0af18f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<float> fdiv<float>(Span<float> lhs, ReadOnlySpan<float> rhs)
7ffdb0af1998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<double> fdiv<double>(Span<double> lhs, ReadOnlySpan<double> rhs)
7ffdb0af1ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<float> fdiv<float>(ReadOnlySpan<float> lhs, ReadOnlySpan<float> rhs, Span<float> dst)
7ffdb0af1fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<double> fdiv<double>(ReadOnlySpan<double> lhs, ReadOnlySpan<double> rhs, Span<double> dst)
7ffdb0af2418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<float> fdiv<float>(Span<float> src, float rhs)
7ffdb0af2538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<double> fdiv<double>(Span<double> src, double rhs)
7ffdb0af2bb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<float> fmod<float>(ReadOnlySpan<float> lhs, ReadOnlySpan<float> rhs, Span<float> dst)
7ffdb0af2d90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<double> fmod<double>(ReadOnlySpan<double> lhs, ReadOnlySpan<double> rhs, Span<double> dst)
7ffdb0af3090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte grain<byte>(in ClosedInterval<byte> src, ulong width)
7ffdb0af34f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort grain<ushort>(in ClosedInterval<ushort> src, ulong width)
7ffdb0af3948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint grain<uint>(in ClosedInterval<uint> src, ulong width)
7ffdb0af3990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong grain<ulong>(in ClosedInterval<ulong> src, ulong width)
7ffdb0af3d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Histogram<byte> histogram<byte>()
7ffdb0af3df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Histogram<byte> histogram<byte>(in ClosedInterval<byte> src, byte grain)
7ffdb0af3e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Histogram<ushort> histogram<ushort>()
7ffdb0af84b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Histogram<ushort> histogram<ushort>(in ClosedInterval<ushort> src, ushort grain)
7ffdb0af84e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Histogram<uint> histogram<uint>()
7ffdb0af8f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Histogram<uint> histogram<uint>(in ClosedInterval<uint> src, uint grain)
7ffdb0af8f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Histogram<ulong> histogram<ulong>()
7ffdb0af9b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Histogram<ulong> histogram<ulong>(in ClosedInterval<ulong> src, ulong grain)
7ffdb0af9ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit identical<byte>(Span<byte> xs, Span<byte> ys)
7ffdb0afb168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit identical<byte>(in byte first, in byte second, uint count)
7ffdb0afb1f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit identical<ushort>(Span<ushort> xs, Span<ushort> ys)
7ffdb0afb228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit identical<ushort>(in ushort first, in ushort second, uint count)
7ffdb0afb240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit identical<uint>(Span<uint> xs, Span<uint> ys)
7ffdb0afb420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit identical<uint>(in uint first, in uint second, uint count)
7ffdb0afb438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit identical<ulong>(Span<ulong> xs, Span<ulong> ys)
7ffdb0afb6a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit identical<ulong>(in ulong first, in ulong second, uint count)
7ffdb0afb6c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit identical<byte>(ReadOnlySpan<byte> xs, ReadOnlySpan<byte> ys)
7ffdb0afb6d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit identical<ushort>(ReadOnlySpan<ushort> xs, ReadOnlySpan<ushort> ys)
7ffdb0afb8e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit identical<uint>(ReadOnlySpan<uint> xs, ReadOnlySpan<uint> ys)
7ffdb0afbb58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit identical<ulong>(ReadOnlySpan<ulong> xs, ReadOnlySpan<ulong> ys)
7ffdb0afbb70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte if<byte>(in byte src, ValuePredicate<byte> test, ValueOperator<byte> true, ValueOperator<byte> false)
7ffdb0b33180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort if<ushort>(in ushort src, ValuePredicate<ushort> test, ValueOperator<ushort> true, ValueOperator<ushort> false)
7ffdb0b33258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint if<uint>(in uint src, ValuePredicate<uint> test, ValueOperator<uint> true, ValueOperator<uint> false)
7ffdb0b333a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong if<ulong>(in ulong src, ValuePredicate<ulong> test, ValueOperator<ulong> true, ValueOperator<ulong> false)
7ffdb0b33480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte if<byte>(in byte src, ValuePredicate<byte> test, ValueMap<byte,byte> true, ValueMap<byte,byte> false)
7ffdb0b335d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort if<ushort>(in ushort src, ValuePredicate<ushort> test, ValueMap<ushort,ushort> true, ValueMap<ushort,ushort> false)
7ffdb0b33708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint if<uint>(in uint src, ValuePredicate<uint> test, ValueMap<uint,uint> true, ValueMap<uint,uint> false)
7ffdb0b33810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong if<ulong>(in ulong src, ValuePredicate<ulong> test, ValueMap<ulong,ulong> true, ValueMap<ulong,ulong> false)
7ffdb0b33900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Bin<byte> next<byte>(ref Bin<byte> bin)
7ffdb0b33ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Bin<ushort> next<ushort>(ref Bin<ushort> bin)
7ffdb0b33ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Bin<uint> next<uint>(ref Bin<uint> bin)
7ffdb0b33af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Bin<ulong> next<ulong>(ref Bin<ulong> bin)
7ffdb0b33b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Index<byte> partition<byte>(Interval<byte> src, byte width, int precision)
7ffdb0b33b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Index<sbyte> partition<sbyte>(Interval<sbyte> src, sbyte width, int precision)
7ffdb0b387c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Index<ushort> partition<ushort>(Interval<ushort> src, ushort width, int precision)
7ffdb0b395d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Index<short> partition<short>(Interval<short> src, short width, int precision)
7ffdb0b396f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Index<uint> partition<uint>(Interval<uint> src, uint width, int precision)
7ffdb0b3a688h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Index<int> partition<int>(Interval<int> src, int width, int precision)
7ffdb0b3a880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Index<ulong> partition<ulong>(Interval<ulong> src, ulong width, int precision)
7ffdb0b3ad48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Index<long> partition<long>(Interval<long> src, long width, int precision)
7ffdb0b3b048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Index<float> partition<float>(Interval<float> src, float width, int precision)
7ffdb0b50120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Index<double> partition<double>(Interval<double> src, double width, int precision)
7ffdb0b519e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SeqTerms<byte> seq<byte>(ReadOnlySpan<byte> src)
7ffdb0b58a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SeqTerms<ushort> seq<ushort>(ReadOnlySpan<ushort> src)
7ffdb0b59800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SeqTerms<uint> seq<uint>(ReadOnlySpan<uint> src)
7ffdb0b5a6e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SeqTerms<ulong> seq<ulong>(ReadOnlySpan<ulong> src)
7ffdb0b5b450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint seq<byte>(byte i0, byte i1, byte j0, byte j1, SeqTerms<Pair<byte>> dst)
7ffdb0b803f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint seq<ushort>(ushort i0, ushort i1, ushort j0, ushort j1, SeqTerms<Pair<ushort>> dst)
7ffdb0b81968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint seq<uint>(uint i0, uint i1, uint j0, uint j1, SeqTerms<Pair<uint>> dst)
7ffdb0b82aa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint seq<ulong>(ulong i0, ulong i1, ulong j0, ulong j1, SeqTerms<Pair<ulong>> dst)
7ffdb0b837b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte squeeze<byte>(byte src, byte max)
7ffdb0b88768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort squeeze<ushort>(ushort src, ushort max)
7ffdb0b887c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint squeeze<uint>(uint src, uint max)
7ffdb0b88828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong squeeze<ulong>(ulong src, ulong max)
7ffdb0b88888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<byte> srl<byte>(ReadOnlySpan<byte> src, byte count, Span<byte> dst)
7ffdb0b88918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<ushort> srl<ushort>(ReadOnlySpan<ushort> src, byte count, Span<ushort> dst)
7ffdb0b889f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<uint> srl<uint>(ReadOnlySpan<uint> src, byte count, Span<uint> dst)
7ffdb0b88be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<ulong> srl<ulong>(ReadOnlySpan<ulong> src, byte count, Span<ulong> dst)
7ffdb0b88c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<byte> srlv<byte>(ReadOnlySpan<byte> src, ReadOnlySpan<byte> counts, Span<byte> dst)
7ffdb0b88ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<ushort> srlv<ushort>(ReadOnlySpan<ushort> src, ReadOnlySpan<byte> counts, Span<ushort> dst)
7ffdb0b88f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<uint> srlv<uint>(ReadOnlySpan<uint> src, ReadOnlySpan<byte> counts, Span<uint> dst)
7ffdb0b88fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<ulong> srlv<ulong>(ReadOnlySpan<ulong> src, ReadOnlySpan<byte> counts, Span<ulong> dst)
7ffdb0b89050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# IEnumerable<ulong> stream<ulong>(ulong count)
7ffdb0b890b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# IEnumerable<ulong> stream<ulong>(ulong x0, ulong x1)
7ffdb0b890c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# IEnumerable<ulong> stream<ulong>(ulong x0, ulong x1, ulong step)
7ffdb0b89518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sum<byte>(ReadOnlySpan<Bin<byte>> bins)
7ffdb0b89710h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sum<ushort>(ReadOnlySpan<Bin<ushort>> bins)
7ffdb0b89a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sum<uint>(ReadOnlySpan<Bin<uint>> bins)
7ffdb0b89e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sum<ulong>(ReadOnlySpan<Bin<ulong>> bins)
7ffdb0b8a178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte sum<byte>(ReadOnlySpan<byte> src)
7ffdb0b8a4f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort sum<ushort>(ReadOnlySpan<ushort> src)
7ffdb0b8a5b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint sum<uint>(ReadOnlySpan<uint> src)
7ffdb0b8a6a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sum<ulong>(ReadOnlySpan<ulong> src)
7ffdb0b8b918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sumzx<byte>(ReadOnlySpan<byte> src)
7ffdb0b8b9d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sumzx<ushort>(ReadOnlySpan<ushort> src)
7ffdb0b8bba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sumzx<uint>(ReadOnlySpan<uint> src)
7ffdb0b8bca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sumzx<ulong>(ReadOnlySpan<ulong> src)
7ffdb0b8bdb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long sumsx<byte>(ReadOnlySpan<byte> src)
7ffdb0b8bed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long sumsx<ushort>(ReadOnlySpan<ushort> src)
7ffdb0ba02a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long sumsx<uint>(ReadOnlySpan<uint> src)
7ffdb0ba0438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long sumsx<ulong>(ReadOnlySpan<ulong> src)
7ffdb0ba0558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte sum<byte>(byte[] src)
7ffdb0ba0798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort sum<ushort>(ushort[] src)
7ffdb0ba1008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint sum<uint>(uint[] src)
7ffdb0ba1020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sum<ulong>(ulong[] src)
7ffdb0ba1038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Index<SeqTerm<byte>> terms<byte>(ReadOnlySpan<byte> src)
7ffdb0ba1050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Index<SeqTerm<ushort>> terms<ushort>(ReadOnlySpan<ushort> src)
7ffdb0ba1170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Index<SeqTerm<uint>> terms<uint>(ReadOnlySpan<uint> src)
7ffdb0ba1248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Index<SeqTerm<ulong>> terms<ulong>(ReadOnlySpan<ulong> src)
7ffdb0ba1320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint hash(NatSpanSig src)
7ffdaea7a220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool eq(NatSpanSig a, NatSpanSig b)
7ffdaea7a238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format(NatSpanSig src)
7ffdaea7a250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NatSpanSig sig(uint length, ushort cellwidth, AsciCharSym indicator)
7ffdaea7a268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ParseResult<NatSpanSig> sig(string src)
7ffdaea7a280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NatSpan<N16,byte> bytes<byte>(Span<byte> src, N16 n)
7ffdb0a41d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NatSpan<N16,byte> bytes<sbyte>(Span<sbyte> src, N16 n)
7ffdb0a41e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NatSpan<N16,byte> bytes<ushort>(Span<ushort> src, N16 n)
7ffdb0a41f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NatSpan<N16,byte> bytes<short>(Span<short> src, N16 n)
7ffdb0a42010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NatSpan<N16,byte> bytes<uint>(Span<uint> src, N16 n)
7ffdb0a42118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NatSpan<N16,byte> bytes<int>(Span<int> src, N16 n)
7ffdb0a421d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NatSpan<N16,byte> bytes<ulong>(Span<ulong> src, N16 n)
7ffdb0a42280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NatSpan<N16,byte> bytes<long>(Span<long> src, N16 n)
7ffdb0a42370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NatSpan<N16,byte> bytes<float>(Span<float> src, N16 n)
7ffdb0a42430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NatSpan<N16,byte> bytes<double>(Span<double> src, N16 n)
7ffdb0a42508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte entry<byte>(in TableSpan<N256,N256,byte> src, byte i, byte j)
7ffdb0a0bac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort entry<ushort>(in TableSpan<N256,N256,ushort> src, byte i, byte j)
7ffdb0a0bfa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint entry<uint>(in TableSpan<N256,N256,uint> src, byte i, byte j)
7ffdb0a40378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong entry<ulong>(in TableSpan<N256,N256,ulong> src, byte i, byte j)
7ffdb0a407b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte[] digits(ulong src)
7ffdaea72658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NatKind kind(ulong n, NumericKind t)
7ffdaea726a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NatKind kind(ulong m, ulong n, NumericKind t)
7ffdaea726b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Type primtype(byte n)
7ffdaea72820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte offset<byte>(in byte src, N1 n)
7ffdb0a0b420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort offset<ushort>(in ushort src, N1 n)
7ffdb0a0b468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint offset<uint>(in uint src, N1 n)
7ffdb0a0b4f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong offset<ulong>(in ulong src, N1 n)
7ffdb0a0b570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte offset<byte>(in byte src, N2 n)
7ffdb0a0b5a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort offset<ushort>(in ushort src, N2 n)
7ffdb0a0b5e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint offset<uint>(in uint src, N2 n)
7ffdb0a0b600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong offset<ulong>(in ulong src, N2 n)
7ffdb0a0b630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte offset<byte>(in byte src, N3 n)
7ffdb0a0b6a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort offset<ushort>(in ushort src, N3 n)
7ffdb0a0b708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint offset<uint>(in uint src, N3 n)
7ffdb0a0b738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong offset<ulong>(in ulong src, N3 n)
7ffdb0a0b798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte offset<byte>(in byte src, N4 n)
7ffdb0a0b7f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort offset<ushort>(in ushort src, N4 n)
7ffdb0a0b858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint offset<uint>(in uint src, N4 n)
7ffdb0a0b8a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong offset<ulong>(in ulong src, N4 n)
7ffdb0a0b900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte offset<byte>(in byte src, N5 n)
7ffdb0a0b918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort offset<ushort>(in ushort src, N5 n)
7ffdb0a0b960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint offset<uint>(in uint src, N5 n)
7ffdb0a0b978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong offset<ulong>(in ulong src, N5 n)
7ffdb0a0b990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte offset<byte>(in byte src, N6 n)
7ffdb0a0b9a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort offset<ushort>(in ushort src, N6 n)
7ffdb0a0b9f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint offset<uint>(in uint src, N6 n)
7ffdb0a0ba08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong offset<ulong>(in ulong src, N6 n)
7ffdb0a0ba20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte offset<byte>(in byte src, N7 n)
7ffdb0a0ba38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort offset<ushort>(in ushort src, N7 n)
7ffdb0a0ba80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint offset<uint>(in uint src, N7 n)
7ffdb0a0ba98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong offset<ulong>(in ulong src, N7 n)
7ffdb0a0bab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint aligned(uint m, uint n, uint w)
7ffdaea69a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned(in GridMetrics src, DataWidth w)
7ffdaea69a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned(in GridMetrics src, NumericKind k)
7ffdaea69a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcount(uint cellcount, uint cellwidth)
7ffdaea69a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcover(uint bitcount, uint blockwidth)
7ffdaea69aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int bytes(ulong rows, ulong cols)
7ffdaea69ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint gridcells(uint rows, uint cols, uint cellwidth)
7ffdaea69ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int mincells(ulong w, ulong n)
7ffdaea69ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint offset(uint colwidth, uint row, uint col)
7ffdaea6a058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint offset(in GridMetrics src, uint row, uint col)
7ffdaea6a088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint offset(GridDim dim, CellIndex point)
7ffdaea6a0a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint offset(GridDim dim, uint row, uint col)
7ffdaea6a0b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteSize rem(ByteSize src, W16 w)
7ffdaea6a0e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteSize rem(ByteSize src, W32 w)
7ffdaea6a100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteSize rem(ByteSize src, W64 w)
7ffdaea6a118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteSize rem(ByteSize src, W128 w)
7ffdaea6a130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteSize rem(ByteSize src, W256 w)
7ffdaea6a148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteSize rem(ByteSize src, W512 w)
7ffdaea6a160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint seqwidth(in GridMetrics src, uint row, uint col)
7ffdaea6a178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<ulong>(W256 w)
7ffdb03b9ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<ulong>(W256 w, int count)
7ffdb03badc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong blockcount<byte>(W256 w, uint rows, uint cols)
7ffdb03d0d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint gridcells<byte>(uint rows, uint cols)
7ffdb03d0df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<byte>(W256 w, ulong cellcount)
7ffdb03d0e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<byte>(W256 w)
7ffdb03d0e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<byte>(W256 w)
7ffdb03d0ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong blockcount<ushort>(W256 w, uint rows, uint cols)
7ffdb03d1278h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint gridcells<ushort>(uint rows, uint cols)
7ffdb03d12c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<ushort>(W256 w, ulong cellcount)
7ffdb03d12d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<ushort>(W256 w)
7ffdb03d1308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<ushort>(W256 w)
7ffdb03d1320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong blockcount<uint>(W256 w, uint rows, uint cols)
7ffdb03d13b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint gridcells<uint>(uint rows, uint cols)
7ffdb03d13f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<uint>(W256 w, ulong cellcount)
7ffdb03d1410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<uint>(W256 w)
7ffdb03d1440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<uint>(W256 w)
7ffdb03d1458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong blockcount<ulong>(W256 w, uint rows, uint cols)
7ffdb03d1488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint gridcells<ulong>(uint rows, uint cols)
7ffdb03d14b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<ulong>(W256 w, ulong cellcount)
7ffdb03d14d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<ulong>(W256 w)
7ffdb03d14e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<byte>(W16 w, uint count, out uint rem)
7ffdb0a00b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<byte>(W16 w)
7ffdb0a00b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<sbyte>(W16 w, uint count, out uint rem)
7ffdb0a00ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<sbyte>(W16 w)
7ffdb0a00bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<ulong>(W16 w, uint count, out uint rem)
7ffdb0a00bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<long>(W16 w, uint count, out uint rem)
7ffdb0a00c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<byte>(W32 w, uint count, out uint rem)
7ffdb0a00c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<byte>(W32 w)
7ffdb0a00c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<sbyte>(W32 w, uint count, out uint rem)
7ffdb0a00c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<sbyte>(W32 w)
7ffdb0a00ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<ulong>(W32 w, uint count, out uint rem)
7ffdb0a00cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<long>(W32 w, uint count, out uint rem)
7ffdb0a00cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<byte>(W64 w, uint count, out uint rem)
7ffdb0a00d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<byte>(W64 w)
7ffdb0a00d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<sbyte>(W64 w, uint count, out uint rem)
7ffdb0a00d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<ulong>(W64 w, uint count, out uint rem)
7ffdb0a00dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<ulong>(W64 w)
7ffdb0a00de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<long>(W64 w, uint count, out uint rem)
7ffdb0a00e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<byte>(W128 w, uint count, out uint rem)
7ffdb0a00eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<byte>(W128 w)
7ffdb0a00ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<sbyte>(W128 w, uint count, out uint rem)
7ffdb0a00f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<ulong>(W128 w, uint count, out uint rem)
7ffdb0a00fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<ulong>(W128 w)
7ffdb0a00fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<long>(W128 w, uint count, out uint rem)
7ffdb0a01020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<byte>(W256 w, uint count, out uint rem)
7ffdb0a01098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<sbyte>(W256 w, uint count, out uint rem)
7ffdb0a01290h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<ulong>(W256 w, uint count, out uint rem)
7ffdb0a01320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool align<long>(W256 w, uint count, out uint rem)
7ffdb0a01350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<byte>(W8 w, int count)
7ffdb0a013e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<byte>(W8 w)
7ffdb0a013f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<sbyte>(W8 w, int count)
7ffdb0a01458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<sbyte>(W8 w)
7ffdb0a01488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<ulong>(W8 w, int count)
7ffdb0a014b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<long>(W8 w, int count)
7ffdb0a01530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<byte>(W16 w, int count)
7ffdb0a01590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<sbyte>(W16 w, int count)
7ffdb0a01608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<ulong>(W16 w, int count)
7ffdb0a01638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<long>(W16 w, int count)
7ffdb0a01680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<byte>(W32 w, int count)
7ffdb0a016c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<sbyte>(W32 w, int count)
7ffdb0a016f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<ulong>(W32 w, int count)
7ffdb0a01710h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<long>(W32 w, int count)
7ffdb0a01740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<byte>(W64 w, int count)
7ffdb0a017e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<sbyte>(W64 w, int count)
7ffdb0a01818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<ulong>(W64 w, int count)
7ffdb0a01830h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<long>(W64 w, int count)
7ffdb0a01848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<byte>(W128 w, int count)
7ffdb0a01890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<sbyte>(W128 w, int count)
7ffdb0a01908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<ulong>(W128 w, int count)
7ffdb0a01920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<long>(W128 w, int count)
7ffdb0a01938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<byte>(W256 w, int count)
7ffdb0a01950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<sbyte>(W256 w, int count)
7ffdb0a01998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<long>(W256 w, int count)
7ffdb0a019f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<byte>(W512 w, int count)
7ffdb0a01a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<byte>(W512 w)
7ffdb0a01a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<sbyte>(W512 w, int count)
7ffdb0a01a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<ulong>(W512 w, int count)
7ffdb0a01ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<ulong>(W512 w)
7ffdb0a01ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool aligned<long>(W512 w, int count)
7ffdb0a01b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcount<byte>(uint cellcount)
7ffdb0a01b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcount<sbyte>(uint cellcount)
7ffdb0a01bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcount<ushort>(uint cellcount)
7ffdb0a01c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcount<short>(uint cellcount)
7ffdb0a01c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcount<uint>(uint cellcount)
7ffdb0a01c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcount<int>(uint cellcount)
7ffdb0a01cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcount<ulong>(uint cellcount)
7ffdb0a01cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcount<long>(uint cellcount)
7ffdb0a01cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcount<float>(uint cellcount)
7ffdb0a01d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcount<double>(uint cellcount)
7ffdb0a01d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcover<byte>(uint bitcount)
7ffdb0a01dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcover<sbyte>(uint bitcount)
7ffdb0a01e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcover<ushort>(uint bitcount)
7ffdb0a01e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcover<short>(uint bitcount)
7ffdb0a01e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcover<uint>(uint bitcount)
7ffdb0a01ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcover<int>(uint bitcount)
7ffdb0a01ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcover<ulong>(uint bitcount)
7ffdb0a01f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcover<long>(uint bitcount)
7ffdb0a01f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcover<float>(uint bitcount)
7ffdb0a01f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcover<double>(uint bitcount)
7ffdb0a01f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<byte>(W8 w, int cells)
7ffdb0a01fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<sbyte>(W8 w, int cells)
7ffdb0a01ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<byte>(W16 w, int cells)
7ffdb0a02010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<sbyte>(W16 w, int cells)
7ffdb0a02058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ushort>(W16 w, int cells)
7ffdb0a02070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<ushort>(W16 w)
7ffdb0a02088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<short>(W16 w, int cells)
7ffdb0a020b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<short>(W16 w)
7ffdb0a020d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<byte>(W32 w, int cells)
7ffdb0a020e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<sbyte>(W32 w, int cells)
7ffdb0a02118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ushort>(W32 w, int cells)
7ffdb0a02148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<ushort>(W32 w)
7ffdb0a02160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<short>(W32 w, int cells)
7ffdb0a02178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<short>(W32 w)
7ffdb0a02190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<uint>(W32 w, int cells)
7ffdb0a021c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<uint>(W32 w)
7ffdb0a021d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<int>(W32 w, int cells)
7ffdb0a021f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<int>(W32 w)
7ffdb0a02208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<float>(W32 w, int cells)
7ffdb0a02220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<float>(W32 w)
7ffdb0a02238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<byte>(W64 w, int cells)
7ffdb0a02268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<sbyte>(W64 w, int cells)
7ffdb0a02298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ushort>(W64 w, int cells)
7ffdb0a022c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<ushort>(W64 w)
7ffdb0a022e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<short>(W64 w, int cells)
7ffdb0a022f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<uint>(W64 w, int cells)
7ffdb0a02328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<uint>(W64 w)
7ffdb0a02340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<int>(W64 w, int cells)
7ffdb0a02370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ulong>(W64 w, int cells)
7ffdb0a023b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<long>(W64 w, int cells)
7ffdb0a023d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<float>(W64 w, int cells)
7ffdb0a02400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<double>(W64 w, int cells)
7ffdb0a02430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<byte>(W128 w, int cells)
7ffdb0a02460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<sbyte>(W128 w, int cells)
7ffdb0a024a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ushort>(W128 w, int cells)
7ffdb0a024c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<ushort>(W128 w)
7ffdb0a024d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<short>(W128 w, int cells)
7ffdb0a02508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<uint>(W128 w, int cells)
7ffdb0a02538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<uint>(W128 w)
7ffdb0a02550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<int>(W128 w, int cells)
7ffdb0a02568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ulong>(W128 w, int cells)
7ffdb0a025b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<long>(W128 w, int cells)
7ffdb0a025c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<float>(W128 w, int cells)
7ffdb0a025f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<double>(W128 w, int cells)
7ffdb0a02628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<byte>(W256 w, int cells)
7ffdb0a02658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<sbyte>(W256 w, int cells)
7ffdb0a026a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ushort>(W256 w, int cells)
7ffdb0a026e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<short>(W256 w, int cells)
7ffdb0a02730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<uint>(W256 w, int cells)
7ffdb0a02778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<int>(W256 w, int cells)
7ffdb0a027f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ulong>(W256 w, int cells)
7ffdb0a02838h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<long>(W256 w, int cells)
7ffdb0a02850h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<float>(W256 w, int cells)
7ffdb0a02868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<double>(W256 w, int cells)
7ffdb0a028b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<byte>(W512 w, int cells)
7ffdb0a028e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<sbyte>(W512 w, int cells)
7ffdb0a02910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ushort>(W512 w, int cells)
7ffdb0a02928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<ushort>(W512 w)
7ffdb0a02940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<short>(W512 w, int cells)
7ffdb0a02958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<uint>(W512 w, int cells)
7ffdb0a029a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blocklength<uint>(W512 w)
7ffdb0a029b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<int>(W512 w, int cells)
7ffdb0a029d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ulong>(W512 w, int cells)
7ffdb0a02a00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<long>(W512 w, int cells)
7ffdb0a02a18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<float>(W512 w, int cells)
7ffdb0a02a30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<double>(W512 w, int cells)
7ffdb0a02a78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<byte>(W8 w, int length, out int remainder)
7ffdb0a02aa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<sbyte>(W8 w, int length, out int remainder)
7ffdb0a02ad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<byte>(W16 w, int length, out int remainder)
7ffdb0a02af0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<sbyte>(W16 w, int length, out int remainder)
7ffdb0a02b38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ushort>(W16 w, int length, out int remainder)
7ffdb0a02b50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<short>(W16 w, int length, out int remainder)
7ffdb0a02b68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<byte>(W32 w, int length, out int remainder)
7ffdb0a02b80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<sbyte>(W32 w, int length, out int remainder)
7ffdb0a02bc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ushort>(W32 w, int length, out int remainder)
7ffdb0a02be0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<short>(W32 w, int length, out int remainder)
7ffdb0a02bf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<uint>(W32 w, int length, out int remainder)
7ffdb0a02c10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<int>(W32 w, int length, out int remainder)
7ffdb0a02c40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<float>(W32 w, int length, out int remainder)
7ffdb0a02c58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<byte>(W64 w, int length, out int remainder)
7ffdb0a02c70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<sbyte>(W64 w, int length, out int remainder)
7ffdb0a02ca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ushort>(W64 w, int length, out int remainder)
7ffdb0a02cd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<short>(W64 w, int length, out int remainder)
7ffdb0a02ce8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<uint>(W64 w, int length, out int remainder)
7ffdb0a02d00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<int>(W64 w, int length, out int remainder)
7ffdb0a02d18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ulong>(W64 w, int length, out int remainder)
7ffdb0a02d48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<long>(W64 w, int length, out int remainder)
7ffdb0a02d60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<float>(W64 w, int length, out int remainder)
7ffdb0a02d78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<double>(W64 w, int length, out int remainder)
7ffdb0a02d90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<byte>(W128 w, int length, out int remainder)
7ffdb0a02dc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<sbyte>(W128 w, int length, out int remainder)
7ffdb0a02df0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ushort>(W128 w, int length, out int remainder)
7ffdb0a02e08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<short>(W128 w, int length, out int remainder)
7ffdb0a02e20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<uint>(W128 w, int length, out int remainder)
7ffdb0a02e38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<int>(W128 w, int length, out int remainder)
7ffdb0a02e50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ulong>(W128 w, int length, out int remainder)
7ffdb0a02e68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<long>(W128 w, int length, out int remainder)
7ffdb0a02e80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<float>(W128 w, int length, out int remainder)
7ffdb0a02eb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<double>(W128 w, int length, out int remainder)
7ffdb0a02ec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<byte>(W256 w, int length, out int remainder)
7ffdb0a02ee0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<sbyte>(W256 w, int length, out int remainder)
7ffdb0a02f10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ushort>(W256 w, int length, out int remainder)
7ffdb0a02f28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<short>(W256 w, int length, out int remainder)
7ffdb0a02f40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<uint>(W256 w, int length, out int remainder)
7ffdb0a02f58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<int>(W256 w, int length, out int remainder)
7ffdb0a02f88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ulong>(W256 w, int length, out int remainder)
7ffdb0a02fa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<long>(W256 w, int length, out int remainder)
7ffdb0a02fb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<float>(W256 w, int length, out int remainder)
7ffdb0a02fd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<double>(W256 w, int length, out int remainder)
7ffdb0a02fe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<byte>(W512 w, int length, out int remainder)
7ffdb0a03000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<sbyte>(W512 w, int length, out int remainder)
7ffdb0a03030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ushort>(W512 w, int length, out int remainder)
7ffdb0a03048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<short>(W512 w, int length, out int remainder)
7ffdb0a03078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<uint>(W512 w, int length, out int remainder)
7ffdb0a03090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<int>(W512 w, int length, out int remainder)
7ffdb0a030a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<ulong>(W512 w, int length, out int remainder)
7ffdb0a030c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<long>(W512 w, int length, out int remainder)
7ffdb0a030d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<float>(W512 w, int length, out int remainder)
7ffdb0a03138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blockcount<double>(W512 w, int length, out int remainder)
7ffdb0a03150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<byte>(W8 w, int blocks)
7ffdb0a03330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<byte>(W8 w)
7ffdb0a03360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<ushort>(W8 w, int blocks)
7ffdb0a033a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<uint>(W8 w, int blocks)
7ffdb0a033d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<ulong>(W8 w, int blocks)
7ffdb0a03420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<byte>(W16 w, int blocks)
7ffdb0a03450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<byte>(W16 w)
7ffdb0a03468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<ushort>(W16 w, int blocks)
7ffdb0a034c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<ushort>(W16 w)
7ffdb0a034f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<uint>(W16 w, int blocks)
7ffdb0a03510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<ulong>(W16 w, int blocks)
7ffdb0a03540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<byte>(W32 w, int blocks)
7ffdb0a03588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<byte>(W32 w)
7ffdb0a035a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<ushort>(W32 w, int blocks)
7ffdb0a035e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<ushort>(W32 w)
7ffdb0a03600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<uint>(W32 w, int blocks)
7ffdb0a03618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<uint>(W32 w)
7ffdb0a03648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<ulong>(W32 w, int blocks)
7ffdb0a03660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<byte>(W64 w, int blocks)
7ffdb0a03690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<byte>(W64 w)
7ffdb0a036a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<ushort>(W64 w, int blocks)
7ffdb0a03708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<ushort>(W64 w)
7ffdb0a03720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<uint>(W64 w, int blocks)
7ffdb0a03738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<uint>(W64 w)
7ffdb0a03750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<ulong>(W64 w, int blocks)
7ffdb0a03768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<ulong>(W64 w)
7ffdb0a03780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<byte>(W128 w, int blocks)
7ffdb0a037b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<byte>(W128 w)
7ffdb0a037c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<ushort>(W128 w, int blocks)
7ffdb0a03810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<ushort>(W128 w)
7ffdb0a03828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<uint>(W128 w, int blocks)
7ffdb0a03858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<uint>(W128 w)
7ffdb0a03870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<ulong>(W128 w, int blocks)
7ffdb0a03888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<ulong>(W128 w)
7ffdb0a038a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<byte>(W256 w, int blocks)
7ffdb0a038b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<ushort>(W256 w, int blocks)
7ffdb0a03900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<uint>(W256 w, int blocks)
7ffdb0a03918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<ulong>(W256 w, int blocks)
7ffdb0a03930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<byte>(W512 w, int blocks)
7ffdb0a03960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<byte>(W512 w)
7ffdb0a03978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<ushort>(W512 w, int blocks)
7ffdb0a039c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<ushort>(W512 w)
7ffdb0a039d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<uint>(W512 w, int blocks)
7ffdb0a03a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<uint>(W512 w)
7ffdb0a03a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cellblocks<ulong>(W512 w, int blocks)
7ffdb0a03a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<ulong>(W512 w)
7ffdb0a03a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<byte>(W8 w, ulong cellcount)
7ffdb0a03a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<sbyte>(W8 w, ulong cellcount)
7ffdb0a03ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<sbyte>(W8 w)
7ffdb0a03ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<ushort>(W8 w, ulong cellcount)
7ffdb0a03af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<short>(W8 w, ulong cellcount)
7ffdb0a03b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<uint>(W8 w, ulong cellcount)
7ffdb0a03b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<int>(W8 w, ulong cellcount)
7ffdb0a03b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<ulong>(W8 w, ulong cellcount)
7ffdb0a03bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<long>(W8 w, ulong cellcount)
7ffdb0a03bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<float>(W8 w, ulong cellcount)
7ffdb0a03c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<double>(W8 w, ulong cellcount)
7ffdb0a03c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<byte>(W16 w, ulong cellcount)
7ffdb0a03c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<sbyte>(W16 w, ulong cellcount)
7ffdb0a03cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<sbyte>(W16 w)
7ffdb0a03cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<ushort>(W16 w, ulong cellcount)
7ffdb0a03d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<short>(W16 w, ulong cellcount)
7ffdb0a03d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<short>(W16 w)
7ffdb0a03d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<uint>(W16 w, ulong cellcount)
7ffdb0a03d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<int>(W16 w, ulong cellcount)
7ffdb0a03d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<ulong>(W16 w, ulong cellcount)
7ffdb0a03db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<long>(W16 w, ulong cellcount)
7ffdb0a03e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<float>(W16 w, ulong cellcount)
7ffdb0a03e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<double>(W16 w, ulong cellcount)
7ffdb0a03ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<byte>(W32 w, ulong cellcount)
7ffdb0a03ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<sbyte>(W32 w, ulong cellcount)
7ffdb0a03f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<sbyte>(W32 w)
7ffdb0a03f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<ushort>(W32 w, ulong cellcount)
7ffdb0a03f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<short>(W32 w, ulong cellcount)
7ffdb0a03f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<short>(W32 w)
7ffdb0a03fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<uint>(W32 w, ulong cellcount)
7ffdb0a03fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<int>(W32 w, ulong cellcount)
7ffdb0a08000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<int>(W32 w)
7ffdb0a08018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<ulong>(W32 w, ulong cellcount)
7ffdb0a08060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<long>(W32 w, ulong cellcount)
7ffdb0a08078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<float>(W32 w, ulong cellcount)
7ffdb0a080c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<float>(W32 w)
7ffdb0a080d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<double>(W32 w, ulong cellcount)
7ffdb0a080f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<byte>(W64 w, ulong cellcount)
7ffdb0a08150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<sbyte>(W64 w, ulong cellcount)
7ffdb0a08180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<ushort>(W64 w, ulong cellcount)
7ffdb0a081e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<short>(W64 w, ulong cellcount)
7ffdb0a08210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<uint>(W64 w, ulong cellcount)
7ffdb0a08240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<int>(W64 w, ulong cellcount)
7ffdb0a08270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<ulong>(W64 w, ulong cellcount)
7ffdb0a082a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<long>(W64 w, ulong cellcount)
7ffdb0a082d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<float>(W64 w, ulong cellcount)
7ffdb0a08300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<double>(W64 w, ulong cellcount)
7ffdb0a08330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<byte>(W128 w, ulong cellcount)
7ffdb0a08378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<sbyte>(W128 w, ulong cellcount)
7ffdb0a083c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<ushort>(W128 w, ulong cellcount)
7ffdb0a083f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<short>(W128 w, ulong cellcount)
7ffdb0a08408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<uint>(W128 w, ulong cellcount)
7ffdb0a08450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<int>(W128 w, ulong cellcount)
7ffdb0a08480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<ulong>(W128 w, ulong cellcount)
7ffdb0a084b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<long>(W128 w, ulong cellcount)
7ffdb0a084c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<float>(W128 w, ulong cellcount)
7ffdb0a08510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<double>(W128 w, ulong cellcount)
7ffdb0a08588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<sbyte>(W256 w, ulong cellcount)
7ffdb0a08618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<short>(W256 w, ulong cellcount)
7ffdb0a08660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<int>(W256 w, ulong cellcount)
7ffdb0a086a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<long>(W256 w, ulong cellcount)
7ffdb0a086f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<float>(W256 w, ulong cellcount)
7ffdb0a08720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<double>(W256 w, ulong cellcount)
7ffdb0a08768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<byte>(W512 w, ulong cellcount)
7ffdb0a087c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<sbyte>(W512 w, ulong cellcount)
7ffdb0a08828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<ushort>(W512 w, ulong cellcount)
7ffdb0a08888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<short>(W512 w, ulong cellcount)
7ffdb0a088b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<uint>(W512 w, ulong cellcount)
7ffdb0a088e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<int>(W512 w, ulong cellcount)
7ffdb0a08918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<ulong>(W512 w, ulong cellcount)
7ffdb0a08960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<long>(W512 w, ulong cellcount)
7ffdb0a08990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<float>(W512 w, ulong cellcount)
7ffdb0a089c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cellcover<double>(W512 w, ulong cellcount)
7ffdb0a089f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<byte>(MemoryRange src)
7ffdb0a08a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<ushort>(MemoryRange src)
7ffdb0a08a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<uint>(MemoryRange src)
7ffdb0a08ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cells<ulong>(MemoryRange src)
7ffdb0a08ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong mincells<byte>(ulong bc)
7ffdb0a08ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong mincells<ushort>(ulong bc)
7ffdb0a08f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong mincells<uint>(ulong bc)
7ffdb0a08fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong mincells<ulong>(ulong bc)
7ffdb0a08ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort max<ushort>(ReadOnlySpan<ushort> src)
7ffdada60738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt<ushort>(ushort a, ushort b)
7ffdada60a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort and<ushort>(ushort a, ushort b)
7ffdb03bbee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte and<byte>(byte a, byte b)
7ffdb0423b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xors<byte>(byte a, byte offset)
7ffdb0423b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xor<byte>(byte a, byte b)
7ffdb0423b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xors<ushort>(ushort a, byte offset)
7ffdb04288d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xor<ushort>(ushort a, ushort b)
7ffdb04288e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint and<uint>(uint a, uint b)
7ffdb0429218h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xors<uint>(uint a, byte offset)
7ffdb0429230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xor<uint>(uint a, uint b)
7ffdb0429248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong and<ulong>(ulong a, ulong b)
7ffdb04298f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xors<ulong>(ulong a, byte offset)
7ffdb0429908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xor<ulong>(ulong a, ulong b)
7ffdb0429920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte sll<byte>(byte a, byte count)
7ffdb0530e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or<byte>(byte a, byte b)
7ffdb0530eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte sll<sbyte>(sbyte a, byte count)
7ffdb0531338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte or<sbyte>(sbyte a, sbyte b)
7ffdb0531368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort sll<ushort>(ushort a, byte count)
7ffdb05317d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or<ushort>(ushort a, ushort b)
7ffdb05317e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short sll<short>(short a, byte count)
7ffdb0531b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short or<short>(short a, short b)
7ffdb0531b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint sll<uint>(uint a, byte count)
7ffdb0531f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or<uint>(uint a, uint b)
7ffdb0531f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int sll<int>(int a, byte count)
7ffdb0532b80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int or<int>(int a, int b)
7ffdb0532b98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sll<ulong>(ulong a, byte count)
7ffdb0533018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or<ulong>(ulong a, ulong b)
7ffdb0533030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long sll<long>(long a, byte count)
7ffdb05333c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long or<long>(long a, long b)
7ffdb05333d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit odd<uint>(uint a)
7ffdb057ad60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte and<sbyte>(sbyte a, sbyte b)
7ffdb057aeb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short and<short>(short a, short b)
7ffdb057b330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int and<int>(int a, int b)
7ffdb057b510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long and<long>(long a, long b)
7ffdb057b720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte sal<byte>(byte src, byte offset)
7ffdb05a3348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort sal<ushort>(ushort src, byte offset)
7ffdb05a8948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint sal<uint>(uint src, byte offset)
7ffdb05a90f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sal<ulong>(ulong src, byte offset)
7ffdb05a9518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte mul<byte>(byte a, byte b)
7ffdb07094d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte mod<byte>(byte a, byte m)
7ffdb0709530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz<byte>(byte src)
7ffdb0709560h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte srl<byte>(byte a, byte count)
7ffdb07095c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte add<byte>(byte a, byte b)
7ffdb07095f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort mul<ushort>(ushort a, ushort b)
7ffdb07099c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort mod<ushort>(ushort a, ushort m)
7ffdb07099f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz<ushort>(ushort src)
7ffdb0709a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort srl<ushort>(ushort a, byte count)
7ffdb0709a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort add<ushort>(ushort a, ushort b)
7ffdb0709a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint mul<uint>(uint a, uint b)
7ffdb0709c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint mod<uint>(uint a, uint m)
7ffdb0709cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz<uint>(uint src)
7ffdb0709cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint srl<uint>(uint a, byte count)
7ffdb0709cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint add<uint>(uint a, uint b)
7ffdb0709d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong mul<ulong>(ulong a, ulong b)
7ffdb070a400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong mod<ulong>(ulong a, ulong m)
7ffdb070a418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz<ulong>(ulong src)
7ffdb070a430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong srl<ulong>(ulong a, byte count)
7ffdb070a478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong add<ulong>(ulong a, ulong b)
7ffdb070a490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte abs<sbyte>(sbyte src)
7ffdb08a1ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short abs<short>(short src)
7ffdb08a1d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int abs<int>(int src)
7ffdb08a1de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long abs<long>(long src)
7ffdb08a1e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float abs<float>(float src)
7ffdb08a1e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double abs<double>(double src)
7ffdb08a1f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte add<sbyte>(sbyte a, sbyte b)
7ffdb08a1fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short add<short>(short a, short b)
7ffdb08a2118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int add<int>(int a, int b)
7ffdb08a21f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long add<long>(long a, long b)
7ffdb08a22c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte avgz<byte>(byte a, byte b)
7ffdb08a23d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort avgz<ushort>(ushort a, ushort b)
7ffdb08a2418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint avgz<uint>(uint a, uint b)
7ffdb08a2460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong avgz<ulong>(ulong a, ulong b)
7ffdb08a24a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between<byte>(byte src, byte min, byte max)
7ffdb08a2508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between<sbyte>(sbyte src, sbyte min, sbyte max)
7ffdb08a2580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between<ushort>(ushort src, ushort min, ushort max)
7ffdb08a2628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between<short>(short src, short min, short max)
7ffdb08a2670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between<uint>(uint src, uint min, uint max)
7ffdb08a26e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between<int>(int src, int min, int max)
7ffdb08a2748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between<ulong>(ulong src, ulong min, ulong max)
7ffdb08a2808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between<long>(long src, long min, long max)
7ffdb08a2868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between<float>(float src, float min, float max)
7ffdb08a28e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between<double>(double src, double min, double max)
7ffdb08a2988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte cimpl<byte>(byte a, byte b)
7ffdb08a2a00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte cimpl<sbyte>(sbyte a, sbyte b)
7ffdb08a2aa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort cimpl<ushort>(ushort a, ushort b)
7ffdb08a2b38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short cimpl<short>(short a, short b)
7ffdb08a2c28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cimpl<uint>(uint a, uint b)
7ffdb08a2cd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cimpl<int>(int a, int b)
7ffdb08a2d78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cimpl<ulong>(ulong a, ulong b)
7ffdb08a2df0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long cimpl<long>(long a, long b)
7ffdb08a2e68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte clamp<byte>(byte a, byte b)
7ffdb08a2fb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte clamp<sbyte>(sbyte a, sbyte b)
7ffdb08a3000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort clamp<ushort>(ushort a, ushort b)
7ffdb08a3090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short clamp<short>(short a, short b)
7ffdb08a30f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint clamp<uint>(uint a, uint b)
7ffdb08a3168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int clamp<int>(int a, int b)
7ffdb08a31c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong clamp<ulong>(ulong a, ulong b)
7ffdb08a3240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long clamp<long>(long a, long b)
7ffdb08a32a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp<byte>(byte a, byte b)
7ffdb08a3468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp<sbyte>(sbyte a, sbyte b)
7ffdb08a3528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp<ushort>(ushort a, ushort b)
7ffdb08a3600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp<short>(short a, short b)
7ffdb08a36c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp<uint>(uint a, uint b)
7ffdb08a37b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp<int>(int a, int b)
7ffdb08a3840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp<ulong>(ulong a, ulong b)
7ffdb08a3930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp<long>(long a, long b)
7ffdb08a3a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp<float>(float a, float b)
7ffdb08a3b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp<double>(double a, double b)
7ffdb08a3c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte cnonimpl<byte>(byte a, byte b)
7ffdb08a3cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte cnonimpl<sbyte>(sbyte a, sbyte b)
7ffdb08a3dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort cnonimpl<ushort>(ushort a, ushort b)
7ffdb08a3f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short cnonimpl<short>(short a, short b)
7ffdb08a3fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cnonimpl<uint>(uint a, uint b)
7ffdb08a8078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cnonimpl<int>(int a, int b)
7ffdb08a8180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cnonimpl<ulong>(ulong a, ulong b)
7ffdb08a81f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long cnonimpl<long>(long a, long b)
7ffdb08a82a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte false<byte>()
7ffdb08a8390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte false<sbyte>()
7ffdb08a8468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort false<ushort>()
7ffdb08a8498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short false<short>()
7ffdb08a84b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint false<uint>()
7ffdb08a84c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int false<int>()
7ffdb08a8510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong false<ulong>()
7ffdb08a8588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long false<long>()
7ffdb08a85d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte false<byte>(byte a)
7ffdb08a8630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte false<sbyte>(sbyte a)
7ffdb08a8660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort false<ushort>(ushort a)
7ffdb08a8678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short false<short>(short a)
7ffdb08a8690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint false<uint>(uint a)
7ffdb08a86a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int false<int>(int a)
7ffdb08a86c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong false<ulong>(ulong a)
7ffdb08a86d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long false<long>(long a)
7ffdb08a8720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte false<byte>(byte a, byte b, byte c)
7ffdb08a8768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte false<sbyte>(sbyte a, sbyte b, sbyte c)
7ffdb08a87c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort false<ushort>(ushort a, ushort b, ushort c)
7ffdb08a87f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short false<short>(short a, short b, short c)
7ffdb08a8840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint false<uint>(uint a, uint b, uint c)
7ffdb08a88b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int false<int>(int a, int b, int c)
7ffdb08a88d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong false<ulong>(ulong a, ulong b, ulong c)
7ffdb08a8918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long false<long>(long a, long b, long c)
7ffdb08a8978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte true<byte>()
7ffdb08a89f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte true<sbyte>()
7ffdb08a8a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort true<ushort>()
7ffdb08a8ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short true<short>()
7ffdb08a8af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint true<uint>()
7ffdb08a8b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int true<int>()
7ffdb08a8b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong true<ulong>()
7ffdb08a8b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long true<long>()
7ffdb08a8ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte true<byte>(byte a)
7ffdb08a8bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte true<sbyte>(sbyte a)
7ffdb08a8be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort true<ushort>(ushort a)
7ffdb08a8c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short true<short>(short a)
7ffdb08a8c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint true<uint>(uint a)
7ffdb08a8c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int true<int>(int a)
7ffdb08a8c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong true<ulong>(ulong a)
7ffdb08a8ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long true<long>(long a)
7ffdb08a8cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte true<byte>(byte a, byte b)
7ffdb08a8d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte true<sbyte>(sbyte a, sbyte b)
7ffdb08a8d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort true<ushort>(ushort a, ushort b)
7ffdb08a8dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short true<short>(short a, short b)
7ffdb08a8e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint true<uint>(uint a, uint b)
7ffdb08a8e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int true<int>(int a, int b)
7ffdb08a8ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong true<ulong>(ulong a, ulong b)
7ffdb08a8f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long true<long>(long a, long b)
7ffdb08a8f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte false<byte>(byte a, byte b)
7ffdb08a8f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte false<sbyte>(sbyte a, sbyte b)
7ffdb08a8fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort false<ushort>(ushort a, ushort b)
7ffdb08a8fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short false<short>(short a, short b)
7ffdb08a8ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint false<uint>(uint a, uint b)
7ffdb08a9050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int false<int>(int a, int b)
7ffdb08a9068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong false<ulong>(ulong a, ulong b)
7ffdb08a9080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long false<long>(long a, long b)
7ffdb08a90b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte true<byte>(byte a, byte b, byte c)
7ffdb08a90c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte true<sbyte>(sbyte a, sbyte b, sbyte c)
7ffdb08a90f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort true<ushort>(ushort a, ushort b, ushort c)
7ffdb08a91e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short true<short>(short a, short b, short c)
7ffdb08a9230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint true<uint>(uint a, uint b, uint c)
7ffdb08a9290h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int true<int>(int a, int b, int c)
7ffdb08a92c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong true<ulong>(ulong a, ulong b, ulong c)
7ffdb08a9350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long true<long>(long a, long b, long c)
7ffdb08a93b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte dec<byte>(byte a)
7ffdb08a9410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte dec<sbyte>(sbyte a)
7ffdb08a9500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort dec<ushort>(ushort a)
7ffdb08a9668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short dec<short>(short a)
7ffdb08a9758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint dec<uint>(uint a)
7ffdb08a9860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int dec<int>(int a)
7ffdb08a98d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dec<ulong>(ulong a)
7ffdb08a9980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long dec<long>(long a)
7ffdb08a99f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte dec<byte>(ref byte src)
7ffdb08a9aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte dec<sbyte>(ref sbyte src)
7ffdb08a9ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort dec<ushort>(ref ushort src)
7ffdb08a9b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short dec<short>(ref short src)
7ffdb08a9b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint dec<uint>(ref uint src)
7ffdb08a9b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int dec<int>(ref int src)
7ffdb08a9b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong dec<ulong>(ref ulong src)
7ffdb08a9b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long dec<long>(ref long src)
7ffdb08a9ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float dec<float>(ref float src)
7ffdb08a9bd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double dec<double>(ref double src)
7ffdb08a9c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dist<byte>(byte a, byte b)
7ffdb08a9d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dist<sbyte>(sbyte a, sbyte b)
7ffdb08a9da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dist<ushort>(ushort a, ushort b)
7ffdb08a9e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dist<short>(short a, short b)
7ffdb08a9e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dist<uint>(uint a, uint b)
7ffdb08a9ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dist<int>(int a, int b)
7ffdb08a9f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dist<ulong>(ulong a, ulong b)
7ffdb08a9fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dist<long>(long a, long b)
7ffdb08aa028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte div<byte>(byte a, byte b)
7ffdb08aa0b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte div<sbyte>(sbyte a, sbyte b)
7ffdb08aa148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort div<ushort>(ushort a, ushort b)
7ffdb08aa220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short div<short>(short a, short b)
7ffdb08aa298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint div<uint>(uint a, uint b)
7ffdb08aa328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int div<int>(int a, int b)
7ffdb08aa3b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong div<ulong>(ulong a, ulong b)
7ffdb08aa4c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long div<long>(long a, long b)
7ffdb08aa538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float div<float>(float a, float b)
7ffdb08aa700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double div<double>(double a, double b)
7ffdb08aa7c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit divides<byte>(byte a, byte b)
7ffdb08aa8c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit divides<sbyte>(sbyte a, sbyte b)
7ffdb08aa940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit divides<ushort>(ushort a, ushort b)
7ffdb08aaa00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit divides<short>(short a, short b)
7ffdb08aaa78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit divides<uint>(uint a, uint b)
7ffdb08aab20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit divides<int>(int a, int b)
7ffdb08aabf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit divides<ulong>(ulong a, ulong b)
7ffdb08aad00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit divides<long>(long a, long b)
7ffdb08aadf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod<byte>(byte a, byte b, out byte d, out byte m)
7ffdb08aae50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod<sbyte>(sbyte a, sbyte b, out sbyte d, out sbyte m)
7ffdb08aaef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod<ushort>(ushort a, ushort b, out ushort d, out ushort m)
7ffdb08aafa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod<short>(short a, short b, out short d, out short m)
7ffdb08ab030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod<uint>(uint a, uint b, out uint d, out uint m)
7ffdb08ab0c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod<int>(int a, int b, out int d, out int m)
7ffdb08ab138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod<ulong>(ulong a, ulong b, out ulong d, out ulong m)
7ffdb08ab1c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod<long>(long a, long b, out long d, out long m)
7ffdb08ab258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod<float>(float a, float b, out float d, out float m)
7ffdb08ab2e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod<double>(double a, double b, out double d, out double m)
7ffdb08ab8d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte dot<byte>(ReadOnlySpan<byte> a, ReadOnlySpan<byte> b)
7ffdb08ab960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte fma<byte>(byte x, byte y, byte z)
7ffdb08abc90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte dot<sbyte>(ReadOnlySpan<sbyte> a, ReadOnlySpan<sbyte> b)
7ffdb08abdb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte fma<sbyte>(sbyte x, sbyte y, sbyte z)
7ffdb08abdf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort dot<ushort>(ReadOnlySpan<ushort> a, ReadOnlySpan<ushort> b)
7ffdb08abee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort fma<ushort>(ushort x, ushort y, ushort z)
7ffdb08abf18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short dot<short>(ReadOnlySpan<short> a, ReadOnlySpan<short> b)
7ffdb08abfd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short fma<short>(short x, short y, short z)
7ffdb08e0000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint dot<uint>(ReadOnlySpan<uint> a, ReadOnlySpan<uint> b)
7ffdb08e0168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint fma<uint>(uint x, uint y, uint z)
7ffdb08e0180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int dot<int>(ReadOnlySpan<int> a, ReadOnlySpan<int> b)
7ffdb08e01f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int fma<int>(int x, int y, int z)
7ffdb08e0228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dot<ulong>(ReadOnlySpan<ulong> a, ReadOnlySpan<ulong> b)
7ffdb08e0360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong fma<ulong>(ulong x, ulong y, ulong z)
7ffdb08e0378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long dot<long>(ReadOnlySpan<long> a, ReadOnlySpan<long> b)
7ffdb08e0408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long fma<long>(long x, long y, long z)
7ffdb08e0450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float dot<float>(ReadOnlySpan<float> a, ReadOnlySpan<float> b)
7ffdb08e04f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double dot<double>(ReadOnlySpan<double> a, ReadOnlySpan<double> b)
7ffdb08e05d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<byte>(byte a, byte b)
7ffdb08e06a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<sbyte>(sbyte a, sbyte b)
7ffdb08e0720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<ushort>(ushort a, ushort b)
7ffdb08e0858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<short>(short a, short b)
7ffdb08e08e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<uint>(uint a, uint b)
7ffdb08e09c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<int>(int a, int b)
7ffdb08e0a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<ulong>(ulong a, ulong b)
7ffdb08e0ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<long>(long a, long b)
7ffdb08e0b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<float>(float a, float b)
7ffdb08e0c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<double>(double a, double b)
7ffdb08e0cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte eqz<byte>(byte a, byte b)
7ffdb08e0d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte eqz<sbyte>(sbyte a, sbyte b)
7ffdb08e0e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte mul<sbyte>(sbyte a, sbyte b)
7ffdb08e0e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort eqz<ushort>(ushort a, ushort b)
7ffdb08e1038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short eqz<short>(short a, short b)
7ffdb08e1098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short mul<short>(short a, short b)
7ffdb08e10c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint eqz<uint>(uint a, uint b)
7ffdb08e1230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int eqz<int>(int a, int b)
7ffdb08e12a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int mul<int>(int a, int b)
7ffdb08e12c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong eqz<ulong>(ulong a, ulong b)
7ffdb08e1398h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long eqz<long>(long a, long b)
7ffdb08e1440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long mul<long>(long a, long b)
7ffdb08e1470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float eqz<float>(float a, float b)
7ffdb08e15c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float mul<float>(float a, float b)
7ffdb08e1608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double eqz<double>(double a, double b)
7ffdb08e1a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double mul<double>(double a, double b)
7ffdb08e1ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt<byte>(byte a, byte b)
7ffdb08e2250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt<sbyte>(sbyte a, sbyte b)
7ffdb08e2328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt<short>(short a, short b)
7ffdb08e24a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt<uint>(uint a, uint b)
7ffdb08e2568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt<int>(int a, int b)
7ffdb08e2658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt<ulong>(ulong a, ulong b)
7ffdb08e2718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt<long>(long a, long b)
7ffdb08e28b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq<byte>(byte a, byte b)
7ffdb08e2970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq<sbyte>(sbyte a, sbyte b)
7ffdb08e2a48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq<ushort>(ushort a, ushort b)
7ffdb08e2b50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq<short>(short a, short b)
7ffdb08e2be0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq<uint>(uint a, uint b)
7ffdb08e2cb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq<int>(int a, int b)
7ffdb08e2d60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq<ulong>(ulong a, ulong b)
7ffdb08e2e68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq<long>(long a, long b)
7ffdb08e2f70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte gtz<byte>(byte a, byte b)
7ffdb08e3060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte gtz<sbyte>(sbyte a, sbyte b)
7ffdb08e3180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort gtz<ushort>(ushort a, ushort b)
7ffdb08e3288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short gtz<short>(short a, short b)
7ffdb08e3390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint gtz<uint>(uint a, uint b)
7ffdb08e3498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int gtz<int>(int a, int b)
7ffdb08e3528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong gtz<ulong>(ulong a, ulong b)
7ffdb08e35a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long gtz<long>(long a, long b)
7ffdb08e35d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte impl<byte>(byte a, byte b)
7ffdb08e3630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte impl<sbyte>(sbyte a, sbyte b)
7ffdb08e36c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort impl<ushort>(ushort a, ushort b)
7ffdb08e3768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short impl<short>(short a, short b)
7ffdb08e37b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint impl<uint>(uint a, uint b)
7ffdb08e38b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int impl<int>(int a, int b)
7ffdb08e3930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong impl<ulong>(ulong a, ulong b)
7ffdb08e39a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long impl<long>(long a, long b)
7ffdb08e3a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte inc<byte>(byte a)
7ffdb08e3ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte inc<sbyte>(sbyte a)
7ffdb08e3b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort inc<ushort>(ushort a)
7ffdb08e3c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short inc<short>(short a)
7ffdb08e3c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint inc<uint>(uint a)
7ffdb08e3db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int inc<int>(int a)
7ffdb08e3e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong inc<ulong>(ulong a)
7ffdb08e3eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long inc<long>(long a)
7ffdb08e3f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float inc<float>(float a)
7ffdb08e3fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double inc<double>(double a)
7ffdb08e8060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte inc<byte>(ref byte src)
7ffdb08e80a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte inc<sbyte>(ref sbyte src)
7ffdb08e80f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort inc<ushort>(ref ushort src)
7ffdb08e8168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short inc<short>(ref short src)
7ffdb08e81b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint inc<uint>(ref uint src)
7ffdb08e81e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int inc<int>(ref int src)
7ffdb08e81f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong inc<ulong>(ref ulong src)
7ffdb08e8210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long inc<long>(ref long src)
7ffdb08e8240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float inc<float>(ref float src)
7ffdb08e8258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double inc<double>(ref double src)
7ffdb08e8288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit ispow2<byte>(byte src)
7ffdb08e82b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit ispow2<sbyte>(sbyte src)
7ffdb08e8300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit ispow2<ushort>(ushort src)
7ffdb08e8360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit ispow2<short>(short src)
7ffdb08e8390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit ispow2<uint>(uint src)
7ffdb08e83a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit ispow2<int>(int src)
7ffdb08e83d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit ispow2<ulong>(ulong src)
7ffdb08e8408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit ispow2<long>(long src)
7ffdb08e8420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt<byte>(byte a, byte b)
7ffdb08e8528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt<sbyte>(sbyte a, sbyte b)
7ffdb08e8618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt<ushort>(ushort a, ushort b)
7ffdb08e8798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt<short>(short a, short b)
7ffdb08e8858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt<uint>(uint a, uint b)
7ffdb08e8978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt<int>(int a, int b)
7ffdb08e8ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt<ulong>(ulong a, ulong b)
7ffdb08e8bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt<long>(long a, long b)
7ffdb08e8cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt<float>(float a, float b)
7ffdb08e8df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt<double>(double a, double b)
7ffdb08e8eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq<byte>(byte a, byte b)
7ffdb08e8fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq<sbyte>(sbyte a, sbyte b)
7ffdb08e9080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq<ushort>(ushort a, ushort b)
7ffdb08e92a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq<short>(short a, short b)
7ffdb08e92f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq<uint>(uint a, uint b)
7ffdb08e9440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq<int>(int a, int b)
7ffdb08e94d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq<ulong>(ulong a, ulong b)
7ffdb08e9560h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq<long>(long a, long b)
7ffdb08e9680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq<float>(float a, float b)
7ffdb08e9740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq<double>(double a, double b)
7ffdb08e98f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte ltz<byte>(byte a, byte b)
7ffdb08e99c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte ltz<sbyte>(sbyte a, sbyte b)
7ffdb08e9a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort ltz<ushort>(ushort a, ushort b)
7ffdb08e9bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short ltz<short>(short a, short b)
7ffdb08e9c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint ltz<uint>(uint a, uint b)
7ffdb08e9de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int ltz<int>(int a, int b)
7ffdb08e9e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong ltz<ulong>(ulong a, ulong b)
7ffdb08e9e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long ltz<long>(long a, long b)
7ffdb08e9f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte max<byte>(byte a, byte b)
7ffdb08ea028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte max<sbyte>(sbyte a, sbyte b)
7ffdb08ea0b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort max<ushort>(ushort a, ushort b)
7ffdb08ea1c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short max<short>(short a, short b)
7ffdb08ea2f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint max<uint>(uint a, uint b)
7ffdb08ea3a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int max<int>(int a, int b)
7ffdb08ea538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong max<ulong>(ulong a, ulong b)
7ffdb08ea700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long max<long>(long a, long b)
7ffdb08ea808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float max<float>(float a, float b)
7ffdb08ea910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double max<double>(double a, double b)
7ffdb08eab20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte max<byte>(ReadOnlySpan<byte> src)
7ffdb08eac58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte max<sbyte>(ReadOnlySpan<sbyte> src)
7ffdb08ead00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short max<short>(ReadOnlySpan<short> src)
7ffdb08eae98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint max<uint>(ReadOnlySpan<uint> src)
7ffdb08eb090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int max<int>(ReadOnlySpan<int> src)
7ffdb08eb180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong max<ulong>(ReadOnlySpan<ulong> src)
7ffdb08eb2e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long max<long>(ReadOnlySpan<long> src)
7ffdb08eb3d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float max<float>(ReadOnlySpan<float> src)
7ffdb08eb4e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double max<double>(ReadOnlySpan<double> src)
7ffdb08eb708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte min<byte>(byte a, byte b)
7ffdb08eb8a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte min<sbyte>(sbyte a, sbyte b)
7ffdb08eb948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort min<ushort>(ushort a, ushort b)
7ffdb08ebaf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short min<short>(short a, short b)
7ffdb08ebc00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint min<uint>(uint a, uint b)
7ffdb08ebd38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int min<int>(int a, int b)
7ffdb08ebe40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong min<ulong>(ulong a, ulong b)
7ffdb08ebed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long min<long>(long a, long b)
7ffdb08ebf60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float min<float>(float a, float b)
7ffdb09300d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double min<double>(double a, double b)
7ffdb0930138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte min<byte>(ReadOnlySpan<byte> src)
7ffdb09301b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte min<sbyte>(ReadOnlySpan<sbyte> src)
7ffdb0930258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort min<ushort>(ReadOnlySpan<ushort> src)
7ffdb0930300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short min<short>(ReadOnlySpan<short> src)
7ffdb0930348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint min<uint>(ReadOnlySpan<uint> src)
7ffdb09303a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int min<int>(ReadOnlySpan<int> src)
7ffdb09304b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong min<ulong>(ReadOnlySpan<ulong> src)
7ffdb09305a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long min<long>(ReadOnlySpan<long> src)
7ffdb0930618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float min<float>(ReadOnlySpan<float> src)
7ffdb0930648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double min<double>(ReadOnlySpan<double> src)
7ffdb09307f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte mod<sbyte>(sbyte a, sbyte m)
7ffdb0930810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short mod<short>(short a, short m)
7ffdb0930900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int mod<int>(int a, int m)
7ffdb0930978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long mod<long>(long a, long m)
7ffdb0930a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float mod<float>(float a, float m)
7ffdb0930ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double mod<double>(double a, double m)
7ffdb0930b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte modmul<byte>(byte a, byte b, byte m)
7ffdb0930b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte modmul<sbyte>(sbyte a, sbyte b, sbyte m)
7ffdb0930cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort modmul<ushort>(ushort a, ushort b, ushort m)
7ffdb0930eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short modmul<short>(short a, short b, short m)
7ffdb0930f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint modmul<uint>(uint a, uint b, uint m)
7ffdb0931098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int modmul<int>(int a, int b, int m)
7ffdb0931140h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong modmul<ulong>(ulong a, ulong b, ulong m)
7ffdb0931248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long modmul<long>(long a, long b, long m)
7ffdb09312f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float modmul<float>(float a, float b, float m)
7ffdb0931380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double modmul<double>(double a, double b, double m)
7ffdb0931470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nand<byte>(byte a, byte b)
7ffdb0931548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte nand<sbyte>(sbyte a, sbyte b)
7ffdb09315d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort nand<ushort>(ushort a, ushort b)
7ffdb0931668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short nand<short>(short a, short b)
7ffdb09316f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint nand<uint>(uint a, uint b)
7ffdb0931788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int nand<int>(int a, int b)
7ffdb0931830h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong nand<ulong>(ulong a, ulong b)
7ffdb09318c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long nand<long>(long a, long b)
7ffdb0931980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte negate<byte>(byte src)
7ffdb0931a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte negate<sbyte>(sbyte src)
7ffdb0931ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort negate<ushort>(ushort src)
7ffdb0931bd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short negate<short>(short src)
7ffdb0931cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint negate<uint>(uint src)
7ffdb0931e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int negate<int>(int src)
7ffdb0932160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong negate<ulong>(ulong src)
7ffdb0932250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long negate<long>(long src)
7ffdb09322c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float negate<float>(float src)
7ffdb09326d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double negate<double>(double src)
7ffdb0932a18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit negative<byte>(byte src)
7ffdb0932a78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit negative<sbyte>(sbyte src)
7ffdb0932a90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit negative<ushort>(ushort src)
7ffdb0932af0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit negative<short>(short src)
7ffdb0932b08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit negative<uint>(uint src)
7ffdb0932b50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit negative<int>(int src)
7ffdb0932b80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit negative<ulong>(ulong src)
7ffdb0932bb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit negative<long>(long src)
7ffdb0932bf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit negative<float>(float src)
7ffdb0932c40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit negative<double>(double src)
7ffdb0932c88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq<byte>(byte a, byte b)
7ffdb0932cb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq<sbyte>(sbyte a, sbyte b)
7ffdb0932d30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq<ushort>(ushort a, ushort b)
7ffdb0932dc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq<short>(short a, short b)
7ffdb0932e50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq<uint>(uint a, uint b)
7ffdb0932f40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq<int>(int a, int b)
7ffdb0932fd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq<ulong>(ulong a, ulong b)
7ffdb0933078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq<long>(long a, long b)
7ffdb0933108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq<float>(float a, float b)
7ffdb09331c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq<double>(double a, double b)
7ffdb0933258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nonimpl<byte>(byte a, byte b)
7ffdb0933390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte nonimpl<sbyte>(sbyte a, sbyte b)
7ffdb0933420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort nonimpl<ushort>(ushort a, ushort b)
7ffdb09334b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short nonimpl<short>(short a, short b)
7ffdb09335e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint nonimpl<uint>(uint a, uint b)
7ffdb0933648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int nonimpl<int>(int a, int b)
7ffdb09336c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong nonimpl<ulong>(ulong a, ulong b)
7ffdb0933750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long nonimpl<long>(long a, long b)
7ffdb0933840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nonz<byte>(byte src, byte alt)
7ffdb09338e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte nonz<sbyte>(sbyte src, sbyte alt)
7ffdb0933a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort nonz<ushort>(ushort src, ushort alt)
7ffdb0933b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short nonz<short>(short src, short alt)
7ffdb0933c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint nonz<uint>(uint src, uint alt)
7ffdb0933df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int nonz<int>(int src, int alt)
7ffdb0933f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong nonz<ulong>(ulong src, ulong alt)
7ffdb09380c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long nonz<long>(long src, long alt)
7ffdb09381e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float nonz<float>(float src, float alt)
7ffdb09383c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double nonz<double>(double src, double alt)
7ffdb0938468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz<sbyte>(sbyte src)
7ffdb0938558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz<short>(short src)
7ffdb0938618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz<int>(int src)
7ffdb0938720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz<long>(long src)
7ffdb09387e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz<float>(float src)
7ffdb0938870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz<double>(double src)
7ffdb09388d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nor<byte>(byte a, byte b)
7ffdb09389d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte nor<sbyte>(sbyte a, sbyte b)
7ffdb0938a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort nor<ushort>(ushort a, ushort b)
7ffdb0938c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short nor<short>(short a, short b)
7ffdb0938cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint nor<uint>(uint a, uint b)
7ffdb0938d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int nor<int>(int a, int b)
7ffdb0938e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong nor<ulong>(ulong a, ulong b)
7ffdb0938f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long nor<long>(long a, long b)
7ffdb0938fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte not<byte>(byte a)
7ffdb09390c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte not<sbyte>(sbyte a)
7ffdb0939188h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort not<ushort>(ushort a)
7ffdb0939710h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short not<short>(short a)
7ffdb0939800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint not<uint>(uint a)
7ffdb09398d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int not<int>(int a)
7ffdb0939980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong not<ulong>(ulong a)
7ffdb09399f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long not<long>(long a)
7ffdb0939a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or<byte>(byte a, byte b, byte c)
7ffdb0939c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte or<sbyte>(sbyte a, sbyte b, sbyte c)
7ffdb0939cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or<ushort>(ushort a, ushort b, ushort c)
7ffdb0939d58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short or<short>(short a, short b, short c)
7ffdb0939e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or<uint>(uint a, uint b, uint c)
7ffdb0939e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int or<int>(int a, int b, int c)
7ffdb0939f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or<ulong>(ulong a, ulong b, ulong c)
7ffdb0939fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long or<long>(long a, long b, long c)
7ffdb093a058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or<byte>(byte a, byte b, byte c, byte d)
7ffdb093a0d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte or<sbyte>(sbyte a, sbyte b, sbyte c, sbyte d)
7ffdb093a148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or<ushort>(ushort a, ushort b, ushort c, ushort d)
7ffdb093a190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short or<short>(short a, short b, short c, short d)
7ffdb093a1c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or<uint>(uint a, uint b, uint c, uint d)
7ffdb093a1d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int or<int>(int a, int b, int c, int d)
7ffdb093a220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or<ulong>(ulong a, ulong b, ulong c, ulong d)
7ffdb093a238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long or<long>(long a, long b, long c, long d)
7ffdb093a298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or<byte>(byte a, byte b, byte c, byte d, byte e)
7ffdb093a2e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte or<sbyte>(sbyte a, sbyte b, sbyte c, sbyte d, sbyte e)
7ffdb093a340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or<ushort>(ushort a, ushort b, ushort c, ushort d, ushort e)
7ffdb093a3a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short or<short>(short a, short b, short c, short d, short e)
7ffdb093a448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or<uint>(uint a, uint b, uint c, uint d, uint e)
7ffdb093a610h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int or<int>(int a, int b, int c, int d, int e)
7ffdb093a6b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or<ulong>(ulong a, ulong b, ulong c, ulong d, ulong e)
7ffdb093a760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long or<long>(long a, long b, long c, long d, long e)
7ffdb093a808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or<byte>(byte a, byte b, byte c, byte d, byte e, byte f)
7ffdb093a940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte or<sbyte>(sbyte a, sbyte b, sbyte c, sbyte d, sbyte e, sbyte f)
7ffdb093aa30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or<ushort>(ushort a, ushort b, ushort c, ushort d, ushort e, ushort f)
7ffdb093ad30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short or<short>(short a, short b, short c, short d, short e, short f)
7ffdb093af28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or<uint>(uint a, uint b, uint c, uint d, uint e, uint f)
7ffdb093b108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int or<int>(int a, int b, int c, int d, int e, int f)
7ffdb093b210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or<ulong>(ulong a, ulong b, ulong c, ulong d, ulong e, ulong f)
7ffdb0960318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long or<long>(long a, long b, long c, long d, long e, long f)
7ffdb09603c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or<byte>(byte a, byte b, byte c, byte d, byte e, byte f, byte g)
7ffdb09606a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte or<sbyte>(sbyte a, sbyte b, sbyte c, sbyte d, sbyte e, sbyte f, sbyte g)
7ffdb0960a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or<ushort>(ushort a, ushort b, ushort c, ushort d, ushort e, ushort f, ushort g)
7ffdb0961050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short or<short>(short a, short b, short c, short d, short e, short f, short g)
7ffdb0961260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or<uint>(uint a, uint b, uint c, uint d, uint e, uint f, uint g)
7ffdb09619f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int or<int>(int a, int b, int c, int d, int e, int f, int g)
7ffdb0961bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or<ulong>(ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, ulong g)
7ffdb0961d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long or<long>(long a, long b, long c, long d, long e, long f, long g)
7ffdb0961ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or<byte>(byte a, byte b, byte c, byte d, byte e, byte f, byte g, byte h)
7ffdb0962088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte or<sbyte>(sbyte a, sbyte b, sbyte c, sbyte d, sbyte e, sbyte f, sbyte g, sbyte h)
7ffdb0962250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or<ushort>(ushort a, ushort b, ushort c, ushort d, ushort e, ushort f, ushort g, ushort h)
7ffdb09624f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short or<short>(short a, short b, short c, short d, short e, short f, short g, short h)
7ffdb0962658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or<uint>(uint a, uint b, uint c, uint d, uint e, uint f, uint g, uint h)
7ffdb0962970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int or<int>(int a, int b, int c, int d, int e, int f, int g, int h)
7ffdb0962af0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or<ulong>(ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, ulong g, ulong h)
7ffdb0962c88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long or<long>(long a, long b, long c, long d, long e, long f, long g, long h)
7ffdb0962d48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or<byte>(byte a, byte b, byte c, byte d, byte e, byte f, byte g, byte h, byte i)
7ffdb0962f28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte or<sbyte>(sbyte a, sbyte b, sbyte c, sbyte d, sbyte e, sbyte f, sbyte g, sbyte h, sbyte i)
7ffdb0963138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or<ushort>(ushort a, ushort b, ushort c, ushort d, ushort e, ushort f, ushort g, ushort h, ushort i)
7ffdb0963270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short or<short>(short a, short b, short c, short d, short e, short f, short g, short h, short i)
7ffdb0963330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or<uint>(uint a, uint b, uint c, uint d, uint e, uint f, uint g, uint h, uint i)
7ffdb09682a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int or<int>(int a, int b, int c, int d, int e, int f, int g, int h, int i)
7ffdb09685a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or<ulong>(ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, ulong g, ulong h, ulong i)
7ffdb09695c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long or<long>(long a, long b, long c, long d, long e, long f, long g, long h, long i)
7ffdb0969e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or<byte>(byte a, byte b, byte c, byte d, byte e, byte f, byte g, byte h, byte i, byte j)
7ffdb096ad18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte or<sbyte>(sbyte a, sbyte b, sbyte c, sbyte d, sbyte e, sbyte f, sbyte g, sbyte h, sbyte i, sbyte j)
7ffdb096be40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or<ushort>(ushort a, ushort b, ushort c, ushort d, ushort e, ushort f, ushort g, ushort h, ushort i, ushort j)
7ffdb09a1758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short or<short>(short a, short b, short c, short d, short e, short f, short g, short h, short i, short j)
7ffdb09a25e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or<uint>(uint a, uint b, uint c, uint d, uint e, uint f, uint g, uint h, uint i, uint j)
7ffdb09a2df0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int or<int>(int a, int b, int c, int d, int e, int f, int g, int h, int i, int j)
7ffdb09a2ef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or<ulong>(ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, ulong g, ulong h, ulong i, ulong j)
7ffdb09a32d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long or<long>(long a, long b, long c, long d, long e, long f, long g, long h, long i, long j)
7ffdb09a3468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit odd<byte>(byte a)
7ffdb09a3750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit odd<sbyte>(sbyte a)
7ffdb09a37e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit odd<ushort>(ushort a)
7ffdb09a3858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit odd<short>(short a)
7ffdb09a38d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit odd<int>(int a)
7ffdb09a3948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit odd<ulong>(ulong a)
7ffdb09a39c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit odd<long>(long a)
7ffdb09a3a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit even<byte>(byte a)
7ffdb09a3ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit even<sbyte>(sbyte a)
7ffdb09a3b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit even<ushort>(ushort a)
7ffdb09a3bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit even<short>(short a)
7ffdb09a3c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit even<uint>(uint a)
7ffdb09a3c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit even<int>(int a)
7ffdb09a3cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit even<ulong>(ulong a)
7ffdb09a3d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit even<long>(long a)
7ffdb09a3db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive<byte>(byte a)
7ffdb09a3e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive<sbyte>(sbyte a)
7ffdb09a3ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive<ushort>(ushort a)
7ffdb09a3f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive<short>(short a)
7ffdb09a3f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive<uint>(uint a)
7ffdb09a8048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive<int>(int a)
7ffdb09a80a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive<ulong>(ulong a)
7ffdb09a8120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive<long>(long a)
7ffdb09a8198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive<float>(float a)
7ffdb09a8210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive<double>(double a)
7ffdb09a82a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte pow2<byte>(byte i)
7ffdb09a8390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort pow2<ushort>(byte i)
7ffdb09a83d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pow2<uint>(byte i)
7ffdb09a8468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong pow2<ulong>(byte i)
7ffdb09a84b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte pow<byte>(byte b, uint exp)
7ffdb09a84f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte pow<sbyte>(sbyte b, uint exp)
7ffdb09a85d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort pow<ushort>(ushort b, uint exp)
7ffdb09a86a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short pow<short>(short b, uint exp)
7ffdb09a8780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pow<uint>(uint b, uint exp)
7ffdb09a8870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int pow<int>(int b, uint exp)
7ffdb09a8918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong pow<ulong>(ulong b, uint exp)
7ffdb09a89d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long pow<long>(long b, uint exp)
7ffdb09a8a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float pow<float>(float b, uint exp)
7ffdb09a8b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double pow<double>(double b, uint exp)
7ffdb09a8c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte left<byte>(byte a, byte b)
7ffdb09a8c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte left<sbyte>(sbyte a, sbyte b)
7ffdb09a8c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort left<ushort>(ushort a, ushort b)
7ffdb09a8ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short left<short>(short a, short b)
7ffdb09a8cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint left<uint>(uint a, uint b)
7ffdb09a8cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int left<int>(int a, int b)
7ffdb09a8d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong left<ulong>(ulong a, ulong b)
7ffdb09a8d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long left<long>(long a, long b)
7ffdb09a8d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte right<byte>(byte a, byte b)
7ffdb09a8dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte right<sbyte>(sbyte a, sbyte b)
7ffdb09a8de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort right<ushort>(ushort a, ushort b)
7ffdb09a8df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short right<short>(short a, short b)
7ffdb09a8e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint right<uint>(uint a, uint b)
7ffdb09a8e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int right<int>(int a, int b)
7ffdb09a8e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong right<ulong>(ulong a, ulong b)
7ffdb09a8ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long right<long>(long a, long b)
7ffdb09a8ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte lnot<byte>(byte a, byte b)
7ffdb09a8f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte lnot<sbyte>(sbyte a, sbyte b)
7ffdb09a8f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort lnot<ushort>(ushort a, ushort b)
7ffdb09a8fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short lnot<short>(short a, short b)
7ffdb09a9068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint lnot<uint>(uint a, uint b)
7ffdb09a90e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int lnot<int>(int a, int b)
7ffdb09a91a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong lnot<ulong>(ulong a, ulong b)
7ffdb09a9230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long lnot<long>(long a, long b)
7ffdb09a9290h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rnot<byte>(byte a, byte b)
7ffdb09a9320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte rnot<sbyte>(sbyte a, sbyte b)
7ffdb09a93b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rnot<ushort>(ushort a, ushort b)
7ffdb09a9470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short rnot<short>(short a, short b)
7ffdb09a94e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rnot<uint>(uint a, uint b)
7ffdb09a9548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int rnot<int>(int a, int b)
7ffdb09a95f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rnot<ulong>(ulong a, ulong b)
7ffdb09a96b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long rnot<long>(long a, long b)
7ffdb09a96f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte identity<byte>(byte a)
7ffdb09a9770h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte identity<sbyte>(sbyte a)
7ffdb09a97b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort identity<ushort>(ushort a)
7ffdb09a9818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short identity<short>(short a)
7ffdb09a9848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint identity<uint>(uint a)
7ffdb09a9860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int identity<int>(int a)
7ffdb09a9890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong identity<ulong>(ulong a)
7ffdb09a98d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long identity<long>(long a)
7ffdb09a9950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte recip<byte>(byte value)
7ffdb09a9968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte recip<sbyte>(sbyte value)
7ffdb09a9ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort recip<ushort>(ushort value)
7ffdb09a9cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short recip<short>(short value)
7ffdb09a9e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint recip<uint>(uint value)
7ffdb09a9fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int recip<int>(int value)
7ffdb09aa100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong recip<ulong>(ulong value)
7ffdb09aa2c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long recip<long>(long value)
7ffdb09aa430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float recip<float>(float value)
7ffdb09aa628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double recip<double>(double value)
7ffdb09aa8c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rotl<byte>(byte src, byte offset)
7ffdb09aaa60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rotl<ushort>(ushort src, byte offset)
7ffdb09aaaf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rotl<uint>(uint src, byte offset)
7ffdb09aab68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rotl<ulong>(ulong src, byte offset)
7ffdb09aabe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rotr<byte>(byte src, byte offset)
7ffdb09aac58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rotr<ushort>(ushort src, byte offset)
7ffdb09aacb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rotr<uint>(uint src, byte offset)
7ffdb09aad30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rotr<ulong>(ulong src, byte offset)
7ffdb09aada8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte sal<sbyte>(sbyte src, byte offset)
7ffdb09aae80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short sal<short>(short src, byte offset)
7ffdb09aafa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int sal<int>(int src, byte offset)
7ffdb09ab450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long sal<long>(long src, byte offset)
7ffdb09ab858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte sra<byte>(byte src, byte offset)
7ffdb09ab900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte sra<sbyte>(sbyte src, byte offset)
7ffdb09abd38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort sra<ushort>(ushort src, byte offset)
7ffdb09abe58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short sra<short>(short src, byte offset)
7ffdb09abf00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint sra<uint>(uint src, byte offset)
7ffdb09abf90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int sra<int>(int src, byte offset)
7ffdb09d03c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sra<ulong>(ulong src, byte offset)
7ffdb09d04b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long sra<long>(long src, byte offset)
7ffdb09d0558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte select<byte>(byte a, byte b, byte c)
7ffdb09d0618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte select<sbyte>(sbyte a, sbyte b, sbyte c)
7ffdb09d0a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort select<ushort>(ushort a, ushort b, ushort c)
7ffdb09d0b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short select<short>(short a, short b, short c)
7ffdb09d0fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint select<uint>(uint a, uint b, uint c)
7ffdb09d1410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int select<int>(int a, int b, int c)
7ffdb09d1470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong select<ulong>(ulong a, ulong b, ulong c)
7ffdb09d1878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long select<long>(long a, long b, long c)
7ffdb09d18d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte square<byte>(byte a)
7ffdb09d27c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte square<sbyte>(sbyte a)
7ffdb09d2898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort square<ushort>(ushort a)
7ffdb09d2940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short square<short>(short a)
7ffdb09d2d90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint square<uint>(uint a)
7ffdb09d2e20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int square<int>(int a)
7ffdb09d2e98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong square<ulong>(ulong a)
7ffdb09d2f88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long square<long>(long a)
7ffdb09d33c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float square<float>(float a)
7ffdb09d3450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double square<double>(double a)
7ffdb09d34f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte srl<sbyte>(sbyte a, byte count)
7ffdb09d3948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short srl<short>(short a, byte count)
7ffdb09d3a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int srl<int>(int a, byte count)
7ffdb09d3ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long srl<long>(long a, byte count)
7ffdb09d3fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void steps<byte>(byte first, byte step, int count, ref byte dst)
7ffdb09d8420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void steps<sbyte>(sbyte first, sbyte step, int count, ref sbyte dst)
7ffdb09d84f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void steps<ushort>(ushort first, ushort step, int count, ref ushort dst)
7ffdb09d8948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void steps<short>(short first, short step, int count, ref short dst)
7ffdb09d89a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void steps<uint>(uint first, uint step, int count, ref uint dst)
7ffdb09d8a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void steps<int>(int first, int step, int count, ref int dst)
7ffdb09d8a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void steps<ulong>(ulong first, ulong step, int count, ref ulong dst)
7ffdb09d8ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void steps<long>(long first, long step, int count, ref long dst)
7ffdb09d8b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte steps<byte>(byte x0, byte x1, byte step)
7ffdb09d8b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte sub<byte>(byte a, byte b)
7ffdb09d8ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte steps<sbyte>(sbyte x0, sbyte x1, sbyte step)
7ffdb09d8ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte sub<sbyte>(sbyte a, sbyte b)
7ffdb09d8cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort steps<ushort>(ushort x0, ushort x1, ushort step)
7ffdb09d8db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort sub<ushort>(ushort a, ushort b)
7ffdb09d8dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short steps<short>(short x0, short x1, short step)
7ffdb09d8e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short sub<short>(short a, short b)
7ffdb09d8e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint steps<uint>(uint x0, uint x1, uint step)
7ffdb09d8f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint sub<uint>(uint a, uint b)
7ffdb09d8f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int steps<int>(int x0, int x1, int step)
7ffdb09d9080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int sub<int>(int a, int b)
7ffdb09d9098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong steps<ulong>(ulong x0, ulong x1, ulong step)
7ffdb09d91d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sub<ulong>(ulong a, ulong b)
7ffdb09d91e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long steps<long>(long x0, long x1, long step)
7ffdb09d92c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long sub<long>(long a, long b)
7ffdb09d92d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float sub<float>(float a, float b)
7ffdb09d9818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double sub<double>(double a, double b)
7ffdb09d9890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within<byte>(byte a, byte b, byte delta)
7ffdb09d9998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within<sbyte>(sbyte a, sbyte b, sbyte delta)
7ffdb09d9a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within<ushort>(ushort a, ushort b, ushort delta)
7ffdb09d9e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within<short>(short a, short b, short delta)
7ffdb09d9f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within<uint>(uint a, uint b, uint delta)
7ffdb09da460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within<int>(int a, int b, int delta)
7ffdb09da910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within<ulong>(ulong a, ulong b, ulong delta)
7ffdb09da9e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within<long>(long a, long b, long delta)
7ffdb09daaf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within<float>(float a, float b, float delta)
7ffdb09dac40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within<double>(double a, double b, double delta)
7ffdb09dad48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xnor<byte>(byte a, byte b)
7ffdb09dae38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte xnor<sbyte>(sbyte a, sbyte b)
7ffdb09daf28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xnor<ushort>(ushort a, ushort b)
7ffdb09db048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short xnor<short>(short a, short b)
7ffdb09db2a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xnor<uint>(uint a, uint b)
7ffdb09db360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int xnor<int>(int a, int b)
7ffdb09db3d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xnor<ulong>(ulong a, ulong b)
7ffdb09db4f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long xnor<long>(long a, long b)
7ffdb09db570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte xor<sbyte>(sbyte a, sbyte b)
7ffdb09db660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short xor<short>(short a, short b)
7ffdb09db780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int xor<int>(int a, int b)
7ffdb09db840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long xor<long>(long a, long b)
7ffdb09db960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xornot<byte>(byte a, byte b)
7ffdb09dba68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte xornot<sbyte>(sbyte a, sbyte b)
7ffdb09dbb28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xornot<ushort>(ushort a, ushort b)
7ffdb09dbc48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short xornot<short>(short a, short b)
7ffdb09dbca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xornot<uint>(uint a, uint b)
7ffdb09dbd98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int xornot<int>(int a, int b)
7ffdb09dbe28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xornot<ulong>(ulong a, ulong b)
7ffdb09dbee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long xornot<long>(long a, long b)
7ffdb09dbf60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte xors<sbyte>(sbyte a, byte offset)
7ffdb0a00018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short xors<short>(short a, byte offset)
7ffdb0a002a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int xors<int>(int a, byte offset)
7ffdb0a003c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long xors<long>(long a, byte offset)
7ffdb0a004c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xorsl<byte>(byte a, byte offset)
7ffdb0a00540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xorsl<ushort>(ushort a, byte offset)
7ffdb0a00660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xorsl<uint>(uint a, byte offset)
7ffdb0a00720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xorsl<ulong>(ulong a, byte offset)
7ffdb0a00828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xorsr<byte>(byte a, byte offset)
7ffdb0a008d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xorsr<ushort>(ushort a, byte offset)
7ffdb0a009d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xorsr<uint>(uint a, byte offset)
7ffdb0a00a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xorsr<ulong>(ulong a, byte offset)
7ffdb0a00ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float add<float>(float a, float b)
7ffdb07db198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double add<double>(double a, double b)
7ffdb07db240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float sub<float>(float a, float b)
7ffdb07db2a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double sub<double>(double a, double b)
7ffdb07db318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float mul<float>(float lhs, float rhs)
7ffdb07db3a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double mul<double>(double lhs, double rhs)
7ffdb07db450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float dec<float>(float src)
7ffdb07db4b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double dec<double>(double src)
7ffdb07db510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float inc<float>(float src)
7ffdb07db5a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double inc<double>(double src)
7ffdb07db648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float negate<float>(float lhs)
7ffdb07db690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double negate<double>(double lhs)
7ffdb07db6f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float floor<float>(float src)
7ffdb07db768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double floor<double>(double src)
7ffdb07db7f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float abs<float>(float src)
7ffdb07db840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double abs<double>(double src)
7ffdb07db888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<float> divmod<float>(float a, float b)
7ffdb07db8d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<double> divmod<double>(double a, double b)
7ffdb07dbc90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float modmul<float>(float a, float b, float m)
7ffdb07dbcc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double modmul<double>(double a, double b, double m)
7ffdb07dbd08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float mod<float>(float a, float b)
7ffdb07dbd50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double mod<double>(double a, double b)
7ffdb07dbd98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float ceil<float>(float src)
7ffdb07dbde0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double ceil<double>(double src)
7ffdb07dbe28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float div<float>(float a, float b)
7ffdb07dbe70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double div<double>(double a, double b)
7ffdb07dbeb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool divides<float>(float a, float b)
7ffdb07dbf00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool divides<double>(double a, double b)
7ffdb07dbf30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float fma<float>(float x, float y, float z)
7ffdb07dbf60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double fma<double>(double x, double y, double z)
7ffdb07dbfa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float square<float>(float src)
7ffdb08a0000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double square<double>(double src)
7ffdb08a0048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<float> ceil<float>(ReadOnlySpan<float> src, Span<float> dst)
7ffdb08a0090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<double> ceil<double>(ReadOnlySpan<double> src, Span<double> dst)
7ffdb08a0180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<float> ceil<float>(Span<float> src)
7ffdb08a01f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<double> ceil<double>(Span<double> src)
7ffdb08a02d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz<float>(float a)
7ffdb08a0360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz<double>(double a)
7ffdb08a03a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp<float>(float a, float b)
7ffdb08a03d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp<double>(double a, double b)
7ffdb08a0420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<float>(float a, float b)
7ffdb08a0468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<double>(double a, double b)
7ffdb08a04b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq<float>(float a, float b)
7ffdb08a04e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq<double>(double a, double b)
7ffdb08a0528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt<float>(float lhs, float rhs)
7ffdb08a0558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt<double>(double lhs, double rhs)
7ffdb08a05a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq<float>(float lhs, float rhs)
7ffdb08a05e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq<double>(double lhs, double rhs)
7ffdb08a0618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt<float>(float a, float b)
7ffdb08a0648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt<double>(double a, double b)
7ffdb08a0678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq<float>(float a, float b)
7ffdb08a06c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq<double>(double a, double b)
7ffdb08a06f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float min<float>(float a, float b)
7ffdb08a0720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double min<double>(double a, double b)
7ffdb08a0780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float max<float>(float a, float b)
7ffdb08a07c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double max<double>(double a, double b)
7ffdb08a0828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within<float>(float a, float b, float delta)
7ffdb08a0870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within<double>(double a, double b, double delta)
7ffdb08a08a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between<float>(float x, float a, float b)
7ffdb08a08e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between<double>(double x, double a, double b)
7ffdb08a0948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<float> floor<float>(ReadOnlySpan<float> src, Span<float> dst)
7ffdb08a0978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<double> floor<double>(ReadOnlySpan<double> src, Span<double> dst)
7ffdb08a0a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<float> floor<float>(Span<float> src)
7ffdb08a0ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<double> floor<double>(Span<double> src)
7ffdb08a0b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<float> floor<float>(ReadOnlySpan<float> src)
7ffdb08a0bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<double> floor<double>(ReadOnlySpan<double> src)
7ffdb08a0cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<float> round<float>(ReadOnlySpan<float> src, int scale, Span<float> dst)
7ffdb08a0d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<double> round<double>(ReadOnlySpan<double> src, int scale, Span<double> dst)
7ffdb08a0e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float pow<float>(float b, uint exp)
7ffdb08a0f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double pow<double>(double b, uint exp)
7ffdb08a0f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float sin<float>(float src)
7ffdb08a0ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double sin<double>(double src)
7ffdb08a1068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float sqrt<float>(float src)
7ffdb08a10b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double sqrt<double>(double src)
7ffdb08a1110h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<float> sqrt<float>(Span<float> src)
7ffdb08a11b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<double> sqrt<double>(Span<double> src)
7ffdb08a1290h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float cos<float>(float src)
7ffdb08a1338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double cos<double>(double src)
7ffdb08a1398h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float tan<float>(float src)
7ffdb08a1440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double tan<double>(double src)
7ffdb08a1488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float sinh<float>(float src)
7ffdb08a14d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double sinh<double>(double src)
7ffdb08a1548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float cosh<float>(float src)
7ffdb08a15d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double cosh<double>(double src)
7ffdb08a1620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float tanh<float>(float src)
7ffdb08a1668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double tanh<double>(double src)
7ffdb08a16e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float asin<float>(float src)
7ffdb08a1770h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double asin<double>(double src)
7ffdb08a17b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float acos<float>(float src)
7ffdb08a1800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double acos<double>(double src)
7ffdb08a1890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float atan<float>(float src)
7ffdb08a1908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double atan<double>(double src)
7ffdb08a1950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float asinh<float>(float src)
7ffdb08a1998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double asinh<double>(double src)
7ffdb08a1a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float acosh<float>(float src)
7ffdb08a1ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double acosh<double>(double src)
7ffdb08a1b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float atanh<float>(float src)
7ffdb08a1b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double atanh<double>(double src)
7ffdb08a1bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float dec(float src)
7ffdaea632b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double dec(double src)
7ffdaea632d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float inc(float src)
7ffdaea632e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double inc(double src)
7ffdaea63300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float negate(float src)
7ffdaea63318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double negate(double src)
7ffdaea63330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float add(float a, float b)
7ffdaea63348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double add(double a, double b)
7ffdaea63360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float sub(float a, float b)
7ffdaea63378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double sub(double a, double b)
7ffdaea63390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float mul(float a, float b)
7ffdaea633a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double mul(double a, double b)
7ffdaea633c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float div(float a, float b)
7ffdaea633d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double div(double a, double b)
7ffdaea633f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float mod(float a, float b)
7ffdaea63408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double mod(double a, double b)
7ffdaea63420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float modmul(float a, float b, float m)
7ffdaea63438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double modmul(double a, double b, double m)
7ffdaea63450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<float> divmod(float a, float b)
7ffdaea63468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<double> divmod(double a, double b)
7ffdaea63480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float ceil(float src)
7ffdaea63498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double ceil(double src)
7ffdaea634b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float floor(float src)
7ffdaea634c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double floor(double src)
7ffdaea634e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float clamp(float src, float max)
7ffdaea634f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double clamp(double src, double max)
7ffdaea63510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float dist(float a, float b)
7ffdaea63528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double dist(double a, double b)
7ffdaea63540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool divides(float a, float b)
7ffdaea63558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool divides(double a, double b)
7ffdaea63570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float fma(float x, float y, float z)
7ffdaea63588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double fma(double x, double y, double z)
7ffdaea635a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float fmod(float a, float b)
7ffdaea635b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double fmod(double a, double b)
7ffdaea635d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float round(float src, int scale)
7ffdaea635e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double round(double src, int scale)
7ffdaea63600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Sign sign(float src)
7ffdaea63618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Sign sign(double src)
7ffdaea63630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float square(float src)
7ffdaea63648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double square(double src)
7ffdaea63660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float sqrt(float src)
7ffdaea63678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double sqrt(double src)
7ffdaea63690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float abs(float a)
7ffdaea636a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double abs(double a)
7ffdaea636c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive(float a)
7ffdaea63708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive(double a)
7ffdaea63720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit negative(float x)
7ffdaea63738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit negative(double x)
7ffdaea63750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp(float a, float b)
7ffdaea63768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp(double a, double b)
7ffdaea63780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq(float a, float b)
7ffdaea63798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq(double a, double b)
7ffdaea637b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq(float a, float b)
7ffdaea637c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq(double a, double b)
7ffdaea637e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt(float a, float b)
7ffdaea637f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt(double a, double b)
7ffdaea63810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq(float a, float b)
7ffdaea63828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq(double a, double b)
7ffdaea63840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt(float lhs, float rhs)
7ffdaea63858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt(double lhs, double rhs)
7ffdaea63870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq(float lhs, float rhs)
7ffdaea63888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq(double lhs, double rhs)
7ffdaea638a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz(float src)
7ffdaea638b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz(double src)
7ffdaea638d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float nonz(float src, float alt)
7ffdaea638e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double nonz(double src, double alt)
7ffdaea63900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float max(float a, float b)
7ffdaea63918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double max(double a, double b)
7ffdaea63930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float min(float a, float b)
7ffdaea63948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double min(double a, double b)
7ffdaea63960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double width(float lhs, float rhs)
7ffdaea63978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double width(double lhs, double rhs)
7ffdaea63990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within(float a, float b, float delta)
7ffdaea639a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within(double a, double b, double delta)
7ffdaea639c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between(float x, float a, float b)
7ffdaea639d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between(double x, double a, double b)
7ffdaea639f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit fcmp(float x, float y, FpCmpMode mode)
7ffdaea63a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit fcmp(double x, double y, FpCmpMode mode)
7ffdaea63a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float cbrt(float src)
7ffdaea63a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double cbrt(double src)
7ffdaea63a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float exp(float pow)
7ffdaea63a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double exp(double pow)
7ffdaea63a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float pow(float src, float exp)
7ffdaea63a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double pow(double src, double exp)
7ffdaea63ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float relerr(float lhs, float rhs)
7ffdaea63ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double relerr(double lhs, double rhs)
7ffdaea63ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double fcsum(in double src, ref double delta, ref double total)
7ffdaea63af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float gcd(float a, float b)
7ffdaea63b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double gcd(double a, double b)
7ffdaea63b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float log2(float src)
7ffdaea63b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double log2(double src)
7ffdaea63b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float ln(float src)
7ffdaea63b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double ln(double src)
7ffdaea63b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float log(float src, float b)
7ffdaea63ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double log(double src, double b)
7ffdaea63bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float sin(float x)
7ffdaea63bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double sin(double x)
7ffdaea63be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float cos(float x)
7ffdaea63c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double cos(double x)
7ffdaea63c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float tan(float x)
7ffdaea63c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double tan(double x)
7ffdaea63c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float asin(float x)
7ffdaea63c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double asin(double x)
7ffdaea63c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float acos(float x)
7ffdaea63c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double acos(double x)
7ffdaea63ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float atan(float x)
7ffdaea63cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double atan(double x)
7ffdaea63cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float sinh(float x)
7ffdaea63cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double sinh(double x)
7ffdaea63d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float cosh(float x)
7ffdaea63d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double cosh(double x)
7ffdaea63d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float tanh(float x)
7ffdaea63d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double tanh(double x)
7ffdaea63d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float asinh(float x)
7ffdaea63d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double asinh(double x)
7ffdaea63d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float acosh(float x)
7ffdaea63db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double acosh(double x)
7ffdaea63dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float atanh(float x)
7ffdaea63de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double atanh(double x)
7ffdaea63df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte abs(sbyte a)
7ffdada62598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short abs(short a)
7ffdada625b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int abs(int a)
7ffdada625c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long abs(long a)
7ffdada625e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float abs(float a)
7ffdada625f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double abs(double a)
7ffdada62610h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort adc(byte a, byte b, bit cin, out bit cout)
7ffdada62628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort adc(ushort a, ushort b, bit cin, out bit cout)
7ffdada62640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint adc(uint a, uint b, bit cin, out bit cout)
7ffdada62658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong adc(ulong a, ulong b, bit cin, out bit cout)
7ffdada62670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte add(ref sbyte a, sbyte b)
7ffdada62688h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte add(ref byte a, byte b)
7ffdada626a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short add(ref short a, short b)
7ffdada626b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort add(ref ushort a, ushort b)
7ffdada626d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int add(ref int a, int b)
7ffdada626e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint add(ref uint a, uint b)
7ffdada62700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long add(ref long a, long b)
7ffdada62718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong add(ref ulong a, ulong b)
7ffdada62730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float add(ref float a, float b)
7ffdada62748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double add(ref double a, double b)
7ffdada62760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte add(sbyte a, sbyte b)
7ffdada62778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte add(byte a, byte b)
7ffdada62790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short add(short a, short b)
7ffdada627a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort add(ushort a, ushort b)
7ffdada627c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int add(int a, int b)
7ffdada627d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint add(uint a, uint b)
7ffdada627f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long add(long a, long b)
7ffdada62808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong add(ulong a, ulong b)
7ffdada62820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float add(float a, float b)
7ffdada62838h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double add(double a, double b)
7ffdada62850h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte avg(ReadOnlySpan<sbyte> src, bool checked)
7ffdada62868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte avg(ReadOnlySpan<byte> src, bool checked)
7ffdada62880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short avg(ReadOnlySpan<short> src, bool checked)
7ffdada62898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort avg(ReadOnlySpan<ushort> src, bool checked)
7ffdada628b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int avg(ReadOnlySpan<int> src, bool checked)
7ffdada628c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint avg(ReadOnlySpan<uint> src, bool checked)
7ffdada628e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long avg(ReadOnlySpan<long> src, bool checked)
7ffdada628f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong avg(ReadOnlySpan<ulong> src, bool checked)
7ffdada62910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte avg(ReadOnlySpan<sbyte> src)
7ffdada62928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte avg(ReadOnlySpan<byte> src)
7ffdada62940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short avg(ReadOnlySpan<short> src)
7ffdada62958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort avg(ReadOnlySpan<ushort> src)
7ffdada62970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int avg(ReadOnlySpan<int> src)
7ffdada62988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint avg(ReadOnlySpan<uint> src)
7ffdada629a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long avg(ReadOnlySpan<long> src)
7ffdada629b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong avg(ReadOnlySpan<ulong> src)
7ffdada629d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float avg(ReadOnlySpan<float> src, bool checked)
7ffdada629e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double avg(ReadOnlySpan<double> src, bool checked)
7ffdada62a00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float avg(ReadOnlySpan<float> src)
7ffdada62a18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double avg(ReadOnlySpan<double> src)
7ffdada62a30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte avg_unchecked(ReadOnlySpan<sbyte> src)
7ffdada62a48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte avg_unchecked(ReadOnlySpan<byte> src)
7ffdada62a60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short avg_unchecked(ReadOnlySpan<short> src)
7ffdada62a78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort avg_unchecked(ReadOnlySpan<ushort> src)
7ffdada62a90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int avg_unchecked(ReadOnlySpan<int> src)
7ffdada62aa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint avg_unchecked(ReadOnlySpan<uint> src)
7ffdada62ac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long avg_unchecked(ReadOnlySpan<long> src)
7ffdada62ad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong avg_unchecked(ReadOnlySpan<ulong> src)
7ffdada62af0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte avg_checked(ReadOnlySpan<sbyte> src)
7ffdada62b08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte avg_checked(ReadOnlySpan<byte> src)
7ffdada62b20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short avg_checked(ReadOnlySpan<short> src)
7ffdada62b38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort avg_checked(ReadOnlySpan<ushort> src)
7ffdada62b50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int avg_checked(ReadOnlySpan<int> src)
7ffdada62b68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint avg_checked(ReadOnlySpan<uint> src)
7ffdada62b80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long avg_checked(ReadOnlySpan<long> src)
7ffdada62b98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong avg_checked(ReadOnlySpan<ulong> src)
7ffdada62bb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float avg_checked(ReadOnlySpan<float> src)
7ffdada62bc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double avg_checked(ReadOnlySpan<double> src)
7ffdada62be0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float avg_unchecked(ReadOnlySpan<float> src)
7ffdada62bf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double avg_unchecked(ReadOnlySpan<double> src)
7ffdada62c10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte avgi(byte a, byte b)
7ffdada62c28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort avgi(ushort a, ushort b)
7ffdada62c40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint avgi(uint a, uint b)
7ffdada62c58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong avgi(ulong a, ulong b)
7ffdada62c70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte avgz(byte a, byte b)
7ffdada62c88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort avgz(ushort a, ushort b)
7ffdada62ca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint avgz(uint a, uint b)
7ffdada62cb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong avgz(ulong a, ulong b)
7ffdada62cd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float ceil(float src)
7ffdada62ce8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double ceil(double src)
7ffdada62d00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte clamp(sbyte src, sbyte max)
7ffdada62d18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte clamp(byte src, byte max)
7ffdada62d30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short clamp(short src, short max)
7ffdada62d48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort clamp(ushort src, ushort max)
7ffdada62d60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int clamp(int src, int max)
7ffdada62d78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint clamp(uint src, uint max)
7ffdada62d90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long clamp(long src, long max)
7ffdada62da8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong clamp(ulong src, ulong max)
7ffdada62dc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint coalesce(uint a0, uint a1)
7ffdada62dd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint coalesce(uint a0, uint a1, uint a2)
7ffdada62df0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint coalesce(uint a0, uint a1, uint a2, uint a3)
7ffdada62e08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint coalesce(uint a0, uint a1, uint a2, uint a3, uint a4)
7ffdada62e20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint coalesce(uint a0, uint a1, uint a2, uint a3, uint a4, uint a5)
7ffdada62e38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint contract(uint src, uint max)
7ffdada62e50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong contract(ulong src, ulong max)
7ffdada62e68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte dec(sbyte src)
7ffdada62e80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte dec(byte src)
7ffdada62e98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short dec(short src)
7ffdada62eb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort dec(ushort src)
7ffdada62ec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int dec(int src)
7ffdada62ee0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint dec(uint src)
7ffdada62ef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long dec(long src)
7ffdada62f10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dec(ulong src)
7ffdada62f28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float dec(float src)
7ffdada62f40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double dec(double src)
7ffdada62f58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte dec(ref sbyte io)
7ffdada62f70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte dec(ref byte io)
7ffdada62f88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short dec(ref short io)
7ffdada62fa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort dec(ref ushort io)
7ffdada62fb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int dec(ref int io)
7ffdada62fd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint dec(ref uint io)
7ffdada62fe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long dec(ref long io)
7ffdada63000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong dec(ref ulong io)
7ffdada63018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float dec(ref float io)
7ffdada63030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double dec(ref double io)
7ffdada63048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dist(byte a, byte b)
7ffdada63060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dist(sbyte a, sbyte b)
7ffdada63078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dist(short a, short b)
7ffdada63090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dist(ushort a, ushort b)
7ffdada630a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dist(int a, int b)
7ffdada630c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dist(uint a, uint b)
7ffdada630d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dist(long a, long b)
7ffdada630f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dist(ulong a, ulong b)
7ffdada63108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte div(sbyte a, sbyte b)
7ffdada63120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte div(byte a, byte b)
7ffdada63138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short div(short a, short b)
7ffdada63150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort div(ushort a, ushort b)
7ffdada63168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int div(int a, int b)
7ffdada63180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint div(uint a, uint b)
7ffdada63198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long div(long a, long b)
7ffdada631b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong div(ulong a, ulong b)
7ffdada631c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float div(float a, float b)
7ffdada631e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double div(double a, double b)
7ffdada631f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit divides(sbyte a, sbyte b)
7ffdada63210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit divides(byte a, byte b)
7ffdada63228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit divides(short a, short b)
7ffdada63240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit divides(ushort a, ushort b)
7ffdada63258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit divides(int a, int b)
7ffdada63270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit divides(uint a, uint b)
7ffdada63288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit divides(long a, long b)
7ffdada632a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit divides(ulong a, ulong b)
7ffdada632b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<sbyte> divmod(sbyte a, sbyte b)
7ffdada632d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<byte> divmod(byte a, byte b)
7ffdada632e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<short> divmod(short a, short b)
7ffdada63300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<ushort> divmod(ushort a, ushort b)
7ffdada63318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<int> divmod(int a, int b)
7ffdada63330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<uint> divmod(uint a, uint b)
7ffdada63348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<long> divmod(long a, long b)
7ffdada63360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<ulong> divmod(ulong a, ulong b)
7ffdada63378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod(byte a, byte b, out byte d, out byte m)
7ffdada63390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod(sbyte a, sbyte b, out sbyte d, out sbyte m)
7ffdada633a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod(ushort a, ushort b, out ushort d, out ushort m)
7ffdada633c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod(short a, short b, out short d, out short m)
7ffdada633d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod(int a, int b, out int d, out int m)
7ffdada633f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod(long a, long b, out long d, out long m)
7ffdada63408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod(uint a, uint b, out uint d, out uint m)
7ffdada63420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod(ulong a, ulong b, out ulong d, out ulong m)
7ffdada63438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void divmod(float a, float b, out float d, out float m)
7ffdada63450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte fma(sbyte x, sbyte y, sbyte z)
7ffdada63468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte fma(byte x, byte y, byte z)
7ffdada63480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short fma(short x, short y, short z)
7ffdada63498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort fma(ushort x, ushort y, ushort z)
7ffdada634b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int fma(int x, int y, int z)
7ffdada634c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint fma(uint x, uint y, uint z)
7ffdada634e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long fma(long x, long y, long z)
7ffdada634f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong fma(ulong x, ulong y, ulong z)
7ffdada63510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float fma(float x, float y, float z)
7ffdada63528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double fma(double x, double y, double z)
7ffdada63540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte gcd(sbyte a, sbyte b)
7ffdada63558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte gcd(byte a, byte b)
7ffdada63570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short gcd(short a, short b)
7ffdada63588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort gcd(ushort a, ushort b)
7ffdada635a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int gcd(int a, int b)
7ffdada635b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint gcd(uint a, uint b)
7ffdada635d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long gcd(long a, long b)
7ffdada635e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong gcd(ulong a, ulong b)
7ffdada63600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint gcdbin(uint u, uint v)
7ffdada63618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong gcdbin(ulong u, ulong v)
7ffdada63630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte inc(sbyte src)
7ffdada63678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte inc(byte src)
7ffdada63690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short inc(short src)
7ffdada636a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort inc(ushort src)
7ffdada636c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int inc(int src)
7ffdada636d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint inc(uint src)
7ffdada636f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long inc(long src)
7ffdada63708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong inc(ulong src)
7ffdada63720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float inc(float src)
7ffdada63738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double inc(double src)
7ffdada63750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte inc(ref sbyte io)
7ffdada63768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte inc(ref byte io)
7ffdada63780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short inc(ref short io)
7ffdada63798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort inc(ref ushort io)
7ffdada637b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int inc(ref int io)
7ffdada637c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint inc(ref uint io)
7ffdada637e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long inc(ref long io)
7ffdada637f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong inc(ref ulong io)
7ffdada63810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float inc(ref float io)
7ffdada63828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double inc(ref double io)
7ffdada63840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool ispow2(sbyte x)
7ffdada63858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool ispow2(byte x)
7ffdada63870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool ispow2(short x)
7ffdada63888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool ispow2(ushort x)
7ffdada638a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool ispow2(int x)
7ffdada638b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool ispow2(uint x)
7ffdada638d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool ispow2(long x)
7ffdada638e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool ispow2(ulong x)
7ffdada63900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte log2(byte src)
7ffdada63918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort log2(ushort src)
7ffdada63930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint log2(uint src)
7ffdada63948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong log2(ulong src)
7ffdada63960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte mod(sbyte a, sbyte m)
7ffdada63978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte mod(byte a, byte m)
7ffdada63990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short mod(short a, short m)
7ffdada639a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort mod(ushort a, ushort m)
7ffdada639c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int mod(int a, int m)
7ffdada639d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint mod(uint a, uint m)
7ffdada639f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long mod(long a, long m)
7ffdada63a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong mod(ulong a, ulong m)
7ffdada63a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte modmul(sbyte a, sbyte b, sbyte m)
7ffdada63a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte modmul(byte a, byte b, byte m)
7ffdada63a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short modmul(short a, short b, short m)
7ffdada63a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort modmul(ushort a, ushort b, ushort m)
7ffdada63a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int modmul(int a, int b, int m)
7ffdada63a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint modmul(uint a, uint b, uint m)
7ffdada63ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long modmul(long a, long b, long m)
7ffdada63ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong modmul(ulong a, ulong b, ulong m)
7ffdada63ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte mul(sbyte a, sbyte rhs)
7ffdada63af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte mul(byte a, byte b)
7ffdada63b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short mul(short a, short b)
7ffdada63b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort mul(ushort a, ushort b)
7ffdada63b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int mul(int a, int b)
7ffdada63b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint mul(uint a, uint b)
7ffdada63b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long mul(long a, long b)
7ffdada63b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong mul(ulong a, ulong b)
7ffdada63ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float mul(float a, float b)
7ffdada63bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double mul(double a, double b)
7ffdada63bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte negate(sbyte src)
7ffdada63be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte negate(byte src)
7ffdada63c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short negate(short src)
7ffdada63c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort negate(ushort src)
7ffdada63c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int negate(int src)
7ffdada63c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint negate(uint src)
7ffdada63c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long negate(long src)
7ffdada63c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong negate(ulong src)
7ffdada63c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float negate(float src)
7ffdada63ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double negate(double src)
7ffdada63cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit even(sbyte test)
7ffdada63cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit even(byte test)
7ffdada63cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit even(short test)
7ffdada63d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit even(int test)
7ffdada63d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit even(ushort test)
7ffdada63d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit even(uint test)
7ffdada63d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit even(long test)
7ffdada63d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit even(ulong test)
7ffdada68000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit odd(sbyte test)
7ffdada68018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit odd(byte test)
7ffdada68030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit odd(short test)
7ffdada68048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit odd(ushort test)
7ffdada68060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit odd(int test)
7ffdada68078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit odd(uint test)
7ffdada68090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit odd(long test)
7ffdada680a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit odd(ulong test)
7ffdada680c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte pow(sbyte b, uint exp)
7ffdada680d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte pow(byte b, uint exp)
7ffdada680f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short pow(short b, uint exp)
7ffdada68108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort pow(ushort b, uint exp)
7ffdada68120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int pow(int b, uint exp)
7ffdada68138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pow(uint b, uint exp)
7ffdada68150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long pow(long b, uint exp)
7ffdada68168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong pow(ulong b, uint exp)
7ffdada68180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong pow2(int exp)
7ffdada68198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong pow2m1(int exp)
7ffdada681b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float round(float src, int scale)
7ffdada681c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double round(double src, int scale)
7ffdada681e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte sat8u(short src)
7ffdada681f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte sat8i(short src)
7ffdada68210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort sat16u(int src)
7ffdada68228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Sign sign(sbyte src)
7ffdada68258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Sign sign(byte src)
7ffdada68270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Sign sign(short src)
7ffdada68288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Sign sign(ushort src)
7ffdada682a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Sign sign(int src)
7ffdada682b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Sign sign(uint src)
7ffdada682d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Sign sign(long src)
7ffdada682e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Sign sign(ulong src)
7ffdada68300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Sign sign(float src)
7ffdada68318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Sign sign(double src)
7ffdada68330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte square(sbyte src)
7ffdada68348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte square(byte src)
7ffdada68360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short square(short src)
7ffdada68378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort square(ushort src)
7ffdada68390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int square(int src)
7ffdada683a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint square(uint src)
7ffdada683c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long square(long src)
7ffdada683d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong square(ulong src)
7ffdada683f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float square(float src)
7ffdada68408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double square(double src)
7ffdada68420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte squeeze(byte src, byte max)
7ffdada68438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort squeeze(ushort src, ushort max)
7ffdada68450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint squeeze(uint src, uint max)
7ffdada68468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong squeeze(ulong src, ulong max)
7ffdada68480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte sub(sbyte a, sbyte b)
7ffdada68498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte sub(byte a, byte b)
7ffdada684b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short sub(short a, short b)
7ffdada684c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort sub(ushort a, ushort b)
7ffdada684e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int sub(int a, int b)
7ffdada684f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint sub(uint a, uint b)
7ffdada68510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long sub(long a, long b)
7ffdada68528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sub(ulong a, ulong b)
7ffdada68540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte subc(byte a, byte b, bit cin, out bit cout)
7ffdada68558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort subc(ushort a, ushort b, bit cin, out bit cout)
7ffdada68570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint subc(uint a, uint b, bit cin, out bit cout)
7ffdada68588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong subc(ulong a, ulong b, bit cin, out bit cout)
7ffdada685a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte trim(byte src, byte width)
7ffdada685b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte trim(sbyte src, byte width)
7ffdada685d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort trim(ushort src, byte width)
7ffdada685e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short trim(short src, byte width)
7ffdada68600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint trim(uint src, byte width)
7ffdada68618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int trim(int src, byte width)
7ffdada68630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long trim(long src, byte width)
7ffdada68648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong trim(ulong src, byte width)
7ffdada68660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte usat(short src, W8 dst)
7ffdada68678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort usat(int src, W16 dst)
7ffdada68690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte usat8(short src)
7ffdada686a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort usat16(int src)
7ffdada686c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte and(sbyte a, sbyte b)
7ffdada686d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte and(byte a, byte b)
7ffdada686f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short and(short a, short b)
7ffdada68708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort and(ushort a, ushort b)
7ffdada68720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int and(int a, int b)
7ffdada68738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint and(uint a, uint b)
7ffdada68750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long and(long a, long b)
7ffdada68768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong and(ulong a, ulong b)
7ffdada68780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte cimpl(sbyte a, sbyte b)
7ffdada68798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte cimpl(byte a, byte b)
7ffdada687b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short cimpl(short a, short b)
7ffdada687c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort cimpl(ushort a, ushort b)
7ffdada687e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cimpl(int a, int b)
7ffdada687f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cimpl(uint a, uint b)
7ffdada68810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long cimpl(long a, long b)
7ffdada68828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cimpl(ulong a, ulong b)
7ffdada68840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte cnonimpl(sbyte a, sbyte b)
7ffdada68858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte cnonimpl(byte a, byte b)
7ffdada68870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short cnonimpl(short a, short b)
7ffdada68888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort cnonimpl(ushort a, ushort b)
7ffdada688a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cnonimpl(int a, int b)
7ffdada688b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cnonimpl(uint a, uint b)
7ffdada688d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long cnonimpl(long a, long b)
7ffdada688e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cnonimpl(ulong a, ulong b)
7ffdada68900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte false(sbyte a, sbyte b)
7ffdada68918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte false(byte a, byte b)
7ffdada68930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short false(short a, short b)
7ffdada68948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort false(ushort a, ushort b)
7ffdada68960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int false(int a, int b)
7ffdada68978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint false(uint a, uint b)
7ffdada68990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long false(long a, long b)
7ffdada689a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong false(ulong a, ulong b)
7ffdada689c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte impl(sbyte a, sbyte b)
7ffdada689d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte impl(byte a, byte b)
7ffdada689f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short impl(short a, short b)
7ffdada68a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort impl(ushort a, ushort b)
7ffdada68a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int impl(int a, int b)
7ffdada68a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint impl(uint a, uint b)
7ffdada68a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long impl(long a, long b)
7ffdada68a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong impl(ulong a, ulong b)
7ffdada68a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int intersect(ushort* rcx, int rdx, ushort* r8, int r9, ushort* dst)
7ffdada68a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int intersect(ReadOnlySpan<ushort> left, ReadOnlySpan<ushort> right, Span<ushort> dst)
7ffdada68ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte left(sbyte a, sbyte b)
7ffdada68ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte left(byte a, byte b)
7ffdada68ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short left(short a, short b)
7ffdada68af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort left(ushort a, ushort b)
7ffdada68b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int left(int a, int b)
7ffdada68b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint left(uint a, uint b)
7ffdada68b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long left(long a, long b)
7ffdada68b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong left(ulong a, ulong b)
7ffdada68b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte lnot(sbyte a, sbyte b)
7ffdada68b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte lnot(byte a, byte b)
7ffdada68ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short lnot(short a, short b)
7ffdada68bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort lnot(ushort a, ushort b)
7ffdada68bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int lnot(int a, int b)
7ffdada68be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint lnot(uint a, uint b)
7ffdada68c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long lnot(long a, long b)
7ffdada68c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong lnot(ulong a, ulong b)
7ffdada68c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte nand(sbyte a, sbyte b)
7ffdada68c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nand(byte a, byte b)
7ffdada68c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short nand(short a, short b)
7ffdada68c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort nand(ushort a, ushort b)
7ffdada68c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int nand(int a, int b)
7ffdada68ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint nand(uint a, uint b)
7ffdada68cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long nand(long a, long b)
7ffdada68cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong nand(ulong a, ulong b)
7ffdada68cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte nonimpl(sbyte a, sbyte b)
7ffdada68d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nonimpl(byte a, byte b)
7ffdada68d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short nonimpl(short a, short b)
7ffdada68d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort nonimpl(ushort a, ushort b)
7ffdada68d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int nonimpl(int a, int b)
7ffdada68d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint nonimpl(uint a, uint b)
7ffdada68d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long nonimpl(long a, long b)
7ffdada68d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong nonimpl(ulong a, ulong b)
7ffdada68db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte nor(sbyte a, sbyte b)
7ffdada68dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nor(byte a, byte b)
7ffdada68de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short nor(short a, short b)
7ffdada68df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort nor(ushort a, ushort b)
7ffdada68e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int nor(int a, int b)
7ffdada68e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint nor(uint a, uint b)
7ffdada68e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long nor(long a, long b)
7ffdada68e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong nor(ulong a, ulong b)
7ffdada68e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte not(sbyte src)
7ffdada68e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte not(byte src)
7ffdada68ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short not(short src)
7ffdada68eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort not(ushort src)
7ffdada68ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int not(int src)
7ffdada68ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint not(uint src)
7ffdada68f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long not(long src)
7ffdada68f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong not(ulong src)
7ffdada68f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short or(short a, short b)
7ffdada68f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or(ushort a, ushort b)
7ffdada68f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int or(int a, int b)
7ffdada68f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int or(int a, int b, int c)
7ffdada68f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long or(long a, long b)
7ffdada68fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short or(short a, short b, short c)
7ffdada68fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short or(short a, short b, short c, short d)
7ffdada68fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or(ushort a, ushort b, ushort c)
7ffdada68ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or(ushort a, ushort b, ushort c, ushort d)
7ffdada69008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or(ushort a, ushort b, ushort c, ushort d, ushort e)
7ffdada69020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or(ushort a, ushort b, ushort c, ushort d, ushort e, ushort f)
7ffdada69038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or(ushort a, ushort b, ushort c, ushort d, ushort e, ushort f, ushort g)
7ffdada69050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or(ushort a, ushort b, ushort c, ushort d, ushort e, ushort f, ushort g, ushort h)
7ffdada69068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int or(int a, int b, int c, int d)
7ffdada69080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or(uint a, uint b)
7ffdada69098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or(uint a, uint b, uint c)
7ffdada690b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or(uint a, uint b, uint c, uint d)
7ffdada690c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or(uint a, uint b, uint c, uint d, uint e)
7ffdada690e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or(uint a, uint b, uint c, uint d, uint e, uint f)
7ffdada690f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or(uint a, uint b, uint c, uint d, uint e, uint f, uint g)
7ffdada69110h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or(uint a, uint b, uint c, uint d, uint e, uint f, uint g, uint h)
7ffdada69128h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long or(long a, long b, long c)
7ffdada69140h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long or(long a, long b, long c, long d)
7ffdada69158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or(ulong a, ulong b)
7ffdada69170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or(ulong a, ulong b, ulong c)
7ffdada69188h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or(ulong a, ulong b, ulong c, ulong d)
7ffdada691a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or(ulong a, ulong b, ulong c, ulong d, ulong e)
7ffdada691b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or(ulong a, ulong b, ulong c, ulong d, ulong e, ulong f)
7ffdada691d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or(ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, ulong g)
7ffdada691e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or(ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, ulong g, ulong h)
7ffdada69200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte or(sbyte a, sbyte b)
7ffdada69218h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte or(sbyte a, sbyte b, sbyte c)
7ffdada69230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte or(sbyte a, sbyte b, sbyte c, sbyte d)
7ffdada69248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or(byte a, byte b)
7ffdada69260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or(byte a, byte b, byte c)
7ffdada69278h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or(byte a, byte b, byte c, byte d)
7ffdada69290h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or(byte a, byte b, byte c, byte d, byte e)
7ffdada692a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or(byte a, byte b, byte c, byte d, byte e, byte f)
7ffdada692c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or(byte a, byte b, byte c, byte d, byte e, byte f, byte g)
7ffdada692d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or(byte a, byte b, byte c, byte d, byte e, byte f, byte g, byte h)
7ffdada692f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte right(sbyte a, sbyte b)
7ffdada69308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte right(byte a, byte b)
7ffdada69320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short right(short a, short b)
7ffdada69338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort right(ushort a, ushort b)
7ffdada69350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int right(int a, int b)
7ffdada69368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint right(uint a, uint b)
7ffdada69380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long right(long a, long b)
7ffdada69398h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong right(ulong a, ulong b)
7ffdada693b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte rnot(sbyte a, sbyte b)
7ffdada693c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rnot(byte a, byte b)
7ffdada693e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short rnot(short a, short b)
7ffdada693f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rnot(ushort a, ushort b)
7ffdada69410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int rnot(int a, int b)
7ffdada69428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rnot(uint a, uint b)
7ffdada69440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long rnot(long a, long b)
7ffdada69458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rnot(ulong a, ulong b)
7ffdada69470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte select(sbyte a, sbyte b, sbyte c)
7ffdada69488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte select(byte a, byte b, byte c)
7ffdada694a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short select(short a, short b, short c)
7ffdada694b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort select(ushort a, ushort b, ushort c)
7ffdada694d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int select(int a, int b, int c)
7ffdada694e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint select(uint a, uint b, uint c)
7ffdada69500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long select(long a, long b, long c)
7ffdada69518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong select(ulong a, ulong b, ulong c)
7ffdada69530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte true(sbyte a, sbyte b)
7ffdada69548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte true(byte a, byte b)
7ffdada69560h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short true(short a, short b)
7ffdada69578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort true(ushort a, ushort b)
7ffdada69590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int true(int a, int b)
7ffdada695a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint true(uint a, uint b)
7ffdada695c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long true(long a, long b)
7ffdada695d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong true(ulong a, ulong b)
7ffdada695f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte xnor(sbyte a, sbyte b)
7ffdada69608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xnor(byte a, byte b)
7ffdada69620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short xnor(short a, short b)
7ffdada69638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xnor(ushort a, ushort b)
7ffdada69650h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int xnor(int a, int b)
7ffdada69668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xnor(uint a, uint b)
7ffdada69680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long xnor(long a, long b)
7ffdada69698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xnor(ulong a, ulong b)
7ffdada696b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte xor(sbyte a, sbyte b)
7ffdada696c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xor(byte a, byte b)
7ffdada696e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short xor(short a, short b)
7ffdada696f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xor(ushort a, ushort b)
7ffdada69710h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int xor(int a, int b)
7ffdada69728h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xor(uint a, uint b)
7ffdada69740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long xor(long a, long b)
7ffdada69758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xor(ulong a, ulong b)
7ffdada69770h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte xor(ref sbyte a, sbyte b)
7ffdada69788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte xor(ref byte a, byte b)
7ffdada697a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short xor(ref short a, short b)
7ffdada697b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort xor(ref ushort a, ushort b)
7ffdada697d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int xor(ref int a, int b)
7ffdada697e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint xor(ref uint a, uint b)
7ffdada69800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long xor(ref long a, long b)
7ffdada69818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong xor(ref ulong a, ulong b)
7ffdada69830h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rotl(byte src, byte offset)
7ffdada69848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rotl(ushort src, byte offset)
7ffdada69860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rotl(uint src, byte offset)
7ffdada69878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rotl(ulong src, byte offset)
7ffdada69890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rotr(byte src, byte offset)
7ffdada698a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rotr(ushort src, byte offset)
7ffdada698c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rotr(uint src, byte offset)
7ffdada698d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rotr(ulong src, byte offset)
7ffdada698f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte sal(sbyte src, byte offset)
7ffdada69908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte sal(byte src, byte offset)
7ffdada69920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short sal(short src, byte offset)
7ffdada69938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort sal(ushort src, byte offset)
7ffdada69950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int sal(int src, byte offset)
7ffdada69968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint sal(uint src, byte offset)
7ffdada69980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long sal(long src, byte offset)
7ffdada69998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sal(ulong src, byte offset)
7ffdada699b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte sra(sbyte src, byte offset)
7ffdada699c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte sra(byte src, byte offset)
7ffdada699e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short sra(short src, byte offset)
7ffdada699f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort sra(ushort src, byte offset)
7ffdada69a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int sra(int src, byte offset)
7ffdada69a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint sra(uint src, byte offset)
7ffdada69a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long sra(long src, byte offset)
7ffdada69a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sra(ulong src, byte offset)
7ffdada69a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte sll(sbyte src, byte offset)
7ffdada69a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte sll(byte src, byte offset)
7ffdada69aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short sll(short src, byte offset)
7ffdada69ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort sll(ushort src, byte offset)
7ffdada69ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int sll(int src, byte offset)
7ffdada69ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint sll(uint src, byte offset)
7ffdada69b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long sll(long src, byte offset)
7ffdada69b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sll(ulong src, byte offset)
7ffdada69b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte slor(byte a, byte asl, byte b, byte bsl)
7ffdada69b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte srl(sbyte src, byte offset)
7ffdada69b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte srl(byte src, byte offset)
7ffdada69b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short srl(short src, byte offset)
7ffdada69b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort srl(ushort src, byte offset)
7ffdada69ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int srl(int src, byte offset)
7ffdada69bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint srl(uint src, byte offset)
7ffdada69bd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long srl(long src, byte offset)
7ffdada69bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong srl(ulong src, byte offset)
7ffdada69c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int srl32i(int src, byte offset)
7ffdada69c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint srl32u(uint src, byte offset)
7ffdada69c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long srl64i(long src, byte offset)
7ffdada69c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong srl64u(ulong src, byte offset)
7ffdada69c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xors(byte a, byte offset)
7ffdada69c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte xors(sbyte a, byte offset)
7ffdada69c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xors(ushort a, byte offset)
7ffdada69cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short xors(short a, byte offset)
7ffdada69cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xors(uint a, byte offset)
7ffdada69ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int xors(int a, byte offset)
7ffdada69cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long xors(long src, byte offset)
7ffdada69d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xors(ulong src, byte offset)
7ffdada69d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xorsl(byte a, byte offset)
7ffdada69d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte xorsl(sbyte a, byte offset)
7ffdada69d58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xorsl(ushort a, byte offset)
7ffdada69d70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short xorsl(short a, byte offset)
7ffdada69d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int xorsl(int a, byte offset)
7ffdada69da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xorsl(uint a, byte offset)
7ffdada69db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long xorsl(long a, byte offset)
7ffdada69dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xorsl(ulong a, byte offset)
7ffdada69de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xorsr(byte a, byte offset)
7ffdada69e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte xorsr(sbyte a, byte offset)
7ffdada69e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short xorsr(short a, byte offset)
7ffdada69e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xorsr(ushort a, byte offset)
7ffdada69e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int xorsr(int a, byte offset)
7ffdada69e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xorsr(uint a, byte offset)
7ffdada69e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long xorsr(long a, byte offset)
7ffdada69e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xorsr(ulong a, byte offset)
7ffdada69ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between(byte src, byte min, byte max)
7ffdada69ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between(sbyte src, sbyte min, sbyte max)
7ffdada69ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between(short src, short min, short max)
7ffdada69ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between(ushort src, ushort min, ushort max)
7ffdada69f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between(int src, int min, int max)
7ffdada69f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between(uint src, uint min, uint max)
7ffdada69f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between(long src, long min, long max)
7ffdada69f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit between(ulong src, ulong min, ulong max)
7ffdada69f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp(sbyte a, sbyte b)
7ffdada69f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp(byte a, byte b)
7ffdada69f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp(short a, short b)
7ffdada69fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp(ushort a, ushort b)
7ffdada69fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp(int a, int b)
7ffdada69fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp(uint a, uint b)
7ffdada69ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp(long a, long b)
7ffdada6a010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp(ulong a, ulong b)
7ffdada6a028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp(float a, float b)
7ffdada6a040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp(double a, double b)
7ffdada6a058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp(ReadOnlySpan<byte> a, ReadOnlySpan<byte> b)
7ffdada6a070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq(sbyte a, sbyte b)
7ffdada6a088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq(byte a, byte b)
7ffdada6a0a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq(short a, short b)
7ffdada6a0b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq(ushort a, ushort b)
7ffdada6a0d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq(int a, int b)
7ffdada6a0e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq(uint a, uint b)
7ffdada6a100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq(long a, long b)
7ffdada6a118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq(ulong a, ulong b)
7ffdada6a130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte eqb(sbyte a, sbyte b)
7ffdada6a148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte eqb(byte a, byte b)
7ffdada6a160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short eqb(short a, short b)
7ffdada6a178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort eqb(ushort a, ushort b)
7ffdada6a190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int eqb(int a, int b)
7ffdada6a1a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint eqb(uint a, uint b)
7ffdada6a1c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long eqb(long a, long b)
7ffdada6a1d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong eqb(ulong a, ulong b)
7ffdada6a1f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte eqz(sbyte a, sbyte b)
7ffdada6a208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte eqz(byte a, byte b)
7ffdada6a220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short eqz(short a, short b)
7ffdada6a238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort eqz(ushort a, ushort b)
7ffdada6a250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int eqz(int a, int b)
7ffdada6a268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint eqz(uint a, uint b)
7ffdada6a280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long eqz(long a, long b)
7ffdada6a298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong eqz(ulong a, ulong b)
7ffdada6a2b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt(sbyte a, sbyte b)
7ffdada6a2c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt(byte a, byte b)
7ffdada6a2e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt(short a, short b)
7ffdada6a2f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt(ushort a, ushort b)
7ffdada6a310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt(int a, int b)
7ffdada6a328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt(uint a, uint b)
7ffdada6a340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt(long a, long b)
7ffdada6a358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt(ulong a, ulong b)
7ffdada6a370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq(sbyte a, sbyte b)
7ffdada6a388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq(byte a, byte b)
7ffdada6a3a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq(short a, short b)
7ffdada6a3b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq(ushort a, ushort b)
7ffdada6a3d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq(int a, int b)
7ffdada6a3e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq(uint a, uint b)
7ffdada6a400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq(long a, long b)
7ffdada6a418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq(ulong a, ulong b)
7ffdada6a430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt(sbyte a, sbyte b)
7ffdada6a448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt(byte a, byte b)
7ffdada6a460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt(short a, short b)
7ffdada6a478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt(ushort a, ushort b)
7ffdada6a490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt(int a, int b)
7ffdada6a4a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt(uint a, uint b)
7ffdada6a4c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt(long a, long b)
7ffdada6a4d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt(ulong a, ulong b)
7ffdada6a4f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq(sbyte a, sbyte b)
7ffdada6a508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq(byte a, byte b)
7ffdada6a520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq(short a, short b)
7ffdada6a538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq(ushort a, ushort b)
7ffdada6a550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq(int a, int b)
7ffdada6a568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq(uint a, uint b)
7ffdada6a580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq(long a, long b)
7ffdada6a598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq(ulong a, ulong b)
7ffdada6a5b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte max(sbyte a, sbyte b)
7ffdada6a5c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte max(byte a, byte b)
7ffdada6a5e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short max(short a, short b)
7ffdada6a5f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort max(ushort a, ushort b)
7ffdada6a610h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int max(int a, int b)
7ffdada6a628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint max(uint a, uint b)
7ffdada6a640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long max(long a, long b)
7ffdada6a658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong max(ulong a, ulong b)
7ffdada6a670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte min(sbyte a, sbyte b)
7ffdada6a688h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte min(byte a, byte b)
7ffdada6a6a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short min(short a, short b)
7ffdada6a6b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort min(ushort a, ushort b)
7ffdada6a6d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int min(int a, int b)
7ffdada6a6e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int min(int a, int b, int c)
7ffdada6a700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint min(uint a, uint b)
7ffdada6a718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long min(long a, long b)
7ffdada6a730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong min(ulong a, ulong b)
7ffdada6a748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit negative(sbyte x)
7ffdada6a760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit negative(short x)
7ffdada6a778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit negative(int x)
7ffdada6a790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit negative(long x)
7ffdada6a7a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq(sbyte a, sbyte b)
7ffdada6a7c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq(byte a, byte b)
7ffdada6a7d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq(short a, short b)
7ffdada6a7f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq(ushort a, ushort b)
7ffdada6a808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq(int a, int b)
7ffdada6a820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq(uint a, uint b)
7ffdada6a838h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq(long a, long b)
7ffdada6a850h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit neq(ulong a, ulong b)
7ffdada6a868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz(sbyte src)
7ffdada6a880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz(byte src)
7ffdada6a898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz(short src)
7ffdada6a8b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz(ushort src)
7ffdada6a8c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz(int src)
7ffdada6a8e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool nonz(uint src)
7ffdada6a8f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz(long src)
7ffdada6a910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonz(ulong src)
7ffdada6a928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte nonz(sbyte src, sbyte alt)
7ffdada6a940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nonz(byte src, byte alt)
7ffdada6a958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short nonz(short src, short alt)
7ffdada6a970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort nonz(ushort src, ushort alt)
7ffdada6a988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int nonz(int src, int alt)
7ffdada6a9a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint nonz(uint src, uint alt)
7ffdada6a9b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long nonz(long src, long alt)
7ffdada6a9d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong nonz(ulong src, ulong alt)
7ffdada6a9e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive(sbyte a)
7ffdada6aa00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive(byte a)
7ffdada6aa18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive(short a)
7ffdada6aa30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive(ushort a)
7ffdada6aa48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive(int a)
7ffdada6aa60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive(uint a)
7ffdada6aa78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive(long a)
7ffdada6aa90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit positive(ulong a)
7ffdada6aaa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within(sbyte a, sbyte b, sbyte delta)
7ffdada6aac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within(byte a, byte b, byte delta)
7ffdada6aad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within(short a, short b, short delta)
7ffdada6aaf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within(ushort a, ushort b, ushort delta)
7ffdada6ab08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within(int a, int b, int delta)
7ffdada6ab20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within(uint a, uint b, uint delta)
7ffdada6ab38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within(long a, long b, long delta)
7ffdada6ab50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit within(ulong a, ulong b, ulong delta)
7ffdada6ab68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# PageBlockInfo describe(MemoryPage src)
7ffdaea61ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void Read(byte* pSrc, ref MemoryPage dst)
7ffdaea61ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vload(W128 w, byte* pSrc)
7ffdaea60e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vload(W128 w, sbyte* pSrc)
7ffdaea60e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vload(W128 w, short* pSrc)
7ffdaea60ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vload(W128 w, ushort* pSrc)
7ffdaea60eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vload(W128 w, uint* pSrc)
7ffdaea60ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vload(W128 w, int* pSrc)
7ffdaea60ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vload(W128 w, long* pSrc)
7ffdaea60f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vload(W128 w, ulong* pSrc)
7ffdaea60f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vload(W256 w, byte* pSrc)
7ffdaea60f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vload(W256 w, in byte src)
7ffdaea60f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vload(W128 w, ReadOnlySpan<byte> src)
7ffdaea60f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vload(W256 w, ReadOnlySpan<byte> src)
7ffdaea60f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<byte> src, ref byte dst)
7ffdaea60f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<byte> src, ref byte dst)
7ffdaea60fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<byte> src, ref byte dst, int offset)
7ffdaea60fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<byte> src, ref byte dst, int offset)
7ffdaea60fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<byte> src, Span<byte> dst)
7ffdaea60ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<byte> src, Span<byte> dst)
7ffdaea61008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort convert(ReadOnlySpan<byte> src, out ushort dst)
7ffdaea61050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint convert(ReadOnlySpan<byte> src, out uint dst)
7ffdaea61068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong convert(ReadOnlySpan<byte> src, out ulong dst)
7ffdaea61080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint copy(ReadOnlySpan<byte> src, ref byte dst)
7ffdaea61098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort join(W16 w, byte a, byte b)
7ffdaea610b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint join(W32 w, byte b0, byte b1)
7ffdaea610c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint join(W32 w, byte b0, byte b1, byte b2)
7ffdaea610e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint join(W32 w, byte b0, byte b1, byte b2, byte b3)
7ffdaea610f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong join(W64 w, byte b0, byte b1)
7ffdaea61110h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong join(W64 w, byte a, byte b, byte c)
7ffdaea61128h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong join(W64 w, byte a, byte b, byte c, byte d)
7ffdaea61140h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong join(W64 w, byte a, byte b, byte c, byte d, byte e)
7ffdaea61158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong join(W64 w, byte a, byte b, byte c, byte d, byte e, byte f)
7ffdaea61170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong join(W64 w, byte a, byte b, byte c, byte d, byte e, byte f, byte g)
7ffdaea61188h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong join(W64 w, byte a, byte b, byte c, byte d, byte e, byte f, byte g, byte h)
7ffdaea611a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte extract(ushort src, byte index)
7ffdaea611b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte extract(uint src, byte index)
7ffdaea611d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte extract(ulong src, byte index)
7ffdaea611e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint inject(in byte src, byte index, ref uint dst)
7ffdaea61200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong inject(in byte src, byte index, ref ulong dst)
7ffdaea61218h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort convert(ReadOnlySpan<byte> src, W16 w)
7ffdaea61230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint convert(ReadOnlySpan<byte> src, W32 w)
7ffdaea61248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong convert(ReadOnlySpan<byte> src, W64 w)
7ffdaea61260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool match(ReadOnlySpan<byte> src, uint i, byte a0, byte a1)
7ffdaea61278h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or(byte a, byte b, byte c)
7ffdaea61290h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or(byte a, byte b, byte c, byte d)
7ffdaea612a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or(byte a, byte b, byte c, byte d, byte e)
7ffdaea612c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or(in byte a, in byte b, ref byte dst)
7ffdaea612d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xor(byte a, byte b)
7ffdaea612f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor(in byte a, in byte b, ref byte c)
7ffdaea61308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte not(byte src)
7ffdaea61320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not(in byte A, ref byte Z)
7ffdaea61338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and(in byte A, in byte B, ref byte Z)
7ffdaea61350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nand(byte a, byte b)
7ffdaea61368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand(in byte A, in byte B, ref byte Z)
7ffdaea61380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nor(byte a, byte b)
7ffdaea61398h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor(in byte a, in byte b, ref byte dst)
7ffdaea613b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xnor(byte a, byte b)
7ffdaea613c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor(in byte A, in byte B, ref byte Z)
7ffdaea613e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nonimpl(byte a, byte b)
7ffdaea613f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl(in byte A, in byte B, ref byte Z)
7ffdaea61410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte impl(byte a, byte b)
7ffdaea61428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl(in byte a, in byte b, ref byte dst)
7ffdaea61440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte cimpl(byte a, byte b)
7ffdaea61458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl(in byte A, in byte B, ref byte Z)
7ffdaea61470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte cnonimpl(byte a, byte b)
7ffdaea61488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl(in byte a, in byte b, ref byte dst)
7ffdaea614a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot(in byte A, in byte B, ref byte dst)
7ffdaea614b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte select(byte a, byte b, byte c)
7ffdaea614d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select(in byte a, in byte b, in byte c, ref byte dst)
7ffdaea614e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint join(byte a, byte b, byte c, byte d)
7ffdaea61500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte inc(byte x)
7ffdaea61518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte dec(byte x)
7ffdaea61530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte sll(byte x, byte count)
7ffdaea61548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte srl(byte x, byte count)
7ffdaea61560h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte add(byte a, byte b)
7ffdaea61578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte sub(byte a, byte b)
7ffdaea61590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte mod(byte a, byte b)
7ffdaea615a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte mul(byte a, byte b)
7ffdaea615c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte and(byte a, byte b)
7ffdaea615d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or(byte a, byte b)
7ffdaea615f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool gt(byte a, byte b)
7ffdaea61608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool gteq(byte a, byte b)
7ffdaea61620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool lt(byte a, byte b)
7ffdaea61638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool lteq(byte a, byte b)
7ffdaea61650h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool eq(byte a, byte b)
7ffdaea61668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void read4096(byte* pSrc, ref MemoryPage dst)
7ffdaea61a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void ReadLo(byte* pSrc, ref MemoryPage dst)
7ffdaea61a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void ReadHi(byte* pSrc, ref MemoryPage dst)
7ffdaea61aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void read16(byte* pSrc, ref byte dst, int offset)
7ffdaea61ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void read16(ref byte* pSrc, ref MemoryPage dst, ref ushort offset)
7ffdaea61ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void read32(ref byte* pSrc, ref MemoryPage dst, ref ushort offset)
7ffdaea61ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void read64(ref byte* pSrc, ref MemoryPage dst, ref ushort offset)
7ffdaea61b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void read128(ref byte* pSrc, ref MemoryPage dst, ref ushort offset)
7ffdaea61b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void read256(ref byte* pSrc, ref MemoryPage dst, ref ushort offset)
7ffdaea61b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void read512(ref byte* pSrc, ref MemoryPage dst, ref ushort offset)
7ffdaea61b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void read1024(ref byte* pSrc, ref MemoryPage dst, ref ushort offset)
7ffdaea61b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void read2048(ref byte* pSrc, ref MemoryPage dst, ref ushort offset)
7ffdaea61b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int readz(uint zmax, MemoryAddress src, Span<byte> dst)
7ffdaea61b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int readz(uint zmax, ref byte* pSrc, int limit, Span<byte> dst)
7ffdaea61ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int readz(uint zmax, ref byte* pSrc, int limit, ref byte dst)
7ffdaea61bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte view<byte>(in byte src, byte index)
7ffdb072b708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte view<ushort>(in ushort src, byte index)
7ffdb072b798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte view<uint>(in uint src, byte index)
7ffdb072b810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte view<ulong>(in ulong src, byte index)
7ffdb072b870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte edit<byte>(ref byte src, byte index)
7ffdb072b900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte edit<ushort>(ref ushort src, byte index)
7ffdb072ba38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte edit<uint>(ref uint src, byte index)
7ffdb072bae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte edit<ulong>(ref ulong src, byte index)
7ffdb072bb40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(N2 n)
7ffdb072bbb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(N2 n)
7ffdb0760720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(N2 n)
7ffdb07614e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(N2 n)
7ffdb0761728h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(N4 n)
7ffdb0761ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(N4 n)
7ffdb0761fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(N4 n)
7ffdb07620a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(N4 n)
7ffdb0762178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(N8 n)
7ffdb0762280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(N8 n)
7ffdb0762370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(N8 n)
7ffdb0762448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(N8 n)
7ffdb0762550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(N16 n)
7ffdb0762670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(N16 n)
7ffdb0762778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(N16 n)
7ffdb0762868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(N16 n)
7ffdb0762970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(N32 n)
7ffdb0762a18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(N32 n)
7ffdb0762b08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(N32 n)
7ffdb0762bb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(N32 n)
7ffdb0762c88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(N64 n)
7ffdb0762d60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(N64 n)
7ffdb0762e68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(N64 n)
7ffdb0762f58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(N64 n)
7ffdb0763000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(N128 n)
7ffdb07630f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(N128 n)
7ffdb0763240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(N128 n)
7ffdb0763300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(N128 n)
7ffdb07633d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(N256 n)
7ffdb07634b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(N256 n)
7ffdb0763570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(N256 n)
7ffdb0763630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(N256 n)
7ffdb07636d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W16 w, N2 n)
7ffdb0763798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W16 w, N2 n)
7ffdb07638b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W16 w, N2 n)
7ffdb0763990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W16 w, N2 n)
7ffdb0763a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W16 w, N4 n)
7ffdb0763b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W16 w, N4 n)
7ffdb0763c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W16 w, N4 n)
7ffdb0763d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W16 w, N4 n)
7ffdb0763df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W16 w, N8 n)
7ffdb0768000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W16 w, N8 n)
7ffdb0768198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W16 w, N8 n)
7ffdb0768288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W16 w, N8 n)
7ffdb0768318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W16 w, N16 n)
7ffdb0768450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W16 w, N16 n)
7ffdb0768570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W16 w, N16 n)
7ffdb0768660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W16 w, N16 n)
7ffdb0768750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W16 w, N32 n)
7ffdb0768888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W16 w, N32 n)
7ffdb07689d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W16 w, N32 n)
7ffdb0768af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W16 w, N32 n)
7ffdb0768be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W16 w, N64 n)
7ffdb0768d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W16 w, N64 n)
7ffdb0769080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W16 w, N64 n)
7ffdb0769170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W16 w, N64 n)
7ffdb0769260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W16 w, N128 n)
7ffdb0769368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W16 w, N128 n)
7ffdb07694a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W16 w, N128 n)
7ffdb0769cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W16 w, N128 n)
7ffdb076a280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W16 w, N256 n)
7ffdb076a5f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W16 w, N256 n)
7ffdb076a970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W16 w, N256 n)
7ffdb076af28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W16 w, N256 n)
7ffdb076b4b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W32 w, N2 n)
7ffdb076b828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W32 w, N2 n)
7ffdb076be10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W32 w, N2 n)
7ffdb0790288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W32 w, N2 n)
7ffdb07905e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W32 w, N4 n)
7ffdb0790750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W32 w, N4 n)
7ffdb0790870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W32 w, N4 n)
7ffdb0790978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W32 w, N4 n)
7ffdb0790a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W32 w, N8 n)
7ffdb0790b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W32 w, N8 n)
7ffdb0790d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W32 w, N8 n)
7ffdb0790e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W32 w, N8 n)
7ffdb0790f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W32 w, N16 n)
7ffdb0791038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W32 w, N16 n)
7ffdb07910f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W32 w, N16 n)
7ffdb07911e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W32 w, N16 n)
7ffdb07912d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W32 w, N32 n)
7ffdb07913e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W32 w, N32 n)
7ffdb0791530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W32 w, N32 n)
7ffdb0791608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W32 w, N32 n)
7ffdb07916c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W32 w, N64 n)
7ffdb0791800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W32 w, N64 n)
7ffdb0791908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W32 w, N64 n)
7ffdb0791a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W32 w, N64 n)
7ffdb0791b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W32 w, N128 n)
7ffdb0791c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W32 w, N128 n)
7ffdb0791d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W32 w, N128 n)
7ffdb0791e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W32 w, N128 n)
7ffdb0791f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W32 w, N256 n)
7ffdb0792088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W32 w, N256 n)
7ffdb0792178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W32 w, N256 n)
7ffdb07922c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W32 w, N256 n)
7ffdb07923a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W64 w, N2 n)
7ffdb0792460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W64 w, N2 n)
7ffdb0792568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W64 w, N2 n)
7ffdb0792640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W64 w, N2 n)
7ffdb0792700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W64 w, N4 n)
7ffdb07927f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W64 w, N4 n)
7ffdb07928e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W64 w, N4 n)
7ffdb07929d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W64 w, N4 n)
7ffdb0792ac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W64 w, N8 n)
7ffdb0792b98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W64 w, N8 n)
7ffdb0792c88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W64 w, N8 n)
7ffdb0792d60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W64 w, N8 n)
7ffdb0792e50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W64 w, N16 n)
7ffdb0792f28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W64 w, N16 n)
7ffdb0793060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W64 w, N16 n)
7ffdb07931b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W64 w, N16 n)
7ffdb0793288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W64 w, N32 n)
7ffdb0793390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W64 w, N32 n)
7ffdb07934b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W64 w, N32 n)
7ffdb0793588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W64 w, N32 n)
7ffdb0793660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W64 w, N64 n)
7ffdb0793768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W64 w, N64 n)
7ffdb0793858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W64 w, N64 n)
7ffdb0793960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W64 w, N64 n)
7ffdb0793e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W64 w, N128 n)
7ffdb0798018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W64 w, N128 n)
7ffdb0798888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W64 w, N128 n)
7ffdb0798978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W64 w, N128 n)
7ffdb0798a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> cells<byte>(W64 w, N256 n)
7ffdb0798b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> cells<ushort>(W64 w, N256 n)
7ffdb0798c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> cells<uint>(W64 w, N256 n)
7ffdb0798d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> cells<ulong>(W64 w, N256 n)
7ffdb0798df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> sequential<byte>(byte i0, byte i1)
7ffdb0798f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ushort> sequential<ushort>(byte i0, byte i1)
7ffdb0799500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<uint> sequential<uint>(byte i0, byte i1)
7ffdb0799770h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<ulong> sequential<ulong>(byte i0, byte i1)
7ffdb07998a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte and<byte>(byte a, byte b)
7ffdb04732a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte and<sbyte>(sbyte a, sbyte b)
7ffdb04733c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort and<ushort>(ushort a, ushort b)
7ffdb04739d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short and<short>(short a, short b)
7ffdb0473a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint and<uint>(uint a, uint b)
7ffdb0473e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int and<int>(int a, int b)
7ffdb0473ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong and<ulong>(ulong a, ulong b)
7ffdb0473f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long and<long>(long a, long b)
7ffdb0478018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte bfly<byte>(N1 n, byte x)
7ffdb04781f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort bfly<ushort>(N1 n, ushort x)
7ffdb04783d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bfly<uint>(N1 n, uint x)
7ffdb0478468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bfly<ulong>(N1 n, ulong x)
7ffdb04784f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte bfly<byte>(N2 n, byte x)
7ffdb04786c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort bfly<ushort>(N2 n, ushort x)
7ffdb04789a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bfly<uint>(N2 n, uint x)
7ffdb0479488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bfly<ulong>(N2 n, ulong x)
7ffdb047a280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte bfly<byte>(N4 n, byte x)
7ffdb047a2e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort bfly<ushort>(N4 n, ushort x)
7ffdb047a3d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bfly<uint>(N4 n, uint x)
7ffdb047a580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bfly<ulong>(N4 n, ulong x)
7ffdb047a5f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte bfly<byte>(N8 n, byte x)
7ffdb047a748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort bfly<ushort>(N8 n, ushort x)
7ffdb047a760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bfly<uint>(N8 n, uint x)
7ffdb047a790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bfly<ulong>(N8 n, ulong x)
7ffdb047ad30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte bfly<byte>(N16 n, byte x)
7ffdb047adc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort bfly<ushort>(N16 n, ushort x)
7ffdb047adf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bfly<uint>(N16 n, uint x)
7ffdb047b930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bfly<ulong>(N16 n, ulong x)
7ffdb047b9a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte bitcell<byte>(Span<byte> src, BitPos<byte> pos)
7ffdb047ba50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort bitcell<ushort>(Span<ushort> src, BitPos<ushort> pos)
7ffdb047bdf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint bitcell<uint>(Span<uint> src, BitPos<uint> pos)
7ffdb0530348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong bitcell<ulong>(Span<ulong> src, BitPos<ulong> pos)
7ffdb05306f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte bitcell<byte>(ReadOnlySpan<byte> src, BitPos<byte> pos)
7ffdb0530a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort bitcell<ushort>(ReadOnlySpan<ushort> src, BitPos<ushort> pos)
7ffdb0530ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint bitcell<uint>(ReadOnlySpan<uint> src, BitPos<uint> pos)
7ffdb0530b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong bitcell<ulong>(ReadOnlySpan<ulong> src, BitPos<ulong> pos)
7ffdb0530c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte bitcell<byte>(ref byte src, uint index)
7ffdb0530cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort bitcell<ushort>(ref ushort src, uint index)
7ffdb0530d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint bitcell<uint>(ref uint src, uint index)
7ffdb0530d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong bitcell<ulong>(ref ulong src, uint index)
7ffdb0530db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte bitcopy<byte>(byte src, byte index, byte count, byte dst)
7ffdb0530df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte slice<byte>(byte src, byte start, byte length)
7ffdb0530e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte trim<byte>(byte src, byte index, byte count)
7ffdb0530e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte bitcopy<sbyte>(sbyte src, byte index, byte count, sbyte dst)
7ffdb0531278h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte slice<sbyte>(sbyte src, byte start, byte length)
7ffdb05312f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte trim<sbyte>(sbyte src, byte index, byte count)
7ffdb0531308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort bitcopy<ushort>(ushort src, byte index, byte count, ushort dst)
7ffdb0531788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort slice<ushort>(ushort src, byte start, byte length)
7ffdb05317a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort trim<ushort>(ushort src, byte index, byte count)
7ffdb05317b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short bitcopy<short>(short src, byte index, byte count, short dst)
7ffdb0531ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short slice<short>(short src, byte start, byte length)
7ffdb0531ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short trim<short>(short src, byte index, byte count)
7ffdb0531b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcopy<uint>(uint src, byte index, byte count, uint dst)
7ffdb0531ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint slice<uint>(uint src, byte start, byte length)
7ffdb0531ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint trim<uint>(uint src, byte index, byte count)
7ffdb0531ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int bitcopy<int>(int src, byte index, byte count, int dst)
7ffdb0532b20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int slice<int>(int src, byte start, byte length)
7ffdb0532b50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int trim<int>(int src, byte index, byte count)
7ffdb0532b68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bitcopy<ulong>(ulong src, byte index, byte count, ulong dst)
7ffdb0532fd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong slice<ulong>(ulong src, byte start, byte length)
7ffdb0532fe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong trim<ulong>(ulong src, byte index, byte count)
7ffdb0533000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long bitcopy<long>(long src, byte index, byte count, long dst)
7ffdb0533348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long slice<long>(long src, byte start, byte length)
7ffdb0533390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long trim<long>(long src, byte index, byte count)
7ffdb05333a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte bitcopy<byte>(byte src, byte index, byte count, ref byte dst)
7ffdb05338a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte bitcopy<sbyte>(sbyte src, byte index, byte count, ref sbyte dst)
7ffdb0533a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort bitcopy<ushort>(ushort src, byte index, byte count, ref ushort dst)
7ffdb0533c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short bitcopy<short>(short src, byte index, byte count, ref short dst)
7ffdb0533ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint bitcopy<uint>(uint src, byte index, byte count, ref uint dst)
7ffdb0538900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int bitcopy<int>(int src, byte index, byte count, ref int dst)
7ffdb0538a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong bitcopy<ulong>(ulong src, byte index, byte count, ref ulong dst)
7ffdb0539848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long bitcopy<long>(long src, byte index, byte count, ref long dst)
7ffdb053a598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte bitcopy<byte>(byte src, byte srcIdx, byte dstIdx, byte count, byte dst)
7ffdb053a838h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte bitcopy<sbyte>(sbyte src, byte srcIdx, byte dstIdx, byte count, sbyte dst)
7ffdb053a9d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort bitcopy<ushort>(ushort src, byte srcIdx, byte dstIdx, byte count, ushort dst)
7ffdb053aa60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short bitcopy<short>(short src, byte srcIdx, byte dstIdx, byte count, short dst)
7ffdb053aaf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcopy<uint>(uint src, byte srcIdx, byte dstIdx, byte count, uint dst)
7ffdb053abb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int bitcopy<int>(int src, byte srcIdx, byte dstIdx, byte count, int dst)
7ffdb053ac40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bitcopy<ulong>(ulong src, byte srcIdx, byte dstIdx, byte count, ulong dst)
7ffdb053ada8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long bitcopy<long>(long src, byte srcIdx, byte dstIdx, byte count, long dst)
7ffdb053ae08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte bitcopy<byte>(byte src, byte srcidx, byte dstidx, byte count, ref byte dst)
7ffdb053b078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte bitcopy<sbyte>(sbyte src, byte srcidx, byte dstidx, byte count, ref sbyte dst)
7ffdb053b270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort bitcopy<ushort>(ushort src, byte srcidx, byte dstidx, byte count, ref ushort dst)
7ffdb053b510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short bitcopy<short>(short src, byte srcidx, byte dstidx, byte count, ref short dst)
7ffdb053b6a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint bitcopy<uint>(uint src, byte srcidx, byte dstidx, byte count, ref uint dst)
7ffdb053b7e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int bitcopy<int>(int src, byte srcidx, byte dstidx, byte count, ref int dst)
7ffdb053b960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong bitcopy<ulong>(ulong src, byte srcidx, byte dstidx, byte count, ref ulong dst)
7ffdb053bbe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long bitcopy<long>(long src, byte srcidx, byte dstidx, byte count, ref long dst)
7ffdb053bd38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte bitmap<byte>(byte src, byte dst, byte offset, byte count)
7ffdb053bdf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or<byte>(byte a, byte b)
7ffdb053be88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort bitmap<ushort>(ushort src, ushort dst, byte offset, byte count)
7ffdb0570030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or<ushort>(ushort a, ushort b)
7ffdb0570090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitmap<uint>(uint src, uint dst, byte offset, byte count)
7ffdb0570288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or<uint>(uint a, uint b)
7ffdb05702b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bitmap<ulong>(ulong src, ulong dst, byte offset, byte count)
7ffdb05703a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or<ulong>(ulong a, ulong b)
7ffdb05703f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte blend<byte>(byte a, byte b, byte mask)
7ffdb05704e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xor<byte>(byte a, byte b)
7ffdb0570510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte blend<sbyte>(sbyte a, sbyte b, sbyte mask)
7ffdb0570690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte xor<sbyte>(sbyte a, sbyte b)
7ffdb05706a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort blend<ushort>(ushort a, ushort b, ushort mask)
7ffdb05707e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xor<ushort>(ushort a, ushort b)
7ffdb05707f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short blend<short>(short a, short b, short mask)
7ffdb0570c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short xor<short>(short a, short b)
7ffdb0570c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint blend<uint>(uint a, uint b, uint mask)
7ffdb0578738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xor<uint>(uint a, uint b)
7ffdb0578780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blend<int>(int a, int b, int mask)
7ffdb0578918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int xor<int>(int a, int b)
7ffdb0578930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong blend<ulong>(ulong a, ulong b, ulong mask)
7ffdb0578a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xor<ulong>(ulong a, ulong b)
7ffdb0578ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long blend<long>(long a, long b, long mask)
7ffdb0578b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long xor<long>(long a, long b)
7ffdb0578b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte blsi<byte>(byte src)
7ffdb0578c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort blsi<ushort>(ushort src)
7ffdb0578d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint blsi<uint>(uint src)
7ffdb0578d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong blsi<ulong>(ulong src)
7ffdb0578de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte blsic<byte>(byte src)
7ffdb0578df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort blsic<ushort>(ushort src)
7ffdb0578ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint blsic<uint>(uint src)
7ffdb0578ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong blsic<ulong>(ulong src)
7ffdb0578f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort byteswap<ushort>(ushort src)
7ffdb0579098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short byteswap<short>(short src)
7ffdb05790f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint byteswap<uint>(uint src)
7ffdb0579158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int byteswap<int>(int src)
7ffdb05791d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong byteswap<ulong>(ulong src)
7ffdb05791e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long byteswap<long>(long src)
7ffdb0579260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte cimpl<byte>(byte a, byte b)
7ffdb0579278h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte cimpl<sbyte>(sbyte a, sbyte b)
7ffdb0579350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort cimpl<ushort>(ushort a, ushort b)
7ffdb0579440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short cimpl<short>(short a, short b)
7ffdb05794b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cimpl<uint>(uint a, uint b)
7ffdb0579578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cimpl<int>(int a, int b)
7ffdb05795f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cimpl<ulong>(ulong a, ulong b)
7ffdb0579740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long cimpl<long>(long a, long b)
7ffdb0579800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte cnonimpl<byte>(byte a, byte b)
7ffdb0579920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte cnonimpl<sbyte>(sbyte a, sbyte b)
7ffdb0579a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort cnonimpl<ushort>(ushort a, ushort b)
7ffdb0579b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short cnonimpl<short>(short a, short b)
7ffdb0579bd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cnonimpl<uint>(uint a, uint b)
7ffdb0579cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cnonimpl<int>(int a, int b)
7ffdb0579dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cnonimpl<ulong>(ulong a, ulong b)
7ffdb0579ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long cnonimpl<long>(long a, long b)
7ffdb0579f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable<byte>(byte src, byte pos)
7ffdb057a028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte disable<sbyte>(sbyte src, byte pos)
7ffdb057a478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable<ushort>(ushort src, byte pos)
7ffdb057a508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short disable<short>(short src, byte pos)
7ffdb057a538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable<uint>(uint src, byte pos)
7ffdb057a580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int disable<int>(int src, byte pos)
7ffdb057a640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable<ulong>(ulong src, byte pos)
7ffdb057a730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long disable<long>(long src, byte pos)
7ffdb057a760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float disable<float>(float src, byte pos)
7ffdb057a790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double disable<double>(double src, byte pos)
7ffdb057a9b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable8<byte>(byte src, byte index)
7ffdb057abb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable8<ushort>(ushort src, byte index)
7ffdb057abc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable8<uint>(uint src, byte index)
7ffdb057ac40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable8<ulong>(ulong src, byte index)
7ffdb057acb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit dot<byte>(byte x, byte y)
7ffdb057ad00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<byte>(byte src)
7ffdb057ad30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit dot<sbyte>(sbyte x, sbyte y)
7ffdb057ae80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<sbyte>(sbyte src)
7ffdb057aec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit dot<ushort>(ushort x, ushort y)
7ffdb057b060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<ushort>(ushort src)
7ffdb057b0f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit dot<short>(short x, short y)
7ffdb057b2d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<short>(short src)
7ffdb057b348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit dot<uint>(uint x, uint y)
7ffdb057b450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<uint>(uint src)
7ffdb057b468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit dot<int>(int x, int y)
7ffdb057b4f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<int>(int src)
7ffdb057b528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit dot<ulong>(ulong x, ulong y)
7ffdb057b630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<ulong>(ulong src)
7ffdb057b648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit dot<long>(long x, long y)
7ffdb057b708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<long>(long src)
7ffdb057b738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte effwidth<byte>(byte src)
7ffdb057b8b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte effwidth<ushort>(ushort src)
7ffdb057b918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte effwidth<uint>(uint src)
7ffdb057b960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte effwidth<ulong>(ulong src)
7ffdb057b9d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte enable<byte>(byte src, byte pos)
7ffdb057ba08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte enable<sbyte>(sbyte src, byte pos)
7ffdb057bb40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort enable<ushort>(ushort src, byte pos)
7ffdb057bb88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short enable<short>(short src, byte pos)
7ffdb057bba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint enable<uint>(uint src, byte pos)
7ffdb057bc48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int enable<int>(int src, byte pos)
7ffdb05a0858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong enable<ulong>(ulong src, byte pos)
7ffdb05a0900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long enable<long>(long src, byte pos)
7ffdb05a09a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float enable<float>(float src, byte pos)
7ffdb05a0a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double enable<double>(double src, byte pos)
7ffdb05a0ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte enable<byte>(byte src, byte index, byte count)
7ffdb05a0ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte enable<sbyte>(sbyte src, byte index, byte count)
7ffdb05a0c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort enable<ushort>(ushort src, byte index, byte count)
7ffdb05a0c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short enable<short>(short src, byte index, byte count)
7ffdb05a0cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint enable<uint>(uint src, byte index, byte count)
7ffdb05a0d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int enable<int>(int src, byte index, byte count)
7ffdb05a0d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong enable<ulong>(ulong src, byte index, byte count)
7ffdb05a0e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long enable<long>(long src, byte index, byte count)
7ffdb05a0ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte eraser<byte>(byte start, byte count)
7ffdb05a0f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort eraser<ushort>(byte start, byte count)
7ffdb05a1110h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint eraser<uint>(byte start, byte count)
7ffdb05a1338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong eraser<ulong>(byte start, byte count)
7ffdb05a1518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte extract<byte>(byte src, byte i0, byte i1)
7ffdb05a16b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte extract<sbyte>(sbyte src, byte i0, byte i1)
7ffdb05a1788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort extract<ushort>(ushort src, byte i0, byte i1)
7ffdb05a1860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short extract<short>(short src, byte i0, byte i1)
7ffdb05a1938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint extract<uint>(uint src, byte i0, byte i1)
7ffdb05a1a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int extract<int>(int src, byte i0, byte i1)
7ffdb05a2010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong extract<ulong>(ulong src, byte i0, byte i1)
7ffdb05a20e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long extract<long>(long src, byte i0, byte i1)
7ffdb05a2190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float extract<float>(float src, byte i0, byte i1)
7ffdb05a2268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double extract<double>(double src, byte i0, byte i1)
7ffdb05a24f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte extract<byte>(in byte src, byte i0, byte i1, ref byte dst)
7ffdb05a2ce8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort extract<ushort>(in ushort src, byte i0, byte i1, ref ushort dst)
7ffdb05a2e08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint extract<uint>(in uint src, byte i0, byte i1, ref uint dst)
7ffdb05a2ee0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong extract<ulong>(in ulong src, byte i0, byte i1, ref ulong dst)
7ffdb05a2f28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte extract<byte>(Span<byte> src, uint i0, uint i1)
7ffdb05a2f88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte extract<byte>(Span<byte> src, BitPos<byte> i0, BitPos<byte> i1)
7ffdb05a2fd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort extract<ushort>(Span<ushort> src, uint i0, uint i1)
7ffdb05a88b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort extract<ushort>(Span<ushort> src, BitPos<ushort> i0, BitPos<ushort> i1)
7ffdb05a8900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint extract<uint>(Span<uint> src, uint i0, uint i1)
7ffdb05a8f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint extract<uint>(Span<uint> src, BitPos<uint> i0, BitPos<uint> i1)
7ffdb05a9008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong extract<ulong>(Span<ulong> src, uint i0, uint i1)
7ffdb05a9308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong extract<ulong>(Span<ulong> src, BitPos<ulong> i0, BitPos<ulong> i1)
7ffdb05a9440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte false<byte>()
7ffdb05e3be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte false<sbyte>()
7ffdb05e3d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort false<ushort>()
7ffdb05e3db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short false<short>()
7ffdb05e3dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint false<uint>()
7ffdb05e3e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int false<int>()
7ffdb05e3e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong false<ulong>()
7ffdb05e3e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long false<long>()
7ffdb05e3ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte false<byte>(byte a)
7ffdb05e3eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte false<sbyte>(sbyte a)
7ffdb05e3ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort false<ushort>(ushort a)
7ffdb05e3f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short false<short>(short a)
7ffdb05e3fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint false<uint>(uint a)
7ffdb05e8048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int false<int>(int a)
7ffdb05e8138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong false<ulong>(ulong a)
7ffdb05e8150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long false<long>(long a)
7ffdb05e8168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte false<byte>(byte a, byte b, byte c)
7ffdb05e8180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte false<sbyte>(sbyte a, sbyte b, sbyte c)
7ffdb05e81b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort false<ushort>(ushort a, ushort b, ushort c)
7ffdb05e81c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short false<short>(short a, short b, short c)
7ffdb05e81e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint false<uint>(uint a, uint b, uint c)
7ffdb05e81f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int false<int>(int a, int b, int c)
7ffdb05e8270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong false<ulong>(ulong a, ulong b, ulong c)
7ffdb05e82a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long false<long>(long a, long b, long c)
7ffdb05e8378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte false<byte>(byte a, byte b)
7ffdb05e8390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte false<sbyte>(sbyte a, sbyte b)
7ffdb05e83c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort false<ushort>(ushort a, ushort b)
7ffdb05e83d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short false<short>(short a, short b)
7ffdb05e83f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint false<uint>(uint a, uint b)
7ffdb05e85a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int false<int>(int a, int b)
7ffdb05e85e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong false<ulong>(ulong a, ulong b)
7ffdb05e8600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long false<long>(long a, long b)
7ffdb05e8618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte true<byte>(byte a, byte b, byte c)
7ffdb05e8630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte true<byte>()
7ffdb05e8648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte true<sbyte>(sbyte a, sbyte b, sbyte c)
7ffdb05e8738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte true<sbyte>()
7ffdb05e8750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort true<ushort>(ushort a, ushort b, ushort c)
7ffdb05e8900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort true<ushort>()
7ffdb05e8918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short true<short>(short a, short b, short c)
7ffdb05e89a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short true<short>()
7ffdb05e89c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint true<uint>(uint a, uint b, uint c)
7ffdb05e8b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint true<uint>()
7ffdb05e8b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int true<int>(int a, int b, int c)
7ffdb05e8c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int true<int>()
7ffdb05e8c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong true<ulong>(ulong a, ulong b, ulong c)
7ffdb05e8d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong true<ulong>()
7ffdb05e8d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long true<long>(long a, long b, long c)
7ffdb05e8df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long true<long>()
7ffdb05e8e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte gather<byte>(byte src, byte mask)
7ffdb05e8fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort gather<ushort>(ushort src, ushort mask)
7ffdb05e9680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint gather<uint>(uint src, uint mask)
7ffdb05e96c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong gather<ulong>(ulong src, ulong mask)
7ffdb05e9aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte hi<byte>(byte src)
7ffdb05e9b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort hi<ushort>(ushort src)
7ffdb05e9b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint hi<uint>(uint src)
7ffdb05e9f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong hi<ulong>(ulong src)
7ffdb05e9f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte identity<byte>(byte a)
7ffdb05ea358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte identity<sbyte>(sbyte a)
7ffdb05ea718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort identity<ushort>(ushort a)
7ffdb05ea748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short identity<short>(short a)
7ffdb05eaaf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint identity<uint>(uint a)
7ffdb05eab20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int identity<int>(int a)
7ffdb05eab38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong identity<ulong>(ulong a)
7ffdb05eaec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long identity<long>(long a)
7ffdb05eb4e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte impl<byte>(byte a, byte b)
7ffdb05ebe40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte impl<sbyte>(sbyte a, sbyte b)
7ffdb05ebf00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort impl<ushort>(ushort a, ushort b)
7ffdb06005a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short impl<short>(short a, short b)
7ffdb0600ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint impl<uint>(uint a, uint b)
7ffdb0600f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int impl<int>(int a, int b)
7ffdb0600fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong impl<ulong>(ulong a, ulong b)
7ffdb0601068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long impl<long>(long a, long b)
7ffdb0601308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte left<byte>(byte a, byte b)
7ffdb0601398h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte left<sbyte>(sbyte a, sbyte b)
7ffdb06015c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort left<ushort>(ushort a, ushort b)
7ffdb06015d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short left<short>(short a, short b)
7ffdb0601608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint left<uint>(uint a, uint b)
7ffdb0601620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int left<int>(int a, int b)
7ffdb0601638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong left<ulong>(ulong a, ulong b)
7ffdb0601650h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long left<long>(long a, long b)
7ffdb0601680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte lnot<byte>(byte a, byte b)
7ffdb0601698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte not<byte>(byte a)
7ffdb06016b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte lnot<sbyte>(sbyte a, sbyte b)
7ffdb0601980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte not<sbyte>(sbyte a)
7ffdb0601998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort lnot<ushort>(ushort a, ushort b)
7ffdb0601c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort not<ushort>(ushort a)
7ffdb0601c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short lnot<short>(short a, short b)
7ffdb0601ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short not<short>(short a)
7ffdb0601cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint lnot<uint>(uint a, uint b)
7ffdb0601d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint not<uint>(uint a)
7ffdb0601da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int lnot<int>(int a, int b)
7ffdb0601e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int not<int>(int a)
7ffdb0601e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong lnot<ulong>(ulong a, ulong b)
7ffdb0601ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong not<ulong>(ulong a)
7ffdb0601ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long lnot<long>(long a, long b)
7ffdb0601f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long not<long>(long a)
7ffdb0601f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte lo<byte>(byte src)
7ffdb0602010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort lo<ushort>(ushort src)
7ffdb0602058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint lo<uint>(uint src)
7ffdb06020b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong lo<ulong>(ulong src)
7ffdb0602100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte lsboff<byte>(byte src)
7ffdb0602160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort lsboff<ushort>(ushort src)
7ffdb06021a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint lsboff<uint>(uint src)
7ffdb0602418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong lsboff<ulong>(ulong src)
7ffdb0602460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte mix<byte>(N0 parity, byte x, byte y)
7ffdb06024c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort mix<ushort>(N0 parity, ushort x, ushort y)
7ffdb0602718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint mix<uint>(N0 parity, uint x, uint y)
7ffdb0602ac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong mix<ulong>(N0 parity, ulong x, ulong y)
7ffdb0603ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte mix<byte>(N1 parity, byte x, byte y)
7ffdb0603e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort mix<ushort>(N1 parity, ushort x, ushort y)
7ffdb0603f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint mix<uint>(N1 parity, uint x, uint y)
7ffdb0608018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong mix<ulong>(N1 parity, ulong x, ulong y)
7ffdb0608060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte msb<byte>(byte src)
7ffdb0608690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte msb<ushort>(ushort src)
7ffdb06086d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte msb<uint>(uint src)
7ffdb0608738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte msb<ulong>(ulong src)
7ffdb0608ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nand<byte>(byte a, byte b)
7ffdb0608e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte nand<sbyte>(sbyte a, sbyte b)
7ffdb0609248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort nand<ushort>(ushort a, ushort b)
7ffdb0609920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short nand<short>(short a, short b)
7ffdb0609ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint nand<uint>(uint a, uint b)
7ffdb0609d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int nand<int>(int a, int b)
7ffdb0609dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong nand<ulong>(ulong a, ulong b)
7ffdb0609e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long nand<long>(long a, long b)
7ffdb060a118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nlz<byte>(byte src)
7ffdb060a1a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nlz<ushort>(ushort src)
7ffdb060a1d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nlz<uint>(uint src)
7ffdb060a220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nlz<ulong>(ulong src)
7ffdb060a268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nonimpl<byte>(byte a, byte b)
7ffdb060a298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte nonimpl<sbyte>(sbyte a, sbyte b)
7ffdb060a340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort nonimpl<ushort>(ushort a, ushort b)
7ffdb060a688h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short nonimpl<short>(short a, short b)
7ffdb060a6e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint nonimpl<uint>(uint a, uint b)
7ffdb060a760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int nonimpl<int>(int a, int b)
7ffdb060a7f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong nonimpl<ulong>(ulong a, ulong b)
7ffdb060aad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long nonimpl<long>(long a, long b)
7ffdb060ab50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nor<byte>(byte a, byte b)
7ffdb060abf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte nor<sbyte>(sbyte a, sbyte b)
7ffdb060aca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort nor<ushort>(ushort a, ushort b)
7ffdb060ad60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short nor<short>(short a, short b)
7ffdb060b018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint nor<uint>(uint a, uint b)
7ffdb060b498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int nor<int>(int a, int b)
7ffdb060b528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong nor<ulong>(ulong a, ulong b)
7ffdb060b9a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long nor<long>(long a, long b)
7ffdb060ba50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte ntz<byte>(byte src)
7ffdb060bb58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort ntz<ushort>(ushort src)
7ffdb060bbb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint ntz<uint>(uint src)
7ffdb060bc00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong ntz<ulong>(ulong src)
7ffdb060bc60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte or<sbyte>(sbyte a, sbyte b)
7ffdb060bd50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short or<short>(short a, short b)
7ffdb060be10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int or<int>(int a, int b)
7ffdb060be88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long or<long>(long a, long b)
7ffdb0640540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or<byte>(byte a, byte b, byte c)
7ffdb0640dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte or<sbyte>(sbyte a, sbyte b, sbyte c)
7ffdb0640e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or<ushort>(ushort a, ushort b, ushort c)
7ffdb0640f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short or<short>(short a, short b, short c)
7ffdb0640fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or<uint>(uint a, uint b, uint c)
7ffdb0641038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int or<int>(int a, int b, int c)
7ffdb06410c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or<ulong>(ulong a, ulong b, ulong c)
7ffdb0641158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long or<long>(long a, long b, long c)
7ffdb06411e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or<byte>(byte a, byte b, byte c, byte d)
7ffdb0641338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte or<sbyte>(sbyte a, sbyte b, sbyte c, sbyte d)
7ffdb06413c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or<ushort>(ushort a, ushort b, ushort c, ushort d)
7ffdb0641440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short or<short>(short a, short b, short c, short d)
7ffdb0641530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or<uint>(uint a, uint b, uint c, uint d)
7ffdb06415a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int or<int>(int a, int b, int c, int d)
7ffdb06415f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or<ulong>(ulong a, ulong b, ulong c, ulong d)
7ffdb0641650h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long or<long>(long a, long b, long c, long d)
7ffdb0641698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or<byte>(byte a, byte b, byte c, byte d, byte e)
7ffdb0641710h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte or<sbyte>(sbyte a, sbyte b, sbyte c, sbyte d, sbyte e)
7ffdb06417a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or<ushort>(ushort a, ushort b, ushort c, ushort d, ushort e)
7ffdb0641848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short or<short>(short a, short b, short c, short d, short e)
7ffdb06418a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or<uint>(uint a, uint b, uint c, uint d, uint e)
7ffdb0641968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int or<int>(int a, int b, int c, int d, int e)
7ffdb06419b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or<ulong>(ulong a, ulong b, ulong c, ulong d, ulong e)
7ffdb0642388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long or<long>(long a, long b, long c, long d, long e)
7ffdb06423d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte parse<byte>(ReadOnlySpan<char> src, byte offset, out byte dst)
7ffdb0642460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort parse<ushort>(ReadOnlySpan<char> src, byte offset, out ushort dst)
7ffdb0642520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint parse<uint>(ReadOnlySpan<char> src, byte offset, out uint dst)
7ffdb0642580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong parse<ulong>(ReadOnlySpan<char> src, byte offset, out ulong dst)
7ffdb06426a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<byte>(ReadOnlySpan<byte> src)
7ffdb06429d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<sbyte>(ReadOnlySpan<sbyte> src)
7ffdb0642a48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<ushort>(ReadOnlySpan<ushort> src)
7ffdb0642b08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<short>(ReadOnlySpan<short> src)
7ffdb0642b50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<uint>(ReadOnlySpan<uint> src)
7ffdb0642bf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<int>(ReadOnlySpan<int> src)
7ffdb0642c58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<ulong>(ReadOnlySpan<ulong> src)
7ffdb0642d18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<long>(ReadOnlySpan<long> src)
7ffdb0642d78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<byte>(byte x0, byte x1, byte x2)
7ffdb0642e38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<sbyte>(sbyte x0, sbyte x1, sbyte x2)
7ffdb0642f40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<ushort>(ushort x0, ushort x1, ushort x2)
7ffdb0643090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<short>(short x0, short x1, short x2)
7ffdb0643180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<uint>(uint x0, uint x1, uint x2)
7ffdb0643288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<int>(int x0, int x1, int x2)
7ffdb0643390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<ulong>(ulong x0, ulong x1, ulong x2)
7ffdb06434c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<long>(long x0, long x1, long x2)
7ffdb0643528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<byte>(byte x0, byte x1, byte x2, byte x3)
7ffdb06436f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<sbyte>(sbyte x0, sbyte x1, sbyte x2, sbyte x3)
7ffdb0643768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<ushort>(ushort x0, ushort x1, ushort x2, ushort x3)
7ffdb06437b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<short>(short x0, short x1, short x2, short x3)
7ffdb0643810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<uint>(uint x0, uint x1, uint x2, uint x3)
7ffdb0643858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<int>(int x0, int x1, int x2, int x3)
7ffdb06438a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<ulong>(ulong x0, ulong x1, ulong x2, ulong x3)
7ffdb0643900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<long>(long x0, long x1, long x2, long x3)
7ffdb0643948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<byte>(byte x0, byte x1, byte x2, byte x3, byte x4, byte x5, byte x6, byte x7)
7ffdb06439a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<sbyte>(sbyte x0, sbyte x1, sbyte x2, sbyte x3, sbyte x4, sbyte x5, sbyte x6, sbyte x7)
7ffdb0643a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<ushort>(ushort x0, ushort x1, ushort x2, ushort x3, ushort x4, ushort x5, ushort x6, ushort x7)
7ffdb0643ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<short>(short x0, short x1, short x2, short x3, short x4, short x5, short x6, short x7)
7ffdb0643b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<uint>(uint x0, uint x1, uint x2, uint x3, uint x4, uint x5, uint x6, uint x7)
7ffdb0643ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<int>(int x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7)
7ffdb0643f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<ulong>(ulong x0, ulong x1, ulong x2, ulong x3, ulong x4, ulong x5, ulong x6, ulong x7)
7ffdb0648d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop<long>(long x0, long x1, long x2, long x3, long x4, long x5, long x6, long x7)
7ffdb06494a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rank<byte>(byte src, int pos)
7ffdb0649ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rank<ushort>(ushort src, int pos)
7ffdb064a868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rank<uint>(uint src, int pos)
7ffdb064a910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rank<ulong>(ulong src, int pos)
7ffdb064a958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit readbit<byte>(in byte src, uint bitpos)
7ffdb064a9e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test<byte>(byte src, byte pos)
7ffdb064ab38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit readbit<ushort>(in ushort src, uint bitpos)
7ffdb064b6c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test<ushort>(ushort src, byte pos)
7ffdb064b780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit readbit<uint>(in uint src, uint bitpos)
7ffdb0670378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test<uint>(uint src, byte pos)
7ffdb0670390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit readbit<ulong>(in ulong src, uint bitpos)
7ffdb0670450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test<ulong>(ulong src, byte pos)
7ffdb0670558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte replicate<byte>(byte src, byte i0, byte i1, byte count)
7ffdb0671020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort replicate<ushort>(ushort src, byte i0, byte i1, byte count)
7ffdb06710c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint replicate<uint>(uint src, byte i0, byte i1, byte count)
7ffdb0671cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong replicate<ulong>(ulong src, byte i0, byte i1, byte count)
7ffdb0671ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte replicate<byte>(byte src)
7ffdb0671ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort replicate<ushort>(ushort src)
7ffdb0672ac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint replicate<uint>(uint src)
7ffdb0673750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong replicate<ulong>(ulong src)
7ffdb06737c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte replicate<byte>(byte src)
7ffdb06737e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort replicate<ushort>(byte src)
7ffdb0673870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint replicate<uint>(byte src)
7ffdb06738b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong replicate<ulong>(byte src)
7ffdb0673900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte right<byte>(byte a, byte b)
7ffdb0673948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte right<sbyte>(sbyte a, sbyte b)
7ffdb0673990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort right<ushort>(ushort a, ushort b)
7ffdb06739c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short right<short>(short a, short b)
7ffdb06739d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint right<uint>(uint a, uint b)
7ffdb0673a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int right<int>(int a, int b)
7ffdb0673a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong right<ulong>(ulong a, ulong b)
7ffdb0673a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long right<long>(long a, long b)
7ffdb0673a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rnot<byte>(byte a, byte b)
7ffdb0673ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte rnot<sbyte>(sbyte a, sbyte b)
7ffdb0673b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rnot<ushort>(ushort a, ushort b)
7ffdb0673bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short rnot<short>(short a, short b)
7ffdb0673be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rnot<uint>(uint a, uint b)
7ffdb0673c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int rnot<int>(int a, int b)
7ffdb0673c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rnot<ulong>(ulong a, ulong b)
7ffdb0673ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long rnot<long>(long a, long b)
7ffdb0673cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rotl<byte>(byte src, byte count)
7ffdb0673cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rotl<ushort>(ushort src, byte count)
7ffdb0673d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rotl<uint>(uint src, byte count)
7ffdb0673db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rotl<ulong>(ulong src, byte count)
7ffdb0673e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rotl<byte>(byte src, byte count, int width)
7ffdb0673ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rotl<ushort>(ushort src, byte count, int width)
7ffdb0673ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rotl<uint>(uint src, byte count, int width)
7ffdb0673f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rotl<ulong>(ulong src, byte count, int width)
7ffdb0673fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rotr<byte>(byte src, byte count)
7ffdb0678000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rotr<ushort>(ushort src, byte count)
7ffdb06780a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rotr<uint>(uint src, byte count)
7ffdb06780f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rotr<ulong>(ulong src, byte count)
7ffdb0678138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rotr<byte>(byte src, byte count, byte width)
7ffdb0678180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rotr<ushort>(ushort src, byte count, byte width)
7ffdb06781f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rotr<uint>(uint src, byte count, byte width)
7ffdb0678258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rotr<ulong>(ulong src, byte count, byte width)
7ffdb06782b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte scatter<byte>(byte src, byte mask)
7ffdb0678318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort scatter<ushort>(ushort src, ushort mask)
7ffdb0678390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint scatter<uint>(uint src, uint mask)
7ffdb06783f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong scatter<ulong>(ulong src, ulong mask)
7ffdb0678450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte seg<byte>(in Span<byte> src, BitPos<byte> i0, BitPos<byte> i1)
7ffdb06784b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort seg<ushort>(in Span<ushort> src, BitPos<ushort> i0, BitPos<ushort> i1)
7ffdb0678708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint seg<uint>(in Span<uint> src, BitPos<uint> i0, BitPos<uint> i1)
7ffdb06787f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong seg<ulong>(in Span<ulong> src, BitPos<ulong> i0, BitPos<ulong> i1)
7ffdb0678990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte seg<byte>(in Span<byte> src, uint i0, uint i1)
7ffdb0678a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort seg<ushort>(in Span<ushort> src, uint i0, uint i1)
7ffdb0679a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint seg<uint>(in Span<uint> src, uint i0, uint i1)
7ffdb067a820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong seg<ulong>(in Span<ulong> src, uint i0, uint i1)
7ffdb067a988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte seg<byte>(byte src, byte i0, byte i1)
7ffdb067ac88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte seg<sbyte>(sbyte src, byte i0, byte i1)
7ffdb067af40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort seg<ushort>(ushort src, byte i0, byte i1)
7ffdb067b5b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short seg<short>(short src, byte i0, byte i1)
7ffdb067b630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint seg<uint>(uint src, byte i0, byte i1)
7ffdb067b7c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int seg<int>(int src, byte i0, byte i1)
7ffdb06b0030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong seg<ulong>(ulong src, byte i0, byte i1)
7ffdb06b0b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long seg<long>(long src, byte i0, byte i1)
7ffdb06b1578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float seg<float>(float src, byte i0, byte i1)
7ffdb06b18a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double seg<double>(double src, byte i0, byte i1)
7ffdb06b18d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte select<byte>(byte a, byte b, byte c)
7ffdb06b1950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte select<sbyte>(sbyte a, sbyte b, sbyte c)
7ffdb06b1998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort select<ushort>(ushort a, ushort b, ushort c)
7ffdb06b1ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short select<short>(short a, short b, short c)
7ffdb06b1b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint select<uint>(uint a, uint b, uint c)
7ffdb06b1c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int select<int>(int a, int b, int c)
7ffdb06b1c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong select<ulong>(ulong a, ulong b, ulong c)
7ffdb06b1d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long select<long>(long a, long b, long c)
7ffdb06b1da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte set<byte>(byte src, byte pos, bit state)
7ffdb06b1e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte set<sbyte>(sbyte src, byte pos, bit state)
7ffdb06b1f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort set<ushort>(ushort src, byte pos, bit state)
7ffdb06b1f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short set<short>(short src, byte pos, bit state)
7ffdb06b2010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint set<uint>(uint src, byte pos, bit state)
7ffdb06b20d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int set<int>(int src, byte pos, bit state)
7ffdb06b21d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong set<ulong>(ulong src, byte pos, bit state)
7ffdb06b2268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long set<long>(long src, byte pos, bit state)
7ffdb06b2358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float set<float>(float src, byte pos, bit state)
7ffdb06b2460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double set<double>(double src, byte pos, bit state)
7ffdb06b24d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void split<byte>(byte src, int index, out byte x0, out byte x1)
7ffdb06b27d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void split<ushort>(ushort src, int index, out ushort x0, out ushort x1)
7ffdb06b2cd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void split<uint>(uint src, int index, out uint x0, out uint x1)
7ffdb06b3690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void split<ulong>(ulong src, int index, out ulong x0, out ulong x1)
7ffdb06b36d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit state<byte>(in byte src, byte pos)
7ffdb06b3738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit state<ushort>(in ushort src, byte pos)
7ffdb06b3780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit state<uint>(in uint src, byte pos)
7ffdb06b37b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit state<ulong>(in ulong src, byte pos)
7ffdb06b37c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte state<byte>(ref byte src, byte pos, bit value)
7ffdb06b37e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort state<ushort>(ref ushort src, byte pos, bit value)
7ffdb06b38b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint state<uint>(ref uint src, byte pos, bit value)
7ffdb06b38e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong state<ulong>(ref ulong src, byte pos, bit value)
7ffdb06b3918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte stitch<byte>(byte a, int i, byte b, int j)
7ffdb06b3ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort stitch<ushort>(ushort a, int i, ushort b, int j)
7ffdb06b8330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint stitch<uint>(uint a, int i, uint b, int j)
7ffdb06b8390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong stitch<ulong>(ulong a, int i, ulong b, int j)
7ffdb06b83d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte store<byte>(in byte src, byte min, byte max, ref byte dst)
7ffdb06b8420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort store<ushort>(in ushort src, byte min, byte max, ref ushort dst)
7ffdb06b8498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint store<uint>(in uint src, byte min, byte max, ref uint dst)
7ffdb06b84f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong store<ulong>(in ulong src, byte min, byte max, ref ulong dst)
7ffdb06b8558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test<sbyte>(sbyte src, byte pos)
7ffdb06b8660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test<short>(short src, byte pos)
7ffdb06b8870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test<int>(int src, byte pos)
7ffdb06b89a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test<long>(long src, byte pos)
7ffdb06b8a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test<float>(float src, byte pos)
7ffdb06b8b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test<double>(double src, byte pos)
7ffdb06b8cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<bit> testbits<byte>(byte src, Span<bit> dst, int offset)
7ffdb06b8df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<bit> testbits<ushort>(ushort src, Span<bit> dst, int offset)
7ffdb06b8e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<bit> testbits<uint>(uint src, Span<bit> dst, int offset)
7ffdb06b9020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<bit> testbits<ulong>(ulong src, Span<bit> dst, int offset)
7ffdb06b9098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte toggle<byte>(byte src, int pos)
7ffdb06b9170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte toggle<sbyte>(sbyte src, int pos)
7ffdb06b9290h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort toggle<ushort>(ushort src, int pos)
7ffdb06b9308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short toggle<short>(short src, int pos)
7ffdb06b9380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint toggle<uint>(uint src, int pos)
7ffdb06b9590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int toggle<int>(int src, int pos)
7ffdb06b95f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong toggle<ulong>(ulong src, int pos)
7ffdb06b9650h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long toggle<long>(long src, int pos)
7ffdb06b96b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float toggle<float>(float src, int pos)
7ffdb06b9758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double toggle<double>(double src, int pos)
7ffdb06b97d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte true<byte>(byte a)
7ffdb06bad78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte true<sbyte>(sbyte a)
7ffdb06badc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort true<ushort>(ushort a)
7ffdb06bae08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short true<short>(short a)
7ffdb06bae38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint true<uint>(uint a)
7ffdb06bae68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int true<int>(int a)
7ffdb06bae98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong true<ulong>(ulong a)
7ffdb06baec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long true<long>(long a)
7ffdb06baef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte true<byte>(byte a, byte b)
7ffdb06baf40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte true<sbyte>(sbyte a, sbyte b)
7ffdb06baf88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort true<ushort>(ushort a, ushort b)
7ffdb06bafb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short true<short>(short a, short b)
7ffdb06bafe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint true<uint>(uint a, uint b)
7ffdb06bb030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int true<int>(int a, int b)
7ffdb06bb060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong true<ulong>(ulong a, ulong b)
7ffdb06bb090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long true<long>(long a, long b)
7ffdb06bb0c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xlsb<byte>(byte src)
7ffdb06bb0f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xlsb<ushort>(ushort src)
7ffdb06bb150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xlsb<uint>(uint src)
7ffdb06bb1b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xlsb<ulong>(ulong src)
7ffdb06bb210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xnor<byte>(byte a, byte b)
7ffdb06bb270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte xnor<sbyte>(sbyte a, sbyte b)
7ffdb06bb330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xnor<ushort>(ushort a, ushort b)
7ffdb06bb420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short xnor<short>(short a, short b)
7ffdb06bb8e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xnor<uint>(uint a, uint b)
7ffdb06bbd98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int xnor<int>(int a, int b)
7ffdb06bbe10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xnor<ulong>(ulong a, ulong b)
7ffdb07005e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long xnor<long>(long a, long b)
7ffdb0700b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xornot<byte>(byte a, byte b)
7ffdb0709428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte xornot<sbyte>(sbyte a, sbyte b)
7ffdb0709470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xornot<ushort>(ushort a, ushort b)
7ffdb0709488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short xornot<short>(short a, short b)
7ffdb07094a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xornot<uint>(uint a, uint b)
7ffdb0709890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int xornot<int>(int a, int b)
7ffdb0709998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xornot<ulong>(ulong a, ulong b)
7ffdb0709b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long xornot<long>(long a, long b)
7ffdb0709c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte zhi<byte>(byte src, byte index)
7ffdb0709e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort zhi<ushort>(ushort src, byte index)
7ffdb070a190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint zhi<uint>(uint src, byte index)
7ffdb070a298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong zhi<ulong>(ulong src, byte index)
7ffdb070a448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitCircles bitstack(ulong state)
7ffdaea29560h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte bextr(sbyte src, byte pos, byte width)
7ffdaea29590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte bextr(byte src, byte pos, byte width)
7ffdaea295a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short bextr(short src, byte pos, byte width)
7ffdaea295c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort bextr(ushort src, byte pos, byte width)
7ffdaea295d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int bextr(int src, byte pos, byte width)
7ffdaea295f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bextr(uint src, byte pos, byte width)
7ffdaea29608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long bextr(long src, byte pos, byte width)
7ffdaea29620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bextr(ulong src, byte pos, byte width)
7ffdaea29638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte bfly(N1 n, byte x)
7ffdaea29650h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort bfly(N1 n, ushort x)
7ffdaea29668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bfly(N1 n, uint x)
7ffdaea29680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bfly(N1 n, ulong x)
7ffdaea29698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte bfly(N2 n, byte x)
7ffdaea296b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort bfly(N2 n, ushort x)
7ffdaea296c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bfly(N2 n, uint x)
7ffdaea296e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bfly(N2 n, ulong x)
7ffdaea296f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort bfly(N4 n, ushort x)
7ffdaea29710h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bfly(N4 n, uint x)
7ffdaea29728h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bfly(N4 n, ulong x)
7ffdaea29740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bfly(N8 n, uint x)
7ffdaea29758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bfly(N8 n, ulong x)
7ffdaea29770h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bfly(N16 n, ulong x)
7ffdaea29788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte bitcopy(byte src, byte index, byte count, byte dst)
7ffdaea297b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort bitcopy(ushort src, byte index, byte count, ushort dst)
7ffdaea297d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitcopy(uint src, byte index, byte count, uint dst)
7ffdaea297e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bitcopy(ulong src, byte index, byte count, ulong dst)
7ffdaea29800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte blsi(sbyte src)
7ffdaea29818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte blsi(byte src)
7ffdaea29830h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short blsi(short src)
7ffdaea29848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort blsi(ushort src)
7ffdaea29860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blsi(int src)
7ffdaea29878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint blsi(uint src)
7ffdaea29890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long blsi(long src)
7ffdaea298a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong blsi(ulong src)
7ffdaea298c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte blsmsk(byte src)
7ffdaea298d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte blsmsk(sbyte src)
7ffdaea298f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort blsmsk(ushort src)
7ffdaea29908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short blsmsk(short src)
7ffdaea29920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint blsmsk(uint src)
7ffdaea29938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int blsmsk(int src)
7ffdaea29950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong blsmsk(ulong src)
7ffdaea29968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long blsmsk(long src)
7ffdaea29980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort byteswap(ushort src)
7ffdaea29998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint byteswap(uint src)
7ffdaea299b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong byteswap(ulong src)
7ffdaea299c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte disable(sbyte src, int pos)
7ffdaea299e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable(byte src, int pos)
7ffdaea299f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short disable(short src, int pos)
7ffdaea29a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable(ushort src, int pos)
7ffdaea29a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int disable(int src, int pos)
7ffdaea29a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable(uint src, int pos)
7ffdaea29a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long disable(long src, int pos)
7ffdaea29a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable(ulong src, int pos)
7ffdaea29a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float disable(float src, int pos)
7ffdaea29aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double disable(double src, int pos)
7ffdaea29ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable10(byte src, byte offset)
7ffdaea29ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable10(ushort src, byte offset)
7ffdaea29ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable10(uint src, byte offset)
7ffdaea29b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable10(ulong src, byte offset)
7ffdaea29b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable(N10 n, byte src, byte offset)
7ffdaea29b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable(N10 n, ushort src, byte offset)
7ffdaea29b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable(N10 n, uint src, byte offset)
7ffdaea29b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable(N10 n, ulong src, byte offset)
7ffdaea29b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable12(byte src, byte offset)
7ffdaea29b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable12(ushort src, byte offset)
7ffdaea29ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable12(uint src, byte offset)
7ffdaea29bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable12(ulong src, byte offset)
7ffdaea29bd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable(N12 n, byte src, byte offset)
7ffdaea29bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable(N12 n, ushort src, byte offset)
7ffdaea29c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable(N12 n, uint src, byte offset)
7ffdaea29c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable(N12 n, ulong src, byte offset)
7ffdaea29c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable14(byte src, byte offset)
7ffdaea29c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable14(ushort src, byte offset)
7ffdaea29c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable14(uint src, byte offset)
7ffdaea29c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable14(ulong src, byte offset)
7ffdaea29c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable(N14 n, byte src, byte offset)
7ffdaea29cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable(N14 n, ushort src, byte offset)
7ffdaea29cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable(N14 n, uint src, byte offset)
7ffdaea29ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable(N14 n, ulong src, byte offset)
7ffdaea29cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable2(byte src, byte offset)
7ffdaea29d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable2(ushort src, byte offset)
7ffdaea29d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable2(uint src, byte offset)
7ffdaea29d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable2(ulong src, byte offset)
7ffdaea29d58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable(N2 n, byte src, byte offset)
7ffdaea29d70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable(N2 n, ushort src, byte offset)
7ffdaea29d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable(N2 n, uint src, byte offset)
7ffdaea29da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable(N2 n, ulong src, byte offset)
7ffdaea29db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable3(byte src, byte offset)
7ffdaea29dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable3(ushort src, byte offset)
7ffdaea29de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable3(uint src, byte offset)
7ffdaea29e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable3(ulong src, byte offset)
7ffdaea29e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable(N3 n, byte src, byte offset)
7ffdaea29e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable(N3 n, ushort src, byte offset)
7ffdaea29e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable(N3 n, uint src, byte offset)
7ffdaea29e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable(N3 n, ulong src, byte offset)
7ffdaea29e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable4(byte src, byte offset)
7ffdaea29e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable4(ushort src, byte offset)
7ffdaea29ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable4(uint src, byte offset)
7ffdaea29ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable4(ulong src, byte offset)
7ffdaea29ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable(N4 n, byte src, byte offset)
7ffdaea29ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable(N4 n, ushort src, byte offset)
7ffdaea29f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable(N4 n, uint src, byte offset)
7ffdaea29f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable(N4 n, ulong src, byte offset)
7ffdaea29f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable5(byte src, byte offset)
7ffdaea29f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable5(ushort src, byte offset)
7ffdaea29f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable5(uint src, byte offset)
7ffdaea29f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable5(ulong src, byte offset)
7ffdaea29f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable(N5 n, byte src, byte offset)
7ffdaea29fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable(N5 n, ushort src, byte offset)
7ffdaea29fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable(N5 n, uint src, byte offset)
7ffdaea29fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable(N5 n, ulong src, byte offset)
7ffdaea29ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable6(byte src, byte offset)
7ffdaea2a010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable6(ushort src, byte offset)
7ffdaea2a028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable6(uint src, byte offset)
7ffdaea2a040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable6(ulong src, byte offset)
7ffdaea2a058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable(N6 n, byte src, byte offset)
7ffdaea2a070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable(N6 n, ushort src, byte offset)
7ffdaea2a088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable(N6 n, uint src, byte offset)
7ffdaea2a0a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable(N6 n, ulong src, byte offset)
7ffdaea2a0b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable7(byte src, byte offset)
7ffdaea2a0d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable7(ushort src, byte offset)
7ffdaea2a0e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable7(uint src, byte offset)
7ffdaea2a100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable7(ulong src, byte offset)
7ffdaea2a118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte disable(N7 n, byte src, byte offset)
7ffdaea2a130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable(N7 n, ushort src, byte offset)
7ffdaea2a148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable(N7 n, uint src, byte offset)
7ffdaea2a160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable(N7 n, ulong src, byte offset)
7ffdaea2a178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable8(ushort src, byte offset)
7ffdaea2a190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable8(uint src, byte offset)
7ffdaea2a1a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable8(ulong src, byte offset)
7ffdaea2a1c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort disable(N8 n, ushort src, byte offset)
7ffdaea2a1d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint disable(N8 n, uint src, byte offset)
7ffdaea2a1f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong disable(N8 n, ulong src, byte offset)
7ffdaea2a208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte effsize(ulong src)
7ffdaea2a220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte effwidth(byte src)
7ffdaea2a238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte effwidth(ushort src)
7ffdaea2a250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte effwidth(uint src)
7ffdaea2a268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte effwidth(ulong src)
7ffdaea2a280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte enable(sbyte src, byte pos)
7ffdaea2a298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte enable(byte src, byte pos)
7ffdaea2a2b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short enable(short src, byte pos)
7ffdaea2a2c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort enable(ushort src, byte pos)
7ffdaea2a2e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int enable(int src, byte pos)
7ffdaea2a2f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint enable(uint src, byte pos)
7ffdaea2a310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long enable(long src, byte pos)
7ffdaea2a328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong enable(ulong src, byte pos)
7ffdaea2a340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float enable(float src, byte pos)
7ffdaea2a358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double enable(double src, byte pos)
7ffdaea2a370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte enable(byte src, byte offset, byte width)
7ffdaea2a388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte enable(sbyte src, byte offset, byte width)
7ffdaea2a3a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort enable(ushort src, byte offset, byte width)
7ffdaea2a3b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short enable(short src, byte offset, byte width)
7ffdaea2a3d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint enable(uint src, byte offset, byte width)
7ffdaea2a3e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int enable(int src, byte offset, byte width)
7ffdaea2a400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong enable(ulong src, byte offset, byte width)
7ffdaea2a418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long enable(long src, byte offset, byte width)
7ffdaea2a430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte extract(sbyte src, byte i0, byte i1)
7ffdaea2a448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte extract(byte src, byte i0, byte i1)
7ffdaea2a460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short extract(short src, byte i0, byte i1)
7ffdaea2a478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort extract(ushort src, byte i0, byte i1)
7ffdaea2a490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint extract(uint src, byte i0, byte i1)
7ffdaea2a4a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int extract(int src, byte i0, byte i1)
7ffdaea2a4c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong extract(ulong src, byte i0, byte i1)
7ffdaea2a4d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long extract(long src, byte i0, byte i1)
7ffdaea2a4f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float extract(float src, byte i0, byte i1)
7ffdaea2a508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double extract(double src, byte i0, byte i1)
7ffdaea2a520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte gather(byte src, byte mask)
7ffdaea2a538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort gather(ushort src, ushort mask)
7ffdaea2a550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint gather(uint src, uint mask)
7ffdaea2a568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong gather(ulong src, ulong mask)
7ffdaea2a580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte hi(byte src)
7ffdaea2a598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort hi(ushort src)
7ffdaea2a5b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint hi(uint src)
7ffdaea2a5c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong hi(ulong src)
7ffdaea2a5e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort join(byte a, byte b)
7ffdaea2a5f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint join(byte a, byte b, byte c)
7ffdaea2a610h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint join(byte a, byte b, byte c, byte d)
7ffdaea2a628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong join(byte a, byte b, byte c, byte d, byte e, byte f, byte g, byte h)
7ffdaea2a640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint join(ushort a, ushort b)
7ffdaea2a658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong join(ushort a, ushort b, ushort c)
7ffdaea2a670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong join(ushort a, ushort b, ushort c, ushort d)
7ffdaea2a688h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong join(in uint a, in uint b)
7ffdaea2a6a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte lo(byte src)
7ffdaea2a6b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort lo(ushort src)
7ffdaea2a6d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint lo(uint src)
7ffdaea2a6e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong lo(ulong src)
7ffdaea2a700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte lsboff(byte src)
7ffdaea2a718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort lsboff(ushort src)
7ffdaea2a730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint lsboff(uint src)
7ffdaea2a748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong lsboff(ulong src)
7ffdaea2a760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte lsbon(byte src)
7ffdaea2a778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte lsbon(sbyte src)
7ffdaea2a790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort lsbon(ushort src)
7ffdaea2a7a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short lsbon(short src)
7ffdaea2a7c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint lsbon(uint src)
7ffdaea2a7d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int lsbon(int src)
7ffdaea2a7f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong lsbon(ulong src)
7ffdaea2a808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long lsbon(long src)
7ffdaea2a820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte mix(N0 parity, byte x, byte y)
7ffdaea2a838h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte mix(N1 parity, byte x, byte y)
7ffdaea2a850h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort mix(N0 parity, ushort x, ushort y)
7ffdaea2a868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort mix(N1 parity, ushort x, ushort y)
7ffdaea2a880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint mix(N0 parity, uint x, uint y)
7ffdaea2a898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint mix(N1 parity, uint x, uint y)
7ffdaea2a8b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong mix(N0 parity, ulong x, ulong y)
7ffdaea2a8c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong mix(N1 parity, ulong x, ulong y)
7ffdaea2a8e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte mix(byte x, byte y, byte parity)
7ffdaea2a8f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort mix(ushort x, ushort y, ushort parity)
7ffdaea2a910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint mix(uint x, uint y, uint parity)
7ffdaea2a928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong mix(ulong x, ulong y, ulong parity)
7ffdaea2a940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte msb(byte src)
7ffdaea2a958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte msb(ushort src)
7ffdaea2a970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte msb(uint src)
7ffdaea2a988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte msb(ulong src)
7ffdaea2a9a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pow2x16 next(Pow2x8 src)
7ffdaea2a9b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pow2x32 next(Pow2x16 src)
7ffdaea2a9d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pow2x64 next(Pow2x32 src)
7ffdaea2a9e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pow2x64 next(Pow2x64 src)
7ffdaea2aa00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nlz(byte src)
7ffdaea2aa18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nlz(ushort src)
7ffdaea2aa30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nlz(uint src)
7ffdaea2aa48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nlz(ulong src)
7ffdaea2aa60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte ntz(byte src)
7ffdaea2aa78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort ntz(ushort src)
7ffdaea2aa90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint ntz(uint src)
7ffdaea2aaa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong ntz(ulong src)
7ffdaea2aac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte offmod(uint w, uint index)
7ffdaea2aad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong ones(int n)
7ffdaea2aaf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop(sbyte src)
7ffdaea2ab08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop(byte src)
7ffdaea2ab20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop(short src)
7ffdaea2ab38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop(ushort src)
7ffdaea2ab50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop(int src)
7ffdaea2ab68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop(uint src)
7ffdaea2ab80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop(long src)
7ffdaea2ab98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop(ulong src)
7ffdaea2abb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop(ulong x, ulong y, ulong z)
7ffdaea2abc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop(ulong x0, ulong x1, ulong x2, ulong x3)
7ffdaea2abe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop(ulong x0, ulong x1, ulong x2, ulong x3, ulong x4, ulong x5, ulong x6, ulong x7)
7ffdaea2abf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop(ulong x0, ulong x1, ulong x2, ulong x3, ulong x4, ulong x5)
7ffdaea2ac10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rank(byte src, int pos)
7ffdaea2ac40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rank(ushort src, int pos)
7ffdaea2ac58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rank(uint src, int pos)
7ffdaea2ac70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rank(ulong src, int pos)
7ffdaea2ac88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte replace(byte src, byte i0, byte i1, byte value)
7ffdaea2aca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort replace(ushort src, byte i0, byte i1, ushort value)
7ffdaea2acb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint replace(uint src, byte i0, byte i1, uint value)
7ffdaea2acd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong replace(ulong src, byte i0, byte i1, ulong value)
7ffdaea2ace8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte replicate(byte src, byte from, byte to, byte count)
7ffdaea2ad00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort replicate(ushort src, byte from, byte to, byte count)
7ffdaea2ad18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint replicate(uint src, byte from, byte to, byte count)
7ffdaea2ad30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong replicate(ulong src, byte from, byte to, byte count)
7ffdaea2ad48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte reverse(byte src)
7ffdaea2ad60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort reverse(ushort src)
7ffdaea2ad78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rotl(byte src, byte count)
7ffdaea2adc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rotl(ushort src, byte count)
7ffdaea2add8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rotl(uint src, byte count)
7ffdaea2adf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rotl(ulong src, byte count)
7ffdaea2ae08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rotl(byte src, byte count, int width)
7ffdaea2ae20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rotl(ushort src, byte count, int width)
7ffdaea2ae38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rotl(uint src, byte count, int width)
7ffdaea2ae50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rotl(ulong src, byte count, int width)
7ffdaea2ae68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rotr(byte src, byte count)
7ffdaea2ae80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rotr(ushort src, byte count)
7ffdaea2ae98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rotr(uint src, byte count)
7ffdaea2aeb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rotr(ulong src, byte count)
7ffdaea2aec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rotr(byte src, int count, int width)
7ffdaea2aee0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rotr(ushort src, int count, int width)
7ffdaea2aef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rotr(uint src, int count, int width)
7ffdaea2af10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rotr(ulong src, int count, int width)
7ffdaea2af28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte scatter(byte src, byte mask)
7ffdaea2af40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort scatter(ushort src, ushort mask)
7ffdaea2af58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint scatter(uint src, uint mask)
7ffdaea2af70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong scatter(ulong src, ulong mask)
7ffdaea2af88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte seg(sbyte src, byte i0, byte i1)
7ffdaea2afa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte seg(byte src, byte i0, byte i1)
7ffdaea2afb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short seg(short src, byte i0, byte i1)
7ffdaea2afd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort seg(ushort src, byte i0, byte i1)
7ffdaea2afe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint seg(uint src, byte i0, byte i1)
7ffdaea2b000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int seg(int src, byte i0, byte i1)
7ffdaea2b018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong seg(ulong src, byte i0, byte i1)
7ffdaea2b030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long seg(long src, byte i0, byte i1)
7ffdaea2b048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float seg(float src, byte i0, byte i1)
7ffdaea2b060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double seg(double src, byte i0, byte i1)
7ffdaea2b078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte segwidth(byte i0, byte i1)
7ffdaea2b090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint segwidth(uint i0, uint i1)
7ffdaea2b0a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte set(byte src, byte index, bit state)
7ffdaea2b0c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte set(sbyte src, byte index, bit state)
7ffdaea2b0d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort set(ushort src, byte index, bit state)
7ffdaea2b0f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short set(short src, byte index, bit state)
7ffdaea2b108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint set(uint src, byte index, bit state)
7ffdaea2b120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int set(int src, byte index, bit state)
7ffdaea2b138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong set(ulong src, byte index, bit state)
7ffdaea2b150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long set(long src, byte index, bit state)
7ffdaea2b168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte set(ref byte src, byte pos, bit state)
7ffdaea2b180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort set(ref ushort src, byte pos, bit state)
7ffdaea2b198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint set(ref uint src, byte pos, bit state)
7ffdaea2b1b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong set(ref ulong src, byte pos, bit state)
7ffdaea2b1c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte setif(byte src, byte srcpos, byte dst, byte dstpos)
7ffdaea2b1e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort setif(ushort src, byte srcpos, ushort dst, byte dstpos)
7ffdaea2b1f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint setif(uint src, byte srcpos, uint dst, byte dstpos)
7ffdaea2b210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong setif(ulong src, byte srcpos, ulong dst, byte dstpos)
7ffdaea2b228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte slice(sbyte src, byte pos, byte width)
7ffdaea2b240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte slice(byte src, byte pos, byte width)
7ffdaea2b258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short slice(short src, byte pos, byte width)
7ffdaea2b270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort slice(ushort src, byte pos, byte width)
7ffdaea2b288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int slice(int src, byte pos, byte width)
7ffdaea2b2a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint slice(uint src, byte pos, byte width)
7ffdaea2b2b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long slice(long src, byte pos, byte width)
7ffdaea2b2d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong slice(ulong src, byte pos, byte width)
7ffdaea2b2e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<byte> split(ushort src, N2 n)
7ffdaea2b300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<ushort> split(uint src, N2 n)
7ffdaea2b318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Quad<byte> split(uint src, N4 n)
7ffdaea2b330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<uint> split(ulong src, N2 n)
7ffdaea2b348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Quad<ushort> split(ulong src, N4 n)
7ffdaea2b360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void split(byte src, int index, out byte x0, out byte x1)
7ffdaea2b378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void split(ushort src, int index, out ushort x0, out ushort x1)
7ffdaea2b390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void split(uint src, int index, out uint x0, out uint x1)
7ffdaea2b3a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void split(ulong src, int index, out ulong x0, out ulong x1)
7ffdaea2b3c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void split(byte src, out byte x0, out byte x1)
7ffdaea2b3d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte split(byte src, out byte x0)
7ffdaea2b3f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void split(ushort src, out byte x0, out byte x1)
7ffdaea2b408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte split(ushort src, out byte x0)
7ffdaea2b420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void split(uint src, out ushort x0, out ushort x1)
7ffdaea2b438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort split(uint src, out ushort x0)
7ffdaea2b450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void split(ulong src, out uint x0, out uint x1)
7ffdaea2b468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint split(ulong src, out uint x0)
7ffdaea2b480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void split(ulong src, out ushort x0, out ushort x1, out ushort x2, out ushort x3)
7ffdaea2b498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void split(uint src, out byte x0, out byte x1, out byte x2, out byte x3)
7ffdaea2b4b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void split(ulong src, out byte x0, out byte x1, out byte x2, out byte x3, out byte x4, out byte x5, out byte x6, out byte x7)
7ffdaea2b4c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte stitch(byte left, int ldx, byte right, int rdx)
7ffdaea2b4e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort stitch(ushort left, int ldx, ushort right, int rdx)
7ffdaea2b4f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint stitch(uint left, int ldx, uint right, int rdx)
7ffdaea2b510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong stitch(ulong left, int ldx, ulong right, int rdx)
7ffdaea2b528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte store(in byte src, byte min, byte max, ref byte dst)
7ffdaea2b540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort store(in ushort src, byte min, byte max, ref ushort dst)
7ffdaea2b558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint store(in uint src, byte min, byte max, ref uint dst)
7ffdaea2b570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong store(in ulong src, byte min, byte max, ref ulong dst)
7ffdaea2b588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test(sbyte src, byte pos)
7ffdaea2b5a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test(byte src, byte pos)
7ffdaea2b5b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test(short src, byte pos)
7ffdaea2b5d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test(ushort src, byte pos)
7ffdaea2b5e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test(int src, byte pos)
7ffdaea2b600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test(uint src, byte pos)
7ffdaea2b618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test(long src, byte pos)
7ffdaea2b630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test(ulong src, byte pos)
7ffdaea2b648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test(float src, byte pos)
7ffdaea2b660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit test(double src, byte pos)
7ffdaea2b678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte toggle(sbyte src, int pos)
7ffdaea2b690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte toggle(byte src, int pos)
7ffdaea2b6a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short toggle(short src, int pos)
7ffdaea2b6c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort toggle(ushort src, int pos)
7ffdaea2b6d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int toggle(int src, int pos)
7ffdaea2b6f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint toggle(uint src, int pos)
7ffdaea2b708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long toggle(long src, int pos)
7ffdaea2b720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong toggle(ulong src, int pos)
7ffdaea2b738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float toggle(float src, int pos)
7ffdaea2b750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double toggle(double src, int pos)
7ffdaea2b768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte trim(byte src, byte offset, byte count)
7ffdaea2b780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte trim(sbyte src, byte offset, byte count)
7ffdaea2b798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort trim(ushort src, byte offset, byte count)
7ffdaea2b7b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short trim(short src, byte offset, byte count)
7ffdaea2b7c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint trim(uint src, byte offset, byte count)
7ffdaea2b7e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int trim(int src, byte offset, byte count)
7ffdaea2b7f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long trim(long src, byte offset, byte count)
7ffdaea2b810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong trim(ulong src, byte offset, byte count)
7ffdaea2b828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte tzcnt(byte src)
7ffdaea2b840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort tzcnt(ushort src)
7ffdaea2b858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint tzcnt(uint src)
7ffdaea2b870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong tzcnt(ulong src)
7ffdaea2b888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xlsb(byte src)
7ffdaea2b8a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xlsb(ushort src)
7ffdaea2b8b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xlsb(uint src)
7ffdaea2b8d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xlsb(ulong src)
7ffdaea2b8e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xmsb(byte src)
7ffdaea2b900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xmsb(ushort src)
7ffdaea2b918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xmsb(uint src)
7ffdaea2b930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xmsb(ulong src)
7ffdaea2b948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte zhi(byte src, byte offset)
7ffdaea2b960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort zhi(ushort src, byte offset)
7ffdaea2b978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint zhi(uint src, byte offset)
7ffdaea2b990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong zhi(ulong src, byte offset)
7ffdaea2b9a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint zhi(uint src, uint offset)
7ffdaea2b9c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong zhi(ulong src, ulong offset)
7ffdaea2b9d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitEditor<byte> editor<byte>(in byte src)
7ffdb0472c40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitEditor<ushort> editor<ushort>(in ushort src)
7ffdb0472dc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitEditor<uint> editor<uint>(in uint src)
7ffdb0472f10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitEditor<ulong> editor<ulong>(in ulong src)
7ffdb0473090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int nlz(in BitString src)
7ffdaea28e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string normalize(string src)
7ffdaea28e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString assemble(string[] parts)
7ffdaea28e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString pad(in BitString src, uint minlen)
7ffdaea28eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString replicate(in BitString src)
7ffdaea28ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString concat(in BitString head, in BitString tail)
7ffdaea28ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString concat(in BitString head, in BitString s0, in BitString s1)
7ffdaea28f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString concat(in BitString head, in BitString s0, in BitString s1, in BitString s2)
7ffdaea28f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString replicate(in BitString src, int n)
7ffdaea28f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString alloc(int len)
7ffdaea28f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString load(byte[] bitseq)
7ffdaea28f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString pow2(int exp)
7ffdaea29008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString parse(string src)
7ffdaea29038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString not(in BitString src)
7ffdaea29050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString intersperse(in BitString src, in BitString value)
7ffdaea29170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString clear(ref BitString src, int i0, int i1)
7ffdaea29188h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString rotl(in BitString bs, uint offset)
7ffdaea291a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<byte> pack(ReadOnlySpan<byte> src, int offset, int minlen)
7ffdaea291d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<char> chars<byte>(ReadOnlySpan<byte> src, int maxlen)
7ffdb03ba3a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<char> chars<byte>(byte src)
7ffdb03ba4c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void chars<byte>(byte src, Span<char> dst, int offset)
7ffdb03ba820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<char> chars<ushort>(ReadOnlySpan<ushort> src, int maxlen)
7ffdb03bbb88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<char> chars<ushort>(ushort src)
7ffdb03bbba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void chars<ushort>(ushort src, Span<char> dst, int offset)
7ffdb03bbbb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<char> chars<uint>(ReadOnlySpan<uint> src, int maxlen)
7ffdb03bbf00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<char> chars<uint>(uint src)
7ffdb03d0048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void chars<uint>(uint src, Span<char> dst, int offset)
7ffdb03d0270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<char> chars<ulong>(ReadOnlySpan<ulong> src, int maxlen)
7ffdb03d03f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<char> chars<ulong>(ulong src)
7ffdb03d04b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void chars<ulong>(ulong src, Span<char> dst, int offset)
7ffdb03d04c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<char> chars<byte>(Span<byte> src, int maxlen)
7ffdb03d0738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<char> chars<ushort>(Span<ushort> src, int maxlen)
7ffdb03d0798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<char> chars<uint>(Span<uint> src, int maxlen)
7ffdb03d07b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<char> chars<ulong>(Span<ulong> src, int maxlen)
7ffdb03d07c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> storeseq<byte>(byte src)
7ffdb03d2e98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> storeseq<ushort>(ushort src)
7ffdb03d31f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> storeseq<uint>(uint src)
7ffdb03d3438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> storeseq<ulong>(ulong src)
7ffdb03d3750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString replicate<byte>(byte src, int reps)
7ffdb03d3960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString scalar<byte>(byte src, int maxbits)
7ffdb03d3be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString replicate<ushort>(ushort src, int reps)
7ffdb03d8840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString scalar<ushort>(ushort src, int maxbits)
7ffdb03d8870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString replicate<uint>(uint src, int reps)
7ffdb03d9638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString scalar<uint>(uint src, int maxbits)
7ffdb03d9650h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString replicate<ulong>(ulong src, int reps)
7ffdb03da418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString scalar<ulong>(ulong src, int maxbits)
7ffdb03da430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void map<byte>(BitString src, Func<bit,byte> f, Span<byte> dst)
7ffdb03db0d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void map<ushort>(BitString src, Func<bit,ushort> f, Span<ushort> dst)
7ffdb03db708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void map<uint>(BitString src, Func<bit,uint> f, Span<uint> dst)
7ffdb03dbcf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void map<ulong>(BitString src, Func<bit,ulong> f, Span<ulong> dst)
7ffdb03f03a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString scalar<byte>(byte src, byte[] storage, int maxbits)
7ffdb03f2b98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString scalar<ushort>(ushort src, byte[] storage, int maxbits)
7ffdb03f3420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString scalar<uint>(uint src, byte[] storage, int maxbits)
7ffdb03f8858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString scalar<ulong>(ulong src, byte[] storage, int maxbits)
7ffdb03f92d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString scalars<byte>(ReadOnlySpan<byte> src, int maxbits)
7ffdb03f98f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString scalars<ushort>(ReadOnlySpan<ushort> src, int maxbits)
7ffdb03fa5e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString scalars<uint>(ReadOnlySpan<uint> src, int maxbits)
7ffdb03fb1b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString scalars<ulong>(ReadOnlySpan<ulong> src, int maxbits)
7ffdb03fbba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString scalars<byte>(Span<byte> src, int maxbits)
7ffdb0420270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString scalars<ushort>(Span<ushort> src, int maxbits)
7ffdb0420558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString scalars<uint>(Span<uint> src, int maxbits)
7ffdb0420810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitString scalars<ulong>(Span<ulong> src, int maxbits)
7ffdb0420ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# char ToChar()
7ffdae079260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 Parse(char c)
7ffdae079278h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 From(bool src)
7ffdae079308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 test(sbyte src, byte pos)
7ffdae079320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 test(byte src, int pos)
7ffdae079338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 test(short src, int pos)
7ffdae079350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 test(ushort src, int pos)
7ffdae079368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 test(int src, int pos)
7ffdae079380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 test(long src, int pos)
7ffdae079398h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 test(uint src, int pos)
7ffdae0793b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 test(ulong src, int pos)
7ffdae0793c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte set(sbyte src, byte pos, Bit32 state)
7ffdae0793e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte set(byte src, byte pos, Bit32 state)
7ffdae0793f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short set(short src, byte pos, Bit32 state)
7ffdae079410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort set(ushort src, byte pos, Bit32 state)
7ffdae079428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int set(int src, byte pos, Bit32 state)
7ffdae079440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint set(uint src, byte pos, Bit32 state)
7ffdae079458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long set(long src, byte pos, Bit32 state)
7ffdae079470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong set(ulong src, byte pos, Bit32 state)
7ffdae079488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 identity(Bit32 b)
7ffdae0794a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 and(Bit32 a, Bit32 b)
7ffdae0794b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 or(Bit32 a, Bit32 b)
7ffdae0794d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 xor(Bit32 a, Bit32 b)
7ffdae0794e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 not(Bit32 a)
7ffdae079500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 nand(Bit32 a, Bit32 b)
7ffdae079518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 nor(Bit32 a, Bit32 b)
7ffdae079530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 xnor(Bit32 a, Bit32 b)
7ffdae079548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 impl(Bit32 a, Bit32 b)
7ffdae079560h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 nonimpl(Bit32 a, Bit32 b)
7ffdae079578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 cimpl(Bit32 a, Bit32 b)
7ffdae079590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 cnonimpl(Bit32 a, Bit32 b)
7ffdae0795a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 select(Bit32 a, Bit32 b, Bit32 c)
7ffdae0795c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool op_True(Bit32 b)
7ffdae0795d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool op_False(Bit32 b)
7ffdae0795f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 op_Implicit(bool state)
7ffdae079608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool op_Implicit(Bit32 src)
7ffdae079620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte op_Explicit(Bit32 src)
7ffdae079638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte op_Explicit(Bit32 src)
7ffdae079650h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 op_Explicit(byte src)
7ffdae079668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort op_Explicit(Bit32 src)
7ffdae079680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short op_Explicit(Bit32 src)
7ffdae079698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 op_Explicit(ushort src)
7ffdae0796b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int op_Explicit(Bit32 src)
7ffdae0796c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 op_Implicit(int src)
7ffdae0796e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint op_Explicit(Bit32 src)
7ffdae0796f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long op_Explicit(Bit32 src)
7ffdae079710h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float op_Explicit(Bit32 src)
7ffdae079728h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double op_Explicit(Bit32 src)
7ffdae079740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 op_Explicit(uint src)
7ffdae079758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong op_Explicit(Bit32 src)
7ffdae079770h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 op_Implicit(BitState src)
7ffdae079788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitState op_Implicit(Bit32 src)
7ffdae0797a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit op_Implicit(Bit32 src)
7ffdae0797b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 op_Implicit(bit src)
7ffdae0797d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 op_Explicit(ulong src)
7ffdae0797e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool Equals(Bit32 b)
7ffdae0798c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 Wrap(uint state)
7ffdae079980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 SafeWrap(byte state)
7ffdae079998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 SafeWrap(ushort state)
7ffdae0799b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 SafeWrap(uint state)
7ffdae0799c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 SafeWrap(int state)
7ffdae0799e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 SafeWrap(ulong state)
7ffdae0799f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte generic<byte>(Bit32 src)
7ffdb0361740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte generic<sbyte>(Bit32 src)
7ffdb0369038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort generic<ushort>(Bit32 src)
7ffdb036a298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short generic<short>(Bit32 src)
7ffdb036b3d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint generic<uint>(Bit32 src)
7ffdb036ba20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int generic<int>(Bit32 src)
7ffdb0380558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong generic<ulong>(Bit32 src)
7ffdb0380b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long generic<long>(Bit32 src)
7ffdb0381098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float generic<float>(Bit32 src)
7ffdb0381818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double generic<double>(Bit32 src)
7ffdb0381dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 specific<byte>(byte src)
7ffdb0382658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 specific<sbyte>(sbyte src)
7ffdb03827d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 specific<ushort>(ushort src)
7ffdb0382928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 specific<short>(short src)
7ffdb0383078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 specific<uint>(uint src)
7ffdb0383108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 specific<int>(int src)
7ffdb0383168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 specific<ulong>(ulong src)
7ffdb03831f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 specific<long>(long src)
7ffdb03832d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 specific<float>(float src)
7ffdb0383408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 specific<double>(double src)
7ffdb0383ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_Item(byte i)
7ffdaf2e3090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> Select(Vector256<byte> items)
7ffdaf2e30d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> op_Implicit(in VLut32 src)
7ffdaf2e30f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte get_Item(byte i)
7ffdaf2e3018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> Select(Vector128<byte> items)
7ffdaf2e3060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> op_Implicit(in VLut16 src)
7ffdaf2e3078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Units128x8u()
7ffdaf2a0000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Units128x16u()
7ffdaf2a0018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Units128x32u()
7ffdaf2a0030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Units128x64u()
7ffdaf2a0048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Units256x8u()
7ffdaf2a0060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Units256x16u()
7ffdaf2a0078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Units256x32u()
7ffdaf2a0090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Units256x64u()
7ffdaf2a00a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Inc128x8u()
7ffdaf2a00c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Inc128x16u()
7ffdaf2a00d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Inc128x32u()
7ffdaf2a00f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Inc128x64u()
7ffdaf2a0108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Inc256x8u()
7ffdaf2a0120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Inc256x16u()
7ffdaf2a0138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Inc256x32u()
7ffdaf2a0150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Inc256x64u()
7ffdaf2a0168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_BlendSpec_Even_256x8()
7ffdaf2a0180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_BlendSpec_Odd_256x8()
7ffdaf2a0198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_BlendSpec_Even_256x16()
7ffdaf2a01b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_BlendSpec_Odd_256x16()
7ffdaf2a01c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_BlendSpec_Even_256x32()
7ffdaf2a01e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_BlendSpec_Odd_256x32()
7ffdaf2a01f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_BlendSpec_Even_256x64()
7ffdaf2a0210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_BlendSpec_Odd_256x64()
7ffdaf2a0228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_ByteSwap128x16u()
7ffdaf2a0240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_ByteSwap128x32u()
7ffdaf2a0258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_ByteSwap128x64u()
7ffdaf2a0270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_ByteSwap256x16u()
7ffdaf2a0288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_ByteSwap256x32u()
7ffdaf2a02a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_ByteSwap256x64u()
7ffdaf2a02b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_RotR48_128x8u()
7ffdaf2a02d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_RotR8_128x8u()
7ffdaf2a02e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_RotR16_128x8u()
7ffdaf2a0300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_RotR24_128x8u()
7ffdaf2a0318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_RotR32_128x8u()
7ffdaf2a0330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_RotR40_128x8u()
7ffdaf2a0348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_PackUSLo16x128x8u()
7ffdaf2a0360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_PackUSLo32x128x16u()
7ffdaf2a0378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_PackUSLo16x256x8u()
7ffdaf2a0390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_PackUSLo32x256x16u()
7ffdaf2a03a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_PackUSHi16x128x8u()
7ffdaf2a03c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_PackUSHi32x128x16u()
7ffdaf2a03d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_PackUSHi16x256x8u()
7ffdaf2a03f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_PackUSHi32x256x16u()
7ffdaf2a0408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Dec128x8u()
7ffdaf2a0420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Dec128x16u()
7ffdaf2a0438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Dec128x32u()
7ffdaf2a0450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Dec128x64u()
7ffdaf2a0468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Dec256x8u()
7ffdaf2a0480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Dec256x16u()
7ffdaf2a0498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Dec256x32u()
7ffdaf2a04b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Dec256x64u()
7ffdaf2a04c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_LaneMerge256x8u()
7ffdaf2a04e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_LaneMerge256x16u()
7ffdaf2a04f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Inc512x8u()
7ffdaf2a0510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Inc512x16u()
7ffdaf2a0528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Inc512x32u()
7ffdaf2a0540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_Inc512x64u()
7ffdaf2a0558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_ClearAlt256x8u()
7ffdaf2a0570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<byte> get_ClearAlt256x16u()
7ffdaf2a0588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format(variant src)
7ffdaf309320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string hex(variant src)
7ffdaf309338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant define(ulong src, NumericKind dst)
7ffdaf309368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant convert(variant src, NumericKind dst)
7ffdaf309380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant define(dynamic src, Type dst)
7ffdaf309458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant define(dynamic src, NumericKind dst)
7ffdaf309470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant define(sbyte src)
7ffdaf309488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant define(byte src)
7ffdaf3094a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant define(short src)
7ffdaf3094b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant define(ushort src)
7ffdaf3094d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant define(int src)
7ffdaf3094e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant define(uint src)
7ffdaf309500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant define(long src)
7ffdaf309518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant define(ulong src)
7ffdaf309530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant define(float src)
7ffdaf309548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant define(double src)
7ffdaf309560h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant from<byte>(byte src)
7ffdb0e89230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant from<sbyte>(sbyte src)
7ffdb0e892d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant from<ushort>(ushort src)
7ffdb0e89368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant from<short>(short src)
7ffdb0e893c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant from<uint>(uint src)
7ffdb0e89440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant from<int>(int src)
7ffdb0e894a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant from<ulong>(ulong src)
7ffdb0e89518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant from<long>(long src)
7ffdb0e89578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant from<float>(float src)
7ffdb0e895f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# variant from<double>(double src)
7ffdb0e89800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ByteBlock16 copy(ReadOnlySpan<byte> src, ref ByteBlock16 dst)
7ffdaf308450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ByteBlock32 copy(ReadOnlySpan<byte> src, ref ByteBlock32 dst)
7ffdaf308468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ByteBlock64 copy(ReadOnlySpan<byte> src, ref ByteBlock64 dst)
7ffdaf308480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ByteBlock128 copy(ReadOnlySpan<byte> src, ref ByteBlock128 dst)
7ffdaf308498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock16 block(W128 w, ReadOnlySpan<byte> src)
7ffdaf3084c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock32 block(W256 w, ReadOnlySpan<byte> src)
7ffdaf3084e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock64 block(Vector256<byte> lo, Vector256<byte> hi)
7ffdaf3084f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock32 block(Vector256<byte> src)
7ffdaf308510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock16 block(Vector128<byte> src)
7ffdaf308528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vector(W128 w, ByteBlock16 src)
7ffdaf308540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vector(W256 w, ByteBlock32 src)
7ffdaf308558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock8 broadcast<byte>(in byte src, W64 w)
7ffdb0dd8900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock8 broadcast<ushort>(in ushort src, W64 w)
7ffdb0dd8978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock8 broadcast<uint>(in uint src, W64 w)
7ffdb0dd8990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock8 broadcast<ulong>(in ulong src, W64 w)
7ffdb0dd89c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock16 broadcast<byte>(in byte src, W128 w)
7ffdb0dd89d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock16 broadcast<ushort>(in ushort src, W128 w)
7ffdb0dd8a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock16 broadcast<uint>(in uint src, W128 w)
7ffdb0dd8a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock16 broadcast<ulong>(in ulong src, W128 w)
7ffdb0dd8a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock32 broadcast<byte>(in byte src, W256 w)
7ffdb0dd8a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock32 broadcast<ushort>(in ushort src, W256 w)
7ffdb0dd8ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock32 broadcast<uint>(in uint src, W256 w)
7ffdb0dd8ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock32 broadcast<ulong>(in ulong src, W256 w)
7ffdb0dd8af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock2<byte> gblock<byte>(N2 n)
7ffdb0ddb618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock2<ushort> gblock<ushort>(N2 n)
7ffdb0ddb660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock2<uint> gblock<uint>(N2 n)
7ffdb0ddb6c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock2<ulong> gblock<ulong>(N2 n)
7ffdb0ddb708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock3<byte> gblock<byte>(N3 n)
7ffdb0ddb750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock3<ushort> gblock<ushort>(N3 n)
7ffdb0ddb780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock3<uint> gblock<uint>(N3 n)
7ffdb0ddb7b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock3<ulong> gblock<ulong>(N3 n)
7ffdb0ddb7e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock4<byte> gblock<byte>(N4 n)
7ffdb0ddb810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock4<ushort> gblock<ushort>(N4 n)
7ffdb0ddb840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock4<uint> gblock<uint>(N4 n)
7ffdb0ddb870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock4<ulong> gblock<ulong>(N4 n)
7ffdb0ddb8b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock5<byte> gblock<byte>(N5 n)
7ffdb0ddb8e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock5<ushort> gblock<ushort>(N5 n)
7ffdb0ddb918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock5<uint> gblock<uint>(N5 n)
7ffdb0ddb948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock5<ulong> gblock<ulong>(N5 n)
7ffdb0ddb978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock6<byte> gblock<byte>(N6 n)
7ffdb0ddb9c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock6<ushort> gblock<ushort>(N6 n)
7ffdb0ddb9f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock6<uint> gblock<uint>(N6 n)
7ffdb0ddba20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock6<ulong> gblock<ulong>(N6 n)
7ffdb0ddba50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock7<byte> gblock<byte>(N7 n)
7ffdb0ddba80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock7<ushort> gblock<ushort>(N7 n)
7ffdb0ddbab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock7<uint> gblock<uint>(N7 n)
7ffdb0ddbae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock7<ulong> gblock<ulong>(N7 n)
7ffdb0ddbb28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock8<byte> gblock<byte>(N8 n)
7ffdb0ddbba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock8<ushort> gblock<ushort>(N8 n)
7ffdb0ddbbd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock8<uint> gblock<uint>(N8 n)
7ffdb0ddbc00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock8<ulong> gblock<ulong>(N8 n)
7ffdb0ddbc30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock9<byte> gblock<byte>(N9 n)
7ffdb0ddbc78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock9<ushort> gblock<ushort>(N9 n)
7ffdb0ddbca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock9<uint> gblock<uint>(N9 n)
7ffdb0ddbcd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock9<ulong> gblock<ulong>(N9 n)
7ffdb0ddbd08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock10<byte> gblock<byte>(N10 n)
7ffdb0ddbd38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock10<ushort> gblock<ushort>(N10 n)
7ffdb0ddbd68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock10<uint> gblock<uint>(N10 n)
7ffdb0ddbdb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock10<ulong> gblock<ulong>(N10 n)
7ffdb0ddbde0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock11<byte> gblock<byte>(N11 n)
7ffdb0ddbe10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock11<ushort> gblock<ushort>(N11 n)
7ffdb0ddbe40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock11<uint> gblock<uint>(N11 n)
7ffdb0ddbe88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock11<ulong> gblock<ulong>(N11 n)
7ffdb0ddbeb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock12<byte> gblock<byte>(N12 n)
7ffdb0ddbee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock12<ushort> gblock<ushort>(N12 n)
7ffdb0ddbf18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock12<uint> gblock<uint>(N12 n)
7ffdb0ddbf48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock12<ulong> gblock<ulong>(N12 n)
7ffdb0ddbf78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock16<byte> gblock<byte>(N16 n)
7ffdb0ddbfa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock16<ushort> gblock<ushort>(N16 n)
7ffdb0e10000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock16<uint> gblock<uint>(N16 n)
7ffdb0e10030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock16<ulong> gblock<ulong>(N16 n)
7ffdb0e10060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock32<byte> gblock<byte>(N32 n)
7ffdb0e10090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock32<ushort> gblock<ushort>(N32 n)
7ffdb0e100d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock32<uint> gblock<uint>(N32 n)
7ffdb0e10108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock32<ulong> gblock<ulong>(N32 n)
7ffdb0e10138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock64<byte> gblock<byte>(N64 n)
7ffdb0e10168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock64<ushort> gblock<ushort>(N64 n)
7ffdb0e10198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock64<uint> gblock<uint>(N64 n)
7ffdb0e101c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GBlock64<ulong> gblock<ulong>(N64 n)
7ffdb0e10210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock2<byte> load<byte>(ReadOnlySpan<byte> src, ref GBlock2<byte> dst)
7ffdb0e10240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock2<ushort> load<ushort>(ReadOnlySpan<ushort> src, ref GBlock2<ushort> dst)
7ffdb0e10600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock2<uint> load<uint>(ReadOnlySpan<uint> src, ref GBlock2<uint> dst)
7ffdb0e109a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock2<ulong> load<ulong>(ReadOnlySpan<ulong> src, ref GBlock2<ulong> dst)
7ffdb0e10d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock3<byte> load<byte>(ReadOnlySpan<byte> src, ref GBlock3<byte> dst)
7ffdb0e110c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock3<ushort> load<ushort>(ReadOnlySpan<ushort> src, ref GBlock3<ushort> dst)
7ffdb0e114a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock3<uint> load<uint>(ReadOnlySpan<uint> src, ref GBlock3<uint> dst)
7ffdb0e118a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock3<ulong> load<ulong>(ReadOnlySpan<ulong> src, ref GBlock3<ulong> dst)
7ffdb0e11c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock4<byte> load<byte>(ReadOnlySpan<byte> src, ref GBlock4<byte> dst)
7ffdb0e11fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock4<ushort> load<ushort>(ReadOnlySpan<ushort> src, ref GBlock4<ushort> dst)
7ffdb0e123b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock4<uint> load<uint>(ReadOnlySpan<uint> src, ref GBlock4<uint> dst)
7ffdb0e12748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock4<ulong> load<ulong>(ReadOnlySpan<ulong> src, ref GBlock4<ulong> dst)
7ffdb0e12af0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock5<byte> load<byte>(ReadOnlySpan<byte> src, ref GBlock5<byte> dst)
7ffdb0e12e80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock5<ushort> load<ushort>(ReadOnlySpan<ushort> src, ref GBlock5<ushort> dst)
7ffdb0e13258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock5<uint> load<uint>(ReadOnlySpan<uint> src, ref GBlock5<uint> dst)
7ffdb0e13600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock5<ulong> load<ulong>(ReadOnlySpan<ulong> src, ref GBlock5<ulong> dst)
7ffdb0e13990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock6<byte> load<byte>(ReadOnlySpan<byte> src, ref GBlock6<byte> dst)
7ffdb0e13d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock6<ushort> load<ushort>(ReadOnlySpan<ushort> src, ref GBlock6<ushort> dst)
7ffdb0e18348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock6<uint> load<uint>(ReadOnlySpan<uint> src, ref GBlock6<uint> dst)
7ffdb0e186f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock6<ulong> load<ulong>(ReadOnlySpan<ulong> src, ref GBlock6<ulong> dst)
7ffdb0e18a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock7<byte> load<byte>(ReadOnlySpan<byte> src, ref GBlock7<byte> dst)
7ffdb0e18e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock7<ushort> load<ushort>(ReadOnlySpan<ushort> src, ref GBlock7<ushort> dst)
7ffdb0e19248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock7<uint> load<uint>(ReadOnlySpan<uint> src, ref GBlock7<uint> dst)
7ffdb0e195f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock7<ulong> load<ulong>(ReadOnlySpan<ulong> src, ref GBlock7<ulong> dst)
7ffdb0e19980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock8<byte> load<byte>(ReadOnlySpan<byte> src, ref GBlock8<byte> dst)
7ffdb0e19d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock8<ushort> load<ushort>(ReadOnlySpan<ushort> src, ref GBlock8<ushort> dst)
7ffdb0e1a0e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock8<uint> load<uint>(ReadOnlySpan<uint> src, ref GBlock8<uint> dst)
7ffdb0e1a490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock8<ulong> load<ulong>(ReadOnlySpan<ulong> src, ref GBlock8<ulong> dst)
7ffdb0e1a820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock12<byte> load<byte>(ReadOnlySpan<byte> src, ref GBlock12<byte> dst)
7ffdb0e1abc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock12<ushort> load<ushort>(ReadOnlySpan<ushort> src, ref GBlock12<ushort> dst)
7ffdb0e1af88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock12<uint> load<uint>(ReadOnlySpan<uint> src, ref GBlock12<uint> dst)
7ffdb0e1b330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock12<ulong> load<ulong>(ReadOnlySpan<ulong> src, ref GBlock12<ulong> dst)
7ffdb0e1b6c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock16<byte> load<byte>(ReadOnlySpan<byte> src, ref GBlock16<byte> dst)
7ffdb0e1ba50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock16<ushort> load<ushort>(ReadOnlySpan<ushort> src, ref GBlock16<ushort> dst)
7ffdb0e1be10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock16<uint> load<uint>(ReadOnlySpan<uint> src, ref GBlock16<uint> dst)
7ffdb0e60330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock16<ulong> load<ulong>(ReadOnlySpan<ulong> src, ref GBlock16<ulong> dst)
7ffdb0e606d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock32<byte> load<byte>(ReadOnlySpan<byte> src, ref GBlock32<byte> dst)
7ffdb0e60a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock32<ushort> load<ushort>(ReadOnlySpan<ushort> src, ref GBlock32<ushort> dst)
7ffdb0e60e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock32<uint> load<uint>(ReadOnlySpan<uint> src, ref GBlock32<uint> dst)
7ffdb0e61218h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock32<ulong> load<ulong>(ReadOnlySpan<ulong> src, ref GBlock32<ulong> dst)
7ffdb0e615c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock64<byte> load<byte>(ReadOnlySpan<byte> src, ref GBlock64<byte> dst)
7ffdb0e61950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock64<ushort> load<ushort>(ReadOnlySpan<ushort> src, ref GBlock64<ushort> dst)
7ffdb0e61d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock64<uint> load<uint>(ReadOnlySpan<uint> src, ref GBlock64<uint> dst)
7ffdb0e620d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock64<ulong> load<ulong>(ReadOnlySpan<ulong> src, ref GBlock64<ulong> dst)
7ffdb0e62460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock2<byte> store<byte>(in GBlock2<byte> src, Span<byte> dst)
7ffdb0e62850h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock2<ushort> store<ushort>(in GBlock2<ushort> src, Span<ushort> dst)
7ffdb0e62bc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock2<uint> store<uint>(in GBlock2<uint> src, Span<uint> dst)
7ffdb0e62ef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock2<ulong> store<ulong>(in GBlock2<ulong> src, Span<ulong> dst)
7ffdb0e63240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock3<byte> store<byte>(in GBlock3<byte> src, Span<byte> dst)
7ffdb0e63570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock3<ushort> store<ushort>(in GBlock3<ushort> src, Span<ushort> dst)
7ffdb0e638e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock3<uint> store<uint>(in GBlock3<uint> src, Span<uint> dst)
7ffdb0e63c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock3<ulong> store<ulong>(in GBlock3<ulong> src, Span<ulong> dst)
7ffdb0e63f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock4<byte> store<byte>(in GBlock4<byte> src, Span<byte> dst)
7ffdb0e68300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock4<ushort> store<ushort>(in GBlock4<ushort> src, Span<ushort> dst)
7ffdb0e68678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock4<uint> store<uint>(in GBlock4<uint> src, Span<uint> dst)
7ffdb0e68b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock4<ulong> store<ulong>(in GBlock4<ulong> src, Span<ulong> dst)
7ffdb0e68e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock5<byte> store<byte>(in GBlock5<byte> src, Span<byte> dst)
7ffdb0e691a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock5<ushort> store<ushort>(in GBlock5<ushort> src, Span<ushort> dst)
7ffdb0e69500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock5<uint> store<uint>(in GBlock5<uint> src, Span<uint> dst)
7ffdb0e69830h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock5<ulong> store<ulong>(in GBlock5<ulong> src, Span<ulong> dst)
7ffdb0e69b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock6<byte> store<byte>(in GBlock6<byte> src, Span<byte> dst)
7ffdb0e69ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock6<ushort> store<ushort>(in GBlock6<ushort> src, Span<ushort> dst)
7ffdb0e6a208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock6<uint> store<uint>(in GBlock6<uint> src, Span<uint> dst)
7ffdb0e6a538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock6<ulong> store<ulong>(in GBlock6<ulong> src, Span<ulong> dst)
7ffdb0e6a868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock7<byte> store<byte>(in GBlock7<byte> src, Span<byte> dst)
7ffdb0e6ab98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock7<ushort> store<ushort>(in GBlock7<ushort> src, Span<ushort> dst)
7ffdb0e6aef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock7<uint> store<uint>(in GBlock7<uint> src, Span<uint> dst)
7ffdb0e6b228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock7<ulong> store<ulong>(in GBlock7<ulong> src, Span<ulong> dst)
7ffdb0e6b558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock8<byte> store<byte>(in GBlock8<byte> src, Span<byte> dst)
7ffdb0e6b888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock8<ushort> store<ushort>(in GBlock8<ushort> src, Span<ushort> dst)
7ffdb0e6bc00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock8<uint> store<uint>(in GBlock8<uint> src, Span<uint> dst)
7ffdb0e6bf30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock8<ulong> store<ulong>(in GBlock8<ulong> src, Span<ulong> dst)
7ffdb0e80300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock12<byte> store<byte>(in GBlock12<byte> src, Span<byte> dst)
7ffdb0e80630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock12<ushort> store<ushort>(in GBlock12<ushort> src, Span<ushort> dst)
7ffdb0e80990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock12<uint> store<uint>(in GBlock12<uint> src, Span<uint> dst)
7ffdb0e80cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock12<ulong> store<ulong>(in GBlock12<ulong> src, Span<ulong> dst)
7ffdb0e81008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock16<byte> store<byte>(in GBlock16<byte> src, Span<byte> dst)
7ffdb0e81338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock16<ushort> store<ushort>(in GBlock16<ushort> src, Span<ushort> dst)
7ffdb0e81698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock16<uint> store<uint>(in GBlock16<uint> src, Span<uint> dst)
7ffdb0e819c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock16<ulong> store<ulong>(in GBlock16<ulong> src, Span<ulong> dst)
7ffdb0e81cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock32<byte> store<byte>(in GBlock32<byte> src, Span<byte> dst)
7ffdb0e82028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock32<ushort> store<ushort>(in GBlock32<ushort> src, Span<ushort> dst)
7ffdb0e82388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock32<uint> store<uint>(in GBlock32<uint> src, Span<uint> dst)
7ffdb0e826b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock32<ulong> store<ulong>(in GBlock32<ulong> src, Span<ulong> dst)
7ffdb0e82a00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock64<byte> store<byte>(in GBlock64<byte> src, Span<byte> dst)
7ffdb0e82d30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock64<ushort> store<ushort>(in GBlock64<ushort> src, Span<ushort> dst)
7ffdb0e83090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock64<uint> store<uint>(in GBlock64<uint> src, Span<uint> dst)
7ffdb0e833c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref GBlock64<ulong> store<ulong>(in GBlock64<ulong> src, Span<ulong> dst)
7ffdb0e836f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock1 alloc(N1 n)
7ffdaf300000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock2 alloc(N2 n)
7ffdaf300018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock3 alloc(N3 n)
7ffdaf300030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock4 alloc(N4 n)
7ffdaf300048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock5 alloc(N5 n)
7ffdaf300060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock6 alloc(N6 n)
7ffdaf300078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock7 alloc(N7 n)
7ffdaf300090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock8 alloc(N8 n)
7ffdaf3000a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock9 alloc(N9 n)
7ffdaf3000c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock10 alloc(N10 n)
7ffdaf3000d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock11 alloc(N11 n)
7ffdaf3000f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock12 alloc(N12 n)
7ffdaf300108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock13 alloc(N13 n)
7ffdaf300120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock14 alloc(N14 n)
7ffdaf300138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock15 alloc(N15 n)
7ffdaf300150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock16 alloc(N16 n)
7ffdaf300168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock17 alloc(N17 n)
7ffdaf300180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock18 alloc(N18 n)
7ffdaf300198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock19 alloc(N19 n)
7ffdaf3001b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock20 alloc(N20 n)
7ffdaf3001c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock24 alloc(N24 n)
7ffdaf3001e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock30 alloc(N30 n)
7ffdaf3001f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock32 alloc(N32 n)
7ffdaf300210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock64 alloc(N64 n)
7ffdaf300228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock80 alloc(N80 n)
7ffdaf300240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock128 alloc(N128 n)
7ffdaf300258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock256 alloc(N256 n)
7ffdaf300270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N1 n, out ByteBlock1 dst)
7ffdaf300288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N2 n, out ByteBlock2 dst)
7ffdaf3002a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N3 n, out ByteBlock3 dst)
7ffdaf3002b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N4 n, out ByteBlock4 dst)
7ffdaf3002d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N5 n, out ByteBlock5 dst)
7ffdaf3002e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N6 n, out ByteBlock6 dst)
7ffdaf300300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N8 n, out ByteBlock8 dst)
7ffdaf300318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N10 n, out ByteBlock10 dst)
7ffdaf300330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N12 n, out ByteBlock12 dst)
7ffdaf300348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N14 n, out ByteBlock14 dst)
7ffdaf300360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N16 n, out ByteBlock16 dst)
7ffdaf300378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N18 n, out ByteBlock18 dst)
7ffdaf300390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N20 n, out ByteBlock20 dst)
7ffdaf3003a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N24 n, out ByteBlock24 dst)
7ffdaf3003c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N30 n, out ByteBlock30 dst)
7ffdaf3003d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N32 n, out ByteBlock32 dst)
7ffdaf3003f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N64 n, out ByteBlock64 dst)
7ffdaf300408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N80 n, out ByteBlock80 dst)
7ffdaf300420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N128 n, out ByteBlock128 dst)
7ffdaf300438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(N256 n, out ByteBlock256 dst)
7ffdaf300450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(out ByteBlock16 a, out ByteBlock16 b)
7ffdaf300468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(out ByteBlock64 a, out ByteBlock64 b, out ByteBlock64 c)
7ffdaf300480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void alloc(out ByteBlock128 a, out ByteBlock128 b, out ByteBlock128 c, out ByteBlock128 d)
7ffdaf300498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint asci(ReadOnlySpan<char> src, Span<byte> dst)
7ffdaf3004b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint asci(ReadOnlySpan<char> src, int max, ref byte dst)
7ffdaf3004c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock2 asci(N2 n, ReadOnlySpan<char> src)
7ffdaf3004e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock3 asci(N3 n, ReadOnlySpan<char> src)
7ffdaf3004f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock4 asci(N4 n, ReadOnlySpan<char> src)
7ffdaf300510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock5 asci(N5 n, ReadOnlySpan<char> src)
7ffdaf300528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock6 asci(N6 n, ReadOnlySpan<char> src)
7ffdaf300540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock7 asci(N7 n, ReadOnlySpan<char> src)
7ffdaf300558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock8 asci(N8 n, ReadOnlySpan<char> src)
7ffdaf300570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock9 asci(N9 n, ReadOnlySpan<char> src)
7ffdaf300588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock10 asci(N10 n, ReadOnlySpan<char> src)
7ffdaf3005a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock11 asci(N11 n, ReadOnlySpan<char> src)
7ffdaf3005b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock12 asci(N12 n, ReadOnlySpan<char> src)
7ffdaf3005d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock14 asci(N14 n, ReadOnlySpan<char> src)
7ffdaf3005e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock16 asci(N16 n, ReadOnlySpan<char> src)
7ffdaf300600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock18 asci(N18 n, ReadOnlySpan<char> src)
7ffdaf300618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock20 asci(N20 n, ReadOnlySpan<char> src)
7ffdaf300630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock24 asci(N24 n, ReadOnlySpan<char> src)
7ffdaf300648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock30 asci(N30 n, ReadOnlySpan<char> src)
7ffdaf300660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock32 asci(N32 n, ReadOnlySpan<char> src)
7ffdaf300678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock64 asci(N64 n, ReadOnlySpan<char> src)
7ffdaf300690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock80 asci(N80 n, ReadOnlySpan<char> src)
7ffdaf3006a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock128 asci(N128 n, ReadOnlySpan<char> src)
7ffdaf3006c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock256 asci(N256 n, ReadOnlySpan<char> src)
7ffdaf3006d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock8 asci(N8 n, ReadOnlySpan<char> src, out ByteBlock8 dst)
7ffdaf3006f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock16 asci(N16 n, ReadOnlySpan<char> src, out ByteBlock16 dst)
7ffdaf300708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteBlock64 asci(N64 n, ReadOnlySpan<char> src, out ByteBlock64 dst)
7ffdaf300720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ReadOnlySpan<char> inflate16u(in ByteBlock4 src, ref ulong dst)
7ffdaf3007b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong first<ulong>(ref ByteBlock32 src)
7ffdb0641410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte first<byte>(ref ByteBlock8 src)
7ffdb07d1968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte first<byte>(ref ByteBlock16 src)
7ffdb07d1b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte first<byte>(ref ByteBlock32 src)
7ffdb07d21f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte first<byte>(ref ByteBlock64 src)
7ffdb07d24a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort first<ushort>(ref ByteBlock8 src)
7ffdb0dd83d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint first<uint>(ref ByteBlock8 src)
7ffdb0dd83f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong first<ulong>(ref ByteBlock8 src)
7ffdb0dd8420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort first<ushort>(ref ByteBlock16 src)
7ffdb0dd8438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint first<uint>(ref ByteBlock16 src)
7ffdb0dd8450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong first<ulong>(ref ByteBlock16 src)
7ffdb0dd8468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort first<ushort>(ref ByteBlock32 src)
7ffdb0dd84c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint first<uint>(ref ByteBlock32 src)
7ffdb0dd84e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort first<ushort>(ref ByteBlock64 src)
7ffdb0dd8510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint first<uint>(ref ByteBlock64 src)
7ffdb0dd8528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong first<ulong>(ref ByteBlock64 src)
7ffdb0dd8540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte first<byte>(ref ByteBlock128 src)
7ffdb0dd8558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort first<ushort>(ref ByteBlock128 src)
7ffdb0dd85d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint first<uint>(ref ByteBlock128 src)
7ffdb0dd8600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong first<ulong>(ref ByteBlock128 src)
7ffdb0dd8618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void store(in Cell128 src, Span<byte> dst)
7ffdaf2ebd08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void store(in Cell256 src, Span<byte> dst, uint offset)
7ffdaf2ebd20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte bits<byte>(ref Cell128<byte> src, int max, int min)
7ffdb0dd0ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort bits<ushort>(ref Cell128<ushort> src, int max, int min)
7ffdb0dd0d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint bits<uint>(ref Cell128<uint> src, int max, int min)
7ffdb0dd1218h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong bits<ulong>(ref Cell128<ulong> src, int max, int min)
7ffdb0dd12a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte bits<byte>(ref Cell256<byte> src, int max, int min)
7ffdb0dd1728h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort bits<ushort>(ref Cell256<ushort> src, int max, int min)
7ffdb0dd1818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint bits<uint>(ref Cell256<uint> src, int max, int min)
7ffdb0dd1890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong bits<ulong>(ref Cell256<ulong> src, int max, int min)
7ffdb0dd1d58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte bits<byte>(ref Cell512<byte> src, int max, int min)
7ffdb0dd2220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort bits<ushort>(ref Cell512<ushort> src, int max, int min)
7ffdb0dd2658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint bits<uint>(ref Cell512<uint> src, int max, int min)
7ffdb0dd2a18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong bits<ulong>(ref Cell512<ulong> src, int max, int min)
7ffdb0dd2e38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte cell<byte>(ref Cell128<byte> src, int i)
7ffdb0dd31f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort cell<ushort>(ref Cell128<ushort> src, int i)
7ffdb0dd3258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint cell<uint>(ref Cell128<uint> src, int i)
7ffdb0dd3270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong cell<ulong>(ref Cell128<ulong> src, int i)
7ffdb0dd3288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte cell<byte>(ref Cell256<byte> src, int i)
7ffdb0dd32a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort cell<ushort>(ref Cell256<ushort> src, int i)
7ffdb0dd32e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint cell<uint>(ref Cell256<uint> src, int i)
7ffdb0dd3300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong cell<ulong>(ref Cell256<ulong> src, int i)
7ffdb0dd3330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte cell<byte>(ref Cell512<byte> src, int i)
7ffdb0dd3348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort cell<ushort>(ref Cell512<ushort> src, int i)
7ffdb0dd3390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint cell<uint>(ref Cell512<uint> src, int i)
7ffdb0dd33a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong cell<ulong>(ref Cell512<ulong> src, int i)
7ffdb0dd33c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Cell128 cell128<byte>(in Vector128<byte> src)
7ffdb0dd33f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Cell128 cell128<ushort>(in Vector128<ushort> src)
7ffdb0dd3450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Cell128 cell128<uint>(in Vector128<uint> src)
7ffdb0dd3498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Cell128 cell128<ulong>(in Vector128<ulong> src)
7ffdb0dd34e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decode(N48 n, ReadOnlySpan<byte> src, Span<char> dst)
7ffdaf2e9140h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decode(N16 n, ReadOnlySpan<byte> src, Span<char> dst)
7ffdaf2e9158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void decode(N32 n, ReadOnlySpan<byte> src, Span<char> dst)
7ffdaf2e9170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> decode(ulong src)
7ffdaf2e9188h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> decode(Vector128<byte> src)
7ffdaf2e91a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> decode(Vector256<byte> src)
7ffdaf2e91b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> broadcast(W128 w, char src)
7ffdaf2e91d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> broadcast(W256 w, char src)
7ffdaf2e91e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> broadcast(W128 w, AsciCode src)
7ffdaf2e9200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> broadcast(W256 w, AsciCode src)
7ffdaf2e9218h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> broadcast(W128 w, AsciCharSym src)
7ffdaf2e9230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> broadcast(W256 w, AsciCharSym src)
7ffdaf2e9248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void pack(N16 n, ReadOnlySpan<char> src, Span<byte> dst)
7ffdaf2e9290h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void pack(N32 n, ReadOnlySpan<char> src, Span<byte> dst)
7ffdaf2e92a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void pack(N64 n, ReadOnlySpan<char> src, Span<byte> dst)
7ffdaf2e92c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void bits(Vector128<byte> src, Span<char> dst)
7ffdaf2e92d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void copy(N16 n, ReadOnlySpan<char> src, Span<char> dst)
7ffdaf2e92f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void copy(N32 n, ReadOnlySpan<char> src, Span<char> dst)
7ffdaf2e9308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void copy<ulong>(W128 w, ReadOnlySpan<ulong> src, Span<ulong> dst)
7ffdb0dd00c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void copy<ulong>(W256 w, ReadOnlySpan<ulong> src, Span<ulong> dst)
7ffdb0dd01b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void asmhex<ulong>(Vector128<ulong> src, ITextBuffer dst)
7ffdb0dd02d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void asmhex<ulong>(Vector256<ulong> src, ITextBuffer dst)
7ffdb0dd0738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void hex<ulong>(Vector128<ulong> src, ITextBuffer dst, char sep, bool specifier)
7ffdb0dd0798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void hex<ulong>(Vector256<ulong> src, ITextBuffer dst, char sep, bool specifier)
7ffdb0dd0810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void lanes<ulong>(Vector256<ulong> src, char sep, int pad, ITextBuffer dst)
7ffdb0dd0870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vdigits(Perm16 spec)
7ffdaf2e9098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vdigits(Perm32 spec)
7ffdaf2e90b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm16 perm16(W128 w, Perm<byte> spec)
7ffdaf2e90c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm16 perm16(Vector128<byte> data)
7ffdaf2e90e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm32 perm32(W256 w, Perm<byte> src)
7ffdaf2e90f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm32 perm32(Vector256<byte> data)
7ffdaf2e9110h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vhi128x16i(Vector128<sbyte> src)
7ffdaf2e8228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vhi128x16u(Vector128<byte> src, out Vector128<ushort> dst)
7ffdaf2e8240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vhi128x64i(Vector128<uint> src)
7ffdaf2e8258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vhi128x64u(Vector128<uint> src)
7ffdaf2e8270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vhi256x16i(Vector256<sbyte> src)
7ffdaf2e8288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vhi256x16i(Vector256<byte> src)
7ffdaf2e82a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vhi256x16u(Vector256<byte> src)
7ffdaf2e82b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vhi256x16u(Vector256<ushort> src)
7ffdaf2e82d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vhi256x32i(Vector128<sbyte> src)
7ffdaf2e82e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vhi256x32i(Vector256<short> src)
7ffdaf2e8300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vhi256x32u(Vector128<byte> src)
7ffdaf2e8318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vhi256x64u(Vector128<ushort> src)
7ffdaf2e8330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vhi256x64u(Vector256<uint> src)
7ffdaf2e8348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vinflate1024x64u(Vector256<ushort> src, out Vector512<ulong> lo, out Vector512<ulong> hi)
7ffdaf2e8360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vinflate16x16i(in short src, out Vector256<int> lo, out Vector256<int> hi)
7ffdaf2e8378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vinflate16x8u(in byte src, out Vector256<ushort> dst)
7ffdaf2e8390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vinflate256x16i(Vector128<byte> src)
7ffdaf2e83a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vinflate256x16i(Vector128<sbyte> src)
7ffdaf2e83c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vinflate256x16u(in byte src)
7ffdaf2e83d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vinflate256x16u(Vector128<byte> src)
7ffdaf2e83f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vinflatelo256x16u(Vector256<byte> src)
7ffdaf2e8408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vinflatehi256x16u(Vector256<byte> src)
7ffdaf2e8420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vinflate256x32i(Vector128<short> src)
7ffdaf2e8438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vinflate256x32i(Vector128<ushort> src)
7ffdaf2e8450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vinflate256x32u(Vector128<ushort> src)
7ffdaf2e8468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vinflate256x64u(Vector128<uint> src)
7ffdaf2e8480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vinflate256x64u(in byte src)
7ffdaf2e8498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vinflate256x64u(in ushort src)
7ffdaf2e84b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vinflate256x8u(uint src, byte index)
7ffdaf2e84c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vinflate2x16i(in short src, out Vector128<long> dst)
7ffdaf2e84e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vinflate2x16i(in ushort src, out Vector128<long> dst)
7ffdaf2e84f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vinflate2x16u(in ushort src, out Vector128<ulong> dst)
7ffdaf2e8510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vinflate2x32i(in int src, out Vector128<long> dst)
7ffdaf2e8528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vinflate2x8u(in byte src, out Vector128<long> dst)
7ffdaf2e8540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vinflate2x8u(in byte src, out Vector128<ulong> dst)
7ffdaf2e8558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vinflate32x8u(in byte src, out Vector256<ushort> lo, out Vector256<ushort> hi)
7ffdaf2e8570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vinflate4x16i(in short src, out Vector128<int> dst)
7ffdaf2e8588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vinflate4x16u(in ushort src, out Vector128<uint> dst)
7ffdaf2e85a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vinflate4x32i(Vector128<int> src, out Vector256<long> dst)
7ffdaf2e85b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vinflate4x8i(Vector128<sbyte> src, out Vector128<int> dst)
7ffdaf2e85d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vinflate4x8u(in byte src, out Vector128<uint> dst)
7ffdaf2e85e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vinflate4x8u(in byte src, out Vector128<int> dst)
7ffdaf2e8600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vinflate4x8u(in byte src, out Vector256<long> dst)
7ffdaf2e8618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<short> vinflate512x16i(Vector256<sbyte> src)
7ffdaf2e8630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<short> vinflate512x16i(Vector256<byte> src)
7ffdaf2e8648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vinflate512x16u(in byte src)
7ffdaf2e8660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vinflate512x16u(Vector256<byte> src)
7ffdaf2e8678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<int> vinflate512x32i(Vector128<sbyte> src)
7ffdaf2e8690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<int> vinflate512x32i(Vector256<short> src)
7ffdaf2e86a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vinflate512x32u(Vector256<ushort> src)
7ffdaf2e86c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vinflate512x32u(Vector128<byte> src)
7ffdaf2e86d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vinflate512x64u(Vector256<uint> src)
7ffdaf2e86f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vinflate512x64u(Vector128<ushort> src)
7ffdaf2e8708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vinflate8x16i(Vector128<short> src, out Vector256<int> dst)
7ffdaf2e8720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vinflate8x16u(in ushort src, out Vector256<ulong> lo, out Vector256<ulong> hi)
7ffdaf2e8738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vinflate8x16u(Vector128<ushort> src, out Vector256<int> dst)
7ffdaf2e8750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vinflate8x16u(in ushort src, out Vector256<uint> dst)
7ffdaf2e8768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vinflate8x16u(Vector128<ushort> src, out Vector256<uint> dst)
7ffdaf2e8780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vinflate8x256x32u(in byte src)
7ffdaf2e8798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vinflate8x256x32u(in byte src, int step, ref uint dst)
7ffdaf2e87b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vinflate8x256x32u(in byte src, int srcStep, ref uint dst, int dstStep)
7ffdaf2e87c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vinflate8x32u(in uint src, out Vector256<ulong> lo, out Vector256<ulong> hi)
7ffdaf2e87e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vinflate8x8u(in byte src, out Vector256<uint> dst)
7ffdaf2e87f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vinflate8x8u(in byte src, out Vector128<ushort> dst)
7ffdaf2e8810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vlo128x16i(Vector128<sbyte> src)
7ffdaf2e8828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vlo128x16i(Vector128<byte> src)
7ffdaf2e8840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlo128x16u(Vector128<sbyte> src)
7ffdaf2e8858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlo128x16u(Vector128<byte> src)
7ffdaf2e8870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vlo128x32i(Vector128<short> src)
7ffdaf2e8888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vlo256x64i(Vector256<int> src)
7ffdaf2e88a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlo128x32u(Vector128<ushort> src)
7ffdaf2e88b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vlo256x64i(Vector128<short> src)
7ffdaf2e88d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vlo128x64i(Vector128<uint> src)
7ffdaf2e88e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vlo256x64i(Vector128<ushort> src)
7ffdaf2e8900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlo128x64u(Vector128<uint> src)
7ffdaf2e8918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vlo256x16i(Vector256<sbyte> src)
7ffdaf2e8930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vlo256x16i(Vector256<byte> src)
7ffdaf2e8948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlo256x16u(Vector256<byte> src)
7ffdaf2e8960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vlo256x32i(Vector128<sbyte> src)
7ffdaf2e8978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vlo256x32i(Vector128<byte> src)
7ffdaf2e8990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vlo256x32i(Vector256<short> src)
7ffdaf2e89a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlo256x32u(Vector128<byte> src)
7ffdaf2e89c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlo256x32u(Vector256<ushort> src)
7ffdaf2e89d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlo256x64u(Vector128<ushort> src)
7ffdaf2e89f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlo256x64u(Vector256<uint> src)
7ffdaf2e8a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vpack128x16i(Vector256<int> src)
7ffdaf2e8a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vpack128x16i(Vector128<int> a, Vector128<int> b)
7ffdaf2e8a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vpack128x16u(Vector256<uint> src)
7ffdaf2e8a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vpack128x16u(Vector128<uint> x, Vector128<uint> y)
7ffdaf2e8a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vpack128x16u(Vector128<int> x, Vector128<int> y)
7ffdaf2e8a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vpack128x32i(Vector256<long> src)
7ffdaf2e8a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vpack128x32u(Vector256<ulong> src)
7ffdaf2e8ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vpack128x32u(Vector256<ulong> src, W128 w)
7ffdaf2e8ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vpack128x32u(Vector128<ulong> lo, Vector128<ulong> hi)
7ffdaf2e8ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vpack128x8i(Vector128<short> x, Vector128<short> y)
7ffdaf2e8af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vpack128x8i(Vector256<short> src)
7ffdaf2e8b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vpack128x8u(Vector128<ushort> x)
7ffdaf2e8b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vpack128x8u(Vector256<ushort> src)
7ffdaf2e8b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vpack128x8u(Vector256<short> src)
7ffdaf2e8b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vpack128x8u(Vector256<uint> src)
7ffdaf2e8b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vpack128x8u(Vector128<short> x, Vector128<short> y)
7ffdaf2e8b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vpack128x8u(Vector128<ushort> a, Vector128<ushort> b)
7ffdaf2e8ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vpack128x8u(Vector256<uint> a, Vector256<uint> b)
7ffdaf2e8bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vpack128x8u(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c, Vector128<uint> d)
7ffdaf2e8bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vpack16x1(Vector128<byte> src)
7ffdaf2e8c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vpack256x16i(Vector256<int> x, Vector256<int> y)
7ffdaf2e8c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vpack256x16u(Vector256<uint> x, Vector256<uint> y)
7ffdaf2e8c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vpack256x16u(Vector256<int> x, Vector256<int> y)
7ffdaf2e8c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vpack256x32u(Vector256<ulong> a, Vector256<ulong> b)
7ffdaf2e8c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vpack256x8i(Vector256<short> a, Vector256<short> b)
7ffdaf2e8c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vpack256x8u(Vector256<ushort> a, Vector256<ushort> b)
7ffdaf2e8c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vpack256x8u(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c, Vector256<uint> d)
7ffdaf2e8ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vpack256x8u(Vector256<short> a, Vector256<short> b)
7ffdaf2e8cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpack32x1(Vector256<byte> src)
7ffdaf2e8cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vpack64u(Vector128<ushort> src)
7ffdaf2e8d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vpack64u(Vector256<uint> src)
7ffdaf2e8d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vpacklsb(Vector128<byte> src)
7ffdaf2e8d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpacklsb(Vector256<byte> src)
7ffdaf2e8d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vpackss(Vector128<short> x, Vector128<short> y)
7ffdaf2e8d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vpackss(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2e8d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vpackss(Vector128<int> x, Vector128<int> y)
7ffdaf2e8d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vpackss(Vector128<uint> x, Vector128<uint> y)
7ffdaf2e8db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vpackss(Vector256<short> x, Vector256<short> y)
7ffdaf2e8dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vpackss(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2e8de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vpackss(Vector256<int> x, Vector256<int> y)
7ffdaf2e8df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vpackss(Vector256<uint> x, Vector256<uint> y)
7ffdaf2e8e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vpackus(Vector128<short> x, Vector128<short> y)
7ffdaf2e8e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vpackus(Vector128<int> x, Vector128<int> y)
7ffdaf2e8e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vpackus(Vector256<short> x, Vector256<short> y)
7ffdaf2e8e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vpackus(Vector256<int> x, Vector256<int> y)
7ffdaf2e8e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vpackus(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2e8e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vpackus(Vector128<uint> x, Vector128<uint> y)
7ffdaf2e8ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vpackus(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2e8eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vpackus(Vector256<uint> x, Vector256<uint> y)
7ffdaf2e8ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vunpack16x8(ushort src, byte index)
7ffdaf2e8ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vunpack16x8(ushort src)
7ffdaf2e8f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vunpack2x64(in int src)
7ffdaf2e8f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vunpack2x64(in uint src)
7ffdaf2e8f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vunpack32x8(uint src)
7ffdaf2e8f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vunpack1x32(uint src)
7ffdaf2e8f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vunpack1x32(uint src, byte index)
7ffdaf2e8f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vunpack3x30(uint src)
7ffdaf2e8f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vunpack4x32(in ushort src)
7ffdaf2e8fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vunpack8x16(in sbyte src)
7ffdaf2e8ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vunpack8x16(in byte src)
7ffdaf2e9008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vunpack8x32(in byte src)
7ffdaf2e9020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vunpack8x32(Vector128<short> src)
7ffdaf2e9038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vunpack8x32(ulong src)
7ffdaf2e9050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vunpack8x8(in sbyte src)
7ffdaf2e9068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vunpack8x8(in byte src)
7ffdaf2e9080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vpack16u<byte>(Vector128<byte> src, byte index)
7ffdb0d9bbb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vpack16u<ushort>(Vector128<ushort> src, byte index)
7ffdb0d9bc18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vpack16u<uint>(Vector128<uint> src, byte index)
7ffdb0d9bc60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vpack16u<ulong>(Vector128<ulong> src, byte index)
7ffdb0d9bc90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpack32u<byte>(Vector256<byte> src, byte index)
7ffdb0d9bcd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpack32u<ushort>(Vector256<ushort> src, byte index)
7ffdb0d9bd38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpack32u<uint>(Vector256<uint> src, byte index)
7ffdb0d9bd50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpack32u<ulong>(Vector256<ulong> src, byte index)
7ffdb0d9bd80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> hexbins(W128 w)
7ffdaf2e3108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> hexbins(W256 w)
7ffdaf2e3120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> packusHi(N128 w, N32 src, N16 dst)
7ffdaf2e3168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> packusHi(N128 w, N16 src, N8 dst)
7ffdaf2e3180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> packusHi(N256 w, N16 src, N8 dst)
7ffdaf2e3198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vpackushi(N256 w, N32 src, N16 dst)
7ffdaf2e31b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> packusLo(N128 w, N32 src, N16 dst)
7ffdaf2e31c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> packusLo(N128 w, N16 src, N8 dst)
7ffdaf2e31e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> packusLo(N256 w, N16 src, N8 dst)
7ffdaf2e31f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vpackuslo(N256 w, N32 src, N16 dst)
7ffdaf2e3210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vbfly(N1 n, Vector128<byte> x)
7ffdaf2e3318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vbfly(N1 n, Vector128<ushort> x)
7ffdaf2e3330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vbfly(N1 n, Vector128<uint> x)
7ffdaf2e3348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vbfly(N1 n, Vector128<ulong> x)
7ffdaf2e3360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vbfly(N2 n, Vector128<byte> x)
7ffdaf2e3378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vbfly(N2 n, Vector128<ushort> x)
7ffdaf2e3390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vbfly(N2 n, Vector128<uint> x)
7ffdaf2e33a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vbfly(N2 n, Vector128<ulong> x)
7ffdaf2e33c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vbfly(N4 n, Vector128<ushort> x)
7ffdaf2e33d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vbfly(N4 n, Vector128<uint> x)
7ffdaf2e33f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vbfly(N4 n, Vector128<ulong> x)
7ffdaf2e3408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vbfly(N8 n, Vector128<uint> x)
7ffdaf2e3420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vbfly(N8 n, Vector128<ulong> x)
7ffdaf2e3438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vbfly(N16 n, Vector128<ulong> x)
7ffdaf2e3450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vbfly(N1 n, Vector256<byte> x)
7ffdaf2e3468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vbfly(N1 n, Vector256<ushort> x)
7ffdaf2e3480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vbfly(N1 n, Vector256<uint> x)
7ffdaf2e3498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vbfly(N1 n, Vector256<ulong> x)
7ffdaf2e34b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vbfly(N2 n, Vector256<byte> x)
7ffdaf2e34c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vbfly(N2 n, Vector256<ushort> x)
7ffdaf2e34e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vbfly(N2 n, Vector256<uint> x)
7ffdaf2e34f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vbfly(N2 n, Vector256<ulong> x)
7ffdaf2e3510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vbfly(N4 n, Vector256<ushort> x)
7ffdaf2e3528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vbfly(N4 n, Vector256<uint> x)
7ffdaf2e3540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vbfly(N4 n, Vector256<ulong> x)
7ffdaf2e3558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vbfly(N8 n, Vector256<uint> x)
7ffdaf2e3570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vbfly(N8 n, Vector256<ulong> x)
7ffdaf2e3588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vbfly(N16 n, Vector256<ulong> x)
7ffdaf2e35a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vcentral(W128 w, W8 t, N4 f, N2 d)
7ffdaf2e3888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vcentral(W128 w, W16 t, N4 f, N2 d)
7ffdaf2e38a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vcentral(W128 w, W32 t, N4 f, N2 d)
7ffdaf2e38b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vcentral(W128 w, W64 t, N4 f, N2 d)
7ffdaf2e38d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vcentral(W128 w, W8 t, N8 f, N4 d)
7ffdaf2e38e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vcentral(W128 w, W16 t, N8 f, N4 d)
7ffdaf2e3900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vcentral(W128 w, W32 t, N8 f, N4 d)
7ffdaf2e3918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vcentral(W128 w, W64 t, N8 f, N4 d)
7ffdaf2e3930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vcentral(W128 w, W16 t, N16 f, N8 d)
7ffdaf2e3948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vcentral(W128 w, W32 t, N16 f, N8 d)
7ffdaf2e3960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vcentral(W128 w, W64 t, N16 f, N8 d)
7ffdaf2e3978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vcentral(W128 w, W32 t, N32 f, N16 d)
7ffdaf2e3990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vcentral(W128 w, W64 t, N32 f, N16 d)
7ffdaf2e39a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vcentral(W128 w, W64 t, N64 f, N32 d)
7ffdaf2e39c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vcentral(W256 w, W8 t, N4 f, N2 d)
7ffdaf2e39d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vcentral(W256 w, W16 t, N4 f, N2 d)
7ffdaf2e39f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vcentral(W256 w, W32 t, N4 f, N2 d)
7ffdaf2e3a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vcentral(W256 w, W64 t, N4 f, N2 d)
7ffdaf2e3a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vcentral(W256 w, W8 t, N4 f, N4 d)
7ffdaf2e3a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vcentral(W256 w, W16 t, N4 f, N4 d)
7ffdaf2e3a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vcentral(W256 w, W32 t, N4 f, N4 d)
7ffdaf2e3a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vcentral(W256 w, W64 t, N4 f, N4 d)
7ffdaf2e3a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vcentral(W256 w, W16 t, N16 f, N8 d)
7ffdaf2e3a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vcentral(W256 w, W32 t, N16 f, N8 d)
7ffdaf2e3ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vcentral(W256 w, W64 t, N16 f, N8 d)
7ffdaf2e3ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vcentral(W256 w, W32 t, N32 f, N16 d)
7ffdaf2e3ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vcentral(W256 w, W64 t, N32 f, N16 d)
7ffdaf2e3af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vcentral(W256 w, W64 t, N64 f, N32 d)
7ffdaf2e3b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> veven(W128 w)
7ffdaf2e3ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> veven(W256 w)
7ffdaf2e3c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vodd(W128 w)
7ffdaf2e81b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vodd(W256 w)
7ffdaf2e81c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> v128x8(byte x0, byte x1, byte x2, byte x3, byte x4, byte x5, byte x6, byte x7, byte x8, byte x9, byte xa, byte xb, byte xc, byte xd, byte xe, byte xf)
7ffdaf2e81e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> v256x8(byte x0, byte x1, byte x2, byte x3, byte x4, byte x5, byte x6, byte x7, byte x8, byte x9, byte xa, byte xb, byte xc, byte xd, byte xe, byte xf, byte x10, byte x11, byte x12, byte x13, byte x14, byte x15, byte x16, byte x17, byte x18, byte x19, byte x1a, byte x1b, byte x1c, byte x1d, byte x1e, byte x1f)
7ffdaf2e81f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> veven<byte>(W128 w, N2 f, N2 d)
7ffdb0cd3b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> veven<byte>(W256 w, N2 f, N2 d)
7ffdb0cd3c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vodd<byte>(W128 w, N2 f, N2 d)
7ffdb0cd3d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vodd<byte>(W256 w, N2 f, N2 d)
7ffdb0cd3de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vbfly<byte>(N1 n, Vector128<byte> x)
7ffdb0cd3f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vbfly<ushort>(N1 n, Vector128<ushort> x)
7ffdb0cd8030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vbfly<uint>(N1 n, Vector128<uint> x)
7ffdb0cd80d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vbfly<ulong>(N1 n, Vector128<ulong> x)
7ffdb0cd8180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vbfly<byte>(N2 n, Vector128<byte> x)
7ffdb0cd81f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vbfly<ushort>(N2 n, Vector128<ushort> x)
7ffdb0cd82d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vbfly<uint>(N2 n, Vector128<uint> x)
7ffdb0cd8318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vbfly<ulong>(N2 n, Vector128<ulong> x)
7ffdb0cd8360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vbfly<byte>(N4 n, Vector128<byte> x)
7ffdb0cd8420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vbfly<ushort>(N4 n, Vector128<ushort> x)
7ffdb0cd8450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vbfly<uint>(N4 n, Vector128<uint> x)
7ffdb0cd84c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vbfly<ulong>(N4 n, Vector128<ulong> x)
7ffdb0cd8510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vbfly<byte>(N8 n, Vector128<byte> x)
7ffdb0cd8558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vbfly<ushort>(N8 n, Vector128<ushort> x)
7ffdb0cd8570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vbfly<uint>(N8 n, Vector128<uint> x)
7ffdb0cd8588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vbfly<ulong>(N8 n, Vector128<ulong> x)
7ffdb0cd85d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vbfly<byte>(N16 n, Vector128<byte> x)
7ffdb0cd9638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vbfly<ushort>(N16 n, Vector128<ushort> x)
7ffdb0cd9650h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vbfly<uint>(N16 n, Vector128<uint> x)
7ffdb0cd9668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vbfly<ulong>(N16 n, Vector128<ulong> x)
7ffdb0cd9680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vbfly<byte>(N1 n, Vector256<byte> x)
7ffdb0cd9bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vbfly<ushort>(N1 n, Vector256<ushort> x)
7ffdb0cd9c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vbfly<uint>(N1 n, Vector256<uint> x)
7ffdb0cd9db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vbfly<ulong>(N1 n, Vector256<ulong> x)
7ffdb0cd9e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vbfly<byte>(N2 n, Vector256<byte> x)
7ffdb0cd9e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vbfly<ushort>(N2 n, Vector256<ushort> x)
7ffdb0cd9ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vbfly<uint>(N2 n, Vector256<uint> x)
7ffdb0cda508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vbfly<ulong>(N2 n, Vector256<ulong> x)
7ffdb0cda880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vbfly<byte>(N4 n, Vector256<byte> x)
7ffdb0cdac88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vbfly<ushort>(N4 n, Vector256<ushort> x)
7ffdb0cdadf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vbfly<uint>(N4 n, Vector256<uint> x)
7ffdb0cdb228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vbfly<ulong>(N4 n, Vector256<ulong> x)
7ffdb0cdb2d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vbfly<byte>(N8 n, Vector256<byte> x)
7ffdb0cdb360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vbfly<ushort>(N8 n, Vector256<ushort> x)
7ffdb0cdb4c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vbfly<uint>(N8 n, Vector256<uint> x)
7ffdb0cdb4f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vbfly<ulong>(N8 n, Vector256<ulong> x)
7ffdb0cdb840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vbfly<byte>(N16 n, Vector256<byte> x)
7ffdb0cdb918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vbfly<ushort>(N16 n, Vector256<ushort> x)
7ffdb0cdb948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vbfly<uint>(N16 n, Vector256<uint> x)
7ffdb0cdb990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vbfly<ulong>(N16 n, Vector256<ulong> x)
7ffdb0cdb9a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vdisable<byte>(Vector128<byte> src, byte start, byte count)
7ffdb0cdbba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte eraser<byte>(byte start, byte count)
7ffdb0cdbbb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vdisable<sbyte>(Vector128<sbyte> src, byte start, byte count)
7ffdb0cdbc78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte eraser<sbyte>(byte start, byte count)
7ffdb0cdbc90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vdisable<ushort>(Vector128<ushort> src, byte start, byte count)
7ffdb0cdbdf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort eraser<ushort>(byte start, byte count)
7ffdb0cdbfc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vdisable<short>(Vector128<short> src, byte start, byte count)
7ffdb0d901b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short eraser<short>(byte start, byte count)
7ffdb0d901c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vdisable<uint>(Vector128<uint> src, byte start, byte count)
7ffdb0d90858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint eraser<uint>(byte start, byte count)
7ffdb0d90870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vdisable<int>(Vector128<int> src, byte start, byte count)
7ffdb0d90c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int eraser<int>(byte start, byte count)
7ffdb0d90c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vdisable<ulong>(Vector128<ulong> src, byte start, byte count)
7ffdb0d90f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong eraser<ulong>(byte start, byte count)
7ffdb0d90f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vdisable<long>(Vector128<long> src, byte start, byte count)
7ffdb0d911b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long eraser<long>(byte start, byte count)
7ffdb0d911d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vdisable<byte>(Vector256<byte> src, byte start, byte count)
7ffdb0d91620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vdisable<sbyte>(Vector256<sbyte> src, byte start, byte count)
7ffdb0d91a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vdisable<ushort>(Vector256<ushort> src, byte start, byte count)
7ffdb0d92040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vdisable<short>(Vector256<short> src, byte start, byte count)
7ffdb0d920b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vdisable<uint>(Vector256<uint> src, byte start, byte count)
7ffdb0d926a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vdisable<int>(Vector256<int> src, byte start, byte count)
7ffdb0d92940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vdisable<ulong>(Vector256<ulong> src, byte start, byte count)
7ffdb0d92a60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vdisable<long>(Vector256<long> src, byte start, byte count)
7ffdb0d92b20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> veven<byte>(W128 w, N2 f, N1 d)
7ffdb0d92b50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> veven<ushort>(W128 w, N2 f, N1 d)
7ffdb0d92be0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> veven<uint>(W128 w, N2 f, N1 d)
7ffdb0d92cb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> veven<ulong>(W128 w, N2 f, N1 d)
7ffdb0d92d00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> veven<ushort>(W128 w, N2 f, N2 d)
7ffdb0d92d60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> veven<uint>(W128 w, N2 f, N2 d)
7ffdb0d92da8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> veven<ulong>(W128 w, N2 f, N2 d)
7ffdb0d92e08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> veven<byte>(W256 w, N2 f, N1 d)
7ffdb0d92e50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> veven<ushort>(W256 w, N2 f, N1 d)
7ffdb0d92f10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> veven<uint>(W256 w, N2 f, N1 d)
7ffdb0d92f28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> veven<ulong>(W256 w, N2 f, N1 d)
7ffdb0d92f58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> veven<ushort>(W256 w, N2 f, N2 d)
7ffdb0d92f88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> veven<uint>(W256 w, N2 f, N2 d)
7ffdb0d92fa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> veven<ulong>(W256 w, N2 f, N2 d)
7ffdb0d92fd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlsb<byte>(W128 w, N1 f, N1 d, byte t)
7ffdb0d92fe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlsb<ushort>(W128 w, N1 f, N1 d, ushort t)
7ffdb0d93060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlsb<uint>(W128 w, N1 f, N1 d, uint t)
7ffdb0d930c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlsb<ulong>(W128 w, N1 f, N1 d, ulong t)
7ffdb0d93108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlsb<byte>(W128 w, N2 f, N1 d, byte t)
7ffdb0d93168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlsb<ushort>(W128 w, N2 f, N1 d, ushort t)
7ffdb0d931e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlsb<uint>(W128 w, N2 f, N1 d, uint t)
7ffdb0d93228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlsb<ulong>(W128 w, N2 f, N1 d, ulong t)
7ffdb0d93240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlsb<byte>(W128 w, N4 f, N1 d, byte t)
7ffdb0d932a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlsb<ushort>(W128 w, N4 f, N1 d, ushort t)
7ffdb0d93318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlsb<uint>(W128 w, N4 f, N1 d, uint t)
7ffdb0d93378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlsb<ulong>(W128 w, N4 f, N1 d, ulong t)
7ffdb0d93438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlsb<byte>(W128 w, N8 f, N1 d)
7ffdb0d934f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlsb<ushort>(W128 w, N8 f, N1 d)
7ffdb0d935e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlsb<uint>(W128 w, N8 f, N1 d)
7ffdb0d93678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlsb<ulong>(W128 w, N8 f, N1 d)
7ffdb0d93720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlsb<byte>(W128 w, N16 f, N1 d)
7ffdb0d93768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlsb<ushort>(W128 w, N16 f, N1 d)
7ffdb0d93798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlsb<uint>(W128 w, N16 f, N1 d)
7ffdb0d937e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlsb<ulong>(W128 w, N16 f, N1 d)
7ffdb0d93810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlsb<byte>(W128 w, N8 f, N2 d)
7ffdb0d93840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlsb<ushort>(W128 w, N8 f, N2 d)
7ffdb0d938d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlsb<uint>(W128 w, N8 f, N2 d)
7ffdb0d93930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlsb<ulong>(W128 w, N8 f, N2 d)
7ffdb0d939a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlsb<byte>(W128 w, N8 f, N3 d)
7ffdb0d939f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlsb<ushort>(W128 w, N8 f, N3 d)
7ffdb0d93a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlsb<uint>(W128 w, N8 f, N3 d)
7ffdb0d93af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlsb<ulong>(W128 w, N8 f, N3 d)
7ffdb0d93b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlsb<byte>(W128 w, N8 f, N4 d)
7ffdb0d93bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlsb<ushort>(W128 w, N8 f, N4 d)
7ffdb0d93c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlsb<uint>(W128 w, N8 f, N4 d)
7ffdb0d93ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlsb<ulong>(W128 w, N8 f, N4 d)
7ffdb0d93cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlsb<byte>(W128 w, N8 f, N5 d)
7ffdb0d93ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlsb<ushort>(W128 w, N8 f, N5 d)
7ffdb0d93f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlsb<uint>(W128 w, N8 f, N5 d)
7ffdb0d93fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlsb<ulong>(W128 w, N8 f, N5 d)
7ffdb0d98000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlsb<byte>(W128 w, N8 f, N6 d, byte t)
7ffdb0d98048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlsb<ushort>(W128 w, N8 f, N6 d, ushort t)
7ffdb0d980d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlsb<uint>(W128 w, N8 f, N6 d, uint t)
7ffdb0d98120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlsb<ulong>(W128 w, N8 f, N6 d, ulong t)
7ffdb0d98168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlsb<byte>(W128 w, N8 f, N7 d, byte t)
7ffdb0d981b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlsb<ushort>(W128 w, N8 f, N7 d, ushort t)
7ffdb0d98228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlsb<uint>(W128 w, N8 f, N7 d, uint t)
7ffdb0d98270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlsb<ulong>(W128 w, N8 f, N7 d, ulong t)
7ffdb0d982b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlsb<byte>(W256 w, N1 f, N1 d, byte t)
7ffdb0d98318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlsb<ushort>(W256 w, N1 f, N1 d, ushort t)
7ffdb0d98360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlsb<uint>(W256 w, N1 f, N1 d, uint t)
7ffdb0d98378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlsb<ulong>(W256 w, N1 f, N1 d, ulong t)
7ffdb0d98390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlsb<byte>(W256 w, N2 f, N1 d, byte t)
7ffdb0d983a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlsb<ushort>(W256 w, N2 f, N1 d, ushort t)
7ffdb0d98408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlsb<uint>(W256 w, N2 f, N1 d, uint t)
7ffdb0d98420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlsb<ulong>(W256 w, N2 f, N1 d, ulong t)
7ffdb0d98438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlsb<byte>(W256 w, N4 f, N1 d, byte t)
7ffdb0d98450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlsb<ushort>(W256 w, N4 f, N1 d, ushort t)
7ffdb0d98498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlsb<uint>(W256 w, N4 f, N1 d, uint t)
7ffdb0d984b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlsb<ulong>(W256 w, N4 f, N1 d, ulong t)
7ffdb0d984e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlsb<byte>(W256 w, N8 f, N1 d, byte t)
7ffdb0d984f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlsb<ushort>(W256 w, N8 f, N1 d, ushort t)
7ffdb0d98540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlsb<uint>(W256 w, N8 f, N1 d, uint t)
7ffdb0d98558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlsb<ulong>(W256 w, N8 f, N1 d, ulong t)
7ffdb0d98570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlsb<byte>(W256 w, N16 f, N1 d, byte t)
7ffdb0d985a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlsb<ushort>(W256 w, N16 f, N1 d, ushort t)
7ffdb0d98600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlsb<uint>(W256 w, N16 f, N1 d, uint t)
7ffdb0d98648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlsb<ulong>(W256 w, N16 f, N1 d, ulong t)
7ffdb0d98690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlsb<byte>(W256 w, N8 f, N2 d, byte t)
7ffdb0d986a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlsb<ushort>(W256 w, N8 f, N2 d, ushort t)
7ffdb0d986f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlsb<uint>(W256 w, N8 f, N2 d, uint t)
7ffdb0d98708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlsb<ulong>(W256 w, N8 f, N2 d, ulong t)
7ffdb0d98720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlsb<byte>(W256 w, N8 f, N3 d, byte t)
7ffdb0d98738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlsb<ushort>(W256 w, N8 f, N3 d, ushort t)
7ffdb0d98780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlsb<uint>(W256 w, N8 f, N3 d, uint t)
7ffdb0d98798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlsb<ulong>(W256 w, N8 f, N3 d, ulong t)
7ffdb0d987b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlsb<byte>(W256 w, N8 f, N4 d, byte t)
7ffdb0d987c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlsb<ushort>(W256 w, N8 f, N4 d, ushort t)
7ffdb0d98828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlsb<uint>(W256 w, N8 f, N4 d, uint t)
7ffdb0d98840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlsb<ulong>(W256 w, N8 f, N4 d, ulong t)
7ffdb0d98858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlsb<byte>(W256 w, N8 f, N5 d, byte t)
7ffdb0d98870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlsb<ushort>(W256 w, N8 f, N5 d, ushort t)
7ffdb0d988b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlsb<uint>(W256 w, N8 f, N5 d, uint t)
7ffdb0d988d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlsb<ulong>(W256 w, N8 f, N5 d, ulong t)
7ffdb0d988e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlsb<byte>(W256 w, N8 f, N6 d, byte t)
7ffdb0d989a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlsb<ushort>(W256 w, N8 f, N6 d, ushort t)
7ffdb0d98b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlsb<uint>(W256 w, N8 f, N6 d, uint t)
7ffdb0d98be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlsb<ulong>(W256 w, N8 f, N6 d, ulong t)
7ffdb0d98c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlsb<byte>(W256 w, N8 f, N7 d, byte t)
7ffdb0d98c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlsb<ushort>(W256 w, N8 f, N7 d, ushort t)
7ffdb0d98cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlsb<uint>(W256 w, N8 f, N7 d, uint t)
7ffdb0d98d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlsb<ulong>(W256 w, N8 f, N7 d, ulong t)
7ffdb0d98d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlsb<byte>(W128 w, N8 f, byte d, byte t)
7ffdb0d98e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlsb<ushort>(W128 w, N8 f, byte d, ushort t)
7ffdb0d98e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlsb<uint>(W128 w, N8 f, byte d, uint t)
7ffdb0d98e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlsb<ulong>(W128 w, N8 f, byte d, ulong t)
7ffdb0d98ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlsb<byte>(W256 w, N8 f, byte d, byte t)
7ffdb0d98f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlsb<ushort>(W256 w, N8 f, byte d, ushort t)
7ffdb0d98fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlsb<uint>(W256 w, N8 f, byte d, uint t)
7ffdb0d98fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlsb<ulong>(W256 w, N8 f, byte d, ulong t)
7ffdb0d99050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmsb<byte>(W128 w)
7ffdb0d99068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmsb<ushort>(W128 w)
7ffdb0d99170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmsb<uint>(W128 w)
7ffdb0d99260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmsb<ulong>(W128 w)
7ffdb0d993b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmsb<byte>(W128 w, N2 f, N1 d, byte t)
7ffdb0d994a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmsb<ushort>(W128 w, N2 f, N1 d, ushort t)
7ffdb0d99590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmsb<uint>(W128 w, N2 f, N1 d, uint t)
7ffdb0d99680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmsb<ulong>(W128 w, N2 f, N1 d, ulong t)
7ffdb0d996c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmsb<byte>(W128 w, N4 f, N1 d)
7ffdb0d99728h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmsb<ushort>(W128 w, N4 f, N1 d)
7ffdb0d997b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmsb<uint>(W128 w, N4 f, N1 d)
7ffdb0d99818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmsb<ulong>(W128 w, N4 f, N1 d)
7ffdb0d99860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmsb<byte>(W128 w, N8 f, N1 d)
7ffdb0d998c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmsb<ushort>(W128 w, N8 f, N1 d)
7ffdb0d99950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmsb<uint>(W128 w, N8 f, N1 d)
7ffdb0d99998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmsb<ulong>(W128 w, N8 f, N1 d)
7ffdb0d999f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmsb<byte>(W128 w, N16 f, N1 d)
7ffdb0d99a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmsb<ushort>(W128 w, N16 f, N1 d)
7ffdb0d99a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmsb<uint>(W128 w, N16 f, N1 d)
7ffdb0d99ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmsb<ulong>(W128 w, N16 f, N1 d)
7ffdb0d99b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmsb<byte>(W128 w, N8 f, N2 d)
7ffdb0d99b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmsb<ushort>(W128 w, N8 f, N2 d)
7ffdb0d99bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmsb<uint>(W128 w, N8 f, N2 d)
7ffdb0d99c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmsb<ulong>(W128 w, N8 f, N2 d)
7ffdb0d99c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmsb<byte>(W128 w, N8 f, N3 d)
7ffdb0d99cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmsb<ushort>(W128 w, N8 f, N3 d)
7ffdb0d99d58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmsb<uint>(W128 w, N8 f, N3 d)
7ffdb0d99da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmsb<ulong>(W128 w, N8 f, N3 d)
7ffdb0d99e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmsb<byte>(W128 w, N8 f, N4 d)
7ffdb0d99e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmsb<ushort>(W128 w, N8 f, N4 d)
7ffdb0d99ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmsb<uint>(W128 w, N8 f, N4 d)
7ffdb0d99f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmsb<ulong>(W128 w, N8 f, N4 d)
7ffdb0d99fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmsb<byte>(W128 w, N8 f, N5 d)
7ffdb0d9a010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmsb<ushort>(W128 w, N8 f, N5 d)
7ffdb0d9a0a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmsb<uint>(W128 w, N8 f, N5 d)
7ffdb0d9a100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmsb<ulong>(W128 w, N8 f, N5 d)
7ffdb0d9a160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmsb<byte>(W128 w, N8 f, N6 d)
7ffdb0d9a1c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmsb<ushort>(W128 w, N8 f, N6 d)
7ffdb0d9a250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmsb<uint>(W128 w, N8 f, N6 d)
7ffdb0d9a2e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmsb<ulong>(W128 w, N8 f, N6 d)
7ffdb0d9a340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmsb<byte>(W128 w, N8 f, N7 d)
7ffdb0d9a388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmsb<ushort>(W128 w, N8 f, N7 d)
7ffdb0d9a418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmsb<uint>(W128 w, N8 f, N7 d)
7ffdb0d9a478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmsb<ulong>(W128 w, N8 f, N7 d)
7ffdb0d9a4c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmsb<byte>(W128 w, N8 f, byte d)
7ffdb0d9a520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmsb<ushort>(W128 w, N8 f, byte d)
7ffdb0d9a568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmsb<uint>(W128 w, N8 f, byte d)
7ffdb0d9a580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmsb<ulong>(W128 w, N8 f, byte d)
7ffdb0d9a5b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmsb<byte>(W256 w)
7ffdb0d9a5e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmsb<ushort>(W256 w)
7ffdb0d9a628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmsb<uint>(W256 w)
7ffdb0d9a670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmsb<ulong>(W256 w)
7ffdb0d9a6a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmsb<byte>(W256 w, N2 f, N1 d, byte t)
7ffdb0d9a6d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmsb<ushort>(W256 w, N2 f, N1 d, ushort t)
7ffdb0d9a730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmsb<uint>(W256 w, N2 f, N1 d, uint t)
7ffdb0d9a760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmsb<ulong>(W256 w, N2 f, N1 d, ulong t)
7ffdb0d9a790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmsb<byte>(W256 w, N4 f, N1 d)
7ffdb0d9a7c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmsb<ushort>(W256 w, N4 f, N1 d)
7ffdb0d9a820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmsb<uint>(W256 w, N4 f, N1 d)
7ffdb0d9a898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmsb<ulong>(W256 w, N4 f, N1 d)
7ffdb0d9a8b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmsb<byte>(W256 w, N8 f, N1 d)
7ffdb0d9a8e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmsb<ushort>(W256 w, N8 f, N1 d)
7ffdb0d9a928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmsb<uint>(W256 w, N8 f, N1 d)
7ffdb0d9a958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmsb<ulong>(W256 w, N8 f, N1 d)
7ffdb0d9a988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmsb<byte>(W256 w, N16 f, N1 d, byte t)
7ffdb0d9a9a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmsb<ushort>(W256 w, N16 f, N1 d, ushort t)
7ffdb0d9a9e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmsb<uint>(W256 w, N16 f, N1 d, uint t)
7ffdb0d9aa00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmsb<ulong>(W256 w, N16 f, N1 d, ulong t)
7ffdb0d9aa30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmsb<byte>(W256 w, N8 f, N2 d, byte t)
7ffdb0d9aa48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmsb<ushort>(W256 w, N8 f, N2 d, ushort t)
7ffdb0d9aaa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmsb<uint>(W256 w, N8 f, N2 d, uint t)
7ffdb0d9aad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmsb<ulong>(W256 w, N8 f, N2 d, ulong t)
7ffdb0d9aaf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmsb<byte>(W256 w, N8 f, N3 d, byte t)
7ffdb0d9ab20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmsb<ushort>(W256 w, N8 f, N3 d, ushort t)
7ffdb0d9ab98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmsb<uint>(W256 w, N8 f, N3 d, uint t)
7ffdb0d9abc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmsb<ulong>(W256 w, N8 f, N3 d, ulong t)
7ffdb0d9abf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmsb<byte>(W256 w, N8 f, N4 d)
7ffdb0d9ac10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmsb<ushort>(W256 w, N8 f, N4 d)
7ffdb0d9ac70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmsb<uint>(W256 w, N8 f, N4 d)
7ffdb0d9aca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmsb<ulong>(W256 w, N8 f, N4 d)
7ffdb0d9acd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmsb<byte>(W256 w, N8 f, N5 d)
7ffdb0d9ace8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmsb<ushort>(W256 w, N8 f, N5 d)
7ffdb0d9ad48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmsb<uint>(W256 w, N8 f, N5 d)
7ffdb0d9ad78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmsb<ulong>(W256 w, N8 f, N5 d)
7ffdb0d9ad90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmsb<byte>(W256 w, N8 f, N6 d)
7ffdb0d9adf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmsb<ushort>(W256 w, N8 f, N6 d)
7ffdb0d9ae50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmsb<uint>(W256 w, N8 f, N6 d)
7ffdb0d9ae68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmsb<ulong>(W256 w, N8 f, N6 d)
7ffdb0d9ae98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmsb<byte>(W256 w, N8 f, N7 d)
7ffdb0d9aeb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmsb<ushort>(W256 w, N8 f, N7 d)
7ffdb0d9af10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmsb<uint>(W256 w, N8 f, N7 d)
7ffdb0d9af28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmsb<ulong>(W256 w, N8 f, N7 d)
7ffdb0d9af58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmsb<byte>(W256 w, N8 f, byte d)
7ffdb0d9af88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmsb<ushort>(W256 w, N8 f, byte d)
7ffdb0d9afb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmsb<uint>(W256 w, N8 f, byte d)
7ffdb0d9afe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmsb<ulong>(W256 w, N8 f, byte d)
7ffdb0d9b000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vodd<byte>(W128 w, N2 f, N1 d)
7ffdb0d9b030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vodd<ushort>(W128 w, N2 f, N1 d)
7ffdb0d9b0a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vodd<uint>(W128 w, N2 f, N1 d)
7ffdb0d9b138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vodd<ulong>(W128 w, N2 f, N1 d)
7ffdb0d9b198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vodd<byte>(W256 w, N2 f, N1 d)
7ffdb0d9b1e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vodd<ushort>(W256 w, N2 f, N1 d)
7ffdb0d9b240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vodd<uint>(W256 w, N2 f, N1 d)
7ffdb0d9b270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vodd<ulong>(W256 w, N2 f, N1 d)
7ffdb0d9b288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vodd<ushort>(W128 w, N2 f, N2 d)
7ffdb0d9b2d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vodd<uint>(W128 w, N2 f, N2 d)
7ffdb0d9b318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vodd<ulong>(W128 w, N2 f, N2 d)
7ffdb0d9b378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vodd<ushort>(W256 w, N2 f, N2 d)
7ffdb0d9b3d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vodd<uint>(W256 w, N2 f, N2 d)
7ffdb0d9b438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vodd<ulong>(W256 w, N2 f, N2 d)
7ffdb0d9b468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VLut16 init(Vector128<byte> src)
7ffdaf2e2f70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VLut16 init(ReadOnlySpan<byte> src, N16 n)
7ffdaf2e2f88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VLut32 init(Vector256<byte> src)
7ffdaf2e2fa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VLut32 init(ReadOnlySpan<byte> src, N32 n)
7ffdaf2e2fb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> select(VLut16 lut, Vector128<byte> items)
7ffdaf2e2fd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> select(VLut32 lut, Vector256<byte> items)
7ffdaf2e2fe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> load<float>(float src)
7ffdb0ca1e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> load<double>(double src)
7ffdb0ca1ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float store<float>(Vector128<float> src)
7ffdb0ca1f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double store<double>(Vector128<double> src)
7ffdb0ca1f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> add<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca1f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> add<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca1fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> sub<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca2058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> sub<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca20a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> mul<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca20e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> mul<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca2130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> div<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca2178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> div<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca21c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> min<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca2238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> min<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca2280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> max<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca22c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> max<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca2310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> ceil<float>(Vector128<float> x)
7ffdb0ca2358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> ceil<double>(Vector128<double> x)
7ffdb0ca23a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> floor<float>(Vector128<float> x)
7ffdb0ca2430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> floor<double>(Vector128<double> x)
7ffdb0ca2478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> sqrt<float>(Vector128<float> x)
7ffdb0ca24c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> sqrt<double>(Vector128<double> x)
7ffdb0ca2508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> fmadd<float>(Vector128<float> x, Vector128<float> y, Vector128<float> z)
7ffdb0ca2550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> fmadd<double>(Vector128<double> x, Vector128<double> y, Vector128<double> z)
7ffdb0ca2598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> fmsub<float>(Vector128<float> a, Vector128<float> b, Vector128<float> c)
7ffdb0ca25e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> fmsub<double>(Vector128<double> a, Vector128<double> b, Vector128<double> c)
7ffdb0ca2628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> fnmadd<float>(Vector128<float> a, Vector128<float> b, Vector128<float> c)
7ffdb0ca26b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> fnmadd<double>(Vector128<double> a, Vector128<double> b, Vector128<double> c)
7ffdb0ca2700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool eq<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca2748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool eq<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca2778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool neq<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca27a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool neq<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca27d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool lteq<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca2808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool lteq<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca2850h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool ngt<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca2880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool ngt<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca28b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool nlt<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca28c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool nlt<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca28f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool gt<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca2958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool gt<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca2988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool gteq<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca29b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool gteq<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca29e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool lt<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca2a18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool lt<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca2a48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> cmp<float>(Vector128<float> x, Vector128<float> y, FpCmpMode mode)
7ffdb0ca2a78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> cmp<double>(Vector128<double> x, Vector128<double> y, FpCmpMode mode)
7ffdb0ca2ac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vnegate<float>(Vector128<float> src)
7ffdb08a3e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vnegate<double>(Vector128<double> src)
7ffdb08a3f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vnegate<float>(Vector256<float> src)
7ffdb08a8858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vnegate<double>(Vector256<double> src)
7ffdb08a8948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vsub<float>(Vector128<float> x, Vector128<float> y)
7ffdb08a8e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vsub<double>(Vector128<double> x, Vector128<double> y)
7ffdb08a8f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vsub<float>(Vector256<float> x, Vector256<float> y)
7ffdb08a9518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vsub<double>(Vector256<double> x, Vector256<double> y)
7ffdb08a9710h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vxor<float>(Vector128<float> x, Vector128<float> y)
7ffdb0a40750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vxor<double>(Vector128<double> x, Vector128<double> y)
7ffdb0a40b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vxor<float>(Vector256<float> x, Vector256<float> y)
7ffdb0a41e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vxor<double>(Vector256<double> x, Vector256<double> y)
7ffdb0a41f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vmax<float>(Vector128<float> x, Vector128<float> y)
7ffdb0a7b660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vmax<double>(Vector128<double> x, Vector128<double> y)
7ffdb0a7be88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vmax<float>(Vector256<float> x, Vector256<float> y)
7ffdb0ab1308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vmax<double>(Vector256<double> x, Vector256<double> y)
7ffdb0ab13b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vadd<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca1500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vadd<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca1548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vadd<float>(Vector256<float> x, Vector256<float> y)
7ffdb0ca1590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vadd<double>(Vector256<double> x, Vector256<double> y)
7ffdb0ca15d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vhadd<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca1668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vhadd<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca16b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vhadd<float>(Vector256<float> x, Vector256<float> y)
7ffdb0ca16f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vhadd<double>(Vector256<double> x, Vector256<double> y)
7ffdb0ca1758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vdiv<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca17a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vdiv<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca17e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vdiv<float>(Vector256<float> x, Vector256<float> y)
7ffdb0ca1830h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vdiv<double>(Vector256<double> x, Vector256<double> y)
7ffdb0ca18d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vand<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca1920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vand<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca1968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vand<float>(Vector256<float> x, Vector256<float> y)
7ffdb0ca19b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vand<double>(Vector256<double> x, Vector256<double> y)
7ffdb0ca19f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vor<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca1a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vor<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca1a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vor<float>(Vector256<float> x, Vector256<float> y)
7ffdb0ca1ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vor<double>(Vector256<double> x, Vector256<double> y)
7ffdb0ca1b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vxornot<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca1ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vxornot<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca1bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vxornot<float>(Vector256<float> x, Vector256<float> y)
7ffdb0ca1c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vxornot<double>(Vector256<double> x, Vector256<double> y)
7ffdb0ca1c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vmin<float>(Vector128<float> x, Vector128<float> y)
7ffdb0ca1cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vmin<double>(Vector128<double> x, Vector128<double> y)
7ffdb0ca1d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vmin<float>(Vector256<float> x, Vector256<float> y)
7ffdb0ca1d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vmin<double>(Vector256<double> x, Vector256<double> y)
7ffdb0ca1dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vloads(float x)
7ffdaf2e24c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vloads(double x)
7ffdaf2e24d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float vstores(Vector128<float> src)
7ffdaf2e24f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double vstores(Vector128<double> src)
7ffdaf2e2508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> convert(int x, out Vector128<double> dst)
7ffdaf2e2520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> convert(int src, out Vector128<float> dst)
7ffdaf2e2538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> convert(long src, out Vector128<float> dst)
7ffdaf2e2550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int to32i(in float x)
7ffdaf2e2568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int to32i(in double x)
7ffdaf2e2580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long to64i(in float x)
7ffdaf2e2598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long to64i(in double x)
7ffdaf2e25b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vmovs(Vector128<float> x, Vector128<float> y)
7ffdaf2e25c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vmovs(Vector128<double> x, Vector128<double> y)
7ffdaf2e25e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vadds(Vector128<float> x, Vector128<float> y)
7ffdaf2e25f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vadds(Vector128<double> x, Vector128<double> y)
7ffdaf2e2610h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vmuls(Vector128<float> x, Vector128<float> y)
7ffdaf2e2628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vmuls(Vector128<double> x, Vector128<double> y)
7ffdaf2e2640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vfmadds(Vector128<float> x, Vector128<float> y, Vector128<float> z)
7ffdaf2e2658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vfmadds(Vector128<double> x, Vector128<double> y, Vector128<double> z)
7ffdaf2e2670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> fmsub(Vector128<float> x, Vector128<float> y, Vector128<float> z)
7ffdaf2e2688h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> fmsub(Vector128<double> x, Vector128<double> y, Vector128<double> z)
7ffdaf2e26a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> fnmadd(Vector128<float> x, Vector128<float> y, Vector128<float> z)
7ffdaf2e26b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> fnmadd(Vector128<double> x, Vector128<double> y, Vector128<double> z)
7ffdaf2e26d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vdivs(Vector128<float> x, Vector128<float> y)
7ffdaf2e26e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vdivs(Vector128<double> x, Vector128<double> y)
7ffdaf2e2700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> sub(Vector128<float> x, Vector128<float> y)
7ffdaf2e2718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> sub(Vector128<double> x, Vector128<double> y)
7ffdaf2e2730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> max(Vector128<float> x, Vector128<float> y)
7ffdaf2e2748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> max(Vector128<double> x, Vector128<double> y)
7ffdaf2e2760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> min(Vector128<float> x, Vector128<float> y)
7ffdaf2e2778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> min(Vector128<double> x, Vector128<double> y)
7ffdaf2e2790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool eq(Vector128<float> x, Vector128<float> y)
7ffdaf2e27a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool eq(Vector128<double> x, Vector128<double> y)
7ffdaf2e27c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool neq(Vector128<float> x, Vector128<float> y)
7ffdaf2e27d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool neq(Vector128<double> x, Vector128<double> y)
7ffdaf2e27f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool gt(Vector128<float> x, Vector128<float> y)
7ffdaf2e2808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool gt(Vector128<double> x, Vector128<double> y)
7ffdaf2e2820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool gteq(Vector128<float> x, Vector128<float> y)
7ffdaf2e2838h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool gteq(Vector128<double> x, Vector128<double> y)
7ffdaf2e2850h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool ngt(Vector128<float> x, Vector128<float> y)
7ffdaf2e2868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool ngt(Vector128<double> x, Vector128<double> y)
7ffdaf2e2880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool lt(Vector128<float> x, Vector128<float> y)
7ffdaf2e2898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool lt(Vector128<double> x, Vector128<double> y)
7ffdaf2e28b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool nlt(Vector128<float> x, Vector128<float> y)
7ffdaf2e28c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool nlt(Vector128<double> x, Vector128<double> y)
7ffdaf2e28e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool lteq(Vector128<float> x, Vector128<float> y)
7ffdaf2e28f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool lteq(Vector128<double> x, Vector128<double> y)
7ffdaf2e2910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> cmp(Vector128<float> x, Vector128<float> y, FpCmpMode mode)
7ffdaf2e2928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> cmp(Vector128<double> x, Vector128<double> y, FpCmpMode mode)
7ffdaf2e2940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> ceil(Vector128<float> x)
7ffdaf2e2958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> ceil(Vector128<double> x)
7ffdaf2e2970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> floor(Vector128<float> x)
7ffdaf2e2988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> floor(Vector128<double> x)
7ffdaf2e29a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> rcp(Vector128<float> x)
7ffdaf2e29b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> sqrt(Vector128<float> x)
7ffdaf2e29d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> sqrt(Vector128<double> x)
7ffdaf2e29e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<float> rsqrt(ref Vector128<float> x)
7ffdaf2e2a00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool IsNaN(Vector128<float> x, byte index)
7ffdaf2e2a48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool IsNaN(Vector128<double> x, byte index)
7ffdaf2e2a60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# FloatComparisonMode fpmode(FpCmpMode m)
7ffdaf2e2a78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vrcp(Vector128<float> x)
7ffdaf2e1e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vrcp(Vector256<float> x)
7ffdaf2e1e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vfmadd(Vector128<float> a, Vector128<float> b, Vector128<float> c)
7ffdaf2e1e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vfmadd(Vector128<double> a, Vector128<double> b, Vector128<double> c)
7ffdaf2e1e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vfmadd(Vector256<float> x, Vector256<float> y, Vector256<float> z)
7ffdaf2e1ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vfmadd(Vector256<double> x, Vector256<double> y, Vector256<double> z)
7ffdaf2e1ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vceil(Vector128<float> src)
7ffdaf2e1ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vceil(Vector128<double> src)
7ffdaf2e1ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vceil(Vector256<float> src)
7ffdaf2e1f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vceil(Vector256<double> src)
7ffdaf2e1f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vfloor(Vector128<float> x)
7ffdaf2e1f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vfloor(Vector128<double> x)
7ffdaf2e1f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vfloor(Vector256<float> x)
7ffdaf2e1f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vfloor(Vector256<double> x)
7ffdaf2e1f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vconvert128x32f(Vector128<int> src)
7ffdaf2e1f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vconvert128x32f(Vector128<double> src)
7ffdaf2e1fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vconvert128x32f(Vector256<double> src)
7ffdaf2e1fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vconvert128x32i(Vector128<float> src)
7ffdaf2e1fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vconvert128x32i(Vector256<double> src)
7ffdaf2e1ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vconvert128x32i(Vector128<double> src)
7ffdaf2e2010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vconvert256x32f(Vector256<int> src)
7ffdaf2e2028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vconvert256x32i(Vector256<float> src)
7ffdaf2e2040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vconvert256x64f(Vector128<int> src)
7ffdaf2e2058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vdiv(Vector128<float> x, Vector128<float> y)
7ffdaf2e2070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vdiv(Vector128<double> x, Vector128<double> y)
7ffdaf2e2088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vdiv(Vector256<float> x, Vector256<float> y)
7ffdaf2e20a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vdiv(Vector256<double> x, Vector256<double> y)
7ffdaf2e20b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vsqrt(Vector128<float> src)
7ffdaf2e20d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vsqrt(Vector128<double> src)
7ffdaf2e20e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vsqrt(Vector256<float> src)
7ffdaf2e2100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vsqrt(Vector256<double> src)
7ffdaf2e2118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vrsqrt(Vector128<float> src)
7ffdaf2e2130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vxor1(Vector128<float> x)
7ffdaf2e2148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vxor1(Vector128<double> x)
7ffdaf2e2160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vxor1(Vector256<float> x)
7ffdaf2e2178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vxor1(Vector256<double> x)
7ffdaf2e2190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vfman(Vector128<float> x, Vector128<float> y, Vector128<float> z)
7ffdaf2e21a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vfman(Vector128<double> x, Vector128<double> y, Vector128<double> z)
7ffdaf2e21c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vfman(Vector256<float> x, Vector256<float> y, Vector256<float> z)
7ffdaf2e21d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vfman(Vector256<double> x, Vector256<double> y, Vector256<double> z)
7ffdaf2e21f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vfmas(Vector128<float> x, Vector128<float> y, Vector128<float> z)
7ffdaf2e2208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vfmas(Vector128<double> x, Vector128<double> y, Vector128<double> z)
7ffdaf2e2220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vfmas(Vector256<float> x, Vector256<float> y, Vector256<float> z)
7ffdaf2e2238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vfmas(Vector256<double> x, Vector256<double> y, Vector256<double> z)
7ffdaf2e2250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vround(Vector128<float> x)
7ffdaf2e2268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vround(Vector128<double> x)
7ffdaf2e2280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vroundz(Vector128<float> x)
7ffdaf2e2298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vroundz(Vector128<double> x)
7ffdaf2e22b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vround(Vector256<float> x)
7ffdaf2e22c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vround(Vector256<double> x)
7ffdaf2e22e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vroundz(Vector256<float> x)
7ffdaf2e22f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vroundz(Vector256<double> x)
7ffdaf2e2310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vmul(Vector128<float> x, Vector128<float> y)
7ffdaf2e2328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vmul(Vector128<double> x, Vector128<double> y)
7ffdaf2e2340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vmul(Vector256<float> x, Vector256<float> y)
7ffdaf2e2358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vmul(Vector256<double> x, Vector256<double> y)
7ffdaf2e2370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vmovehl(Vector128<float> x, Vector128<float> y)
7ffdaf2e2388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vmovelh(Vector128<float> x, Vector128<float> y)
7ffdaf2e23a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vdot(Vector128<float> x, Vector128<float> y, byte control)
7ffdaf2e23b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vdot(Vector128<double> x, Vector128<double> y, byte control)
7ffdaf2e23d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vdot(Vector256<float> x, Vector256<float> y, byte control)
7ffdaf2e23e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vhadd(Vector128<float> x, Vector128<float> y)
7ffdaf2e2400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vhadd(Vector128<double> x, Vector128<double> y)
7ffdaf2e2418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vhadd(Vector256<float> a, Vector256<float> b)
7ffdaf2e2430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vhadd(Vector256<double> x, Vector256<double> y)
7ffdaf2e2448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vhsub(Vector128<float> x, Vector128<float> y)
7ffdaf2e2460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vhsub(Vector128<double> x, Vector128<double> y)
7ffdaf2e2478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vhsub(Vector256<float> x, Vector256<float> y)
7ffdaf2e2490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vhsub(Vector256<double> x, Vector256<double> y)
7ffdaf2e24a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte store(ulong src, ref byte dst)
7ffdaf2e1c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not(in byte a, ref byte dst)
7ffdaf2e1c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and(in byte a, in byte b, ref byte dst)
7ffdaf2e1c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand(in byte a, in byte b, ref byte dst)
7ffdaf2e1c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or(in byte a, in byte b, ref byte dst)
7ffdaf2e1cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor(in byte a, in byte b, ref byte dst)
7ffdaf2e1cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor(in byte a, in byte b, ref byte dst)
7ffdaf2e1ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor(in byte a, in byte b, ref byte dst)
7ffdaf2e1cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl(in byte a, in byte b, ref byte dst)
7ffdaf2e1d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl(in byte a, in byte b, ref byte dst)
7ffdaf2e1d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl(in byte a, in byte b, ref byte dst)
7ffdaf2e1d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl(in byte a, in byte b, ref byte dst)
7ffdaf2e1d58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot(in byte a, in byte b, ref byte dst)
7ffdaf2e1d70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz(in byte a, in byte b)
7ffdaf2e1d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc(in byte a, in byte b)
7ffdaf2e1da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc(in byte a)
7ffdaf2e1db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select(in byte a, in byte b, in byte c, ref byte dst)
7ffdaf2e1dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz(ulong a, ulong b)
7ffdaf2e1de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc(ulong a, ulong b)
7ffdaf2e1e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc(ulong a)
7ffdaf2e1e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm4L assemble(Perm4L x0, Perm4L x1, Perm4L x2, Perm4L x3)
7ffdaf2e16c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm8L assemble(Perm8L x0, Perm8L x1, Perm8L x2, Perm8L x3, Perm8L x4, Perm8L x5, Perm8L x6, Perm8L x7)
7ffdaf2e16e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm16L assemble(Perm16L x0, Perm16L x1, Perm16L x2, Perm16L x3, Perm16L x4, Perm16L x5, Perm16L x6, Perm16L x7, Perm16L x8, Perm16L x9, Perm16L xA, Perm16L xB, Perm16L xC, Perm16L xD, Perm16L xE, Perm16L xF)
7ffdaf2e16f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm4L identity(N4 n)
7ffdaf2e1740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm8L identity(N8 n)
7ffdaf2e1758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm16L identity(N16 n)
7ffdaf2e1770h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm16 identity(W128 w)
7ffdaf2e1788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm32 identity(W256 w)
7ffdaf2e17a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm identity(int n)
7ffdaf2e17b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm identity(uint n)
7ffdaf2e17d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref NatPerm<N4> natural(Perm4L spec, in NatPerm<N4> dst)
7ffdaf2e18f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NatPerm<N8> natural(Perm8L spec)
7ffdaf2e1920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref NatPerm<N16> natural(Perm16L spec, in NatPerm<N16> dst)
7ffdaf2e1938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NatPerm<N16> natural(Perm16L spec)
7ffdaf2e1950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm4L reversed(N4 n)
7ffdaf2e19b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm8L reversed(N8 n)
7ffdaf2e19c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm16L reversed(N16 n)
7ffdaf2e19e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm16 reversed(W128 w)
7ffdaf2e19f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm32 reversed(W256 w)
7ffdaf2e1a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool symbol(Perm4L src, int index, out SymVal<Perm4L> dst)
7ffdaf2e1a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool symbol(Perm8L src, int index, out SymVal<Perm8L> dst)
7ffdaf2e1a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool symbol(Perm16L src, int index, out SymVal<Perm16L> dst)
7ffdaf2e1a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool symbols(Perm4L src, Span<SymVal<Perm4L>> dst)
7ffdaf2e1aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool symbols(Perm8L src, Span<SymVal<Perm8L>> dst)
7ffdaf2e1ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool symbols(Perm16L src, Span<SymVal<Perm16L>> dst)
7ffdaf2e1ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool test(Perm4L src)
7ffdaf2e1b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool test(Perm8L src)
7ffdaf2e1b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool test(Perm16L src)
7ffdaf2e1b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> shuffles(NatPerm<N16> src)
7ffdaf2e1b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm32 unsize(in NatPerm<N32,byte> spec)
7ffdaf2e1b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm16 unsize(in NatPerm<N16,byte> spec)
7ffdaf2e1ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm4L pack(NatPerm<N4> src)
7ffdaf2e1c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm8L pack(NatPerm<N8> src)
7ffdaf2e1c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm16L pack(NatPerm<N16> src)
7ffdaf2e1c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void apply<byte>(Perm p, ReadOnlySpan<byte> src, Span<byte> dst)
7ffdb0c6a6d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void apply<ushort>(Perm p, ReadOnlySpan<ushort> src, Span<ushort> dst)
7ffdb0c6a730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void apply<uint>(Perm p, ReadOnlySpan<uint> src, Span<uint> dst)
7ffdb0c6a748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void apply<ulong>(Perm p, ReadOnlySpan<ulong> src, Span<ulong> dst)
7ffdb0c6a7a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void apply<byte>(Span<byte> src, Swap[] swaps)
7ffdb0c6a7c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void apply<ushort>(Span<ushort> src, Swap[] swaps)
7ffdb0c6a8f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void apply<uint>(Span<uint> src, Swap[] swaps)
7ffdb0c6a928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void apply<ulong>(Span<ulong> src, Swap[] swaps)
7ffdb0c6a958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void apply<byte>(ReadOnlySpan<byte> src, ReadOnlySpan<Swap> swaps, Span<byte> dst)
7ffdb0c6a9d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void apply<ushort>(ReadOnlySpan<ushort> src, ReadOnlySpan<Swap> swaps, Span<ushort> dst)
7ffdb0c6aa60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void apply<uint>(ReadOnlySpan<uint> src, ReadOnlySpan<Swap> swaps, Span<uint> dst)
7ffdb0c6aa78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void apply<ulong>(ReadOnlySpan<ulong> src, ReadOnlySpan<Swap> swaps, Span<ulong> dst)
7ffdb0c6aa90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<byte> identity<byte>(byte n)
7ffdb0c6aad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<byte> init<byte>(IEnumerable<byte> src)
7ffdb0c6ab38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ushort> identity<ushort>(ushort n)
7ffdb0c6adf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ushort> init<ushort>(IEnumerable<ushort> src)
7ffdb0c6b1f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<uint> identity<uint>(uint n)
7ffdb0c6b480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<uint> init<uint>(IEnumerable<uint> src)
7ffdb0c6b888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ulong> identity<ulong>(ulong n)
7ffdb0c6bba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ulong> init<ulong>(IEnumerable<ulong> src)
7ffdb0c6bf90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<byte> init<byte>(ReadOnlySpan<byte> src)
7ffdb0ca0000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ushort> init<ushort>(ReadOnlySpan<ushort> src)
7ffdb0ca0018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<uint> init<uint>(ReadOnlySpan<uint> src)
7ffdb0ca0030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ulong> init<ulong>(ReadOnlySpan<ulong> src)
7ffdb0ca0048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<byte> init<byte>(byte n, ValueTuple<byte,byte>[] swaps)
7ffdb0ca0060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ushort> init<ushort>(ushort n, ValueTuple<ushort,ushort>[] swaps)
7ffdb0ca0120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<uint> init<uint>(uint n, ValueTuple<uint,uint>[] swaps)
7ffdb0ca0198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ulong> init<ulong>(ulong n, ValueTuple<ulong,ulong>[] swaps)
7ffdb0ca0258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<byte> init<byte>(byte n, Swap<byte>[] swaps)
7ffdb0ca0270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ushort> init<ushort>(ushort n, Swap<ushort>[] swaps)
7ffdb0ca04c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<uint> init<uint>(uint n, Swap<uint>[] swaps)
7ffdb0ca0780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ulong> init<ulong>(ulong n, Swap<ulong>[] swaps)
7ffdb0ca09d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<byte> init<byte>(Span<byte> src)
7ffdb0ca0c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ushort> init<ushort>(Span<ushort> src)
7ffdb0ca0c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<uint> init<uint>(Span<uint> src)
7ffdb0ca0c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ulong> init<ulong>(Span<ulong> src)
7ffdb0ca0c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<byte> init<byte>(byte[] src)
7ffdb0ca0ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ushort> init<ushort>(ushort[] src)
7ffdb0ca0cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<uint> init<uint>(uint[] src)
7ffdb0ca0d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ulong> init<ulong>(ulong[] src)
7ffdb0ca0d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<byte> build<byte>(byte n, ValueTuple<byte,byte>[] swaps)
7ffdb0ca0d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ushort> build<ushort>(ushort n, ValueTuple<ushort,ushort>[] swaps)
7ffdb0ca0d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<uint> build<uint>(uint n, ValueTuple<uint,uint>[] swaps)
7ffdb0ca0d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ulong> build<ulong>(ulong n, ValueTuple<ulong,ulong>[] swaps)
7ffdb0ca0db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<byte> build<byte>(byte n, Swap<byte>[] swaps)
7ffdb0ca0dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ushort> build<ushort>(ushort n, Swap<ushort>[] swaps)
7ffdb0ca0de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<uint> build<uint>(uint n, Swap<uint>[] swaps)
7ffdb0ca0e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ulong> build<ulong>(ulong n, Swap<ulong>[] swaps)
7ffdb0ca0e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<byte> Identity<byte>(byte n)
7ffdb0ca0e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ushort> Identity<ushort>(ushort n)
7ffdb0ca0ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<uint> Identity<uint>(uint n)
7ffdb0ca0f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Perm<ulong> Identity<ulong>(ulong n)
7ffdb0ca0f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vload<ushort>(in ushort src, out Vector128<ushort> dst)
7ffdb0381fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vload<ushort>(ushort* pSrc, out Vector128<ushort> dst)
7ffdb0382790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vload<byte>(in byte src, out Vector128<byte> dst)
7ffdb0383258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vload<byte>(byte* pSrc, out Vector128<byte> dst)
7ffdb0383318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vload<uint>(in uint src, out Vector128<uint> dst)
7ffdb0388408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vload<uint>(uint* pSrc, out Vector128<uint> dst)
7ffdb03884b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vload<ulong>(in ulong src, out Vector128<ulong> dst)
7ffdb03892f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vload<ulong>(ulong* pSrc, out Vector128<ulong> dst)
7ffdb0389380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vload<ushort>(W256 w, Span<ushort> src)
7ffdb038aad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vload<ushort>(W256 w, in ushort src)
7ffdb038b138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vload<ushort>(ushort* pSrc, out Vector256<ushort> dst)
7ffdb038b180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vload<uint>(W256 w, Span<uint> src)
7ffdb03b0138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vload<uint>(W256 w, in uint src)
7ffdb03b0198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vload<uint>(uint* pSrc, out Vector256<uint> dst)
7ffdb03b01b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vload<ulong>(W256 w, Span<ulong> src)
7ffdb03b0e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vload<ulong>(W256 w, in ulong src)
7ffdb03b0e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vload<ulong>(ulong* pSrc, out Vector256<ulong> dst)
7ffdb03b0e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> veq<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb03b2280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> veq<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb03b2478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vand<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb044b810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vload<byte>(W256 w, in byte src)
7ffdb044b888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vload<byte>(byte* pSrc, out Vector256<byte> dst)
7ffdb044b8e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<byte>(Vector256<byte> src, ref byte dst)
7ffdb044ba38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vand<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb044bbe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ushort>(Vector256<ushort> src, ref ushort dst)
7ffdb044bd38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vand<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb044be88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<uint>(Vector256<uint> src, ref uint dst)
7ffdb0470018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vand<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb0470150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ulong>(Vector256<ulong> src, ref ulong dst)
7ffdb0470318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vmask16u<byte>(Vector128<byte> src)
7ffdb0479590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vbroadcast<byte>(W128 w, byte src)
7ffdb04796c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vmask16u<ushort>(Vector128<ushort> src)
7ffdb047a310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vmask16u<uint>(Vector128<uint> src)
7ffdb047a4a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vmask16u<ulong>(Vector128<ulong> src)
7ffdb047a670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vmask32u<byte>(Vector256<byte> src)
7ffdb047a7d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vbroadcast<byte>(W256 w, byte src)
7ffdb047acb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vmask32u<ushort>(Vector256<ushort> src)
7ffdb047b5e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vmask32u<uint>(Vector256<uint> src)
7ffdb047ba68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vmask32u<ulong>(Vector256<ulong> src)
7ffdb0530360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> veq<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb0531038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> veq<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb0531248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> veq<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb0531500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> veq<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb05318a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> veq<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb0531a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> veq<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb0531c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vones<sbyte>(W128 w, sbyte t)
7ffdb05320d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vimpl<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb0532ad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vimpl<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb05330c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vimpl<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb05337f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vimpl<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb0533a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vbroadcast<sbyte>(W128 w, sbyte src)
7ffdb0533dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vbroadcast<ushort>(W128 w, ushort src)
7ffdb0533f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vbroadcast<short>(W128 w, short src)
7ffdb0538030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vbroadcast<uint>(W128 w, uint src)
7ffdb05396e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vbroadcast<int>(W128 w, int src)
7ffdb0539890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vbroadcast<ulong>(W128 w, ulong src)
7ffdb053a7d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlo<uint>(Vector512<uint> src)
7ffdb0570ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vhi<uint>(Vector512<uint> src)
7ffdb0570f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vbroadcast<uint>(W256 w, uint src)
7ffdb0578858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vbroadcast<ushort>(W256 w, ushort src)
7ffdb05a1308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vbroadcast<ulong>(W256 w, ulong src)
7ffdb05a1608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vinc<byte>(W128 w)
7ffdb05a3000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vnand<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb064aad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vnand<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb06703c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vnand<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb0671cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vnand<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb0672cd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vnegate<byte>(Vector256<byte> src)
7ffdb0673b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vnegate<ushort>(Vector256<ushort> src)
7ffdb0673c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vnegate<uint>(Vector256<uint> src)
7ffdb0673d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vnegate<ulong>(Vector256<ulong> src)
7ffdb0673f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vnonimpl<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb06786f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vnonimpl<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb06787e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vnonimpl<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb06789c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vnonimpl<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb0678ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vnor<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb067a9e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vnor<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb067af10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vnor<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb067bc18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vnor<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb06b18c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vor<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb06b2238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vor<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb06b2448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vor<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb06b2520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vor<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb06b25b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vlo<int>(Vector512<int> src)
7ffdb06b8768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vlo<short>(Vector512<short> src)
7ffdb06b8e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlo<ushort>(Vector512<ushort> src)
7ffdb06b90c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vhi<ushort>(Vector512<ushort> src)
7ffdb06b90e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vxnor<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb0722b80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vxnor<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb0722d90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vxnor<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb07231f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vxnor<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb0723870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vxor<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb0723c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vxor<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb0728078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vxor<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb0728108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vxor<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb07281c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmask256<byte>(uint src)
7ffdb0763e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vinc<byte>(W256 w)
7ffdb0763ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vsrlv<byte>(Vector256<byte> x, Vector256<byte> counts)
7ffdb0763ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmask256<ushort>(uint src)
7ffdb0768378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vinc<ushort>(W256 w)
7ffdb07683a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsrlv<ushort>(Vector256<ushort> x, Vector256<ushort> counts)
7ffdb07683c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmask256<uint>(uint src)
7ffdb07687f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vinc<uint>(W256 w)
7ffdb0768810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vsrlv<uint>(Vector256<uint> x, Vector256<uint> counts)
7ffdb0768828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmask256<ulong>(uint src)
7ffdb0768ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vinc<ulong>(W256 w)
7ffdb0768ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vsrlv<ulong>(Vector256<ulong> x, Vector256<ulong> counts)
7ffdb0768b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmask256<byte>(uint src, byte index)
7ffdb0790be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vsllv<byte>(Vector256<byte> x, Vector256<byte> counts)
7ffdb0790c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmask256<ushort>(uint src, byte index)
7ffdb0791380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsllv<ushort>(Vector256<ushort> x, Vector256<ushort> counts)
7ffdb0791398h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmask256<uint>(uint src, byte index)
7ffdb0791788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vsllv<uint>(Vector256<uint> x, Vector256<uint> counts)
7ffdb07917a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmask256<ulong>(uint src, byte index)
7ffdb0791a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vsllv<ulong>(Vector256<ulong> x, Vector256<ulong> counts)
7ffdb0791aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<uint>(Vector256<uint> src, ref uint dst, int offset)
7ffdb07980a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlo<byte>(Vector256<byte> src)
7ffdb07d09c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vhi<byte>(Vector256<byte> src)
7ffdb07d0a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlo<ushort>(Vector256<ushort> src)
7ffdb07d0b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vhi<ushort>(Vector256<ushort> src)
7ffdb07d0b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlo<uint>(Vector256<uint> src)
7ffdb07d0c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vhi<uint>(Vector256<uint> src)
7ffdb07d0c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlo<ulong>(Vector256<ulong> src)
7ffdb07d0cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vhi<ulong>(Vector256<ulong> src)
7ffdb07d0d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlo<byte>(Vector512<byte> src)
7ffdb07d1080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vhi<byte>(Vector512<byte> src)
7ffdb07d10c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlo<ulong>(Vector512<ulong> src)
7ffdb07d1890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vhi<ulong>(Vector512<ulong> src)
7ffdb07d18a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vabs<sbyte>(Vector128<sbyte> x)
7ffdb07d3570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vabs<short>(Vector128<short> x)
7ffdb07d35b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vabs<int>(Vector128<int> x)
7ffdb07d3618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vabs<long>(Vector128<long> x)
7ffdb07d3660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vabs<sbyte>(Vector256<sbyte> x)
7ffdb07d36a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vabs<short>(Vector256<short> x)
7ffdb07d36f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vabs<int>(Vector256<int> x)
7ffdb07d3738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vabs<long>(Vector256<long> x)
7ffdb07d3780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vadd<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb07d37c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vadd<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb07d3858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vadd<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb07d3960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vadd<short>(Vector128<short> x, Vector128<short> y)
7ffdb07d3a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vadd<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb07d3b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vadd<int>(Vector128<int> x, Vector128<int> y)
7ffdb07d3c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vadd<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb07d3cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vadd<long>(Vector128<long> x, Vector128<long> y)
7ffdb07d3de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vadd<float>(Vector128<float> x, Vector128<float> y)
7ffdb07d3ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vadd<double>(Vector128<double> x, Vector128<double> y)
7ffdb07d8048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vadd<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb07d83f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vadd<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb07d84c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vadd<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb07d85b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vadd<short>(Vector256<short> x, Vector256<short> y)
7ffdb07d8678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vadd<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb07d8750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vadd<int>(Vector256<int> x, Vector256<int> y)
7ffdb07d8810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vadd<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb07d88e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vadd<long>(Vector256<long> x, Vector256<long> y)
7ffdb07d89d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vadd<float>(Vector256<float> x, Vector256<float> y)
7ffdb07d8a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vadd<double>(Vector256<double> x, Vector256<double> y)
7ffdb07d8b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vadd<byte>(Vector128<byte> x, byte a)
7ffdb07d8c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vadd<sbyte>(Vector128<sbyte> x, sbyte a)
7ffdb07d8c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vadd<ushort>(Vector128<ushort> x, ushort a)
7ffdb07d8cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vadd<short>(Vector128<short> x, short a)
7ffdb07d8cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vadd<uint>(Vector128<uint> x, uint a)
7ffdb07d8d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vadd<int>(Vector128<int> x, int a)
7ffdb07d8d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vadd<ulong>(Vector128<ulong> x, ulong a)
7ffdb07d8d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vadd<long>(Vector128<long> x, long a)
7ffdb07d8db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vbroadcast<long>(W128 w, long src)
7ffdb07d8de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vadd<float>(Vector128<float> x, float a)
7ffdb07d8eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vbroadcast<float>(W128 w, float src)
7ffdb07d8ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vadd<double>(Vector128<double> x, double a)
7ffdb07d8f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vbroadcast<double>(W128 w, double src)
7ffdb07d8f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vadd<byte>(Vector256<byte> x, byte a)
7ffdb07d9080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vadd<sbyte>(Vector256<sbyte> x, sbyte a)
7ffdb07d90c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vbroadcast<sbyte>(W256 w, sbyte src)
7ffdb07d90e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vadd<ushort>(Vector256<ushort> x, ushort a)
7ffdb07d91e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vadd<short>(Vector256<short> x, short a)
7ffdb07d92c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vbroadcast<short>(W256 w, short src)
7ffdb07d92d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vadd<uint>(Vector256<uint> x, uint a)
7ffdb07d9428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vadd<int>(Vector256<int> x, int a)
7ffdb07d9440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vbroadcast<int>(W256 w, int src)
7ffdb07d9458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vadd<ulong>(Vector256<ulong> x, ulong a)
7ffdb07d94e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vadd<long>(Vector256<long> x, long a)
7ffdb07d9500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vbroadcast<long>(W256 w, long src)
7ffdb07d9518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vadd<float>(Vector256<float> x, float a)
7ffdb07d9608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vbroadcast<float>(W256 w, float src)
7ffdb07d9620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vadd<double>(Vector256<double> x, double a)
7ffdb07d96c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vbroadcast<double>(W256 w, double src)
7ffdb07d96e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vdec<byte>(Vector128<byte> src)
7ffdb07d9770h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vdec<sbyte>(Vector128<sbyte> src)
7ffdb07d9800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vdec<ushort>(Vector128<ushort> src)
7ffdb07d9890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vdec<short>(Vector128<short> src)
7ffdb07d9908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vdec<uint>(Vector128<uint> src)
7ffdb07d9980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vdec<int>(Vector128<int> src)
7ffdb07d99f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vdec<ulong>(Vector128<ulong> src)
7ffdb07d9a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vdec<long>(Vector128<long> src)
7ffdb07d9ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vdec<byte>(Vector256<byte> src)
7ffdb07d9b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vdec<sbyte>(Vector256<sbyte> src)
7ffdb07d9bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vdec<ushort>(Vector256<ushort> src)
7ffdb07d9c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vdec<short>(Vector256<short> src)
7ffdb07d9cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vdec<uint>(Vector256<uint> src)
7ffdb07d9d70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vdec<int>(Vector256<int> src)
7ffdb07d9de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vdec<ulong>(Vector256<ulong> src)
7ffdb07d9e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vdec<long>(Vector256<long> src)
7ffdb07d9ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vdec<byte>(N128 n, byte first)
7ffdb07da490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vdec<byte>(N128 w)
7ffdb07da4a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vsub<byte>(byte a, Vector128<byte> x)
7ffdb07da4d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vload<byte>(W128 n, ReadOnlySpan<byte> src)
7ffdb07da508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vsub<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb07da550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vdec<sbyte>(N128 n, sbyte first)
7ffdb07da610h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vdec<sbyte>(N128 w)
7ffdb07da628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsub<sbyte>(sbyte a, Vector128<sbyte> x)
7ffdb07da640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsub<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb07da670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vdec<ushort>(N128 n, ushort first)
7ffdb07da718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vdec<ushort>(N128 w)
7ffdb07da730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsub<ushort>(ushort a, Vector128<ushort> x)
7ffdb07da748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vload<ushort>(W128 n, ReadOnlySpan<byte> src)
7ffdb07da760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsub<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb07da778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vdec<short>(N128 n, short first)
7ffdb07da7f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vdec<short>(N128 w)
7ffdb07da808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsub<short>(short a, Vector128<short> x)
7ffdb07da820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsub<short>(Vector128<short> x, Vector128<short> y)
7ffdb07da850h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vdec<uint>(N128 n, uint first)
7ffdb07da8e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vdec<uint>(N128 w)
7ffdb07da8f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vsub<uint>(uint a, Vector128<uint> x)
7ffdb07da910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vload<uint>(W128 n, ReadOnlySpan<byte> src)
7ffdb07da928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vsub<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb07da940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vdec<int>(N128 n, int first)
7ffdb07da9b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vdec<int>(N128 w)
7ffdb07da9d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsub<int>(int a, Vector128<int> x)
7ffdb07da9e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsub<int>(Vector128<int> x, Vector128<int> y)
7ffdb07daa18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vdec<ulong>(N128 n, ulong first)
7ffdb07daaa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vdec<ulong>(N128 w)
7ffdb07daac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vsub<ulong>(ulong a, Vector128<ulong> x)
7ffdb07daad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vload<ulong>(W128 n, ReadOnlySpan<byte> src)
7ffdb07daaf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vsub<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb07dab08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vdec<long>(N128 n, long first)
7ffdb07dab80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vdec<long>(N128 w)
7ffdb07dab98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vsub<long>(long a, Vector128<long> x)
7ffdb07dabb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vsub<long>(Vector128<long> x, Vector128<long> y)
7ffdb07dabe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vdec<byte>(N256 n, byte first)
7ffdb07dac70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vdec<byte>(N256 w)
7ffdb07dac88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vsub<byte>(byte a, Vector256<byte> x)
7ffdb07dacb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vload<byte>(W256 n, ReadOnlySpan<byte> src)
7ffdb07dace8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vsub<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb07dad30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vdec<sbyte>(N256 n, sbyte first)
7ffdb07dadf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vdec<sbyte>(N256 w)
7ffdb07dae08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsub<sbyte>(sbyte a, Vector256<sbyte> x)
7ffdb07dae20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsub<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb07dae50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vdec<ushort>(N256 n, ushort first)
7ffdb07daef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vdec<ushort>(N256 w)
7ffdb07daf10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsub<ushort>(ushort a, Vector256<ushort> x)
7ffdb07daf28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vload<ushort>(W256 n, ReadOnlySpan<byte> src)
7ffdb07daf40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsub<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb07daf58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vdec<short>(N256 n, short first)
7ffdb07dafd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vdec<short>(N256 w)
7ffdb07dafe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsub<short>(short a, Vector256<short> x)
7ffdb07db000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsub<short>(Vector256<short> x, Vector256<short> y)
7ffdb07db030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vdec<uint>(N256 n, uint first)
7ffdb07db0c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vdec<uint>(N256 w)
7ffdb07db0d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vsub<uint>(uint a, Vector256<uint> x)
7ffdb07db0f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vload<uint>(W256 n, ReadOnlySpan<byte> src)
7ffdb07db108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vsub<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb07db120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vdec<int>(N256 n, int first)
7ffdb07db1b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vdec<int>(N256 w)
7ffdb07db1f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsub<int>(int a, Vector256<int> x)
7ffdb07db210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsub<int>(Vector256<int> x, Vector256<int> y)
7ffdb07db288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vdec<ulong>(N256 n, ulong first)
7ffdb07db3f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vdec<ulong>(N256 w)
7ffdb07db408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vsub<ulong>(ulong a, Vector256<ulong> x)
7ffdb07db420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vload<ulong>(W256 n, ReadOnlySpan<byte> src)
7ffdb07db438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vsub<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb07db498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vdec<long>(N256 n, long first)
7ffdb07db5e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vdec<long>(N256 w)
7ffdb07db600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vsub<long>(long a, Vector256<long> x)
7ffdb07db618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vsub<long>(Vector256<long> x, Vector256<long> y)
7ffdb07db6a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vinc<sbyte>(W128 w)
7ffdb08a0390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vinc<ushort>(W128 w)
7ffdb08a0408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vinc<short>(W128 w)
7ffdb08a0450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vinc<uint>(W128 w)
7ffdb08a0498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vinc<int>(W128 w)
7ffdb08a0510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vinc<ulong>(W128 w)
7ffdb08a0570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vinc<long>(W128 w)
7ffdb08a05d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vinc<sbyte>(W256 w)
7ffdb08a0690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vinc<short>(W256 w)
7ffdb08a0768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vinc<int>(W256 w)
7ffdb08a0810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vinc<long>(W256 w)
7ffdb08a08d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vinc<byte>(W512 w)
7ffdb08a0918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<sbyte> vinc<sbyte>(W512 w)
7ffdb08a0a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vinc<ushort>(W512 w)
7ffdb08a0a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<short> vinc<short>(W512 w)
7ffdb08a0b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vinc<uint>(W512 w)
7ffdb08a0bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<int> vinc<int>(W512 w)
7ffdb08a0c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vinc<ulong>(W512 w)
7ffdb08a0d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<long> vinc<long>(W512 w)
7ffdb08a0d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vinc<byte>(Vector128<byte> src)
7ffdb08a0e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vinc<sbyte>(Vector128<sbyte> src)
7ffdb08a0f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vinc<ushort>(Vector128<ushort> src)
7ffdb08a10f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vinc<short>(Vector128<short> src)
7ffdb08a1260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vinc<uint>(Vector128<uint> src)
7ffdb08a1380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vinc<int>(Vector128<int> src)
7ffdb08a1500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vinc<ulong>(Vector128<ulong> src)
7ffdb08a16b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vinc<long>(Vector128<long> src)
7ffdb08a1818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vinc<byte>(Vector256<byte> src)
7ffdb08a19b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vinc<sbyte>(Vector256<sbyte> src)
7ffdb08a1b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vinc<ushort>(Vector256<ushort> src)
7ffdb08a1c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vinc<short>(Vector256<short> src)
7ffdb08a1d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vinc<uint>(Vector256<uint> src)
7ffdb08a1ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vinc<int>(Vector256<int> src)
7ffdb08a1f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vinc<ulong>(Vector256<ulong> src)
7ffdb08a20a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vinc<long>(Vector256<long> src)
7ffdb08a2178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vinc<byte>(W128 w, byte x0)
7ffdb08a2280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vinc<sbyte>(W128 w, sbyte x0)
7ffdb08a2358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vinc<ushort>(W128 w, ushort x0)
7ffdb08a2388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vinc<short>(W128 w, short x0)
7ffdb08a23a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vinc<uint>(W128 w, uint x0)
7ffdb08a23b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vinc<int>(W128 w, int x0)
7ffdb08a24f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vinc<ulong>(W128 w, ulong x0)
7ffdb08a2610h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vinc<long>(W128 w, long x0)
7ffdb08a26d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vinc<byte>(W256 w, byte x0)
7ffdb08a27c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vinc<sbyte>(W256 w, sbyte x0)
7ffdb08a28f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vinc<ushort>(W256 w, ushort x0)
7ffdb08a2a48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vinc<short>(W256 w, short x0)
7ffdb08a2b50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vinc<uint>(W256 w, uint x0)
7ffdb08a2d30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vinc<int>(W256 w, int x0)
7ffdb08a2e80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vinc<ulong>(W256 w, ulong x0)
7ffdb08a30a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vinc<long>(W256 w, long x0)
7ffdb08a31b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vnegate<byte>(Vector128<byte> src)
7ffdb08a3420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vnegate<sbyte>(Vector128<sbyte> src)
7ffdb08a35b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vnegate<ushort>(Vector128<ushort> src)
7ffdb08a36f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vnegate<short>(Vector128<short> src)
7ffdb08a3810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vnegate<uint>(Vector128<uint> src)
7ffdb08a3918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vnegate<int>(Vector128<int> src)
7ffdb08a3ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vnegate<ulong>(Vector128<ulong> src)
7ffdb08a3bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vnegate<long>(Vector128<long> src)
7ffdb08a3c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vnegate<float>(Vector128<float> src)
7ffdb08a3d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vnegate<double>(Vector128<double> src)
7ffdb08a3ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vnegate<sbyte>(Vector256<sbyte> src)
7ffdb08a8060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vnegate<short>(Vector256<short> src)
7ffdb08a8288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vcimpl<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb08a8438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vnegate<int>(Vector256<int> src)
7ffdb08a8570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vnegate<long>(Vector256<long> src)
7ffdb08a86f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vnegate<float>(Vector256<float> src)
7ffdb08a87e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vnegate<double>(Vector256<double> src)
7ffdb08a88e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vcimpl<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb08a8ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vcimpl<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb08a8cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vsub<float>(Vector128<float> x, Vector128<float> y)
7ffdb08a8db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vsub<double>(Vector128<double> x, Vector128<double> y)
7ffdb08a8ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vcnonimpl<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb08a91a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vcnonimpl<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb08a9398h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vsub<float>(Vector256<float> x, Vector256<float> y)
7ffdb08a94b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vsub<double>(Vector256<double> x, Vector256<double> y)
7ffdb08a9620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vcnonimpl<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb08a96f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vsub<byte>(Vector128<byte> x, byte a)
7ffdb08a97d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsub<sbyte>(Vector128<sbyte> x, sbyte a)
7ffdb08a9908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsub<ushort>(Vector128<ushort> x, ushort a)
7ffdb08a9a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsub<short>(Vector128<short> x, short a)
7ffdb08a9ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vsub<uint>(Vector128<uint> x, uint a)
7ffdb08a9b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsub<int>(Vector128<int> x, int a)
7ffdb08a9b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vsub<ulong>(Vector128<ulong> x, ulong a)
7ffdb08a9bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vsub<long>(Vector128<long> x, long a)
7ffdb08a9c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vsub<float>(Vector128<float> x, float a)
7ffdb08a9db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vsub<double>(Vector128<double> x, double a)
7ffdb08a9ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vload<ushort>(in ushort src, out Vector256<ushort> dst)
7ffdb08aa5c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<ushort>(Vector256<ushort> src, Vector256<ushort> mask)
7ffdb08aa5e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vload<uint>(in uint src, out Vector256<uint> dst)
7ffdb08aa838h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<uint>(Vector256<uint> src, Vector256<uint> mask)
7ffdb08aa868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vsub<float>(float a, Vector128<float> x)
7ffdb08aa928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vload<ulong>(in ulong src, out Vector256<ulong> dst)
7ffdb08aaa18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<ulong>(Vector256<ulong> src, Vector256<ulong> mask)
7ffdb08aaa48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vsub<double>(double a, Vector128<double> x)
7ffdb08aab08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vsub<byte>(Vector256<byte> x, byte a)
7ffdb08aad30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsub<sbyte>(Vector256<sbyte> x, sbyte a)
7ffdb08aae68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsub<ushort>(Vector256<ushort> x, ushort a)
7ffdb08aaf58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsub<short>(Vector256<short> x, short a)
7ffdb08ab018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vsub<uint>(Vector256<uint> x, uint a)
7ffdb08ab0a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsub<int>(Vector256<int> x, int a)
7ffdb08ab168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vsub<ulong>(Vector256<ulong> x, ulong a)
7ffdb08ab210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vsub<long>(Vector256<long> x, long a)
7ffdb08ab2a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vsub<float>(Vector256<float> x, float a)
7ffdb08ab8b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vsub<double>(Vector256<double> x, double a)
7ffdb08abd80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vsub<float>(float a, Vector256<float> x)
7ffdb08e0558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vsub<double>(double a, Vector256<double> x)
7ffdb08e0648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> valt<byte>(W256 w, byte a, byte b)
7ffdb08e0738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vblend<byte>(Vector256<byte> x, Vector256<byte> y, Vector256<byte> spec)
7ffdb08e07e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> valt<sbyte>(W256 w, sbyte a, sbyte b)
7ffdb08e09a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vblend<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y, Vector256<byte> spec)
7ffdb08e0a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> valt<ushort>(W256 w, ushort a, ushort b)
7ffdb08e0c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vblend<ushort>(Vector256<ushort> x, Vector256<ushort> y, Vector256<byte> spec)
7ffdb08e0c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> valt<short>(W256 w, short a, short b)
7ffdb08e0df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vblend<short>(Vector256<short> x, Vector256<short> y, Vector256<byte> spec)
7ffdb08e0e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> valt<uint>(W256 w, uint a, uint b)
7ffdb08e0ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vblend<uint>(Vector256<uint> x, Vector256<uint> y, Vector256<byte> spec)
7ffdb08e1020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> valt<int>(W256 w, int a, int b)
7ffdb08e1140h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vblend<int>(Vector256<int> x, Vector256<int> y, Vector256<byte> spec)
7ffdb08e1188h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> valt<ulong>(W256 w, ulong a, ulong b)
7ffdb08e12d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vblend<ulong>(Vector256<ulong> x, Vector256<ulong> y, Vector256<byte> spec)
7ffdb08e1308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> valt<long>(W256 w, long a, long b)
7ffdb08e1428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vblend<long>(Vector256<long> x, Vector256<long> y, Vector256<byte> spec)
7ffdb08e1488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> valt<float>(W256 w, float a, float b)
7ffdb08e1968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> valt<double>(W256 w, double a, double b)
7ffdb08e1e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vblend4x32<byte>(Vector128<byte> x, Vector128<byte> y, Blend4x32 spec)
7ffdb08e1f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vblend4x32<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y, Blend4x32 spec)
7ffdb08e2040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vblend4x32<ushort>(Vector128<ushort> x, Vector128<ushort> y, Blend4x32 spec)
7ffdb08e20e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vblend4x32<short>(Vector128<short> x, Vector128<short> y, Blend4x32 spec)
7ffdb08e2160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vblend4x32<uint>(Vector128<uint> x, Vector128<uint> y, Blend4x32 spec)
7ffdb08e21d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vblend4x32<int>(Vector128<int> x, Vector128<int> y, Blend4x32 spec)
7ffdb08e22b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vblend4x32<ulong>(Vector128<ulong> x, Vector128<ulong> y, Blend4x32 spec)
7ffdb08e2418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vblend4x32<long>(Vector128<long> x, Vector128<long> y, Blend4x32 spec)
7ffdb08e2490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vblend8x32<byte>(Vector256<byte> x, Vector256<byte> y, Blend8x32 spec)
7ffdb08e25c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vblend8x32<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y, Blend8x32 spec)
7ffdb08e2730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vblend8x32<ushort>(Vector256<ushort> x, Vector256<ushort> y, Blend8x32 spec)
7ffdb08e2958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vblend8x32<short>(Vector256<short> x, Vector256<short> y, Blend8x32 spec)
7ffdb08e2a90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vblend8x32<uint>(Vector256<uint> x, Vector256<uint> y, Blend8x32 spec)
7ffdb08e2b98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vblend8x32<int>(Vector256<int> x, Vector256<int> y, Blend8x32 spec)
7ffdb08e2c70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vblend8x32<ulong>(Vector256<ulong> x, Vector256<ulong> y, Blend8x32 spec)
7ffdb08e2dc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vblend8x32<long>(Vector256<long> x, Vector256<long> y, Blend8x32 spec)
7ffdb08e2f88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vblend<byte>(Vector128<byte> x, Vector128<byte> y, Vector128<byte> spec)
7ffdb08e30d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vblend<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y, Vector128<byte> spec)
7ffdb08e3168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vblend<ushort>(Vector128<ushort> x, Vector128<ushort> y, Vector128<byte> spec)
7ffdb08e3210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vblend<short>(Vector128<short> x, Vector128<short> y, Vector128<byte> spec)
7ffdb08e32a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vblend<uint>(Vector128<uint> x, Vector128<uint> y, Vector128<byte> spec)
7ffdb08e3378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vblend<int>(Vector128<int> x, Vector128<int> y, Vector128<byte> spec)
7ffdb08e3408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vblend<ulong>(Vector128<ulong> x, Vector128<ulong> y, Vector128<byte> spec)
7ffdb08e3480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vblend<long>(Vector128<long> x, Vector128<long> y, Vector128<byte> spec)
7ffdb08e3510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vblend<byte>(Vector128<byte> x, Vector128<byte> y, ushort spec)
7ffdb08e3a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vblend<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y, ushort spec)
7ffdb08e3ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vblend<ushort>(Vector128<ushort> x, Vector128<ushort> y, ushort spec)
7ffdb08e3c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vblend<short>(Vector128<short> x, Vector128<short> y, ushort spec)
7ffdb08e3d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vblend<uint>(Vector128<uint> x, Vector128<uint> y, ushort spec)
7ffdb08e3e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vblend<int>(Vector128<int> x, Vector128<int> y, ushort spec)
7ffdb08e3f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vblend<ulong>(Vector128<ulong> x, Vector128<ulong> y, ushort spec)
7ffdb08e8048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vblend<long>(Vector128<long> x, Vector128<long> y, ushort spec)
7ffdb08e80d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vblend<byte>(Vector256<byte> x, Vector256<byte> y, uint spec)
7ffdb08e8180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vblend<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y, uint spec)
7ffdb08e81c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vblend<ushort>(Vector256<ushort> x, Vector256<ushort> y, uint spec)
7ffdb08e8228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vblend<short>(Vector256<short> x, Vector256<short> y, uint spec)
7ffdb08e8270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vblend<uint>(Vector256<uint> x, Vector256<uint> y, uint spec)
7ffdb08e82e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vblend<int>(Vector256<int> x, Vector256<int> y, uint spec)
7ffdb08e8378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vblend<ulong>(Vector256<ulong> x, Vector256<ulong> y, uint spec)
7ffdb08e83f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vblend<long>(Vector256<long> x, Vector256<long> y, uint spec)
7ffdb08e8438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vnot<ushort>(Vector256<ushort> x)
7ffdb08e84e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vblendbits<byte>(Vector128<byte> x, Vector128<byte> y, Vector128<byte> mask)
7ffdb08e86a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vxor<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb08e86c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vand<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb08e86f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vblendbits<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y, Vector128<sbyte> mask)
7ffdb08e88b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vxor<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb08e88d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vand<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb08e88e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vnot<uint>(Vector256<uint> x)
7ffdb08e8b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vblendbits<ushort>(Vector128<ushort> x, Vector128<ushort> y, Vector128<ushort> mask)
7ffdb08e8c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vxor<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb08e8c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vand<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb08e8ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vblendbits<short>(Vector128<short> x, Vector128<short> y, Vector128<short> mask)
7ffdb08e8e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vxor<short>(Vector128<short> x, Vector128<short> y)
7ffdb08e8e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vand<short>(Vector128<short> x, Vector128<short> y)
7ffdb08e8e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vnot<ulong>(Vector256<ulong> x)
7ffdb08e90c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vblendbits<uint>(Vector128<uint> x, Vector128<uint> y, Vector128<uint> mask)
7ffdb08e90f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vxor<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb08e9158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vand<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb08e9170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vblendbits<int>(Vector128<int> x, Vector128<int> y, Vector128<int> mask)
7ffdb08e9308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vxor<int>(Vector128<int> x, Vector128<int> y)
7ffdb08e9350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vand<int>(Vector128<int> x, Vector128<int> y)
7ffdb08e9380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vblendbits<ulong>(Vector128<ulong> x, Vector128<ulong> y, Vector128<ulong> mask)
7ffdb08e9548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vxor<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb08e9578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vand<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb08e9590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vblendbits<long>(Vector128<long> x, Vector128<long> y, Vector128<long> mask)
7ffdb08e9770h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vxor<long>(Vector128<long> x, Vector128<long> y)
7ffdb08e97b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vand<long>(Vector128<long> x, Vector128<long> y)
7ffdb08e97d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vblendbits<byte>(Vector256<byte> x, Vector256<byte> y, Vector256<byte> mask)
7ffdb08e9a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vblendbits<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y, Vector256<sbyte> mask)
7ffdb08e9aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vxor<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb08e9ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vand<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb08e9ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vblendbits<ushort>(Vector256<ushort> x, Vector256<ushort> y, Vector256<ushort> mask)
7ffdb08e9c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vblendbits<short>(Vector256<short> x, Vector256<short> y, Vector256<short> mask)
7ffdb08e9cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vxor<short>(Vector256<short> x, Vector256<short> y)
7ffdb08e9d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vand<short>(Vector256<short> x, Vector256<short> y)
7ffdb08e9d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vblendbits<uint>(Vector256<uint> x, Vector256<uint> y, Vector256<uint> mask)
7ffdb08e9e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vblendbits<int>(Vector256<int> x, Vector256<int> y, Vector256<int> mask)
7ffdb08e9e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vxor<int>(Vector256<int> x, Vector256<int> y)
7ffdb08e9e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vand<int>(Vector256<int> x, Vector256<int> y)
7ffdb08e9ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vblendbits<ulong>(Vector256<ulong> x, Vector256<ulong> y, Vector256<ulong> mask)
7ffdb08ea010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vblendbits<long>(Vector256<long> x, Vector256<long> y, Vector256<long> mask)
7ffdb08ea160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vxor<long>(Vector256<long> x, Vector256<long> y)
7ffdb08ea178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vand<long>(Vector256<long> x, Vector256<long> y)
7ffdb08ea190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vblendp<byte>(Vector256<byte> x, Vector256<byte> y, Vector256<byte> spec)
7ffdb08ea388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vblendv<byte>(Vector256<byte> x, Vector256<byte> y, Vector256<byte> spec)
7ffdb08ea3d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vnot<byte>(Vector256<byte> x)
7ffdb08ea400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<sbyte> vblendp<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y, Vector256<sbyte> spec)
7ffdb08ea610h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vblendv<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y, Vector256<sbyte> spec)
7ffdb08ea658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vnot<sbyte>(Vector256<sbyte> x)
7ffdb08ea670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vblendp<ushort>(Vector256<ushort> x, Vector256<ushort> y, Vector256<ushort> spec)
7ffdb08ea868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vblendv<ushort>(Vector256<ushort> x, Vector256<ushort> y, Vector256<ushort> spec)
7ffdb08ea898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<short> vblendp<short>(Vector256<short> x, Vector256<short> y, Vector256<short> spec)
7ffdb08ea958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vblendv<short>(Vector256<short> x, Vector256<short> y, Vector256<short> spec)
7ffdb08ea988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vnot<short>(Vector256<short> x)
7ffdb08ea9a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vblendp<uint>(Vector256<uint> x, Vector256<uint> y, Vector256<uint> spec)
7ffdb08eac10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vblendv<uint>(Vector256<uint> x, Vector256<uint> y, Vector256<uint> spec)
7ffdb08eac28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<int> vblendp<int>(Vector256<int> x, Vector256<int> y, Vector256<int> spec)
7ffdb08eac70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vblendv<int>(Vector256<int> x, Vector256<int> y, Vector256<int> spec)
7ffdb08eac88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vnot<int>(Vector256<int> x)
7ffdb08eaca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vblendp<ulong>(Vector256<ulong> x, Vector256<ulong> y, Vector256<ulong> spec)
7ffdb08ead78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vblendv<ulong>(Vector256<ulong> x, Vector256<ulong> y, Vector256<ulong> spec)
7ffdb08ead90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<long> vblendp<long>(Vector256<long> x, Vector256<long> y, Vector256<long> spec)
7ffdb08eadf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vblendv<long>(Vector256<long> x, Vector256<long> y, Vector256<long> spec)
7ffdb08eae08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vnot<long>(Vector256<long> x)
7ffdb08eae20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vblendp<byte>(Vector128<byte> x, Vector128<byte> y, Vector128<byte> spec)
7ffdb08eaf40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vblendv<byte>(Vector128<byte> x, Vector128<byte> y, Vector128<byte> spec)
7ffdb08eaf58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vnot<byte>(Vector128<byte> x)
7ffdb08eaf88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vconcat<byte>(Vector128<byte> lo, Vector128<byte> hi)
7ffdb08eafb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vblendp<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y, Vector128<sbyte> spec)
7ffdb08eb168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vblendv<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y, Vector128<sbyte> spec)
7ffdb08eb198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vnot<sbyte>(Vector128<sbyte> x)
7ffdb08eb1b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vblendp<ushort>(Vector128<ushort> x, Vector128<ushort> y, Vector128<ushort> spec)
7ffdb08eb300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vblendv<ushort>(Vector128<ushort> x, Vector128<ushort> y, Vector128<ushort> spec)
7ffdb08eb318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vnot<ushort>(Vector128<ushort> x)
7ffdb08eb330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vconcat<ushort>(Vector128<ushort> lo, Vector128<ushort> hi)
7ffdb08eb348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vblendp<short>(Vector128<short> x, Vector128<short> y, Vector128<short> spec)
7ffdb08eb438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vblendv<short>(Vector128<short> x, Vector128<short> y, Vector128<short> spec)
7ffdb08eb450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vnot<short>(Vector128<short> x)
7ffdb08eb468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vblendp<uint>(Vector128<uint> x, Vector128<uint> y, Vector128<uint> spec)
7ffdb08eb588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vblendv<uint>(Vector128<uint> x, Vector128<uint> y, Vector128<uint> spec)
7ffdb08eb5b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vnot<uint>(Vector128<uint> x)
7ffdb08eb5d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vconcat<uint>(Vector128<uint> lo, Vector128<uint> hi)
7ffdb08eb5e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vblendp<int>(Vector128<int> x, Vector128<int> y, Vector128<int> spec)
7ffdb08eb720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vblendv<int>(Vector128<int> x, Vector128<int> y, Vector128<int> spec)
7ffdb08eb768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vnot<int>(Vector128<int> x)
7ffdb08eb798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vblendp<ulong>(Vector128<ulong> x, Vector128<ulong> y, Vector128<ulong> spec)
7ffdb08eb930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vblendv<ulong>(Vector128<ulong> x, Vector128<ulong> y, Vector128<ulong> spec)
7ffdb08eb960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vnot<ulong>(Vector128<ulong> x)
7ffdb08eb990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vconcat<ulong>(Vector128<ulong> lo, Vector128<ulong> hi)
7ffdb08eb9a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vblendp<long>(Vector128<long> x, Vector128<long> y, Vector128<long> spec)
7ffdb08ebb58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vblendv<long>(Vector128<long> x, Vector128<long> y, Vector128<long> spec)
7ffdb08ebb88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vnot<long>(Vector128<long> x)
7ffdb08ebba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vblendp<byte>(Vector256<byte> x, Vector128<byte> spec)
7ffdb08ebdb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vblendp<sbyte>(Vector256<sbyte> x, Vector128<sbyte> spec)
7ffdb08ebf48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vlo<sbyte>(Vector256<sbyte> src)
7ffdb08ebf78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vblendp<ushort>(Vector256<ushort> x, Vector128<ushort> spec)
7ffdb0930168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vblendp<short>(Vector256<short> x, Vector128<short> spec)
7ffdb0930210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vlo<short>(Vector256<short> src)
7ffdb0930228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vblendp<uint>(Vector256<uint> x, Vector128<uint> spec)
7ffdb0930318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vblendp<int>(Vector256<int> x, Vector128<int> spec)
7ffdb09303c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vlo<int>(Vector256<int> src)
7ffdb09303d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vselect<ushort>(Vector256<ushort> x, Vector256<ushort> y, Vector256<ushort> z)
7ffdb0930558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vblendp<ulong>(Vector256<ulong> x, Vector128<ulong> spec)
7ffdb09305b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vblendp<long>(Vector256<long> x, Vector128<long> spec)
7ffdb0930630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vlo<long>(Vector256<long> src)
7ffdb0930678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vselect<uint>(Vector256<uint> x, Vector256<uint> y, Vector256<uint> z)
7ffdb09307e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vselect<ulong>(Vector256<ulong> x, Vector256<ulong> y, Vector256<ulong> z)
7ffdb09308e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vblendv<float>(Vector128<float> x, Vector128<float> y, Vector128<float> spec)
7ffdb0930930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vblendv<double>(Vector128<double> x, Vector128<double> y, Vector128<double> spec)
7ffdb0930960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vones<ulong>(W128 w, ulong t)
7ffdb0930a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vblendv<float>(Vector256<float> x, Vector256<float> y, Vector256<float> spec)
7ffdb0930c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ushort>(Vector256<ushort> src)
7ffdb0930c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vblendv<double>(Vector256<double> x, Vector256<double> y, Vector256<double> spec)
7ffdb0930d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vones<ushort>(W256 w, ushort t)
7ffdb0930d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ushort>(Vector256<ushort> src, Vector256<ushort> mask)
7ffdb0930d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<uint>(Vector256<uint> src)
7ffdb0931080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vones<uint>(W256 w, uint t)
7ffdb09310f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<uint>(Vector256<uint> src, Vector256<uint> mask)
7ffdb0931110h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ulong>(Vector256<ulong> src)
7ffdb0931410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vones<ulong>(W256 w, ulong t)
7ffdb0931440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ulong>(Vector256<ulong> src, Vector256<ulong> mask)
7ffdb0931458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vbyteswap<ushort>(Vector128<ushort> x)
7ffdb0931698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vbyteswap<short>(Vector128<short> x)
7ffdb0931740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vbyteswap<uint>(Vector128<uint> x)
7ffdb0931770h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vbyteswap<int>(Vector128<int> x)
7ffdb09318a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vbyteswap<ulong>(Vector128<ulong> x)
7ffdb09318f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vbyteswap<long>(Vector128<long> x)
7ffdb09319f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vbyteswap<ushort>(Vector256<ushort> x)
7ffdb0931aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vload<byte>(W128 w, Span<byte> src)
7ffdb0931b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vload<byte>(W128 w, in byte src)
7ffdb0931c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vbyteswap<short>(Vector256<short> x)
7ffdb0931cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vbyteswap<uint>(Vector256<uint> x)
7ffdb0931d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vbyteswap<int>(Vector256<int> x)
7ffdb0932190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vbyteswap<ulong>(Vector256<ulong> x)
7ffdb0932208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vbyteswap<long>(Vector256<long> x)
7ffdb0932388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vclearalt<byte>(N256 n)
7ffdb09329e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vclearalt<ushort>(N256 n)
7ffdb0932a60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vconcat<byte>(Vector256<byte> a, Vector256<byte> b)
7ffdb0932ac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vconcat<ushort>(Vector256<ushort> a, Vector256<ushort> b)
7ffdb0932b38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vconcat<uint>(Vector256<uint> a, Vector256<uint> b)
7ffdb0932b68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vconcat<ulong>(Vector256<ulong> a, Vector256<ulong> b)
7ffdb0932bc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vfirst<byte>(in Vector128<byte> src)
7ffdb0932e20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vfirst<ushort>(in Vector128<ushort> src)
7ffdb0932e98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vfirst<uint>(in Vector128<uint> src)
7ffdb0932ef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vfirst<ulong>(in Vector128<ulong> src)
7ffdb0932f70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vfirst<byte>(in Vector256<byte> src)
7ffdb0932fb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vfirst<ushort>(in Vector256<ushort> src)
7ffdb0933060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vfirst<uint>(in Vector256<uint> src)
7ffdb0933090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vfirst<ulong>(in Vector256<ulong> src)
7ffdb09330f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vfirst<byte>(in Vector512<byte> src)
7ffdb0933150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vfirst<ushort>(in Vector512<ushort> src)
7ffdb09331b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vfirst<uint>(in Vector512<uint> src)
7ffdb0933210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vfirst<ulong>(in Vector512<ulong> src)
7ffdb0933240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vgather<byte>(in byte src, Vector128<byte> vidx)
7ffdb0933288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vgather<sbyte>(in sbyte src, Vector128<sbyte> vidx)
7ffdb09334e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vgather<ushort>(in ushort src, Vector128<ushort> vidx)
7ffdb0933738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vgather<short>(in short src, Vector128<short> vidx)
7ffdb09338b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vgather<uint>(in uint src, Vector128<uint> vidx)
7ffdb0933b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vgather<int>(in int src, Vector128<int> vidx)
7ffdb0933c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vgather<ulong>(in ulong src, Vector128<ulong> vidx)
7ffdb0933e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vgather<long>(in long src, Vector128<long> vidx)
7ffdb0938030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vgather<byte>(in byte src, Vector256<byte> vidx)
7ffdb0938210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vgather<sbyte>(in sbyte src, Vector256<sbyte> vidx)
7ffdb09385e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vgather<ushort>(in ushort src, Vector256<ushort> vidx)
7ffdb0938a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vgather<short>(in short src, Vector256<short> vidx)
7ffdb0938c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vgather<uint>(in uint src, Vector256<uint> vidx)
7ffdb0938e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vgather<int>(in int src, Vector256<int> vidx)
7ffdb0938fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vgather<ulong>(in ulong src, Vector256<ulong> vidx)
7ffdb0939158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vgather<long>(in long src, Vector256<long> vidx)
7ffdb09396e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vgather<byte>(ReadOnlySpan<byte> src, Vector128<byte> vidx)
7ffdb0939890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vgather<sbyte>(ReadOnlySpan<sbyte> src, Vector128<sbyte> vidx)
7ffdb0939b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vgather<ushort>(ReadOnlySpan<ushort> src, Vector128<ushort> vidx)
7ffdb0939b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vgather<short>(ReadOnlySpan<short> src, Vector128<short> vidx)
7ffdb0939ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vgather<uint>(ReadOnlySpan<uint> src, Vector128<uint> vidx)
7ffdb0939bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vgather<int>(ReadOnlySpan<int> src, Vector128<int> vidx)
7ffdb0939ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vgather<ulong>(ReadOnlySpan<ulong> src, Vector128<ulong> vidx)
7ffdb0939de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vgather<long>(ReadOnlySpan<long> src, Vector128<long> vidx)
7ffdb0939e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vgather<byte>(ReadOnlySpan<byte> src, Vector256<byte> vidx)
7ffdb0939f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vgather<sbyte>(ReadOnlySpan<sbyte> src, Vector256<sbyte> vidx)
7ffdb093a178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vgather<ushort>(ReadOnlySpan<ushort> src, Vector256<ushort> vidx)
7ffdb093a208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vgather<short>(ReadOnlySpan<short> src, Vector256<short> vidx)
7ffdb093a250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vgather<uint>(ReadOnlySpan<uint> src, Vector256<uint> vidx)
7ffdb093a2c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vgather<int>(ReadOnlySpan<int> src, Vector256<int> vidx)
7ffdb093a328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vgather<ulong>(ReadOnlySpan<ulong> src, Vector256<ulong> vidx)
7ffdb093a370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vgather<long>(ReadOnlySpan<long> src, Vector256<long> vidx)
7ffdb093a388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlane<byte>(Vector256<byte> src, N0 index)
7ffdb093a3d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vlane<sbyte>(Vector256<sbyte> src, N0 index)
7ffdb093a418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlane<ushort>(Vector256<ushort> src, N0 index)
7ffdb093a460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vlane<short>(Vector256<short> src, N0 index)
7ffdb093a490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlane<uint>(Vector256<uint> src, N0 index)
7ffdb093a4c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vlane<int>(Vector256<int> src, N0 index)
7ffdb093a4f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlane<ulong>(Vector256<ulong> src, N0 index)
7ffdb093a580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vlane<long>(Vector256<long> src, N0 index)
7ffdb093a5c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vlane<float>(Vector256<float> src, N0 index)
7ffdb093a5f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vlane<double>(Vector256<double> src, N0 index)
7ffdb093a640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlane<byte>(Vector256<byte> src, N1 index)
7ffdb093a670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vlane<sbyte>(Vector256<sbyte> src, N1 index)
7ffdb093a6a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlane<ushort>(Vector256<ushort> src, N1 index)
7ffdb093a6e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vlane<short>(Vector256<short> src, N1 index)
7ffdb093a700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlane<uint>(Vector256<uint> src, N1 index)
7ffdb093a718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vlane<int>(Vector256<int> src, N1 index)
7ffdb093a730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlane<ulong>(Vector256<ulong> src, N1 index)
7ffdb093a748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vlane<long>(Vector256<long> src, N1 index)
7ffdb093a778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vlane<float>(Vector256<float> src, N1 index)
7ffdb093a7a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vlane<double>(Vector256<double> src, N1 index)
7ffdb093a7d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmergehi<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb093a820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vmergehi<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb093a898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmergehi<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb093a928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vmergehi<short>(Vector128<short> x, Vector128<short> y)
7ffdb093a9d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmergehi<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb093aa48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vmergehi<int>(Vector128<int> x, Vector128<int> y)
7ffdb093ab08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmergehi<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb093abf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vmergehi<long>(Vector128<long> x, Vector128<long> y)
7ffdb093ad48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmergehi<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb093ae50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vmergehi<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb093af88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmergehi<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb093b060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vmergehi<short>(Vector256<short> x, Vector256<short> y)
7ffdb093b0f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmergehi<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb093b180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vmergehi<int>(Vector256<int> x, Vector256<int> y)
7ffdb093b6d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmergehi<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb093bd38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vmergehi<long>(Vector256<long> x, Vector256<long> y)
7ffdb0960348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<byte>(Vector128<byte> src, ref byte dst)
7ffdb09603d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<sbyte>(Vector128<sbyte> src, ref sbyte dst)
7ffdb0960468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<ushort>(Vector128<ushort> src, ref ushort dst)
7ffdb0960600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<short>(Vector128<short> src, ref short dst)
7ffdb0960690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<uint>(Vector128<uint> src, ref uint dst)
7ffdb0960840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<int>(Vector128<int> src, ref int dst)
7ffdb09608b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<ulong>(Vector128<ulong> src, ref ulong dst)
7ffdb0960a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<long>(Vector128<long> src, ref long dst)
7ffdb0960ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<float>(Vector128<float> src, ref float dst)
7ffdb0960c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<double>(Vector128<double> src, ref double dst)
7ffdb0960de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<byte>(Vector256<byte> src, ref byte dst)
7ffdb0960f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<sbyte>(Vector256<sbyte> src, ref sbyte dst)
7ffdb0961008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<ushort>(Vector256<ushort> src, ref ushort dst)
7ffdb09610e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<short>(Vector256<short> src, ref short dst)
7ffdb0961158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<uint>(Vector256<uint> src, ref uint dst)
7ffdb09611e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<int>(Vector256<int> src, ref int dst)
7ffdb0961278h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<ulong>(Vector256<ulong> src, ref ulong dst)
7ffdb0961308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<long>(Vector256<long> src, ref long dst)
7ffdb09613b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<float>(Vector256<float> src, ref float dst)
7ffdb0961470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt<double>(Vector256<double> src, ref double dst)
7ffdb0961938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vperm4x64<byte>(Vector256<byte> x, Perm4L spec)
7ffdb0961a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vperm4x64<sbyte>(Vector256<sbyte> x, Perm4L spec)
7ffdb0961ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vperm4x64<ushort>(Vector256<ushort> x, Perm4L spec)
7ffdb0961c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vperm4x64<short>(Vector256<short> x, Perm4L spec)
7ffdb0961c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vperm4x64<uint>(Vector256<uint> x, Perm4L spec)
7ffdb0961d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vperm4x64<int>(Vector256<int> x, Perm4L spec)
7ffdb0961da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vperm4x64<ulong>(Vector256<ulong> x, Perm4L spec)
7ffdb0961e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vperm4x64<long>(Vector256<long> x, Perm4L spec)
7ffdb0961ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vperm4x64<float>(Vector256<float> x, Perm4L spec)
7ffdb0961f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vperm4x64<double>(Vector256<double> x, Perm4L spec)
7ffdb0962040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vperm8x32<byte>(Vector256<byte> src, Vector256<uint> spec)
7ffdb0962100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vperm8x32<sbyte>(Vector256<sbyte> src, Vector256<uint> spec)
7ffdb0962190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vperm8x32<ushort>(Vector256<ushort> src, Vector256<uint> spec)
7ffdb0962268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vperm8x32<short>(Vector256<short> src, Vector256<uint> spec)
7ffdb09622f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vperm8x32<uint>(Vector256<uint> src, Vector256<uint> spec)
7ffdb0962370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vperm8x32<int>(Vector256<int> src, Vector256<uint> spec)
7ffdb09623e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vperm8x32<ulong>(Vector256<ulong> src, Vector256<uint> spec)
7ffdb0962478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vperm8x32<long>(Vector256<long> src, Vector256<uint> spec)
7ffdb0962508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vreverse<byte>(Vector128<byte> x)
7ffdb0962598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vreverse<sbyte>(Vector128<sbyte> x)
7ffdb0962628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vreverse<ushort>(Vector128<ushort> x)
7ffdb09626e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vreverse<short>(Vector128<short> x)
7ffdb0962790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vreverse<uint>(Vector128<uint> x)
7ffdb0962850h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vreverse<int>(Vector128<int> x)
7ffdb09628e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vreverse<ulong>(Vector128<ulong> x)
7ffdb0962988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vreverse<long>(Vector128<long> x)
7ffdb0962a18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vreverse<byte>(Vector256<byte> x)
7ffdb0962b08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vreverse<sbyte>(Vector256<sbyte> x)
7ffdb0962bc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vreverse<ushort>(Vector256<ushort> x)
7ffdb0962ca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vreverse<short>(Vector256<short> x)
7ffdb0962d60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vreverse<uint>(Vector256<uint> x)
7ffdb0962df0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vreverse<int>(Vector256<int> x)
7ffdb0962e80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vreverse<ulong>(Vector256<ulong> x)
7ffdb0962f88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vreverse<long>(Vector256<long> x)
7ffdb0963030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vshuf16x8<byte>(Vector128<byte> src, Vector128<byte> spec)
7ffdb09630d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vshuf16x8<sbyte>(Vector128<sbyte> src, Vector128<byte> spec)
7ffdb0963150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vshuf16x8<ushort>(Vector128<ushort> src, Vector128<byte> spec)
7ffdb0963198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vshuf16x8<short>(Vector128<short> src, Vector128<byte> spec)
7ffdb09631e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vshuf16x8<uint>(Vector128<uint> src, Vector128<byte> spec)
7ffdb09631f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vshuf16x8<int>(Vector128<int> src, Vector128<byte> spec)
7ffdb0963228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vshuf16x8<ulong>(Vector128<ulong> src, Vector128<byte> spec)
7ffdb0963240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vshuf16x8<long>(Vector128<long> src, Vector128<byte> spec)
7ffdb0963258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vshuf16x8<byte>(Vector256<byte> src, Vector256<byte> spec)
7ffdb0963288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vshuf16x8<sbyte>(Vector256<sbyte> src, Vector256<byte> spec)
7ffdb09632e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vshuf16x8<ushort>(Vector256<ushort> src, Vector256<byte> spec)
7ffdb0963300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vshuf16x8<short>(Vector256<short> src, Vector256<byte> spec)
7ffdb0963318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vshuf16x8<uint>(Vector256<uint> src, Vector256<byte> spec)
7ffdb0963348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vshuf16x8<int>(Vector256<int> src, Vector256<byte> spec)
7ffdb0963378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vshuf16x8<ulong>(Vector256<ulong> src, Vector256<byte> spec)
7ffdb0963390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vshuf16x8<long>(Vector256<long> src, Vector256<byte> spec)
7ffdb09633a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector128<byte>> vsplit<byte>(Vector256<byte> src)
7ffdb09633c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector128<sbyte>> vsplit<sbyte>(Vector256<sbyte> src)
7ffdb0963c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector128<ushort>> vsplit<ushort>(Vector256<ushort> src)
7ffdb09682b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector128<short>> vsplit<short>(Vector256<short> src)
7ffdb0968588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector128<uint>> vsplit<uint>(Vector256<uint> src)
7ffdb0968af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector128<int>> vsplit<int>(Vector256<int> src)
7ffdb0969068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector128<ulong>> vsplit<ulong>(Vector256<ulong> src)
7ffdb09695d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector128<long>> vsplit<long>(Vector256<long> src)
7ffdb0969b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector128<float>> vsplit<float>(Vector256<float> src)
7ffdb096a0e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vlo<float>(Vector256<float> src)
7ffdb096a3a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector128<double>> vsplit<double>(Vector256<double> src)
7ffdb096a700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vlo<double>(Vector256<double> src)
7ffdb096a9b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector256<byte>> vsplit<byte>(Vector512<byte> src)
7ffdb096ad30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector256<sbyte>> vsplit<sbyte>(Vector512<sbyte> src)
7ffdb096b588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vlo<sbyte>(Vector512<sbyte> src)
7ffdb096b840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector256<ushort>> vsplit<ushort>(Vector512<ushort> src)
7ffdb096bb88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector256<short>> vsplit<short>(Vector512<short> src)
7ffdb096be58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector256<uint>> vsplit<uint>(Vector512<uint> src)
7ffdb09a0990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector256<int>> vsplit<int>(Vector512<int> src)
7ffdb09a0f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector256<ulong>> vsplit<ulong>(Vector512<ulong> src)
7ffdb09a1488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector256<long>> vsplit<long>(Vector512<long> src)
7ffdb09a1a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vlo<long>(Vector512<long> src)
7ffdb09a1cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector256<float>> vsplit<float>(Vector512<float> src)
7ffdb09a2028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vlo<float>(Vector512<float> src)
7ffdb09a22e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<Vector256<double>> vsplit<double>(Vector512<double> src)
7ffdb09a2628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vlo<double>(Vector512<double> src)
7ffdb09a28e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vswaphl<byte>(Vector128<byte> x)
7ffdb09a2c10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vswaphl<sbyte>(Vector128<sbyte> x)
7ffdb09a2c88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vswaphl<ushort>(Vector128<ushort> x)
7ffdb09a2cd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vswaphl<short>(Vector128<short> x)
7ffdb09a2d18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vswaphl<uint>(Vector128<uint> x)
7ffdb09a2d78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vswaphl<int>(Vector128<int> x)
7ffdb09a2dc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vswaphl<ulong>(Vector128<ulong> x)
7ffdb09a2e38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vswaphl<long>(Vector128<long> x)
7ffdb09a2e50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vswaphl<float>(Vector128<float> x)
7ffdb09a2e98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vswaphl<double>(Vector128<double> x)
7ffdb09a2f10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vswaphl<byte>(Vector256<byte> x)
7ffdb09a2fe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vswaphl<sbyte>(Vector256<sbyte> x)
7ffdb09a30c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vswaphl<ushort>(Vector256<ushort> x)
7ffdb09a3180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vswaphl<short>(Vector256<short> x)
7ffdb09a3210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vswaphl<uint>(Vector256<uint> x)
7ffdb09a32e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vswaphl<int>(Vector256<int> x)
7ffdb09a3378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vswaphl<ulong>(Vector256<ulong> x)
7ffdb09a3420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vswaphl<long>(Vector256<long> x)
7ffdb09a34e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vswaphl<float>(Vector256<float> x)
7ffdb09a3588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vswaphl<double>(Vector256<double> x)
7ffdb09a3648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vcimpl<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb09a8300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vcimpl<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb09a83f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vcimpl<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb09a84c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vcimpl<short>(Vector128<short> x, Vector128<short> y)
7ffdb09a85b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vcimpl<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb09a86c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vcimpl<int>(Vector128<int> x, Vector128<int> y)
7ffdb09a87b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vcimpl<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb09a88d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vcimpl<long>(Vector128<long> x, Vector128<long> y)
7ffdb09a89a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vcimpl<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb09a8ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vcimpl<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb09a8b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vcimpl<short>(Vector256<short> x, Vector256<short> y)
7ffdb09a8cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vcimpl<int>(Vector256<int> x, Vector256<int> y)
7ffdb09a8e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vcimpl<long>(Vector256<long> x, Vector256<long> y)
7ffdb09a8f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vcnonimpl<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb09a9008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vcnonimpl<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb09a90c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vcnonimpl<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb09a91b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vcnonimpl<short>(Vector128<short> x, Vector128<short> y)
7ffdb09a9248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vcnonimpl<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb09a9308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vcnonimpl<int>(Vector128<int> x, Vector128<int> y)
7ffdb09a93c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vcnonimpl<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb09a9488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vcnonimpl<long>(Vector128<long> x, Vector128<long> y)
7ffdb09a9518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vcnonimpl<float>(Vector128<float> x, Vector128<float> y)
7ffdb09a9608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vcnonimpl<double>(Vector128<double> x, Vector128<double> y)
7ffdb09a96e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vcnonimpl<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb09a9788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vcnonimpl<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb09a9878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vcnonimpl<short>(Vector256<short> x, Vector256<short> y)
7ffdb09a9c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vcnonimpl<int>(Vector256<int> x, Vector256<int> y)
7ffdb09aa040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vcnonimpl<long>(Vector256<long> x, Vector256<long> y)
7ffdb09aa4c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vcnonimpl<float>(Vector256<float> x, Vector256<float> y)
7ffdb09aa898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vcnonimpl<double>(Vector256<double> x, Vector256<double> y)
7ffdb09aaaa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vfalse<byte>(W128 w)
7ffdb09aab98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vfalse<sbyte>(W128 w)
7ffdb09aabf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vfalse<ushort>(W128 w)
7ffdb09aac40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vfalse<short>(W128 w)
7ffdb09aaca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vfalse<uint>(W128 w)
7ffdb09aacd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vfalse<int>(W128 w)
7ffdb09aad18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vfalse<ulong>(W128 w)
7ffdb09aad60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vfalse<long>(W128 w)
7ffdb09aad90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vfalse<byte>(Vector128<byte> x)
7ffdb09aae08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vfalse<sbyte>(Vector128<sbyte> x)
7ffdb09aae38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vfalse<ushort>(Vector128<ushort> x)
7ffdb09aae68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vfalse<short>(Vector128<short> x)
7ffdb09aaeb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vfalse<uint>(Vector128<uint> x)
7ffdb09aaf28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vfalse<int>(Vector128<int> x)
7ffdb09aaf58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vfalse<ulong>(Vector128<ulong> x)
7ffdb09aaf70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vfalse<long>(Vector128<long> x)
7ffdb09aafd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vfalse<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb09ab030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vfalse<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb09ab3c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vfalse<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb09ab438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vfalse<short>(Vector128<short> x, Vector128<short> y)
7ffdb09ab498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vfalse<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb09ab528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vfalse<int>(Vector128<int> x, Vector128<int> y)
7ffdb09ab840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vfalse<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb09ab870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vfalse<long>(Vector128<long> x, Vector128<long> y)
7ffdb09ab8e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vfalse<byte>(Vector128<byte> x, Vector128<byte> y, Vector128<byte> z)
7ffdb09ab918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vfalse<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y, Vector128<sbyte> z)
7ffdb09abd20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vfalse<ushort>(Vector128<ushort> x, Vector128<ushort> y, Vector128<ushort> z)
7ffdb09abdc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vfalse<short>(Vector128<short> x, Vector128<short> y, Vector128<short> z)
7ffdb09abe70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vfalse<uint>(Vector128<uint> x, Vector128<uint> y, Vector128<uint> z)
7ffdb09abee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vfalse<int>(Vector128<int> x, Vector128<int> y, Vector128<int> z)
7ffdb09abf48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vfalse<ulong>(Vector128<ulong> x, Vector128<ulong> y, Vector128<ulong> z)
7ffdb09abfa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vfalse<long>(Vector128<long> x, Vector128<long> y, Vector128<long> z)
7ffdb09d0048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vfalse<byte>(W256 w)
7ffdb09d0438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vfalse<sbyte>(W256 w)
7ffdb09d0498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vfalse<ushort>(W256 w)
7ffdb09d04e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vfalse<short>(W256 w)
7ffdb09d0540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vfalse<uint>(W256 w)
7ffdb09d0588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vfalse<int>(W256 w)
7ffdb09d05d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vfalse<ulong>(W256 w)
7ffdb09d0600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vfalse<long>(W256 w)
7ffdb09d0660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vfalse<byte>(Vector256<byte> x)
7ffdb09d09f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vfalse<sbyte>(Vector256<sbyte> x)
7ffdb09d0a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vfalse<ushort>(Vector256<ushort> x)
7ffdb09d0ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vfalse<short>(Vector256<short> x)
7ffdb09d0b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vfalse<uint>(Vector256<uint> x)
7ffdb09d0b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vfalse<int>(Vector256<int> x)
7ffdb09d0b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vfalse<ulong>(Vector256<ulong> x)
7ffdb09d0b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vfalse<long>(Vector256<long> x)
7ffdb09d0b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vfalse<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb09d0bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vfalse<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb09d0fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vfalse<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb09d0ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vfalse<short>(Vector256<short> x, Vector256<short> y)
7ffdb09d1008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vfalse<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb09d1020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vfalse<int>(Vector256<int> x, Vector256<int> y)
7ffdb09d1038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vfalse<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb09d1050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vfalse<long>(Vector256<long> x, Vector256<long> y)
7ffdb09d13e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vfalse<byte>(Vector256<byte> x, Vector256<byte> y, Vector256<byte> z)
7ffdb09d1428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vfalse<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y, Vector256<sbyte> z)
7ffdb09d1458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vfalse<ushort>(Vector256<ushort> x, Vector256<ushort> y, Vector256<ushort> z)
7ffdb09d1488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vfalse<short>(Vector256<short> x, Vector256<short> y, Vector256<short> z)
7ffdb09d14a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vfalse<uint>(Vector256<uint> x, Vector256<uint> y, Vector256<uint> z)
7ffdb09d14b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vfalse<int>(Vector256<int> x, Vector256<int> y, Vector256<int> z)
7ffdb09d1848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vfalse<ulong>(Vector256<ulong> x, Vector256<ulong> y, Vector256<ulong> z)
7ffdb09d18a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vfalse<long>(Vector256<long> x, Vector256<long> y, Vector256<long> z)
7ffdb09d18c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vimpl<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb09d18f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vimpl<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb09d1980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vimpl<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb09d1db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vimpl<short>(Vector128<short> x, Vector128<short> y)
7ffdb09d1e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vimpl<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb09d2268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vimpl<int>(Vector128<int> x, Vector128<int> y)
7ffdb09d22f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vimpl<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb09d2370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vimpl<long>(Vector128<long> x, Vector128<long> y)
7ffdb09d2790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vimpl<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb09d2d00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vimpl<short>(Vector256<short> x, Vector256<short> y)
7ffdb09d2ef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vimpl<int>(Vector256<int> x, Vector256<int> y)
7ffdb09d34b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vimpl<long>(Vector256<long> x, Vector256<long> y)
7ffdb09d3990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vleft<byte>(Vector128<byte> a, Vector128<byte> b)
7ffdb09d3a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vleft<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b)
7ffdb09d3ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vleft<ushort>(Vector128<ushort> a, Vector128<ushort> b)
7ffdb09d3ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vleft<short>(Vector128<short> a, Vector128<short> b)
7ffdb09d3eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vleft<uint>(Vector128<uint> a, Vector128<uint> b)
7ffdb09d3f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vleft<int>(Vector128<int> a, Vector128<int> b)
7ffdb09d3f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vleft<ulong>(Vector128<ulong> a, Vector128<ulong> b)
7ffdb09d3f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vleft<long>(Vector128<long> a, Vector128<long> b)
7ffdb09d3f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vleft<byte>(Vector256<byte> a, Vector256<byte> b)
7ffdb09d83a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vleft<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b)
7ffdb09d8408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vleft<ushort>(Vector256<ushort> a, Vector256<ushort> b)
7ffdb09d8498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vleft<short>(Vector256<short> a, Vector256<short> b)
7ffdb09d84b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vleft<uint>(Vector256<uint> a, Vector256<uint> b)
7ffdb09d84c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vleft<int>(Vector256<int> a, Vector256<int> b)
7ffdb09d84e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vleft<ulong>(Vector256<ulong> a, Vector256<ulong> b)
7ffdb09d88a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vleft<long>(Vector256<long> a, Vector256<long> b)
7ffdb09d88e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlnot<byte>(Vector128<byte> a, Vector128<byte> b)
7ffdb09d8900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vlnot<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b)
7ffdb09d8930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlnot<ushort>(Vector128<ushort> a, Vector128<ushort> b)
7ffdb09d8990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vlnot<short>(Vector128<short> a, Vector128<short> b)
7ffdb09d89d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlnot<uint>(Vector128<uint> a, Vector128<uint> b)
7ffdb09d8a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vlnot<int>(Vector128<int> a, Vector128<int> b)
7ffdb09d8a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlnot<ulong>(Vector128<ulong> a, Vector128<ulong> b)
7ffdb09d8a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vlnot<long>(Vector128<long> a, Vector128<long> b)
7ffdb09d8ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlnot<byte>(Vector256<byte> a, Vector256<byte> b)
7ffdb09d8ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vlnot<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b)
7ffdb09d8b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlnot<ushort>(Vector256<ushort> a, Vector256<ushort> b)
7ffdb09d8b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vlnot<short>(Vector256<short> a, Vector256<short> b)
7ffdb09d8c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlnot<uint>(Vector256<uint> a, Vector256<uint> b)
7ffdb09d8d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vlnot<int>(Vector256<int> a, Vector256<int> b)
7ffdb09d8d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlnot<ulong>(Vector256<ulong> a, Vector256<ulong> b)
7ffdb09d8e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vlnot<long>(Vector256<long> a, Vector256<long> b)
7ffdb09d8e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vnand<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb09d8ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vnand<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb09d8ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vnand<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb09d9140h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vnand<short>(Vector128<short> x, Vector128<short> y)
7ffdb09d91b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vnand<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb09d9308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vnand<int>(Vector128<int> x, Vector128<int> y)
7ffdb09d93e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vnand<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb09d9518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vnand<long>(Vector128<long> x, Vector128<long> y)
7ffdb09d95a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vnand<float>(Vector128<float> x, Vector128<float> y)
7ffdb09d9680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vnand<double>(Vector128<double> x, Vector128<double> y)
7ffdb09d96e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vnand<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb09d9788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vnand<short>(Vector256<short> x, Vector256<short> y)
7ffdb09d9920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vnand<int>(Vector256<int> x, Vector256<int> y)
7ffdb09d9a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vnand<long>(Vector256<long> x, Vector256<long> y)
7ffdb09da1f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vnand<float>(Vector256<float> x, Vector256<float> y)
7ffdb09da400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vnand<double>(Vector256<double> x, Vector256<double> y)
7ffdb09da8f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vnonimpl<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb09da9d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vnonimpl<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb09dab08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vnonimpl<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb09dac70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vnonimpl<short>(Vector128<short> x, Vector128<short> y)
7ffdb09dad30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vnonimpl<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb09dae20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vnonimpl<int>(Vector128<int> x, Vector128<int> y)
7ffdb09daf40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vnonimpl<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb09db030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vnonimpl<long>(Vector128<long> x, Vector128<long> y)
7ffdb09db2b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vnonimpl<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb09db438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vnonimpl<short>(Vector256<short> x, Vector256<short> y)
7ffdb09db5e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vnonimpl<int>(Vector256<int> x, Vector256<int> y)
7ffdb09db708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vnonimpl<long>(Vector256<long> x, Vector256<long> y)
7ffdb09db7c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vnor<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb09db888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vnor<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb09db948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vnor<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb09dbab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vnor<short>(Vector128<short> x, Vector128<short> y)
7ffdb09dbb40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vnor<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb09dbbd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vnor<int>(Vector128<int> x, Vector128<int> y)
7ffdb09dbc60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vnor<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb09dbd08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vnor<long>(Vector128<long> x, Vector128<long> y)
7ffdb09dbd80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vnor<float>(Vector128<float> x, Vector128<float> y)
7ffdb09dbe40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vnor<double>(Vector128<double> x, Vector128<double> y)
7ffdb09dbf00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vnor<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb09dbfa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vnor<short>(Vector256<short> x, Vector256<short> y)
7ffdb0a002b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vnor<int>(Vector256<int> x, Vector256<int> y)
7ffdb0a00420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vnor<long>(Vector256<long> x, Vector256<long> y)
7ffdb0a00558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vnor<float>(Vector256<float> x, Vector256<float> y)
7ffdb0a006f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vnor<double>(Vector256<double> x, Vector256<double> y)
7ffdb0a008a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vor<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb0a00db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vor<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb0a00ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vor<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb0a00ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vor<short>(Vector128<short> x, Vector128<short> y)
7ffdb0a010e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vor<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb0a01338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vor<int>(Vector128<int> x, Vector128<int> y)
7ffdb0a01440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vor<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb0a01560h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vor<long>(Vector128<long> x, Vector128<long> y)
7ffdb0a01620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vor<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb0a01728h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vor<short>(Vector256<short> x, Vector256<short> y)
7ffdb0a01860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vor<int>(Vector256<int> x, Vector256<int> y)
7ffdb0a01968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vor<long>(Vector256<long> x, Vector256<long> y)
7ffdb0a01aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vright<byte>(Vector128<byte> a, Vector128<byte> b)
7ffdb0a01ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vright<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b)
7ffdb0a01bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vright<ushort>(Vector128<ushort> a, Vector128<ushort> b)
7ffdb0a01c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vright<short>(Vector128<short> a, Vector128<short> b)
7ffdb0a01c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vright<uint>(Vector128<uint> a, Vector128<uint> b)
7ffdb0a01c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vright<int>(Vector128<int> a, Vector128<int> b)
7ffdb0a01ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vright<ulong>(Vector128<ulong> a, Vector128<ulong> b)
7ffdb0a01d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vright<long>(Vector128<long> a, Vector128<long> b)
7ffdb0a01d70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vright<byte>(Vector256<byte> a, Vector256<byte> b)
7ffdb0a01db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vright<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b)
7ffdb0a01e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vright<ushort>(Vector256<ushort> a, Vector256<ushort> b)
7ffdb0a01e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vright<short>(Vector256<short> a, Vector256<short> b)
7ffdb0a01e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vright<uint>(Vector256<uint> a, Vector256<uint> b)
7ffdb0a01e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vright<int>(Vector256<int> a, Vector256<int> b)
7ffdb0a01ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vright<ulong>(Vector256<ulong> a, Vector256<ulong> b)
7ffdb0a01ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vright<long>(Vector256<long> a, Vector256<long> b)
7ffdb0a01f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrnot<byte>(Vector128<byte> a, Vector128<byte> b)
7ffdb0a01f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vrnot<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b)
7ffdb0a01fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vrnot<ushort>(Vector128<ushort> a, Vector128<ushort> b)
7ffdb0a02040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vrnot<short>(Vector128<short> a, Vector128<short> b)
7ffdb0a020a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vrnot<uint>(Vector128<uint> a, Vector128<uint> b)
7ffdb0a02130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vrnot<int>(Vector128<int> a, Vector128<int> b)
7ffdb0a021a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vrnot<ulong>(Vector128<ulong> a, Vector128<ulong> b)
7ffdb0a02250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vrnot<long>(Vector128<long> a, Vector128<long> b)
7ffdb0a022b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vrnot<byte>(Vector256<byte> a, Vector256<byte> b)
7ffdb0a02358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vrnot<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b)
7ffdb0a023e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vrnot<ushort>(Vector256<ushort> a, Vector256<ushort> b)
7ffdb0a02478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vrnot<short>(Vector256<short> a, Vector256<short> b)
7ffdb0a024f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vrnot<uint>(Vector256<uint> a, Vector256<uint> b)
7ffdb0a02580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vrnot<int>(Vector256<int> a, Vector256<int> b)
7ffdb0a025e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vrnot<ulong>(Vector256<ulong> a, Vector256<ulong> b)
7ffdb0a02670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vrnot<long>(Vector256<long> a, Vector256<long> b)
7ffdb0a02718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vselect<byte>(Vector128<byte> x, Vector128<byte> y, Vector128<byte> z)
7ffdb0a027a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vselect<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y, Vector128<sbyte> z)
7ffdb0a02898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vselect<ushort>(Vector128<ushort> x, Vector128<ushort> y, Vector128<ushort> z)
7ffdb0a02988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vselect<short>(Vector128<short> x, Vector128<short> y, Vector128<short> z)
7ffdb0a02a60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vselect<uint>(Vector128<uint> x, Vector128<uint> y, Vector128<uint> z)
7ffdb0a02b20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vselect<int>(Vector128<int> x, Vector128<int> y, Vector128<int> z)
7ffdb0a02bb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vselect<ulong>(Vector128<ulong> x, Vector128<ulong> y, Vector128<ulong> z)
7ffdb0a02c28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vselect<long>(Vector128<long> x, Vector128<long> y, Vector128<long> z)
7ffdb0a02cb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vselect<byte>(Vector256<byte> x, Vector256<byte> y, Vector256<byte> z)
7ffdb0a02d30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vselect<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y, Vector256<sbyte> z)
7ffdb0a02da8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vselect<short>(Vector256<short> x, Vector256<short> y, Vector256<short> z)
7ffdb0a02e98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vselect<int>(Vector256<int> x, Vector256<int> y, Vector256<int> z)
7ffdb0a02f70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vselect<long>(Vector256<long> x, Vector256<long> y, Vector256<long> z)
7ffdb0a03060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vtrue<byte>(W128 w)
7ffdb0a030f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vones<byte>(W128 w, byte t)
7ffdb0a03108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vtrue<sbyte>(W128 w)
7ffdb0a03168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vtrue<ushort>(W128 w)
7ffdb0a03180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vones<ushort>(W128 w, ushort t)
7ffdb0a03198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vtrue<short>(W128 w)
7ffdb0a031b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vones<short>(W128 w, short t)
7ffdb0a031c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vtrue<uint>(W128 w)
7ffdb0a031e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vones<uint>(W128 w, uint t)
7ffdb0a031f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vtrue<int>(W128 w)
7ffdb0a03210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vones<int>(W128 w, int t)
7ffdb0a03228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vtrue<ulong>(W128 w)
7ffdb0a03240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vtrue<long>(W128 w)
7ffdb0a03258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vones<long>(W128 w, long t)
7ffdb0a03270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vtrue<byte>(Vector128<byte> x)
7ffdb0a03288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vtrue<sbyte>(Vector128<sbyte> x)
7ffdb0a032b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vtrue<ushort>(Vector128<ushort> x)
7ffdb0a032d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vtrue<short>(Vector128<short> x)
7ffdb0a032e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vtrue<uint>(Vector128<uint> x)
7ffdb0a03300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vtrue<int>(Vector128<int> x)
7ffdb0a03318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vtrue<ulong>(Vector128<ulong> x)
7ffdb0a03348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vtrue<long>(Vector128<long> x)
7ffdb0a033f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vtrue<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb0a034b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vtrue<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb0a03558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vtrue<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb0a03630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vtrue<short>(Vector128<short> x, Vector128<short> y)
7ffdb0a036f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vtrue<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb0a03798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vtrue<int>(Vector128<int> x, Vector128<int> y)
7ffdb0a03840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vtrue<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb0a038e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vtrue<long>(Vector128<long> x, Vector128<long> y)
7ffdb0a03948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vtrue<byte>(Vector128<byte> x, Vector128<byte> y, Vector128<byte> z)
7ffdb0a039f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vtrue<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y, Vector128<sbyte> z)
7ffdb0a03ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vtrue<ushort>(Vector128<ushort> x, Vector128<ushort> y, Vector128<ushort> z)
7ffdb0a03b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vtrue<short>(Vector128<short> x, Vector128<short> y, Vector128<short> z)
7ffdb0a03b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vtrue<uint>(Vector128<uint> x, Vector128<uint> y, Vector128<uint> z)
7ffdb0a03c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vtrue<int>(Vector128<int> x, Vector128<int> y, Vector128<int> z)
7ffdb0a03c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vtrue<ulong>(Vector128<ulong> x, Vector128<ulong> y, Vector128<ulong> z)
7ffdb0a03cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vtrue<long>(Vector128<long> x, Vector128<long> y, Vector128<long> z)
7ffdb0a03d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vtrue<byte>(W256 w)
7ffdb0a03dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vones<byte>(W256 w, byte t)
7ffdb0a03de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vtrue<sbyte>(W256 w)
7ffdb0a03e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vones<sbyte>(W256 w, sbyte t)
7ffdb0a03e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vtrue<ushort>(W256 w)
7ffdb0a03ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vtrue<short>(W256 w)
7ffdb0a03f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vones<short>(W256 w, short t)
7ffdb0a03f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vtrue<uint>(W256 w)
7ffdb0a03fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vtrue<int>(W256 w)
7ffdb0a08030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vones<int>(W256 w, int t)
7ffdb0a08048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vtrue<ulong>(W256 w)
7ffdb0a080a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vtrue<long>(W256 w)
7ffdb0a08108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vones<long>(W256 w, long t)
7ffdb0a08138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vtrue<byte>(Vector256<byte> x)
7ffdb0a08198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vtrue<sbyte>(Vector256<sbyte> x)
7ffdb0a081f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vtrue<ushort>(Vector256<ushort> x)
7ffdb0a08258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vtrue<short>(Vector256<short> x)
7ffdb0a082b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vtrue<uint>(Vector256<uint> x)
7ffdb0a08348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vtrue<int>(Vector256<int> x)
7ffdb0a083a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vtrue<ulong>(Vector256<ulong> x)
7ffdb0a08420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vtrue<long>(Vector256<long> x)
7ffdb0a08468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vtrue<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb0a084e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vtrue<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb0a085d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vtrue<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb0a08648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vtrue<short>(Vector256<short> x, Vector256<short> y)
7ffdb0a08690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vtrue<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb0a086d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vtrue<int>(Vector256<int> x, Vector256<int> y)
7ffdb0a08738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vtrue<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb0a08810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vtrue<long>(Vector256<long> x, Vector256<long> y)
7ffdb0a088a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vtrue<byte>(Vector256<byte> x, Vector256<byte> y, Vector256<byte> z)
7ffdb0a08900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vtrue<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y, Vector256<sbyte> z)
7ffdb0a08978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vtrue<ushort>(Vector256<ushort> x, Vector256<ushort> y, Vector256<ushort> z)
7ffdb0a08a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vtrue<short>(Vector256<short> x, Vector256<short> y, Vector256<short> z)
7ffdb0a08a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vtrue<uint>(Vector256<uint> x, Vector256<uint> y, Vector256<uint> z)
7ffdb0a08a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vtrue<int>(Vector256<int> x, Vector256<int> y, Vector256<int> z)
7ffdb0a08ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vtrue<ulong>(Vector256<ulong> x, Vector256<ulong> y, Vector256<ulong> z)
7ffdb0a08af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vtrue<long>(Vector256<long> x, Vector256<long> y, Vector256<long> z)
7ffdb0a08b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vxnor<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb0a08b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vxnor<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb0a08bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vxnor<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb0a08c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vxnor<short>(Vector128<short> x, Vector128<short> y)
7ffdb0a08cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vxnor<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb0a08d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vxnor<int>(Vector128<int> x, Vector128<int> y)
7ffdb0a08de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vxnor<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb0a08e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vxnor<long>(Vector128<long> x, Vector128<long> y)
7ffdb0a08f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vxnor<float>(Vector128<float> x, Vector128<float> y)
7ffdb0a08fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vxnor<double>(Vector128<double> x, Vector128<double> y)
7ffdb0a090c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vxnor<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb0a0a790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vxnor<short>(Vector256<short> x, Vector256<short> y)
7ffdb0a0b390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vxnor<int>(Vector256<int> x, Vector256<int> y)
7ffdb0a0b480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vxnor<long>(Vector256<long> x, Vector256<long> y)
7ffdb0a0b618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vxnor<float>(Vector256<float> x, Vector256<float> y)
7ffdb0a0b720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vxnor<double>(Vector256<double> x, Vector256<double> y)
7ffdb0a0b840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vxor<float>(Vector128<float> x, Vector128<float> y)
7ffdb0a40708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vxor<double>(Vector128<double> x, Vector128<double> y)
7ffdb0a40b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vxor<float>(Vector256<float> x, Vector256<float> y)
7ffdb0a41e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vxor<double>(Vector256<double> x, Vector256<double> y)
7ffdb0a41ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vxornot<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb0a41f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vxornot<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb0a41ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vxornot<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb0a420b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vxornot<short>(Vector128<short> x, Vector128<short> y)
7ffdb0a42148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vxornot<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb0a421f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vxornot<int>(Vector128<int> x, Vector128<int> y)
7ffdb0a42268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vxornot<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb0a42310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vxornot<long>(Vector128<long> x, Vector128<long> y)
7ffdb0a423a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vxornot<float>(Vector128<float> x, Vector128<float> y)
7ffdb0a42460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vxornot<double>(Vector128<double> x, Vector128<double> y)
7ffdb0a42538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vxornot<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb0a425c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vxornot<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb0a426b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vxornot<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb0a42760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vxornot<short>(Vector256<short> x, Vector256<short> y)
7ffdb0a428e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vxornot<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb0a42970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vxornot<int>(Vector256<int> x, Vector256<int> y)
7ffdb0a42bb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vxornot<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb0a42ce8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vxornot<long>(Vector256<long> x, Vector256<long> y)
7ffdb0a42f70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vxornot<float>(Vector256<float> x, Vector256<float> y)
7ffdb0a43138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vxornot<double>(Vector256<double> x, Vector256<double> y)
7ffdb0a432d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop<byte>(Vector128<byte> x, Vector128<byte> y, Vector128<byte> z)
7ffdb0a43df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y, Vector128<sbyte> z)
7ffdb0a43e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop<ushort>(Vector128<ushort> x, Vector128<ushort> y, Vector128<ushort> z)
7ffdb0a43e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop<short>(Vector128<short> x, Vector128<short> y, Vector128<short> z)
7ffdb0a43eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop<uint>(Vector128<uint> x, Vector128<uint> y, Vector128<uint> z)
7ffdb0a43ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop<int>(Vector128<int> x, Vector128<int> y, Vector128<int> z)
7ffdb0a482d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop<ulong>(Vector128<ulong> x, Vector128<ulong> y, Vector128<ulong> z)
7ffdb0a48420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop<long>(Vector128<long> x, Vector128<long> y, Vector128<long> z)
7ffdb0a48558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop<byte>(Vector256<byte> x, Vector256<byte> y, Vector256<byte> z)
7ffdb0a48780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y, Vector256<sbyte> z)
7ffdb0a48a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop<ushort>(Vector256<ushort> x, Vector256<ushort> y, Vector256<ushort> z)
7ffdb0a49938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop<short>(Vector256<short> x, Vector256<short> y, Vector256<short> z)
7ffdb0a4a670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop<uint>(Vector256<uint> x, Vector256<uint> y, Vector256<uint> z)
7ffdb0a70450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop<int>(Vector256<int> x, Vector256<int> y, Vector256<int> z)
7ffdb0a70d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop<ulong>(Vector256<ulong> x, Vector256<ulong> y, Vector256<ulong> z)
7ffdb0a70db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop<long>(Vector256<long> x, Vector256<long> y, Vector256<long> z)
7ffdb0a70e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vgt<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb0a70fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vgt<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb0a71080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vgt<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb0a71158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vgt<short>(Vector128<short> x, Vector128<short> y)
7ffdb0a71470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vgt<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb0a71668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vgt<int>(Vector128<int> x, Vector128<int> y)
7ffdb0a71848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vgt<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb0a718f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vgt<long>(Vector128<long> x, Vector128<long> y)
7ffdb0a71ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vgt<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb0a71cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vgt<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb0a71e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vgt<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb0a71f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vgt<short>(Vector256<short> x, Vector256<short> y)
7ffdb0a72118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vgt<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb0a72280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vgt<int>(Vector256<int> x, Vector256<int> y)
7ffdb0a724c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vgt<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb0a725e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vgt<long>(Vector256<long> x, Vector256<long> y)
7ffdb0a726b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlt<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb0a727d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vlt<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb0a72928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlt<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb0a72c28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vlt<short>(Vector128<short> x, Vector128<short> y)
7ffdb0a72ec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlt<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb0a72f88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlt<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb0a731c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlt<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb0a732e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vlt<int>(Vector128<int> x, Vector128<int> y)
7ffdb0a73360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vlt<long>(Vector128<long> x, Vector128<long> y)
7ffdb0a73468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlt<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb0a73588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vlt<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb0a73708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlt<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb0a73840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vlt<short>(Vector256<short> x, Vector256<short> y)
7ffdb0a73990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlt<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb0a73a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vlt<int>(Vector256<int> x, Vector256<int> y)
7ffdb0a73af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vlt<long>(Vector256<long> x, Vector256<long> y)
7ffdb0a78978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmax<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb0a791a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vmax<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb0a79518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmax<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb0a79a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vmax<short>(Vector128<short> x, Vector128<short> y)
7ffdb0a79b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> videntity<ulong>(Vector128<ulong> a)
7ffdb0a79f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmax<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb0a7a2b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vmax<int>(Vector128<int> x, Vector128<int> y)
7ffdb0a7a340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> videntity<ulong>(Vector256<ulong> a)
7ffdb0a7af40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmax<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb0a7afa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vmax<long>(Vector128<long> x, Vector128<long> y)
7ffdb0a7b240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vmax<float>(Vector128<float> x, Vector128<float> y)
7ffdb0a7b438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vmax<double>(Vector128<double> x, Vector128<double> y)
7ffdb0a7b858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmax<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb0ab01b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vmax<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb0ab02a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmax<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb0ab03a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vmax<short>(Vector256<short> x, Vector256<short> y)
7ffdb0ab09f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmax<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb0ab0ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vmax<int>(Vector256<int> x, Vector256<int> y)
7ffdb0ab0bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmax<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb0ab0c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vmax<long>(Vector256<long> x, Vector256<long> y)
7ffdb0ab0cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vmax<float>(Vector256<float> x, Vector256<float> y)
7ffdb0ab12c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vmax<double>(Vector256<double> x, Vector256<double> y)
7ffdb0ab1368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmin<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb0ab13f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vmin<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb0ab19f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmin<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb0ab1aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vmin<short>(Vector128<short> x, Vector128<short> y)
7ffdb0ab1b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmin<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb0ab1ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vmin<int>(Vector128<int> x, Vector128<int> y)
7ffdb0ab1c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmin<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb0ab1cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vmin<long>(Vector128<long> x, Vector128<long> y)
7ffdb0ab1d58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmin<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb0ab2358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vmin<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb0ab23e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmin<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb0ab2490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vmin<short>(Vector256<short> x, Vector256<short> y)
7ffdb0ab2508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmin<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb0ab2b08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vmin<int>(Vector256<int> x, Vector256<int> y)
7ffdb0ab2b80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmin<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb0ab3180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vmin<long>(Vector256<long> x, Vector256<long> y)
7ffdb0ab3378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<byte>(Vector128<byte> src)
7ffdb0ab36a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<sbyte>(Vector128<sbyte> src)
7ffdb0ab3900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<ushort>(Vector128<ushort> src)
7ffdb0ab3ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<short>(Vector128<short> src)
7ffdb0ab3c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<uint>(Vector128<uint> src)
7ffdb0ab3ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<int>(Vector128<int> src)
7ffdb0ab3d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<ulong>(Vector128<ulong> src)
7ffdb0ab3d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<long>(Vector128<long> src)
7ffdb0ab3e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<float>(Vector128<float> src)
7ffdb0ab3eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<double>(Vector128<double> src)
7ffdb0ab3f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<byte>(Vector256<byte> src)
7ffdb0ab3fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<sbyte>(Vector256<sbyte> src)
7ffdb0ab8060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<ushort>(Vector256<ushort> src)
7ffdb0ab80f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<short>(Vector256<short> src)
7ffdb0ab8168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<uint>(Vector256<uint> src)
7ffdb0ab81c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<int>(Vector256<int> src)
7ffdb0ab8240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<ulong>(Vector256<ulong> src)
7ffdb0ab82a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<long>(Vector256<long> src)
7ffdb0ab8318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<float>(Vector256<float> src)
7ffdb0ab8390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<double>(Vector256<double> src)
7ffdb0ab8420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<byte>(in Vector512<byte> src)
7ffdb0ab84b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<sbyte>(in Vector512<sbyte> src)
7ffdb0ab8720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<ushort>(in Vector512<ushort> src)
7ffdb0ab8888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<short>(in Vector512<short> src)
7ffdb0ab8930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<uint>(in Vector512<uint> src)
7ffdb0ab89d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<int>(in Vector512<int> src)
7ffdb0ab8c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<ulong>(in Vector512<ulong> src)
7ffdb0ab8e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<long>(in Vector512<long> src)
7ffdb0ab8f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<float>(in Vector512<float> src)
7ffdb0ab9050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz<double>(in Vector512<double> src)
7ffdb0ab9170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<byte>(Vector128<byte> x, Vector128<byte> y)
7ffdb0ab91d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<byte>(Vector128<byte> src)
7ffdb0ab9200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<byte>(Vector128<byte> src, Vector128<byte> mask)
7ffdb0ab9260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<sbyte>(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb0ab9428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<sbyte>(Vector128<sbyte> src)
7ffdb0ab9440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<sbyte>(Vector128<sbyte> src, Vector128<sbyte> mask)
7ffdb0ab9470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<ushort>(Vector128<ushort> x, Vector128<ushort> y)
7ffdb0ab9500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ushort>(Vector128<ushort> src)
7ffdb0ab9530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ushort>(Vector128<ushort> src, Vector128<ushort> mask)
7ffdb0ab9548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<short>(Vector128<short> x, Vector128<short> y)
7ffdb0ab95c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<short>(Vector128<short> src)
7ffdb0ab95d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<short>(Vector128<short> src, Vector128<short> mask)
7ffdb0ab9608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<uint>(Vector128<uint> x, Vector128<uint> y)
7ffdb0ab9740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<uint>(Vector128<uint> src)
7ffdb0ab9758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<uint>(Vector128<uint> src, Vector128<uint> mask)
7ffdb0ab97a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<int>(Vector128<int> x, Vector128<int> y)
7ffdb0ab99f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<int>(Vector128<int> src)
7ffdb0ab9a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<int>(Vector128<int> src, Vector128<int> mask)
7ffdb0ab9a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<ulong>(Vector128<ulong> x, Vector128<ulong> y)
7ffdb0ab9cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ulong>(Vector128<ulong> src)
7ffdb0ab9ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ulong>(Vector128<ulong> src, Vector128<ulong> mask)
7ffdb0ab9d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<long>(Vector128<long> x, Vector128<long> y)
7ffdb0ab9f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<long>(Vector128<long> src)
7ffdb0ab9f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<long>(Vector128<long> src, Vector128<long> mask)
7ffdb0ab9fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<float>(Vector128<float> x, Vector128<float> y)
7ffdb0aba220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<float>(Vector128<float> src)
7ffdb0aba238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vones<float>(W128 w, float t)
7ffdb0aba430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<float>(Vector128<float> src, Vector128<float> mask)
7ffdb0aba448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<double>(Vector128<double> x, Vector128<double> y)
7ffdb0aba520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<double>(Vector128<double> src)
7ffdb0aba550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vones<double>(W128 w, double t)
7ffdb0aba730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<double>(Vector128<double> src, Vector128<double> mask)
7ffdb0aba748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<byte>(Vector256<byte> x, Vector256<byte> y)
7ffdb0aba9b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<byte>(Vector256<byte> src)
7ffdb0abaa00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<byte>(Vector256<byte> src, Vector256<byte> mask)
7ffdb0abaa30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<sbyte>(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb0abae38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<sbyte>(Vector256<sbyte> src)
7ffdb0abae68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<sbyte>(Vector256<sbyte> src, Vector256<sbyte> mask)
7ffdb0abaec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<ushort>(Vector256<ushort> x, Vector256<ushort> y)
7ffdb0abb060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<short>(Vector256<short> x, Vector256<short> y)
7ffdb0abb138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<short>(Vector256<short> src)
7ffdb0abb150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<short>(Vector256<short> src, Vector256<short> mask)
7ffdb0abbab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<uint>(Vector256<uint> x, Vector256<uint> y)
7ffdb0abbb28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<int>(Vector256<int> x, Vector256<int> y)
7ffdb0abbbd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<int>(Vector256<int> src)
7ffdb0abbbe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<int>(Vector256<int> src, Vector256<int> mask)
7ffdb0abbc00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<ulong>(Vector256<ulong> x, Vector256<ulong> y)
7ffdb0abbd68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<long>(Vector256<long> x, Vector256<long> y)
7ffdb0abbde0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<long>(Vector256<long> src)
7ffdb0abbdf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<long>(Vector256<long> src, Vector256<long> mask)
7ffdb0abbe10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<float>(Vector256<float> x, Vector256<float> y)
7ffdb0abbee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<float>(Vector256<float> src)
7ffdb0abbf00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vones<float>(W256 w, float t)
7ffdb0af0000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<float>(Vector256<float> src, Vector256<float> mask)
7ffdb0af0030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame<double>(Vector256<double> x, Vector256<double> y)
7ffdb0af00c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<double>(Vector256<double> src)
7ffdb0af0108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vones<double>(W256 w, double t)
7ffdb0af0120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<double>(Vector256<double> src, Vector256<double> mask)
7ffdb0af0138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<byte>(in Vector512<byte> src, in Vector512<byte> mask)
7ffdb0af1ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<sbyte>(in Vector512<sbyte> src, in Vector512<sbyte> mask)
7ffdb0af2058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ushort>(in Vector512<ushort> src, in Vector512<ushort> mask)
7ffdb0af2520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<short>(in Vector512<short> src, in Vector512<short> mask)
7ffdb0af2b98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<uint>(in Vector512<uint> src, in Vector512<uint> mask)
7ffdb0af3078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<int>(in Vector512<int> src, in Vector512<int> mask)
7ffdb0af3408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ulong>(in Vector512<ulong> src, in Vector512<ulong> mask)
7ffdb0af3708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<long>(in Vector512<long> src, in Vector512<long> mask)
7ffdb0af39c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<float>(in Vector512<float> src, in Vector512<float> mask)
7ffdb0af3eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<double>(in Vector512<double> src, in Vector512<double> mask)
7ffdb0af8558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<byte>(Vector128<byte> src, Vector128<byte> mask)
7ffdb0b32b38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<sbyte>(Vector128<sbyte> src, Vector128<sbyte> mask)
7ffdb0b32bc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<ushort>(Vector128<ushort> src, Vector128<ushort> mask)
7ffdb0b32c58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<short>(Vector128<short> src, Vector128<short> mask)
7ffdb0b32cb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<uint>(Vector128<uint> src, Vector128<uint> mask)
7ffdb0b32d30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<int>(Vector128<int> src, Vector128<int> mask)
7ffdb0b32d90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<ulong>(Vector128<ulong> src, Vector128<ulong> mask)
7ffdb0b32e08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<long>(Vector128<long> src, Vector128<long> mask)
7ffdb0b32e80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<float>(Vector128<float> src, Vector128<float> mask)
7ffdb0b32f10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<double>(Vector128<double> src, Vector128<double> mask)
7ffdb0b32fa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<byte>(Vector256<byte> src, Vector256<byte> mask)
7ffdb0b33018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<sbyte>(Vector256<sbyte> src, Vector256<sbyte> mask)
7ffdb0b33078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<short>(Vector256<short> src, Vector256<short> mask)
7ffdb0b33108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<int>(Vector256<int> src, Vector256<int> mask)
7ffdb0b33330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<long>(Vector256<long> src, Vector256<long> mask)
7ffdb0b334f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<float>(Vector256<float> src, Vector256<float> mask)
7ffdb0b33648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<double>(Vector256<double> src, Vector256<double> mask)
7ffdb0b33780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<byte>(in Vector512<byte> src, in Vector512<byte> mask)
7ffdb0b33888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<sbyte>(in Vector512<sbyte> src, in Vector512<sbyte> mask)
7ffdb0b33a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<ushort>(in Vector512<ushort> src, in Vector512<ushort> mask)
7ffdb0b33a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<short>(in Vector512<short> src, in Vector512<short> mask)
7ffdb0b33b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<uint>(in Vector512<uint> src, in Vector512<uint> mask)
7ffdb0b38768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<int>(in Vector512<int> src, in Vector512<int> mask)
7ffdb0b387b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<ulong>(in Vector512<ulong> src, in Vector512<ulong> mask)
7ffdb0b395a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<long>(in Vector512<long> src, in Vector512<long> mask)
7ffdb0b395c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<float>(in Vector512<float> src, in Vector512<float> mask)
7ffdb0b39698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<double>(in Vector512<double> src, in Vector512<double> mask)
7ffdb0b396e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<byte>(Vector128<byte> src, Vector128<byte> mask)
7ffdb0b3a4a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<sbyte>(Vector128<sbyte> src, Vector128<sbyte> mask)
7ffdb0b3a520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<ushort>(Vector128<ushort> src, Vector128<ushort> mask)
7ffdb0b3a5b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<short>(Vector128<short> src, Vector128<short> mask)
7ffdb0b3a640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<uint>(Vector128<uint> src, Vector128<uint> mask)
7ffdb0b3a6e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<int>(Vector128<int> src, Vector128<int> mask)
7ffdb0b3a7a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<ulong>(Vector128<ulong> src, Vector128<ulong> mask)
7ffdb0b3a820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<long>(Vector128<long> src, Vector128<long> mask)
7ffdb0b3a940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<float>(Vector128<float> src, Vector128<float> mask)
7ffdb0b3aac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<double>(Vector128<double> src, Vector128<double> mask)
7ffdb0b3abe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<byte>(Vector256<byte> src, Vector256<byte> mask)
7ffdb0b3ac58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<sbyte>(Vector256<sbyte> src, Vector256<sbyte> mask)
7ffdb0b3ad78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<ushort>(Vector256<ushort> src, Vector256<ushort> mask)
7ffdb0b3ae80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<short>(Vector256<short> src, Vector256<short> mask)
7ffdb0b3af40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<uint>(Vector256<uint> src, Vector256<uint> mask)
7ffdb0b3b030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<int>(Vector256<int> src, Vector256<int> mask)
7ffdb0b3bdc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<ulong>(Vector256<ulong> src, Vector256<ulong> mask)
7ffdb0b3bf30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<long>(Vector256<long> src, Vector256<long> mask)
7ffdb0b3bf90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<float>(Vector256<float> src, Vector256<float> mask)
7ffdb0b50090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestznc<double>(Vector256<double> src, Vector256<double> mask)
7ffdb0b50c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte vcell<byte>(Vector128<byte> src, byte index)
7ffdb0b514e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vcell<ushort>(Vector128<ushort> src, byte index)
7ffdb0b51548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vcell<uint>(Vector128<uint> src, byte index)
7ffdb0b518a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vcell<ulong>(Vector128<ulong> src, byte index)
7ffdb0b518f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vcell<byte>(Vector128<byte> src, byte index, byte value)
7ffdb0b51920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vcell<ushort>(Vector128<ushort> src, byte index, ushort value)
7ffdb0b51980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vcell<uint>(Vector128<uint> src, byte index, uint value)
7ffdb0b52568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vcell<ulong>(Vector128<ulong> src, byte index, ulong value)
7ffdb0b52d60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vcell<byte>(Vector256<byte> src, byte index, byte value)
7ffdb0b52df0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vcell<ushort>(Vector256<ushort> src, byte index, ushort value)
7ffdb0b58378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vcell<uint>(Vector256<uint> src, byte index, uint value)
7ffdb0b58558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vcell<ulong>(Vector256<ulong> src, byte index, ulong value)
7ffdb0b585a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte vcell<byte>(Vector256<byte> src, byte index)
7ffdb0b585e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vcell<ushort>(Vector256<ushort> src, byte index)
7ffdb0b58618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vcell<uint>(Vector256<uint> src, byte index)
7ffdb0b58648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vcell<ulong>(Vector256<ulong> src, byte index)
7ffdb0b58678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte vcell<byte>(Vector256<byte> src, N0 index)
7ffdb0b58690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vcell<ushort>(Vector256<ushort> src, N0 index)
7ffdb0b586c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vcell<uint>(Vector256<uint> src, N0 index)
7ffdb0b586d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vcell<ulong>(Vector256<ulong> src, N0 index)
7ffdb0b586f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte vcell<byte>(Vector256<byte> src, N1 index)
7ffdb0b58708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vcell<ushort>(Vector256<ushort> src, N1 index)
7ffdb0b58738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vcell<uint>(Vector256<uint> src, N1 index)
7ffdb0b58750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vcell<ulong>(Vector256<ulong> src, N1 index)
7ffdb0b58858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte vcell<byte>(Vector256<byte> src, N2 index)
7ffdb0b58918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vcell<ushort>(Vector256<ushort> src, N2 index)
7ffdb0b58948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vcell<uint>(Vector256<uint> src, N2 index)
7ffdb0b58960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vcell<ulong>(Vector256<ulong> src, N2 index)
7ffdb0b58978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte vcell<byte>(Vector256<byte> src, N3 index)
7ffdb0b58990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vcell<ushort>(Vector256<ushort> src, N3 index)
7ffdb0b589c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vcell<uint>(Vector256<uint> src, N3 index)
7ffdb0b589d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vcell<ulong>(Vector256<ulong> src, N3 index)
7ffdb0b589f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte vcell<byte>(Vector256<byte> src, N4 index)
7ffdb0b58fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vcell<ushort>(Vector256<ushort> src, N4 index)
7ffdb0b59638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vcell<uint>(Vector256<uint> src, N4 index)
7ffdb0b597a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vcell<ulong>(Vector256<ulong> src, N4 index)
7ffdb0b597b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vcell16<byte>(Vector128<byte> x, byte index)
7ffdb0b597d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vcell16<ushort>(Vector128<ushort> x, byte index)
7ffdb0b5a130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vcell16<uint>(Vector128<uint> x, byte index)
7ffdb0b5a6a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vcell16<ulong>(Vector128<ulong> x, byte index)
7ffdb0b5a6d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vcell16<byte>(Vector256<byte> x, byte index)
7ffdb0b5a808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vcell16<ushort>(Vector256<ushort> x, byte index)
7ffdb0b5b360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vcell16<uint>(Vector256<uint> x, byte index)
7ffdb0b5b420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vcell16<ulong>(Vector256<ulong> x, byte index)
7ffdb0b5b438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short vcell16i<byte>(Vector128<byte> x, byte index)
7ffdb0b5bd38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short vcell16i<ushort>(Vector128<ushort> x, byte index)
7ffdb0b803c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short vcell16i<uint>(Vector128<uint> x, byte index)
7ffdb0b803d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short vcell16i<ulong>(Vector128<ulong> x, byte index)
7ffdb0b80408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short vcell16i<byte>(Vector256<byte> x, byte index)
7ffdb0b80d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short vcell16i<ushort>(Vector256<ushort> x, byte index)
7ffdb0b81638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short vcell16i<uint>(Vector256<uint> x, byte index)
7ffdb0b818f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short vcell16i<ulong>(Vector256<ulong> x, byte index)
7ffdb0b81908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vcell32<byte>(Vector128<byte> x, byte index)
7ffdb0b81920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vcell32<ushort>(Vector128<ushort> x, byte index)
7ffdb0b81950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vcell32<uint>(Vector128<uint> x, byte index)
7ffdb0b81c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vcell32<ulong>(Vector128<ulong> x, byte index)
7ffdb0b82520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vcell32<byte>(Vector256<byte> x, byte index)
7ffdb0b828b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vcell32<ushort>(Vector256<ushort> x, byte index)
7ffdb0b82a60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vcell32<uint>(Vector256<uint> x, byte index)
7ffdb0b82a78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vcell32<ulong>(Vector256<ulong> x, byte index)
7ffdb0b82a90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcell32i<byte>(Vector128<byte> x, byte index)
7ffdb0b83390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcell32i<ushort>(Vector128<ushort> x, byte index)
7ffdb0b83750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcell32i<uint>(Vector128<uint> x, byte index)
7ffdb0b83768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcell32i<ulong>(Vector128<ulong> x, byte index)
7ffdb0b83780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float vcell32f<byte>(Vector128<byte> x, byte index)
7ffdb0b83a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float vcell32f<ushort>(Vector128<ushort> x, byte index)
7ffdb0b88618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float vcell32f<uint>(Vector128<uint> x, byte index)
7ffdb0b886f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float vcell32f<ulong>(Vector128<ulong> x, byte index)
7ffdb0b88708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcell32i<byte>(Vector256<byte> x, byte index)
7ffdb0b88720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcell32i<ushort>(Vector256<ushort> x, byte index)
7ffdb0b887b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcell32i<uint>(Vector256<uint> x, byte index)
7ffdb0b88810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcell32i<ulong>(Vector256<ulong> x, byte index)
7ffdb0b88870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float vcell32f<byte>(Vector256<byte> x, byte index)
7ffdb0b888d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float vcell32f<ushort>(Vector256<ushort> x, byte index)
7ffdb0b88930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float vcell32f<uint>(Vector256<uint> x, byte index)
7ffdb0b889c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float vcell32f<ulong>(Vector256<ulong> x, byte index)
7ffdb0b889d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vcell64<byte>(Vector128<byte> x, byte index)
7ffdb0b88a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vcell64<ushort>(Vector128<ushort> x, byte index)
7ffdb0b88a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vcell64<uint>(Vector128<uint> x, byte index)
7ffdb0b88bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vcell64<ulong>(Vector128<ulong> x, byte index)
7ffdb0b88c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vcell64<byte>(Vector256<byte> x, byte index)
7ffdb0b88c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vcell64<ushort>(Vector256<ushort> x, byte index)
7ffdb0b88c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vcell64<uint>(Vector256<uint> x, byte index)
7ffdb0b88c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vcell64<ulong>(Vector256<ulong> x, byte index)
7ffdb0b88c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long vcell64i<byte>(Vector128<byte> x, byte index)
7ffdb0b88cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long vcell64i<ushort>(Vector128<ushort> x, byte index)
7ffdb0b88f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long vcell64i<uint>(Vector128<uint> x, byte index)
7ffdb0b88f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long vcell64i<ulong>(Vector128<ulong> x, byte index)
7ffdb0b88f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long vcell64i<byte>(Vector256<byte> x, byte index)
7ffdb0b88f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long vcell64i<ushort>(Vector256<ushort> x, byte index)
7ffdb0b88fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long vcell64i<uint>(Vector256<uint> x, byte index)
7ffdb0b88ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long vcell64i<ulong>(Vector256<ulong> x, byte index)
7ffdb0b89008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double vcell64f<byte>(Vector128<byte> x, byte index)
7ffdb0b89020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double vcell64f<ushort>(Vector128<ushort> x, byte index)
7ffdb0b89068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double vcell64f<uint>(Vector128<uint> x, byte index)
7ffdb0b89080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double vcell64f<ulong>(Vector128<ulong> x, byte index)
7ffdb0b89098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double vcell64f<byte>(Vector256<byte> x, byte index)
7ffdb0b890e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double vcell64f<ushort>(Vector256<ushort> x, byte index)
7ffdb0b89410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double vcell64f<uint>(Vector256<uint> x, byte index)
7ffdb0b89440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double vcell64f<ulong>(Vector256<ulong> x, byte index)
7ffdb0b89500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte vcell8<byte>(Vector128<byte> x, byte index)
7ffdb0b89698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte vcell8<ushort>(Vector128<ushort> x, byte index)
7ffdb0b89998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte vcell8<uint>(Vector128<uint> x, byte index)
7ffdb0b89a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte vcell8<ulong>(Vector128<ulong> x, byte index)
7ffdb0b89d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte vcell8<byte>(Vector256<byte> x, byte index)
7ffdb0b89de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte vcell8<ushort>(Vector256<ushort> x, byte index)
7ffdb0b8a0b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte vcell8<uint>(Vector256<uint> x, byte index)
7ffdb0b8a130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte vcell8<ulong>(Vector256<ulong> x, byte index)
7ffdb0b8a460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte vcell8i<byte>(Vector128<byte> x, byte index)
7ffdb0b8a4d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte vcell8i<ushort>(Vector128<ushort> x, byte index)
7ffdb0b8a568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte vcell8i<uint>(Vector128<uint> x, byte index)
7ffdb0b8a580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte vcell8i<ulong>(Vector128<ulong> x, byte index)
7ffdb0b8a598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte vcell8i<byte>(Vector256<byte> x, byte index)
7ffdb0b8a628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte vcell8i<ushort>(Vector256<ushort> x, byte index)
7ffdb0b8a670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte vcell8i<uint>(Vector256<uint> x, byte index)
7ffdb0b8a8f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte vcell8i<ulong>(Vector256<ulong> x, byte index)
7ffdb0b8b570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vcellref<byte>(in Vector128<byte> src, byte index)
7ffdb0b8b930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vcellref<ushort>(in Vector128<ushort> src, byte index)
7ffdb0b8b9a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vcellref<uint>(in Vector128<uint> src, byte index)
7ffdb0b8bae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vcellref<ulong>(in Vector128<ulong> src, byte index)
7ffdb0b8bb40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vcellref<byte>(in Vector256<byte> src, byte index)
7ffdb0b8bb88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vcellref<ushort>(in Vector256<ushort> src, byte index)
7ffdb0b8bc48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vcellref<uint>(in Vector256<uint> src, byte index)
7ffdb0b8bc90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vcellref<ulong>(in Vector256<ulong> src, byte index)
7ffdb0b8bcf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vcellref<byte>(in Vector512<byte> src, byte index)
7ffdb0b8bd20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vcellref<ushort>(in Vector512<ushort> src, byte index)
7ffdb0b8bd98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vcellref<uint>(in Vector512<uint> src, byte index)
7ffdb0b8bdf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vcellref<ulong>(in Vector512<ulong> src, byte index)
7ffdb0ba0108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vhi<byte>(Vector128<byte> src)
7ffdb0ba0210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vhi<sbyte>(Vector128<sbyte> src)
7ffdb0ba02b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vhi<ushort>(Vector128<ushort> src)
7ffdb0ba0378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vhi<short>(Vector128<short> src)
7ffdb0ba0420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vhi<uint>(Vector128<uint> src)
7ffdb0ba0468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vhi<int>(Vector128<int> src)
7ffdb0ba0540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vhi<ulong>(Vector128<ulong> src)
7ffdb0ba0570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vhi<long>(Vector128<long> src)
7ffdb0ba0618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vhi<float>(Vector128<float> src)
7ffdb0ba0690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vhi<double>(Vector128<double> src)
7ffdb0ba0ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vhi<byte>(Vector256<byte> src, out ulong x0, out ulong x1)
7ffdb0ba1158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vhi<sbyte>(Vector256<sbyte> src, out ulong x0, out ulong x1)
7ffdb0ba1230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vhi<ushort>(Vector256<ushort> src, out ulong x0, out ulong x1)
7ffdb0ba1260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vhi<short>(Vector256<short> src, out ulong x0, out ulong x1)
7ffdb0ba1308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vhi<uint>(Vector256<uint> src, out ulong x0, out ulong x1)
7ffdb0ba1338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vhi<int>(Vector256<int> src, out ulong x0, out ulong x1)
7ffdb0ba13e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vhi<ulong>(Vector256<ulong> src, out ulong x0, out ulong x1)
7ffdb0ba13f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vhi<long>(Vector256<long> src, out ulong x0, out ulong x1)
7ffdb0ba1440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vhi<float>(Vector256<float> src, out ulong x0, out ulong x1)
7ffdb0ba1530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vhi<double>(Vector256<double> src, out ulong x0, out ulong x1)
7ffdb0ba15f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vhi64<byte>(Vector128<byte> src)
7ffdb0ba1620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vhi64<ushort>(Vector128<ushort> src)
7ffdb0ba16c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vhi64<uint>(Vector128<uint> src)
7ffdb0ba16f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vhi64<ulong>(Vector128<ulong> src)
7ffdb0ba1788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlo<byte>(Vector128<byte> src)
7ffdb0ba17d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vzhi<ulong>(Vector128<ulong> src)
7ffdb0ba1800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vlo<sbyte>(Vector128<sbyte> src)
7ffdb0ba18d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlo<ushort>(Vector128<ushort> src)
7ffdb0ba1950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vlo<short>(Vector128<short> src)
7ffdb0ba19c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlo<uint>(Vector128<uint> src)
7ffdb0ba1a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vlo<int>(Vector128<int> src)
7ffdb0ba1a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlo<ulong>(Vector128<ulong> src)
7ffdb0ba1a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vlo<long>(Vector128<long> src)
7ffdb0ba1aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vlo<float>(Vector128<float> src)
7ffdb0ba1ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vlo<double>(Vector128<double> src)
7ffdb0ba1b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vlo<byte>(Vector256<byte> src, out ulong x0, out ulong x1)
7ffdb0ba1bd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vlo<sbyte>(Vector256<sbyte> src, out ulong x0, out ulong x1)
7ffdb0ba23e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vlo<ushort>(Vector256<ushort> src, out ulong x0, out ulong x1)
7ffdb0ba2598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vlo<short>(Vector256<short> src, out ulong x0, out ulong x1)
7ffdb0ba2688h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vlo<uint>(Vector256<uint> src, out ulong x0, out ulong x1)
7ffdb0ba26a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vlo<int>(Vector256<int> src, out ulong x0, out ulong x1)
7ffdb0ba26b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vlo<ulong>(Vector256<ulong> src, out ulong x0, out ulong x1)
7ffdb0ba27a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vlo<long>(Vector256<long> src, out ulong x0, out ulong x1)
7ffdb0ba27c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vlo<float>(Vector256<float> src, out ulong x0, out ulong x1)
7ffdb0ba2898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vlo<double>(Vector256<double> src, out ulong x0, out ulong x1)
7ffdb0ba28c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vlo64<byte>(Vector128<byte> src)
7ffdb0ba3f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vlo64<ushort>(Vector128<ushort> src)
7ffdb0ba3fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vlo64<uint>(Vector128<uint> src)
7ffdb0ba8000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vlo64<ulong>(Vector128<ulong> src)
7ffdb0ba8018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vzhi<byte>(Vector128<byte> src)
7ffdb0ba80a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vzhi<sbyte>(Vector128<sbyte> src)
7ffdb0ba80c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vzhi<ushort>(Vector128<ushort> src)
7ffdb0ba8108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vzhi<short>(Vector128<short> src)
7ffdb0ba8498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vzhi<uint>(Vector128<uint> src)
7ffdb0ba84c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vzhi<int>(Vector128<int> src)
7ffdb0ba84f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vzhi<long>(Vector128<long> src)
7ffdb0ba88a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vzhi<float>(Vector128<float> src)
7ffdb0ba88d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vzhi<double>(Vector128<double> src)
7ffdb0ba8900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> videntity<byte>(Vector128<byte> a)
7ffdb0ba8930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> videntity<sbyte>(Vector128<sbyte> a)
7ffdb0ba8c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> videntity<ushort>(Vector128<ushort> a)
7ffdb0ba8cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> videntity<short>(Vector128<short> a)
7ffdb0ba8cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> videntity<uint>(Vector128<uint> a)
7ffdb0ba8d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> videntity<int>(Vector128<int> a)
7ffdb0ba8d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> videntity<long>(Vector128<long> a)
7ffdb0ba8d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> videntity<byte>(Vector256<byte> a)
7ffdb0ba8d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> videntity<sbyte>(Vector256<sbyte> a)
7ffdb0ba8db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> videntity<ushort>(Vector256<ushort> a)
7ffdb0ba8de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> videntity<short>(Vector256<short> a)
7ffdb0ba8df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> videntity<uint>(Vector256<uint> a)
7ffdb0ba8e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> videntity<int>(Vector256<int> a)
7ffdb0ba8e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> videntity<long>(Vector256<long> a)
7ffdb0ba8e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vsll<byte>(Vector128<byte> x, Vector128<byte> offset)
7ffdb0ba9ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsll<sbyte>(Vector128<sbyte> x, Vector128<sbyte> offset)
7ffdb0ba9c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsll<ushort>(Vector128<ushort> x, Vector128<ushort> offset)
7ffdb0ba9cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsll<short>(Vector128<short> x, Vector128<short> offset)
7ffdb0ba9da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vsll<uint>(Vector128<uint> x, Vector128<uint> offset)
7ffdb0ba9e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsll<int>(Vector128<int> x, Vector128<int> offset)
7ffdb0ba9f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vsll<ulong>(Vector128<ulong> x, Vector128<ulong> offset)
7ffdb0baa040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vsll<long>(Vector128<long> x, Vector128<long> offset)
7ffdb0baa0e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vsll<byte>(Vector256<byte> x, Vector256<byte> offset)
7ffdb0baa1a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsll<sbyte>(Vector256<sbyte> x, Vector256<sbyte> offset)
7ffdb0baabe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsll<ushort>(Vector256<ushort> x, Vector256<ushort> offset)
7ffdb0baad18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsll<short>(Vector256<short> x, Vector256<short> offset)
7ffdb0baadf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vsll<uint>(Vector256<uint> x, Vector256<uint> offset)
7ffdb0baaee0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsll<int>(Vector256<int> x, Vector256<int> offset)
7ffdb0baafb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vsll<ulong>(Vector256<ulong> x, Vector256<ulong> offset)
7ffdb0bab108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vsll<long>(Vector256<long> x, Vector256<long> offset)
7ffdb0bab270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vsll<byte>(Vector128<byte> x, byte offset)
7ffdb0bab378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsll<sbyte>(Vector128<sbyte> x, sbyte offset)
7ffdb0bab438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsll<ushort>(Vector128<ushort> x, ushort offset)
7ffdb0bab4f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsll<short>(Vector128<short> x, short offset)
7ffdb0bab750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vsll<uint>(Vector128<uint> x, uint offset)
7ffdb0babab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsll<int>(Vector128<int> x, int offset)
7ffdb0be0030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vsll<ulong>(Vector128<ulong> x, ulong offset)
7ffdb0be0120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vsll<long>(Vector128<long> x, long offset)
7ffdb0be04e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vsll<byte>(Vector256<byte> x, byte offset)
7ffdb0be05d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsll<sbyte>(Vector256<sbyte> x, sbyte offset)
7ffdb0be09f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsll<ushort>(Vector256<ushort> x, ushort offset)
7ffdb0be0e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsll<short>(Vector256<short> x, short offset)
7ffdb0be0eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vsll<uint>(Vector256<uint> x, uint offset)
7ffdb0be1080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsll<int>(Vector256<int> x, int offset)
7ffdb0be1140h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vsll<ulong>(Vector256<ulong> x, ulong offset)
7ffdb0be12c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vsll<long>(Vector256<long> x, long offset)
7ffdb0be1368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vsllv<byte>(Vector128<byte> x, Vector128<byte> counts)
7ffdb0be1458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsllv<sbyte>(Vector128<sbyte> x, Vector128<sbyte> counts)
7ffdb0be1710h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsllv<ushort>(Vector128<ushort> x, Vector128<ushort> counts)
7ffdb0be2100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsllv<short>(Vector128<short> x, Vector128<short> counts)
7ffdb0be2730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vsllv<uint>(Vector128<uint> x, Vector128<uint> counts)
7ffdb0be28f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsllv<int>(Vector128<int> x, Vector128<int> counts)
7ffdb0be2d60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vsllv<ulong>(Vector128<ulong> x, Vector128<ulong> counts)
7ffdb0be2dd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vsllv<long>(Vector128<long> x, Vector128<long> counts)
7ffdb0be3210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsllv<sbyte>(Vector256<sbyte> x, Vector256<sbyte> counts)
7ffdb0be82b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsllv<short>(Vector256<short> x, Vector256<short> counts)
7ffdb0be9890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsllv<int>(Vector256<int> x, Vector256<int> counts)
7ffdb0be99f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vsllv<long>(Vector256<long> x, Vector256<long> counts)
7ffdb0be9ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vsrl<byte>(Vector128<byte> x, byte count)
7ffdb0be9ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsrl<sbyte>(Vector128<sbyte> x, sbyte count)
7ffdb0be9cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsrl<ushort>(Vector128<ushort> x, ushort count)
7ffdb0be9d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsrl<short>(Vector128<short> x, short count)
7ffdb0be9e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vsrl<uint>(Vector128<uint> x, uint count)
7ffdb0be9ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsrl<int>(Vector128<int> x, int count)
7ffdb0be9f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vsrl<ulong>(Vector128<ulong> x, ulong count)
7ffdb0bea028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vsrl<long>(Vector128<long> x, long count)
7ffdb0bea0d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vsrl<byte>(Vector256<byte> x, byte count)
7ffdb0bea178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsrl<sbyte>(Vector256<sbyte> x, sbyte count)
7ffdb0bea298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsrl<ushort>(Vector256<ushort> x, ushort count)
7ffdb0bea388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsrl<short>(Vector256<short> x, short count)
7ffdb0bea448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vsrl<uint>(Vector256<uint> x, uint count)
7ffdb0bea538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsrl<int>(Vector256<int> x, int count)
7ffdb0bea5e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vsrl<ulong>(Vector256<ulong> x, ulong count)
7ffdb0bea688h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vsrl<long>(Vector256<long> x, long count)
7ffdb0bea730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vsrl<byte>(Vector128<byte> x, Vector128<byte> count)
7ffdb0bea838h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsrl<sbyte>(Vector128<sbyte> x, Vector128<sbyte> count)
7ffdb0bea8c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsrl<ushort>(Vector128<ushort> x, Vector128<ushort> count)
7ffdb0bea970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsrl<short>(Vector128<short> x, Vector128<short> count)
7ffdb0bea9e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vsrl<uint>(Vector128<uint> x, Vector128<uint> count)
7ffdb0beaa78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsrl<int>(Vector128<int> x, Vector128<int> count)
7ffdb0beaaf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vsrl<ulong>(Vector128<ulong> x, Vector128<ulong> count)
7ffdb0beab68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vsrl<long>(Vector128<long> x, Vector128<long> count)
7ffdb0beac70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vsrl<byte>(Vector256<byte> x, Vector256<byte> count)
7ffdb0beae98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsrl<sbyte>(Vector256<sbyte> x, Vector256<sbyte> count)
7ffdb0beb048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsrl<ushort>(Vector256<ushort> x, Vector256<ushort> count)
7ffdb0beb1b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsrl<short>(Vector256<short> x, Vector256<short> count)
7ffdb0beb258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vsrl<uint>(Vector256<uint> x, Vector256<uint> count)
7ffdb0beb390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsrl<int>(Vector256<int> x, Vector256<int> count)
7ffdb0beb588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vsrl<ulong>(Vector256<ulong> x, Vector256<ulong> count)
7ffdb0beb708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vsrl<long>(Vector256<long> x, Vector256<long> count)
7ffdb0beb8a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vsrlv<byte>(Vector128<byte> x, Vector128<byte> counts)
7ffdb0beba50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsrlv<sbyte>(Vector128<sbyte> x, Vector128<sbyte> counts)
7ffdb0bebd68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsrlv<ushort>(Vector128<ushort> x, Vector128<ushort> counts)
7ffdb0bebfd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsrlv<short>(Vector128<short> x, Vector128<short> counts)
7ffdb0c10108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vsrlv<uint>(Vector128<uint> x, Vector128<uint> counts)
7ffdb0c102d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsrlv<int>(Vector128<int> x, Vector128<int> counts)
7ffdb0c10348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vsrlv<ulong>(Vector128<ulong> x, Vector128<ulong> counts)
7ffdb0c10468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vsrlv<long>(Vector128<long> x, Vector128<long> counts)
7ffdb0c10510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsrlv<sbyte>(Vector256<sbyte> x, Vector256<sbyte> counts)
7ffdb0c10858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsrlv<short>(Vector256<short> x, Vector256<short> counts)
7ffdb0c10b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsrlv<int>(Vector256<int> x, Vector256<int> counts)
7ffdb0c10d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vsrlv<long>(Vector256<long> x, Vector256<long> counts)
7ffdb0c10e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vload<byte>(W512 n, ReadOnlySpan<byte> src)
7ffdb0c10ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vload<ushort>(W512 n, ReadOnlySpan<byte> src)
7ffdb0c11038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vload<uint>(W512 n, ReadOnlySpan<byte> src)
7ffdb0c11068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vload<ulong>(W512 n, ReadOnlySpan<byte> src)
7ffdb0c11080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vload<byte>(W128 w, byte* pSrc)
7ffdb0c11098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vload<ushort>(W128 w, ushort* pSrc)
7ffdb0c110c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vload<uint>(W128 w, uint* pSrc)
7ffdb0c110e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vload<ulong>(W128 w, ulong* pSrc)
7ffdb0c110f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vload<byte>(W256 w, byte* pSrc)
7ffdb0c11158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vload<ushort>(W256 w, ushort* pSrc)
7ffdb0c111b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vload<uint>(W256 w, uint* pSrc)
7ffdb0c111e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vload<ulong>(W256 w, ulong* pSrc)
7ffdb0c11200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vload<byte>(W512 w, byte* pSrc)
7ffdb0c11218h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vload<byte>(byte* pSrc, out Vector512<byte> dst)
7ffdb0c11230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vload<ushort>(W512 w, ushort* pSrc)
7ffdb0c112c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vload<ushort>(ushort* pSrc, out Vector512<ushort> dst)
7ffdb0c112d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vload<uint>(W512 w, uint* pSrc)
7ffdb0c11308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vload<uint>(uint* pSrc, out Vector512<uint> dst)
7ffdb0c11320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vload<ulong>(W512 w, ulong* pSrc)
7ffdb0c11350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vload<ulong>(ulong* pSrc, out Vector512<ulong> dst)
7ffdb0c11368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vload<ushort>(W128 w, in ushort src)
7ffdb0c113f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vload<uint>(W128 w, in uint src)
7ffdb0c11410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vload<ulong>(W128 w, in ulong src)
7ffdb0c11428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vload<byte>(W512 w, in byte src)
7ffdb0c114e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vload<ushort>(W512 w, in ushort src)
7ffdb0c115a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vload<uint>(W512 w, in uint src)
7ffdb0c11638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vload<ulong>(W512 w, in ulong src)
7ffdb0c116c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vload<byte>(W128 w, in byte src, int offset)
7ffdb0c116e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vload<ushort>(W128 w, in ushort src, int offset)
7ffdb0c11740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vload<uint>(W128 w, in uint src, int offset)
7ffdb0c11758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vload<ulong>(W128 w, in ulong src, int offset)
7ffdb0c11788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vload<byte>(W256 w, in byte src, int offset)
7ffdb0c117b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vload<ushort>(W256 w, in ushort src, int offset)
7ffdb0c11800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vload<uint>(W256 w, in uint src, int offset)
7ffdb0c11818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vload<ulong>(W256 w, in ulong src, int offset)
7ffdb0c11848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vload<byte>(W512 w, in byte src, int offset)
7ffdb0c11878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vload<ushort>(W512 w, in ushort src, int offset)
7ffdb0c118f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vload<uint>(W512 w, in uint src, int offset)
7ffdb0c11920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vload<ulong>(W512 w, in ulong src, int offset)
7ffdb0c11968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vload<byte>(in byte src, out Vector256<byte> dst)
7ffdb0c11a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vload<byte>(in byte src, out Vector512<byte> dst)
7ffdb0c11ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vload<ushort>(in ushort src, out Vector512<ushort> dst)
7ffdb0c11b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vload<uint>(in uint src, out Vector512<uint> dst)
7ffdb0c11b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vload<ulong>(in ulong src, out Vector512<ulong> dst)
7ffdb0c11bd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vload<ushort>(W128 w, Span<ushort> src)
7ffdb0c11cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vload<uint>(W128 w, Span<uint> src)
7ffdb0c11da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vload<ulong>(W128 w, Span<ulong> src)
7ffdb0c11e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vload<byte>(W128 w, ReadOnlySpan<byte> src)
7ffdb0c11e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vload<ushort>(W128 w, ReadOnlySpan<ushort> src)
7ffdb0c11f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vload<uint>(W128 w, ReadOnlySpan<uint> src)
7ffdb0c12010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vload<ulong>(W128 w, ReadOnlySpan<ulong> src)
7ffdb0c12070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vload<byte>(W256 w, Span<byte> src)
7ffdb0c120a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vload<byte>(W512 w, Span<byte> src)
7ffdb0c121f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vload<ushort>(W512 w, Span<ushort> src)
7ffdb0c12328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vload<uint>(W512 w, Span<uint> src)
7ffdb0c123a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vload<ulong>(W512 w, Span<ulong> src)
7ffdb0c123d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vload<byte>(W128 w, Span<byte> src, int offset)
7ffdb0c124d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vload<ushort>(W128 w, Span<ushort> src, int offset)
7ffdb0c12568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vload<uint>(W128 w, Span<uint> src, int offset)
7ffdb0c12598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vload<ulong>(W128 w, Span<ulong> src, int offset)
7ffdb0c12628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vload<byte>(W256 w, Span<byte> src, int offset)
7ffdb0c126d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vload<ushort>(W256 w, Span<ushort> src, int offset)
7ffdb0c12760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vload<uint>(W256 w, Span<uint> src, int offset)
7ffdb0c12778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vload<ulong>(W256 w, Span<ulong> src, int offset)
7ffdb0c12820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vload<byte>(N512 w, Span<byte> src, int offset)
7ffdb0c12880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vload<ushort>(N512 w, Span<ushort> src, int offset)
7ffdb0c128f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vload<uint>(N512 w, Span<uint> src, int offset)
7ffdb0c129b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vload<ulong>(N512 w, Span<ulong> src, int offset)
7ffdb0c12a48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vload<byte>(N256 w, ReadOnlySpan<byte> src)
7ffdb0c12a60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vload<ushort>(N256 w, ReadOnlySpan<ushort> src)
7ffdb0c12b80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vload<uint>(N256 w, ReadOnlySpan<uint> src)
7ffdb0c12be0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vload<ulong>(N256 w, ReadOnlySpan<ulong> src)
7ffdb0c12c10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vload<byte>(N512 w, ReadOnlySpan<byte> src)
7ffdb0c12c28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vload<ushort>(N512 w, ReadOnlySpan<ushort> src)
7ffdb0c12c88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vload<uint>(N512 w, ReadOnlySpan<uint> src)
7ffdb0c12d00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vload<ulong>(N512 w, ReadOnlySpan<ulong> src)
7ffdb0c12d18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vload<byte>(N128 w, ReadOnlySpan<byte> src, int offset)
7ffdb0c12d30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vload<ushort>(N128 w, ReadOnlySpan<ushort> src, int offset)
7ffdb0c12d78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vload<uint>(N128 w, ReadOnlySpan<uint> src, int offset)
7ffdb0c12d90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vload<ulong>(N128 w, ReadOnlySpan<ulong> src, int offset)
7ffdb0c12da8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vload<byte>(N256 w, ReadOnlySpan<byte> src, int offset)
7ffdb0c12dd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vload<ushort>(N256 w, ReadOnlySpan<ushort> src, int offset)
7ffdb0c12e20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vload<uint>(N256 w, ReadOnlySpan<uint> src, int offset)
7ffdb0c12e38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vload<ulong>(N256 w, ReadOnlySpan<ulong> src, int offset)
7ffdb0c12e50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vload<byte>(N512 w, ReadOnlySpan<byte> src, int offset)
7ffdb0c12e68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vload<ushort>(N512 w, ReadOnlySpan<ushort> src, int offset)
7ffdb0c12eb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vload<uint>(N512 w, ReadOnlySpan<uint> src, int offset)
7ffdb0c12ec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vload<ulong>(N512 w, ReadOnlySpan<ulong> src, int offset)
7ffdb0c12ee0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<byte> cover<byte>(byte src, int count)
7ffdb0c12ef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<ushort> cover<ushort>(ushort src, int count)
7ffdb0c12f40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<uint> cover<uint>(uint src, int count)
7ffdb0c12f58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<ulong> cover<ulong>(ulong src, int count)
7ffdb0c12f70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<byte> vspan<byte>(Vector128<byte> src)
7ffdb0c12f88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<byte>(Vector128<byte> src, ref byte dst)
7ffdb0c12fd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<ushort> vspan<ushort>(Vector128<ushort> src)
7ffdb0c130a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ushort>(Vector128<ushort> src, ref ushort dst)
7ffdb0c130c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<uint> vspan<uint>(Vector128<uint> src)
7ffdb0c13138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<uint>(Vector128<uint> src, ref uint dst)
7ffdb0c13150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<ulong> vspan<ulong>(Vector128<ulong> src)
7ffdb0c131c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ulong>(Vector128<ulong> src, ref ulong dst)
7ffdb0c131e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<byte> vspan<byte>(Vector256<byte> src)
7ffdb0c13258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<ushort> vspan<ushort>(Vector256<ushort> src)
7ffdb0c132e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<uint> vspan<uint>(Vector256<uint> src)
7ffdb0c13300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<ulong> vspan<ulong>(Vector256<ulong> src)
7ffdb0c13318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<byte>(Vector128<byte> src, ref byte dst, int offset)
7ffdb0c13330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<sbyte>(Vector128<sbyte> src, ref sbyte dst, int offset)
7ffdb0c133a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ushort>(Vector128<ushort> src, ref ushort dst, int offset)
7ffdb0c13420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<short>(Vector128<short> src, ref short dst, int offset)
7ffdb0c13480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<uint>(Vector128<uint> src, ref uint dst, int offset)
7ffdb0c134e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<int>(Vector128<int> src, ref int dst, int offset)
7ffdb0c13540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ulong>(Vector128<ulong> src, ref ulong dst, int offset)
7ffdb0c135a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<long>(Vector128<long> src, ref long dst, int offset)
7ffdb0c13600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<float>(Vector128<float> src, ref float dst, int offset)
7ffdb0c13660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<double>(Vector128<double> src, ref double dst, int offset)
7ffdb0c136d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<byte>(Vector256<byte> src, ref byte dst, int offset)
7ffdb0c13738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<sbyte>(Vector256<sbyte> src, ref sbyte dst, int offset)
7ffdb0c13798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ushort>(Vector256<ushort> src, ref ushort dst, int offset)
7ffdb0c13810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<short>(Vector256<short> src, ref short dst, int offset)
7ffdb0c13870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<int>(Vector256<int> src, ref int dst, int offset)
7ffdb0c138d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ulong>(Vector256<ulong> src, ref ulong dst, int offset)
7ffdb0c13930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<long>(Vector256<long> src, ref long dst, int offset)
7ffdb0c13990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<float>(Vector256<float> src, ref float dst, int offset)
7ffdb0c139f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<double>(Vector256<double> src, ref double dst, int offset)
7ffdb0c13a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<byte>(Vector128<byte> src, Span<byte> dst)
7ffdb0c13ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ushort>(Vector128<ushort> src, Span<ushort> dst)
7ffdb0c13b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<uint>(Vector128<uint> src, Span<uint> dst)
7ffdb0c13b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ulong>(Vector128<ulong> src, Span<ulong> dst)
7ffdb0c13b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<byte>(Vector256<byte> src, Span<byte> dst)
7ffdb0c13b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ushort>(Vector256<ushort> src, Span<ushort> dst)
7ffdb0c13ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<uint>(Vector256<uint> src, Span<uint> dst)
7ffdb0c13bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ulong>(Vector256<ulong> src, Span<ulong> dst)
7ffdb0c13bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<byte>(Vector128<byte> src, Span<byte> dst, int offset)
7ffdb0c13be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ushort>(Vector128<ushort> src, Span<ushort> dst, int offset)
7ffdb0c13c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<uint>(Vector128<uint> src, Span<uint> dst, int offset)
7ffdb0c13ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ulong>(Vector128<ulong> src, Span<ulong> dst, int offset)
7ffdb0c13cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<byte>(Vector256<byte> src, Span<byte> dst, int offset)
7ffdb0c13d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ushort>(Vector256<ushort> src, Span<ushort> dst, int offset)
7ffdb0c13db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<uint>(Vector256<uint> src, Span<uint> dst, int offset)
7ffdb0c13df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ulong>(Vector256<ulong> src, Span<ulong> dst, int offset)
7ffdb0c13e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<sbyte>(Vector128<sbyte> src, ref sbyte dst)
7ffdb0c13e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<short>(Vector128<short> src, ref short dst)
7ffdb0c13f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<int>(Vector128<int> src, ref int dst)
7ffdb0c13f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<long>(Vector128<long> src, ref long dst)
7ffdb0c18030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<float>(Vector128<float> src, ref float dst)
7ffdb0c180c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<double>(Vector128<double> src, ref double dst)
7ffdb0c18168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<sbyte>(Vector256<sbyte> src, ref sbyte dst)
7ffdb0c181f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<short>(Vector256<short> src, ref short dst)
7ffdb0c182a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<int>(Vector256<int> src, ref int dst)
7ffdb0c18330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<long>(Vector256<long> src, ref long dst)
7ffdb0c183c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<float>(Vector256<float> src, ref float dst)
7ffdb0c18450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<double>(Vector256<double> src, ref double dst)
7ffdb0c184f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<byte>(Vector128<byte> src, ref Cell128 dst)
7ffdb0c18588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<sbyte>(Vector128<sbyte> src, ref Cell128 dst)
7ffdb0c18648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ushort>(Vector128<ushort> src, ref Cell128 dst)
7ffdb0c186a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<short>(Vector128<short> src, ref Cell128 dst)
7ffdb0c18708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<uint>(Vector128<uint> src, ref Cell128 dst)
7ffdb0c18768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<int>(Vector128<int> src, ref Cell128 dst)
7ffdb0c187c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ulong>(Vector128<ulong> src, ref Cell128 dst)
7ffdb0c18828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<long>(Vector128<long> src, ref Cell128 dst)
7ffdb0c18888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<float>(Vector128<float> src, ref Cell128 dst)
7ffdb0c188e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<double>(Vector128<double> src, ref Cell128 dst)
7ffdb0c18948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<byte>(Vector256<byte> src, ref Cell256 dst)
7ffdb0c189a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<sbyte>(Vector256<sbyte> src, ref Cell256 dst)
7ffdb0c18a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ushort>(Vector256<ushort> src, ref Cell256 dst)
7ffdb0c18ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<short>(Vector256<short> src, ref Cell256 dst)
7ffdb0c18b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<uint>(Vector256<uint> src, ref Cell256 dst)
7ffdb0c18ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<int>(Vector256<int> src, ref Cell256 dst)
7ffdb0c18c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<ulong>(Vector256<ulong> src, ref Cell256 dst)
7ffdb0c18c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<long>(Vector256<long> src, ref Cell256 dst)
7ffdb0c18cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<float>(Vector256<float> src, ref Cell256 dst)
7ffdb0c18d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore<double>(Vector256<double> src, ref Cell256 dst)
7ffdb0c18d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<byte> vcover<byte>(W128 w, ref byte src)
7ffdb0c18de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<sbyte> vcover<sbyte>(W128 w, ref byte src)
7ffdb0c18e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ushort> vcover<ushort>(W128 w, ref byte src)
7ffdb0c18ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<short> vcover<short>(W128 w, ref byte src)
7ffdb0c18f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<uint> vcover<uint>(W128 w, ref byte src)
7ffdb0c18f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<int> vcover<int>(W128 w, ref byte src)
7ffdb0c18ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ulong> vcover<ulong>(W128 w, ref byte src)
7ffdb0c19050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<long> vcover<long>(W128 w, ref byte src)
7ffdb0c190b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<float> vcover<float>(W128 w, ref byte src)
7ffdb0c19110h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<double> vcover<double>(W128 w, ref byte src)
7ffdb0c19170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<byte> vcover<byte>(W128 w, ref sbyte src)
7ffdb0c191d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<sbyte> vcover<sbyte>(W128 w, ref sbyte src)
7ffdb0c19248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ushort> vcover<ushort>(W128 w, ref sbyte src)
7ffdb0c192a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<short> vcover<short>(W128 w, ref sbyte src)
7ffdb0c19308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<uint> vcover<uint>(W128 w, ref sbyte src)
7ffdb0c19368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<int> vcover<int>(W128 w, ref sbyte src)
7ffdb0c193c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ulong> vcover<ulong>(W128 w, ref sbyte src)
7ffdb0c19428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<long> vcover<long>(W128 w, ref sbyte src)
7ffdb0c19488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<float> vcover<float>(W128 w, ref sbyte src)
7ffdb0c194e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<double> vcover<double>(W128 w, ref sbyte src)
7ffdb0c19548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<byte> vcover<byte>(W128 w, ref short src)
7ffdb0c195a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<sbyte> vcover<sbyte>(W128 w, ref short src)
7ffdb0c19620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ushort> vcover<ushort>(W128 w, ref short src)
7ffdb0c19680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<short> vcover<short>(W128 w, ref short src)
7ffdb0c196e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<uint> vcover<uint>(W128 w, ref short src)
7ffdb0c19740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<int> vcover<int>(W128 w, ref short src)
7ffdb0c197a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ulong> vcover<ulong>(W128 w, ref short src)
7ffdb0c19800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<long> vcover<long>(W128 w, ref short src)
7ffdb0c19860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<float> vcover<float>(W128 w, ref short src)
7ffdb0c198c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<double> vcover<double>(W128 w, ref short src)
7ffdb0c19920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<byte> vcover<byte>(W128 w, ref ushort src)
7ffdb0c19980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<sbyte> vcover<sbyte>(W128 w, ref ushort src)
7ffdb0c199f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ushort> vcover<ushort>(W128 w, ref ushort src)
7ffdb0c19a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<short> vcover<short>(W128 w, ref ushort src)
7ffdb0c19ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<uint> vcover<uint>(W128 w, ref ushort src)
7ffdb0c19b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<int> vcover<int>(W128 w, ref ushort src)
7ffdb0c19b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ulong> vcover<ulong>(W128 w, ref ushort src)
7ffdb0c19bd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<long> vcover<long>(W128 w, ref ushort src)
7ffdb0c19c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<float> vcover<float>(W128 w, ref ushort src)
7ffdb0c19c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<double> vcover<double>(W128 w, ref ushort src)
7ffdb0c19cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<byte> vcover<byte>(W128 w, ref int src)
7ffdb0c19d58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<sbyte> vcover<sbyte>(W128 w, ref int src)
7ffdb0c19dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ushort> vcover<ushort>(W128 w, ref int src)
7ffdb0c19e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<short> vcover<short>(W128 w, ref int src)
7ffdb0c19e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<uint> vcover<uint>(W128 w, ref int src)
7ffdb0c19ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<int> vcover<int>(W128 w, ref int src)
7ffdb0c19f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ulong> vcover<ulong>(W128 w, ref int src)
7ffdb0c19fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<long> vcover<long>(W128 w, ref int src)
7ffdb0c1a010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<float> vcover<float>(W128 w, ref int src)
7ffdb0c1a070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<double> vcover<double>(W128 w, ref int src)
7ffdb0c1a0d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<byte> vcover<byte>(W128 w, ref uint src)
7ffdb0c1a130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<sbyte> vcover<sbyte>(W128 w, ref uint src)
7ffdb0c1a1a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ushort> vcover<ushort>(W128 w, ref uint src)
7ffdb0c1a208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<short> vcover<short>(W128 w, ref uint src)
7ffdb0c1a268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<uint> vcover<uint>(W128 w, ref uint src)
7ffdb0c1a2c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<int> vcover<int>(W128 w, ref uint src)
7ffdb0c1a328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ulong> vcover<ulong>(W128 w, ref uint src)
7ffdb0c1a388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<long> vcover<long>(W128 w, ref uint src)
7ffdb0c1a3e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<float> vcover<float>(W128 w, ref uint src)
7ffdb0c1a448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<double> vcover<double>(W128 w, ref uint src)
7ffdb0c1a4a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<byte> vcover<byte>(W128 w, ref long src)
7ffdb0c1a508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<sbyte> vcover<sbyte>(W128 w, ref long src)
7ffdb0c1a580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ushort> vcover<ushort>(W128 w, ref long src)
7ffdb0c1a5e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<short> vcover<short>(W128 w, ref long src)
7ffdb0c1a640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<uint> vcover<uint>(W128 w, ref long src)
7ffdb0c1a6a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<int> vcover<int>(W128 w, ref long src)
7ffdb0c1a700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ulong> vcover<ulong>(W128 w, ref long src)
7ffdb0c1a760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<long> vcover<long>(W128 w, ref long src)
7ffdb0c1a7c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<float> vcover<float>(W128 w, ref long src)
7ffdb0c1a820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<double> vcover<double>(W128 w, ref long src)
7ffdb0c1a880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<byte> vcover<byte>(W128 w, ref ulong src)
7ffdb0c1a8e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<sbyte> vcover<sbyte>(W128 w, ref ulong src)
7ffdb0c1a958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ushort> vcover<ushort>(W128 w, ref ulong src)
7ffdb0c1a9b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<short> vcover<short>(W128 w, ref ulong src)
7ffdb0c1aa18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<uint> vcover<uint>(W128 w, ref ulong src)
7ffdb0c1aa78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<int> vcover<int>(W128 w, ref ulong src)
7ffdb0c1aad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ulong> vcover<ulong>(W128 w, ref ulong src)
7ffdb0c1ab38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<long> vcover<long>(W128 w, ref ulong src)
7ffdb0c1ab98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<float> vcover<float>(W128 w, ref ulong src)
7ffdb0c1abf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<double> vcover<double>(W128 w, ref ulong src)
7ffdb0c1ac58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<byte> vcover<byte>(W128 w, ref char src)
7ffdb0c1acb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<sbyte> vcover<sbyte>(W128 w, ref char src)
7ffdb0c1ad30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ushort> vcover<ushort>(W128 w, ref char src)
7ffdb0c1ad90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<short> vcover<short>(W128 w, ref char src)
7ffdb0c1adf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<uint> vcover<uint>(W128 w, ref char src)
7ffdb0c1ae50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<int> vcover<int>(W128 w, ref char src)
7ffdb0c1aeb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ulong> vcover<ulong>(W128 w, ref char src)
7ffdb0c1af10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<long> vcover<long>(W128 w, ref char src)
7ffdb0c1af70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<float> vcover<float>(W128 w, ref char src)
7ffdb0c1afd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<double> vcover<double>(W128 w, ref char src)
7ffdb0c1b030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<byte> vcover<byte>(W128 w, ref Decimal src)
7ffdb0c1b090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<sbyte> vcover<sbyte>(W128 w, ref Decimal src)
7ffdb0c1ba98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ushort> vcover<ushort>(W128 w, ref Decimal src)
7ffdb0c1baf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<short> vcover<short>(W128 w, ref Decimal src)
7ffdb0c1bb58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<uint> vcover<uint>(W128 w, ref Decimal src)
7ffdb0c1bbb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<int> vcover<int>(W128 w, ref Decimal src)
7ffdb0c1bc18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<ulong> vcover<ulong>(W128 w, ref Decimal src)
7ffdb0c1bc78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<long> vcover<long>(W128 w, ref Decimal src)
7ffdb0c1bcd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<float> vcover<float>(W128 w, ref Decimal src)
7ffdb0c1bd38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector128<double> vcover<double>(W128 w, ref Decimal src)
7ffdb0c1bd98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<byte> vcover<byte>(W256 w, ref byte src)
7ffdb0c1bdf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<sbyte> vcover<sbyte>(W256 w, ref byte src)
7ffdb0c1be88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ushort> vcover<ushort>(W256 w, ref byte src)
7ffdb0c1bee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<short> vcover<short>(W256 w, ref byte src)
7ffdb0c1bf48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<uint> vcover<uint>(W256 w, ref byte src)
7ffdb0c1bfa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<int> vcover<int>(W256 w, ref byte src)
7ffdb0c60018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ulong> vcover<ulong>(W256 w, ref byte src)
7ffdb0c60078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<long> vcover<long>(W256 w, ref byte src)
7ffdb0c600d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<float> vcover<float>(W256 w, ref byte src)
7ffdb0c60138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<double> vcover<double>(W256 w, ref byte src)
7ffdb0c60198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<byte> vcover<byte>(W256 w, ref sbyte src)
7ffdb0c601f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<sbyte> vcover<sbyte>(W256 w, ref sbyte src)
7ffdb0c60270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ushort> vcover<ushort>(W256 w, ref sbyte src)
7ffdb0c602d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<short> vcover<short>(W256 w, ref sbyte src)
7ffdb0c60330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<uint> vcover<uint>(W256 w, ref sbyte src)
7ffdb0c60390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<int> vcover<int>(W256 w, ref sbyte src)
7ffdb0c603f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ulong> vcover<ulong>(W256 w, ref sbyte src)
7ffdb0c60480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<long> vcover<long>(W256 w, ref sbyte src)
7ffdb0c604e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<float> vcover<float>(W256 w, ref sbyte src)
7ffdb0c60540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<double> vcover<double>(W256 w, ref sbyte src)
7ffdb0c605a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<byte> vcover<byte>(W256 w, ref short src)
7ffdb0c60600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<sbyte> vcover<sbyte>(W256 w, ref short src)
7ffdb0c60678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ushort> vcover<ushort>(W256 w, ref short src)
7ffdb0c606d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<short> vcover<short>(W256 w, ref short src)
7ffdb0c60738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<uint> vcover<uint>(W256 w, ref short src)
7ffdb0c60798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<int> vcover<int>(W256 w, ref short src)
7ffdb0c60828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ulong> vcover<ulong>(W256 w, ref short src)
7ffdb0c60888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<long> vcover<long>(W256 w, ref short src)
7ffdb0c608e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<float> vcover<float>(W256 w, ref short src)
7ffdb0c60948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<double> vcover<double>(W256 w, ref short src)
7ffdb0c609a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<byte> vcover<byte>(W256 w, ref ushort src)
7ffdb0c60a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<sbyte> vcover<sbyte>(W256 w, ref ushort src)
7ffdb0c60a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ushort> vcover<ushort>(W256 w, ref ushort src)
7ffdb0c60ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<short> vcover<short>(W256 w, ref ushort src)
7ffdb0c60b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<uint> vcover<uint>(W256 w, ref ushort src)
7ffdb0c60ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<int> vcover<int>(W256 w, ref ushort src)
7ffdb0c60c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ulong> vcover<ulong>(W256 w, ref ushort src)
7ffdb0c60c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<long> vcover<long>(W256 w, ref ushort src)
7ffdb0c60cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<float> vcover<float>(W256 w, ref ushort src)
7ffdb0c60d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<double> vcover<double>(W256 w, ref ushort src)
7ffdb0c60d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<byte> vcover<byte>(W256 w, ref int src)
7ffdb0c60de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<sbyte> vcover<sbyte>(W256 w, ref int src)
7ffdb0c60e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ushort> vcover<ushort>(W256 w, ref int src)
7ffdb0c60eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<short> vcover<short>(W256 w, ref int src)
7ffdb0c60f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<uint> vcover<uint>(W256 w, ref int src)
7ffdb0c60f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<int> vcover<int>(W256 w, ref int src)
7ffdb0c60fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ulong> vcover<ulong>(W256 w, ref int src)
7ffdb0c61038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<long> vcover<long>(W256 w, ref int src)
7ffdb0c61098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<float> vcover<float>(W256 w, ref int src)
7ffdb0c610f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<double> vcover<double>(W256 w, ref int src)
7ffdb0c61158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<byte> vcover<byte>(W256 w, ref uint src)
7ffdb0c611b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<sbyte> vcover<sbyte>(W256 w, ref uint src)
7ffdb0c61230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ushort> vcover<ushort>(W256 w, ref uint src)
7ffdb0c61290h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<short> vcover<short>(W256 w, ref uint src)
7ffdb0c612f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<uint> vcover<uint>(W256 w, ref uint src)
7ffdb0c61350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<int> vcover<int>(W256 w, ref uint src)
7ffdb0c613b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ulong> vcover<ulong>(W256 w, ref uint src)
7ffdb0c61410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<long> vcover<long>(W256 w, ref uint src)
7ffdb0c61470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<float> vcover<float>(W256 w, ref uint src)
7ffdb0c614d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<double> vcover<double>(W256 w, ref uint src)
7ffdb0c61530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<byte> vcover<byte>(W256 w, ref long src)
7ffdb0c61590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<sbyte> vcover<sbyte>(W256 w, ref long src)
7ffdb0c61608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ushort> vcover<ushort>(W256 w, ref long src)
7ffdb0c61668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<short> vcover<short>(W256 w, ref long src)
7ffdb0c616c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<uint> vcover<uint>(W256 w, ref long src)
7ffdb0c61728h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<int> vcover<int>(W256 w, ref long src)
7ffdb0c61788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ulong> vcover<ulong>(W256 w, ref long src)
7ffdb0c617e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<long> vcover<long>(W256 w, ref long src)
7ffdb0c61848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<float> vcover<float>(W256 w, ref long src)
7ffdb0c618a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<double> vcover<double>(W256 w, ref long src)
7ffdb0c61908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<byte> vcover<byte>(W256 w, ref ulong src)
7ffdb0c61968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<sbyte> vcover<sbyte>(W256 w, ref ulong src)
7ffdb0c619e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ushort> vcover<ushort>(W256 w, ref ulong src)
7ffdb0c61a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<short> vcover<short>(W256 w, ref ulong src)
7ffdb0c61aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<uint> vcover<uint>(W256 w, ref ulong src)
7ffdb0c61b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<int> vcover<int>(W256 w, ref ulong src)
7ffdb0c61b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ulong> vcover<ulong>(W256 w, ref ulong src)
7ffdb0c61bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<long> vcover<long>(W256 w, ref ulong src)
7ffdb0c61c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<float> vcover<float>(W256 w, ref ulong src)
7ffdb0c61c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<double> vcover<double>(W256 w, ref ulong src)
7ffdb0c61ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<byte> vcover<byte>(W256 w, ref bool src)
7ffdb0c61d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<sbyte> vcover<sbyte>(W256 w, ref bool src)
7ffdb0c61db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ushort> vcover<ushort>(W256 w, ref bool src)
7ffdb0c61e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<short> vcover<short>(W256 w, ref bool src)
7ffdb0c61e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<uint> vcover<uint>(W256 w, ref bool src)
7ffdb0c61ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<int> vcover<int>(W256 w, ref bool src)
7ffdb0c61f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ulong> vcover<ulong>(W256 w, ref bool src)
7ffdb0c61f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<long> vcover<long>(W256 w, ref bool src)
7ffdb0c61ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<float> vcover<float>(W256 w, ref bool src)
7ffdb0c62058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<double> vcover<double>(W256 w, ref bool src)
7ffdb0c620b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<byte> vcover<byte>(W256 w, ref char src)
7ffdb0c62118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<sbyte> vcover<sbyte>(W256 w, ref char src)
7ffdb0c62190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ushort> vcover<ushort>(W256 w, ref char src)
7ffdb0c621f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<short> vcover<short>(W256 w, ref char src)
7ffdb0c62250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<uint> vcover<uint>(W256 w, ref char src)
7ffdb0c622b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<int> vcover<int>(W256 w, ref char src)
7ffdb0c62310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ulong> vcover<ulong>(W256 w, ref char src)
7ffdb0c62370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<long> vcover<long>(W256 w, ref char src)
7ffdb0c623e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<float> vcover<float>(W256 w, ref char src)
7ffdb0c62448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<double> vcover<double>(W256 w, ref char src)
7ffdb0c624a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<byte> vcover<byte>(W256 w, ref Decimal src)
7ffdb0c62508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<sbyte> vcover<sbyte>(W256 w, ref Decimal src)
7ffdb0c62580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ushort> vcover<ushort>(W256 w, ref Decimal src)
7ffdb0c625e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<short> vcover<short>(W256 w, ref Decimal src)
7ffdb0c62640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<uint> vcover<uint>(W256 w, ref Decimal src)
7ffdb0c626a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<int> vcover<int>(W256 w, ref Decimal src)
7ffdb0c62718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<ulong> vcover<ulong>(W256 w, ref Decimal src)
7ffdb0c62778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<long> vcover<long>(W256 w, ref Decimal src)
7ffdb0c62808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<float> vcover<float>(W256 w, ref Decimal src)
7ffdb0c62880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector256<double> vcover<double>(W256 w, ref Decimal src)
7ffdb0c628e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<byte> vcover<byte>(W512 w, ref byte src)
7ffdb0c62940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<sbyte> vcover<sbyte>(W512 w, ref byte src)
7ffdb0c629d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ushort> vcover<ushort>(W512 w, ref byte src)
7ffdb0c62a30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<short> vcover<short>(W512 w, ref byte src)
7ffdb0c62a90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<uint> vcover<uint>(W512 w, ref byte src)
7ffdb0c62af0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<int> vcover<int>(W512 w, ref byte src)
7ffdb0c62b50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ulong> vcover<ulong>(W512 w, ref byte src)
7ffdb0c62bb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<long> vcover<long>(W512 w, ref byte src)
7ffdb0c62c10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<float> vcover<float>(W512 w, ref byte src)
7ffdb0c62ca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<double> vcover<double>(W512 w, ref byte src)
7ffdb0c62d00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<byte> vcover<byte>(W512 w, ref sbyte src)
7ffdb0c62d60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<sbyte> vcover<sbyte>(W512 w, ref sbyte src)
7ffdb0c62dd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ushort> vcover<ushort>(W512 w, ref sbyte src)
7ffdb0c62e38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<short> vcover<short>(W512 w, ref sbyte src)
7ffdb0c62e98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<uint> vcover<uint>(W512 w, ref sbyte src)
7ffdb0c62ef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<int> vcover<int>(W512 w, ref sbyte src)
7ffdb0c62f58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ulong> vcover<ulong>(W512 w, ref sbyte src)
7ffdb0c62fb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<long> vcover<long>(W512 w, ref sbyte src)
7ffdb0c63018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<float> vcover<float>(W512 w, ref sbyte src)
7ffdb0c630c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<double> vcover<double>(W512 w, ref sbyte src)
7ffdb0c63120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<byte> vcover<byte>(W512 w, ref short src)
7ffdb0c63180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<sbyte> vcover<sbyte>(W512 w, ref short src)
7ffdb0c631f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ushort> vcover<ushort>(W512 w, ref short src)
7ffdb0c63258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<short> vcover<short>(W512 w, ref short src)
7ffdb0c632b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<uint> vcover<uint>(W512 w, ref short src)
7ffdb0c63318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<int> vcover<int>(W512 w, ref short src)
7ffdb0c63378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ulong> vcover<ulong>(W512 w, ref short src)
7ffdb0c633d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<long> vcover<long>(W512 w, ref short src)
7ffdb0c63438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<float> vcover<float>(W512 w, ref short src)
7ffdb0c63498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<double> vcover<double>(W512 w, ref short src)
7ffdb0c634f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<byte> vcover<byte>(W512 w, ref ushort src)
7ffdb0c635a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<sbyte> vcover<sbyte>(W512 w, ref ushort src)
7ffdb0c63618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ushort> vcover<ushort>(W512 w, ref ushort src)
7ffdb0c63678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<short> vcover<short>(W512 w, ref ushort src)
7ffdb0c636d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<uint> vcover<uint>(W512 w, ref ushort src)
7ffdb0c63738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<int> vcover<int>(W512 w, ref ushort src)
7ffdb0c63798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ulong> vcover<ulong>(W512 w, ref ushort src)
7ffdb0c637f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<long> vcover<long>(W512 w, ref ushort src)
7ffdb0c63858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<float> vcover<float>(W512 w, ref ushort src)
7ffdb0c638b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<double> vcover<double>(W512 w, ref ushort src)
7ffdb0c63918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<byte> vcover<byte>(W512 w, ref int src)
7ffdb0c63978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<sbyte> vcover<sbyte>(W512 w, ref int src)
7ffdb0c639f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ushort> vcover<ushort>(W512 w, ref int src)
7ffdb0c63a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<short> vcover<short>(W512 w, ref int src)
7ffdb0c63ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<uint> vcover<uint>(W512 w, ref int src)
7ffdb0c63b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<int> vcover<int>(W512 w, ref int src)
7ffdb0c63ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ulong> vcover<ulong>(W512 w, ref int src)
7ffdb0c63c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<long> vcover<long>(W512 w, ref int src)
7ffdb0c63c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<float> vcover<float>(W512 w, ref int src)
7ffdb0c63cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<double> vcover<double>(W512 w, ref int src)
7ffdb0c63d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<byte> vcover<byte>(W512 w, ref uint src)
7ffdb0c63d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<sbyte> vcover<sbyte>(W512 w, ref uint src)
7ffdb0c63df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ushort> vcover<ushort>(W512 w, ref uint src)
7ffdb0c63e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<short> vcover<short>(W512 w, ref uint src)
7ffdb0c63eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<uint> vcover<uint>(W512 w, ref uint src)
7ffdb0c63f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<int> vcover<int>(W512 w, ref uint src)
7ffdb0c63fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ulong> vcover<ulong>(W512 w, ref uint src)
7ffdb0c68018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<long> vcover<long>(W512 w, ref uint src)
7ffdb0c68078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<float> vcover<float>(W512 w, ref uint src)
7ffdb0c680d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<double> vcover<double>(W512 w, ref uint src)
7ffdb0c68138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<byte> vcover<byte>(W512 w, ref long src)
7ffdb0c68198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<sbyte> vcover<sbyte>(W512 w, ref long src)
7ffdb0c68210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ushort> vcover<ushort>(W512 w, ref long src)
7ffdb0c68270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<short> vcover<short>(W512 w, ref long src)
7ffdb0c682d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<uint> vcover<uint>(W512 w, ref long src)
7ffdb0c68378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<int> vcover<int>(W512 w, ref long src)
7ffdb0c683d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ulong> vcover<ulong>(W512 w, ref long src)
7ffdb0c68438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<long> vcover<long>(W512 w, ref long src)
7ffdb0c68498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<float> vcover<float>(W512 w, ref long src)
7ffdb0c684f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<double> vcover<double>(W512 w, ref long src)
7ffdb0c68558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<byte> vcover<byte>(W512 w, ref ulong src)
7ffdb0c685b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<sbyte> vcover<sbyte>(W512 w, ref ulong src)
7ffdb0c68630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ushort> vcover<ushort>(W512 w, ref ulong src)
7ffdb0c68690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<short> vcover<short>(W512 w, ref ulong src)
7ffdb0c686f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<uint> vcover<uint>(W512 w, ref ulong src)
7ffdb0c68750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<int> vcover<int>(W512 w, ref ulong src)
7ffdb0c687b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ulong> vcover<ulong>(W512 w, ref ulong src)
7ffdb0c68810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<long> vcover<long>(W512 w, ref ulong src)
7ffdb0c68870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<float> vcover<float>(W512 w, ref ulong src)
7ffdb0c68900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<double> vcover<double>(W512 w, ref ulong src)
7ffdb0c68960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<byte> vcover<byte>(W512 w, ref bool src)
7ffdb0c689c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<sbyte> vcover<sbyte>(W512 w, ref bool src)
7ffdb0c68a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ushort> vcover<ushort>(W512 w, ref bool src)
7ffdb0c68a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<short> vcover<short>(W512 w, ref bool src)
7ffdb0c68af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<uint> vcover<uint>(W512 w, ref bool src)
7ffdb0c68b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<int> vcover<int>(W512 w, ref bool src)
7ffdb0c68bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ulong> vcover<ulong>(W512 w, ref bool src)
7ffdb0c68c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<long> vcover<long>(W512 w, ref bool src)
7ffdb0c68cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<float> vcover<float>(W512 w, ref bool src)
7ffdb0c68d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<double> vcover<double>(W512 w, ref bool src)
7ffdb0c68d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<byte> vcover<byte>(W512 w, ref char src)
7ffdb0c68de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<sbyte> vcover<sbyte>(W512 w, ref char src)
7ffdb0c68e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ushort> vcover<ushort>(W512 w, ref char src)
7ffdb0c68eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<short> vcover<short>(W512 w, ref char src)
7ffdb0c68f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<uint> vcover<uint>(W512 w, ref char src)
7ffdb0c68f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<int> vcover<int>(W512 w, ref char src)
7ffdb0c68fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ulong> vcover<ulong>(W512 w, ref char src)
7ffdb0c69038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<long> vcover<long>(W512 w, ref char src)
7ffdb0c69098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<float> vcover<float>(W512 w, ref char src)
7ffdb0c690f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<double> vcover<double>(W512 w, ref char src)
7ffdb0c69158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<byte> vcover<byte>(W512 w, ref Decimal src)
7ffdb0c69200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<sbyte> vcover<sbyte>(W512 w, ref Decimal src)
7ffdb0c69278h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ushort> vcover<ushort>(W512 w, ref Decimal src)
7ffdb0c692d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<short> vcover<short>(W512 w, ref Decimal src)
7ffdb0c69338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<uint> vcover<uint>(W512 w, ref Decimal src)
7ffdb0c69398h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<int> vcover<int>(W512 w, ref Decimal src)
7ffdb0c693f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<ulong> vcover<ulong>(W512 w, ref Decimal src)
7ffdb0c69458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<long> vcover<long>(W512 w, ref Decimal src)
7ffdb0c694b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<float> vcover<float>(W512 w, ref Decimal src)
7ffdb0c69518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Vector512<double> vcover<double>(W512 w, ref Decimal src)
7ffdb0c69578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vunits<byte>(N128 w, byte t)
7ffdb0c695d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vunits<sbyte>(N128 w, sbyte t)
7ffdb0c69650h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vunits<ushort>(N128 w, ushort t)
7ffdb0c69668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vunits<short>(N128 w, short t)
7ffdb0c69680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vunits<uint>(N128 w, uint t)
7ffdb0c69698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vunits<int>(N128 w, int t)
7ffdb0c696b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vunits<ulong>(N128 w, ulong t)
7ffdb0c696c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vunits<long>(N128 w, long t)
7ffdb0c69728h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vunits<byte>(N256 w, byte t)
7ffdb0c69740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vunits<sbyte>(N256 w, sbyte t)
7ffdb0c69770h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vunits<ushort>(N256 w, ushort t)
7ffdb0c69788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vunits<short>(N256 w, short t)
7ffdb0c697a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vunits<uint>(N256 w, uint t)
7ffdb0c697b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vunits<int>(N256 w, int t)
7ffdb0c69818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vunits<ulong>(N256 w, ulong t)
7ffdb0c69830h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vunits<long>(N256 w, long t)
7ffdb0c69848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vzero<byte>(W128 w, byte t)
7ffdb0c69860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vzero<sbyte>(W128 w, sbyte t)
7ffdb0c69878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vzero<ushort>(W128 w, ushort t)
7ffdb0c69890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vzero<short>(W128 w, short t)
7ffdb0c698a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vzero<uint>(W128 w, uint t)
7ffdb0c698c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vzero<int>(W128 w, int t)
7ffdb0c698d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vzero<ulong>(W128 w, ulong t)
7ffdb0c698f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vzero<long>(W128 w, long t)
7ffdb0c69908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vzero<float>(W128 w, float t)
7ffdb0c69938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vzero<double>(W128 w, double t)
7ffdb0c69950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vzero<byte>(W256 w, byte t)
7ffdb0c69968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vzero<sbyte>(W256 w, sbyte t)
7ffdb0c69980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vzero<ushort>(W256 w, ushort t)
7ffdb0c69998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vzero<short>(W256 w, short t)
7ffdb0c699b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vzero<uint>(W256 w, uint t)
7ffdb0c699c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vzero<int>(W256 w, int t)
7ffdb0c699f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vzero<ulong>(W256 w, ulong t)
7ffdb0c69a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vzero<long>(W256 w, long t)
7ffdb0c69a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vzero<float>(W256 w, float t)
7ffdb0c69a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vzero<double>(W256 w, double t)
7ffdb0c69a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vzero<byte>(W512 w, byte t)
7ffdb0c69aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<sbyte> vzero<sbyte>(W512 w, sbyte t)
7ffdb0c69ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vzero<ushort>(W512 w, ushort t)
7ffdb0c69ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<short> vzero<short>(W512 w, short t)
7ffdb0c69ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vzero<uint>(W512 w, uint t)
7ffdb0c69b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<int> vzero<int>(W512 w, int t)
7ffdb0c69b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vzero<ulong>(W512 w, ulong t)
7ffdb0c69b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<long> vzero<long>(W512 w, long t)
7ffdb0c69b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<float> vzero<float>(W512 w, float t)
7ffdb0c69b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<double> vzero<double>(W512 w, double t)
7ffdb0c69b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort clmul(byte a, byte b)
7ffdaf2a17d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint clmul(ushort a, ushort b)
7ffdaf2a17e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong clmul(uint a, uint b)
7ffdaf2a1800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ConstPair<ulong> clmul(ulong a, ulong b)
7ffdaf2a1818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> clmul2(ulong a, ulong b)
7ffdaf2a1830h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte clmulr(N8 r, byte a, byte b, ushort poly)
7ffdaf2a1848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong clmulr(N8 r, ulong a, ulong b, ulong poly)
7ffdaf2a1860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort clmulr(N16 r, ushort a, ushort b, uint poly)
7ffdaf2a1878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint clmulr(N32 r, uint a, uint b, ulong poly)
7ffdaf2a1890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong clmul64(ulong x, ulong y)
7ffdaf2a18a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vabs(Vector128<sbyte> src)
7ffdaf2a18c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vabs(Vector128<short> src)
7ffdaf2a18d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vabs(Vector128<int> src)
7ffdaf2a18f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vabs(Vector128<long> src)
7ffdaf2a1908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vabs(Vector256<sbyte> src)
7ffdaf2a1920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vabs(Vector256<short> src)
7ffdaf2a1938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vabs(Vector256<int> src)
7ffdaf2a1950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vabs(Vector256<long> src)
7ffdaf2a1968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vabsdiff(Vector128<byte> a, Vector128<byte> b)
7ffdaf2a1980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vabsdiff(Vector128<ushort> a, Vector128<ushort> b)
7ffdaf2a1998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vabsdiff(Vector256<byte> a, Vector256<byte> b)
7ffdaf2a19b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vabsdiff(Vector256<ushort> a, Vector256<ushort> b)
7ffdaf2a19c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vadd(Vector128<byte> x, Vector128<byte> y)
7ffdaf2a19e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vadd(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2a19f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vadd(Vector128<short> x, Vector128<short> y)
7ffdaf2a1a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vadd(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2a1a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vadd(Vector128<int> x, Vector128<int> y)
7ffdaf2a1a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vadd(Vector128<uint> x, Vector128<uint> y)
7ffdaf2a1a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vadd(Vector128<long> x, Vector128<long> y)
7ffdaf2a1a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vadd(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2a1a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vadd(Vector256<byte> x, Vector256<byte> y)
7ffdaf2a1aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vadd(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2a1ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vadd(Vector256<short> x, Vector256<short> y)
7ffdaf2a1ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vadd(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2a1ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vadd(Vector256<int> x, Vector256<int> y)
7ffdaf2a1b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vadd(Vector256<uint> x, Vector256<uint> y)
7ffdaf2a1b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vadd(Vector256<long> x, Vector256<long> y)
7ffdaf2a1b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vadd(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2a1b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vadd(Vector128<float> x, Vector128<float> y)
7ffdaf2a1b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vadd(Vector128<double> x, Vector128<double> y)
7ffdaf2a1b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vadd(Vector256<float> x, Vector256<float> y)
7ffdaf2a1b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vadd(Vector256<double> x, Vector256<double> y)
7ffdaf2a1ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vadds(Vector128<byte> x, Vector128<byte> y)
7ffdaf2a1bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vadds(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2a1bd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vadds(Vector128<short> x, Vector128<short> y)
7ffdaf2a1bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vadds(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2a1c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vadds(Vector256<byte> x, Vector256<byte> y)
7ffdaf2a1c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vadds(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2a1c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vadds(Vector256<short> x, Vector256<short> y)
7ffdaf2a1c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vadds(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2a1c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vavg(Vector128<byte> a, Vector128<byte> b)
7ffdaf2a1c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vavg(Vector128<ushort> a, Vector128<ushort> b)
7ffdaf2a1c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vavg(Vector256<byte> a, Vector256<byte> b)
7ffdaf2a1cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vavg(Vector256<ushort> a, Vector256<ushort> b)
7ffdaf2a1cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vclmul(Vector128<ulong> a)
7ffdaf2a1d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vclmulr(Vector128<ulong> a, Vector128<ulong> poly)
7ffdaf2a1d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vdec(Vector128<sbyte> src)
7ffdaf2a1da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vdec(Vector128<byte> src)
7ffdaf2a1db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vdec(Vector128<short> src)
7ffdaf2a1dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vdec(Vector128<ushort> src)
7ffdaf2a1de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vdec(Vector128<int> src)
7ffdaf2a1e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vdec(Vector128<uint> src)
7ffdaf2a1e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vdec(Vector128<long> src)
7ffdaf2a1e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vdec(Vector128<ulong> src)
7ffdaf2a1e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vdec(Vector256<sbyte> src)
7ffdaf2a1e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vdec(Vector256<byte> src)
7ffdaf2a1e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vdec(Vector256<short> src)
7ffdaf2a1e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vdec(Vector256<ushort> src)
7ffdaf2a1ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vdec(Vector256<int> src)
7ffdaf2a1ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vdec(Vector256<uint> src)
7ffdaf2a1ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vdec(Vector256<long> src)
7ffdaf2a1ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vdec(Vector256<ulong> src)
7ffdaf2a1f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long vdot(Vector256<int> x, Vector256<int> y)
7ffdaf2a1f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vdot(Vector256<uint> x, Vector256<uint> y)
7ffdaf2a1f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vhadd(Vector128<short> a, Vector128<short> b)
7ffdaf2a1f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vhadd(Vector128<int> x, Vector128<int> y)
7ffdaf2a1f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vhadd(Vector256<short> x, Vector256<short> y)
7ffdaf2a1fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vhadd(Vector256<int> x, Vector256<int> y)
7ffdaf2a1fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vhadds(Vector128<short> x, Vector128<short> y)
7ffdaf2a1fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vhadds(Vector256<short> x, Vector256<short> y)
7ffdaf2a1ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vhsub(Vector128<short> x, Vector128<short> y)
7ffdaf2a2010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vhsub(Vector128<int> x, Vector128<int> y)
7ffdaf2a2028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vhsub(Vector256<short> x, Vector256<short> y)
7ffdaf2a2040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vhsub(Vector256<int> x, Vector256<int> y)
7ffdaf2a2058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vhsubs(Vector128<short> x, Vector128<short> y)
7ffdaf2a2070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vhsubs(Vector256<short> x, Vector256<short> y)
7ffdaf2a2088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vinc(Vector128<sbyte> src)
7ffdaf2a20a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vinc(Vector128<byte> src)
7ffdaf2a20b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vinc(Vector128<short> src)
7ffdaf2a20d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vinc(Vector128<ushort> src)
7ffdaf2a20e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vinc(Vector128<int> src)
7ffdaf2a2100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vinc(Vector128<uint> src)
7ffdaf2a2118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vinc(Vector128<long> src)
7ffdaf2a2130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vinc(Vector128<ulong> src)
7ffdaf2a2148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vinc(Vector256<sbyte> src)
7ffdaf2a2160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vinc(Vector256<byte> src)
7ffdaf2a2178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vinc(Vector256<short> src)
7ffdaf2a2190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vinc(Vector256<ushort> src)
7ffdaf2a21a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vinc(Vector256<int> src)
7ffdaf2a21c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vinc(Vector256<uint> src)
7ffdaf2a21d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vinc(Vector256<long> src)
7ffdaf2a21f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vinc(Vector256<ulong> src)
7ffdaf2a2208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmpsadbw(Vector128<byte> a, Vector128<byte> b, byte mask)
7ffdaf2a2220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmpsadbw(Vector256<byte> a, Vector256<byte> b, byte mask)
7ffdaf2a2238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint mulhi(uint x, uint y)
7ffdaf2a2250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong mulhi(ulong x, ulong y)
7ffdaf2a2268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint mullo(uint a, uint b)
7ffdaf2a2280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong mullo(ulong a, ulong b)
7ffdaf2a2298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<uint> mulx(uint a, uint b)
7ffdaf2a22b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Pair<ulong> mulx(ulong a, ulong b)
7ffdaf2a22c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vmul(Vector128<int> x, Vector128<int> y)
7ffdaf2a22e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmul(Vector128<uint> x, Vector128<uint> y)
7ffdaf2a22f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmul(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2a2310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vmuladj(Vector128<byte> x, Vector128<sbyte> y)
7ffdaf2a2328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vmuladj(Vector256<byte> x, Vector256<sbyte> y)
7ffdaf2a2340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vmuladj(Vector256<short> x, Vector256<short> y)
7ffdaf2a2358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vmulhi(Vector128<short> x, Vector128<short> y)
7ffdaf2a2370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmulhi(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2a2388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vmulhi(Vector256<short> x, Vector256<short> y)
7ffdaf2a23a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmulhi(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2a23b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vmulhrs(Vector128<short> x, Vector128<short> y)
7ffdaf2a23d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vmulhrs(Vector256<short> x, Vector256<short> y)
7ffdaf2a23e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vmullo(Vector128<short> x, Vector128<short> y)
7ffdaf2a2400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmullo(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2a2418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vmullo(Vector128<int> x, Vector128<int> y)
7ffdaf2a2430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmullo(Vector128<uint> x, Vector128<uint> y)
7ffdaf2a2448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vmullo(Vector256<short> x, Vector256<short> y)
7ffdaf2a2460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmullo(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2a2478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vmullo(Vector256<int> x, Vector256<int> y)
7ffdaf2a2490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmullo(Vector256<uint> x, Vector256<uint> y)
7ffdaf2a24a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vnegate(Vector128<sbyte> src)
7ffdaf2a24c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vnegate(Vector128<byte> src)
7ffdaf2a24d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vnegate(Vector128<short> src)
7ffdaf2a24f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vnegate(Vector128<ushort> src)
7ffdaf2a2508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vnegate(Vector128<int> src)
7ffdaf2a2520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vnegate(Vector128<uint> src)
7ffdaf2a2538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vnegate(Vector128<long> src)
7ffdaf2a2550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vnegate(Vector128<ulong> src)
7ffdaf2a2568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vnegate(Vector256<sbyte> src)
7ffdaf2a2580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vnegate(Vector256<byte> src)
7ffdaf2a2598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vnegate(Vector256<short> src)
7ffdaf2a25b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vnegate(Vector256<ushort> src)
7ffdaf2a25c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vnegate(Vector256<int> src)
7ffdaf2a25e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vnegate(Vector256<uint> src)
7ffdaf2a25f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vnegate(Vector256<long> src)
7ffdaf2a2610h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vnegate(Vector256<ulong> src)
7ffdaf2a2628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vnegate(Vector128<float> x)
7ffdaf2a2640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vnegate(Vector128<double> x)
7ffdaf2a2658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vnegate(Vector256<float> x)
7ffdaf2a2670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vnegate(Vector256<double> x)
7ffdaf2a2688h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsad(Vector128<byte> lhs, Vector128<byte> rhs)
7ffdaf2a26a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsad(Vector256<byte> lhs, Vector256<byte> rhs)
7ffdaf2a26b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsign(Vector128<sbyte> dst, Vector128<sbyte> match)
7ffdaf2a26d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsign(Vector128<sbyte> src)
7ffdaf2a26e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsign(Vector128<short> dst, Vector128<short> match)
7ffdaf2a2700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsign(Vector128<int> dst, Vector128<int> match)
7ffdaf2a2718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsign(Vector256<sbyte> dst, Vector256<sbyte> match)
7ffdaf2a2730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsign(Vector256<short> dst, Vector256<short> match)
7ffdaf2a2748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsign(Vector256<int> dst, Vector256<int> match)
7ffdaf2a2760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vsub(Vector128<byte> x, Vector128<byte> y)
7ffdaf2a2778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsub(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2a2790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsub(Vector128<short> x, Vector128<short> y)
7ffdaf2a27a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsub(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2a27c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsub(Vector128<int> x, Vector128<int> y)
7ffdaf2a27d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vsub(Vector128<uint> x, Vector128<uint> y)
7ffdaf2a27f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vsub(Vector128<long> x, Vector128<long> y)
7ffdaf2a2808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vsub(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2a2820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vsub(Vector256<byte> x, Vector256<byte> y)
7ffdaf2a2838h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsub(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2a2850h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsub(Vector256<short> x, Vector256<short> y)
7ffdaf2a2868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsub(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2a2880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsub(Vector256<int> x, Vector256<int> y)
7ffdaf2a2898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vsub(Vector256<uint> x, Vector256<uint> y)
7ffdaf2a28b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vsub(Vector256<long> x, Vector256<long> y)
7ffdaf2a28c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vsub(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2a28e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vsub(Vector128<float> x, Vector128<float> y)
7ffdaf2a28f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vsub(Vector128<double> x, Vector128<double> y)
7ffdaf2a2910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vsub(Vector256<float> x, Vector256<float> y)
7ffdaf2a2928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vsub(Vector256<double> x, Vector256<double> y)
7ffdaf2a2940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vsubs(Vector128<byte> x, Vector128<byte> y)
7ffdaf2a2958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsubs(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2a2970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsubs(Vector128<short> x, Vector128<short> y)
7ffdaf2a2988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsubs(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2a29a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vsubs(Vector256<byte> x, Vector256<byte> y)
7ffdaf2a29b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsubs(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2a29d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsubs(Vector256<short> x, Vector256<short> y)
7ffdaf2a29e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsubs(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2a2a00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> aesEncode(Vector128<byte> src, Vector128<byte> key)
7ffdaf2a2a18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> aesEncodeLast(Vector128<byte> src, Vector128<byte> key)
7ffdaf2a2a30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> aesDecode(Vector128<byte> src, Vector128<byte> key)
7ffdaf2a2a48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> aesDecodeLast(Vector128<byte> src, Vector128<byte> key)
7ffdaf2a2a60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> aesInvMix(Vector128<byte> src)
7ffdaf2a2a78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> aesKeyGen(Vector128<byte> src, byte imm8)
7ffdaf2a2a90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint crc(uint crc, byte data)
7ffdaf2a2aa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint crc(uint crc, ushort data)
7ffdaf2a2ac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint crc(uint crc, uint data)
7ffdaf2a2ad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong crc(ulong crc, ulong data)
7ffdaf2a2af0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> pmovzxbq(Vector128<byte> src, out Vector128<ulong> dst)
7ffdaf2a2b08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> pmovzxbq(ushort src, out Vector128<ulong> dst)
7ffdaf2a2b20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> pmovzxbd(Vector128<byte> src, out Vector128<uint> dst)
7ffdaf2a2b38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> pmovzxbd(uint src, out Vector128<uint> dst)
7ffdaf2a2b50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> pmovzxbw(Vector128<byte> src, out Vector128<ushort> dst)
7ffdaf2a2b68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> pmovzxbw(ulong src, out Vector128<ushort> dst)
7ffdaf2a2b80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> pmovzxdq(Vector128<uint> src, out Vector128<ulong> dst)
7ffdaf2a2b98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> pmovzxdq(ulong src, out Vector128<ulong> dst)
7ffdaf2a2bb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> pmovzxwd(Vector128<ushort> src, out Vector128<uint> dst)
7ffdaf2a2bc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> pmovzxwd(ulong src, out Vector128<uint> dst)
7ffdaf2a2be0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> pmovzxwq(Vector128<ushort> src, out Vector128<ulong> dst)
7ffdaf2a2bf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> pmovzxwq(uint src, out Vector128<ulong> dst)
7ffdaf2a2c10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vblendbits(Vector128<byte> x, Vector128<byte> y, Vector128<byte> mask)
7ffdaf2a3090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vblendbits(Vector128<ushort> x, Vector128<ushort> y, Vector128<ushort> mask)
7ffdaf2a30a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vblendbits(Vector128<uint> x, Vector128<uint> y, Vector128<uint> mask)
7ffdaf2a30c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vblendbits(Vector128<ulong> x, Vector128<ulong> y, Vector128<ulong> mask)
7ffdaf2a30d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vblendbits(Vector256<byte> x, Vector256<byte> y, Vector256<byte> mask)
7ffdaf2a30f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vblendbits(Vector256<ushort> x, Vector256<ushort> y, Vector256<ushort> mask)
7ffdaf2a3108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vblendbits(Vector256<uint> x, Vector256<uint> y, Vector256<uint> mask)
7ffdaf2a3120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vblendbits(Vector256<ulong> x, Vector256<ulong> y, Vector256<ulong> mask)
7ffdaf2a3138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vblendv(Vector128<byte> x, Vector128<byte> y, Vector128<byte> spec)
7ffdaf2a3150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vblendv(Vector128<sbyte> x, Vector128<sbyte> y, Vector128<sbyte> spec)
7ffdaf2a3168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vblendv(Vector128<sbyte> x, Vector128<sbyte> y, Vector128<byte> spec)
7ffdaf2a3180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vblendv(Vector128<short> x, Vector128<short> y, Vector128<short> spec)
7ffdaf2a3198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vblendv(Vector128<short> x, Vector128<short> y, Vector128<byte> spec)
7ffdaf2a31b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vblendv(Vector128<ushort> x, Vector128<ushort> y, Vector128<byte> spec)
7ffdaf2a31c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vblendv(Vector128<int> x, Vector128<int> y, Vector128<byte> spec)
7ffdaf2a31e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vblendv(Vector128<uint> x, Vector128<uint> y, Vector128<byte> spec)
7ffdaf2a31f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vblendv(Vector128<ushort> x, Vector128<ushort> y, Vector128<ushort> spec)
7ffdaf2a3210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vblendv(Vector128<int> x, Vector128<int> y, Vector128<int> spec)
7ffdaf2a3228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vblendv(Vector128<uint> x, Vector128<uint> y, Vector128<uint> spec)
7ffdaf2a3240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vblendv(Vector128<long> x, Vector128<long> y, Vector128<long> spec)
7ffdaf2a3258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vblendv(Vector128<ulong> x, Vector128<ulong> y, Vector128<ulong> spec)
7ffdaf2a3270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vblendv(Vector128<float> x, Vector128<float> y, Vector128<float> spec)
7ffdaf2a3288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vblendv(Vector128<double> x, Vector128<double> y, Vector128<double> spec)
7ffdaf2a32a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vblend4x32(Vector128<float> x, Vector128<float> y, Vector128<float> spec)
7ffdaf2a32b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vblend2x64(Vector128<double> x, Vector128<double> y, Vector128<double> spec)
7ffdaf2a32d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vblend8x32(Vector256<float> x, Vector256<float> y, Vector256<float> spec)
7ffdaf2a32e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vblend4x64(Vector256<double> x, Vector256<double> y, Vector256<double> spec)
7ffdaf2a3300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vblendv(Vector256<byte> x, Vector256<byte> y, Vector256<byte> spec)
7ffdaf2a3318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vblendv(Vector256<sbyte> x, Vector256<sbyte> y, Vector256<sbyte> spec)
7ffdaf2a3330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vblendv(Vector256<short> x, Vector256<short> y, Vector256<short> spec)
7ffdaf2a3348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vblendv(Vector256<ushort> x, Vector256<ushort> y, Vector256<ushort> spec)
7ffdaf2a3360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vblendv(Vector256<int> x, Vector256<int> y, Vector256<int> spec)
7ffdaf2a3378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vblendv(Vector256<uint> x, Vector256<uint> y, Vector256<uint> spec)
7ffdaf2a3390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vblendv(Vector256<long> x, Vector256<long> y, Vector256<long> spec)
7ffdaf2a33a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vblendv(Vector256<ulong> x, Vector256<ulong> y, Vector256<ulong> spec)
7ffdaf2a33c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vblendv(Vector256<float> x, Vector256<float> y, Vector256<float> spec)
7ffdaf2a33d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vblendv(Vector256<double> x, Vector256<double> y, Vector256<double> spec)
7ffdaf2a33f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vblendv(Vector128<long> x, Vector128<long> y, Vector128<byte> spec)
7ffdaf2a3408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vblendv(Vector128<ulong> x, Vector128<ulong> y, Vector128<byte> spec)
7ffdaf2a3420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vblendv(Vector256<sbyte> x, Vector256<sbyte> y, Vector256<byte> spec)
7ffdaf2a3438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vblendv(Vector256<short> x, Vector256<short> y, Vector256<byte> spec)
7ffdaf2a3450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vblendv(Vector256<ushort> x, Vector256<ushort> y, Vector256<byte> spec)
7ffdaf2a3468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vblendv(Vector256<int> x, Vector256<int> y, Vector256<byte> spec)
7ffdaf2a3480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vblendv(Vector256<uint> x, Vector256<uint> y, Vector256<byte> spec)
7ffdaf2a3498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vblendv(Vector256<long> x, Vector256<long> y, Vector256<byte> spec)
7ffdaf2a34b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vblendv(Vector256<ulong> x, Vector256<ulong> y, Vector256<byte> spec)
7ffdaf2a34c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint broadcast(ushort src, N32 w)
7ffdaf2a34e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong broadcast(byte src, N64 w)
7ffdaf2a34f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong broadcast(ushort src, N64 w)
7ffdaf2a3510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong broadcast(uint src, N64 w)
7ffdaf2a3528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vbroadcast(W128 w, sbyte src)
7ffdaf2a3540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vbroadcast(W128 w, byte src)
7ffdaf2a3558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vbroadcast(W128 w, short src)
7ffdaf2a3570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vbroadcast(W128 w, ushort src)
7ffdaf2a3588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vbroadcast(W128 w, int src)
7ffdaf2a35a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vbroadcast(W128 w, uint src)
7ffdaf2a35b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vbroadcast(W128 w, long src)
7ffdaf2a35d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vbroadcast(W128 w, ulong src)
7ffdaf2a35e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vbroadcast(W128 w, float src)
7ffdaf2a3600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vbroadcast(W128 w, double src)
7ffdaf2a3618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vbroadcast(W256 w, sbyte src)
7ffdaf2a3630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vbroadcast(W256 w, byte src)
7ffdaf2a3648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vbroadcast(W256 w, short src)
7ffdaf2a3660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vbroadcast(W256 w, ushort src)
7ffdaf2a3678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vbroadcast(W256 w, int src)
7ffdaf2a3690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vbroadcast(W256 w, uint src)
7ffdaf2a36a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vbroadcast(W256 w, long src)
7ffdaf2a36c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vbroadcast(W256 w, ulong src)
7ffdaf2a36d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vbroadcast(W256 w, float src)
7ffdaf2a36f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vbroadcast(W256 w, double src)
7ffdaf2a3708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vbroadcast(W256 w, byte lo, byte hi)
7ffdaf2a3720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vbroadcast(W256 w, ushort lo, ushort hi)
7ffdaf2a3738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vbroadcast(W256 w, uint lo, uint hi)
7ffdaf2a3750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vbroadcast(W256 w, ulong lo, ulong hi)
7ffdaf2a3768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vbyteswap(Vector128<ushort> x)
7ffdaf2a37b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vbyteswap(Vector128<uint> x)
7ffdaf2a37c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vbyteswap(Vector128<ulong> x)
7ffdaf2a37e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vbyteswap(Vector256<ushort> x)
7ffdaf2a37f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vbyteswap(Vector256<uint> x)
7ffdaf2a3810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vbyteswap(Vector256<ulong> x)
7ffdaf2a3828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vconcat(Vector128<byte> lo, Vector128<byte> hi)
7ffdaf2a3840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vconcat(Vector128<sbyte> lo, Vector128<sbyte> hi)
7ffdaf2a3858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vconcat(Vector128<short> lo, Vector128<short> hi)
7ffdaf2a3870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vconcat(Vector128<ushort> lo, Vector128<ushort> hi)
7ffdaf2a3888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vconcat(Vector128<int> lo, Vector128<int> hi)
7ffdaf2a38a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vconcat(Vector128<uint> lo, Vector128<uint> hi)
7ffdaf2a38b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vconcat(Vector128<long> lo, Vector128<long> hi)
7ffdaf2a38d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vconcat(Vector128<ulong> lo, Vector128<ulong> hi)
7ffdaf2a38e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vconcat(Vector128<float> lo, Vector128<float> hi)
7ffdaf2a3900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vconcat(Vector128<double> lo, Vector128<double> hi)
7ffdaf2a3918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vcover(Vector128<ushort> src, out Vector128<byte> dst)
7ffdaf2a3930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vcover(Vector256<ushort> src, out Vector256<byte> dst)
7ffdaf2a3948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vcover(Vector128<uint> src, out Vector128<ushort> dst)
7ffdaf2a3960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vcover(Vector256<uint> src, out Vector256<ushort> dst)
7ffdaf2a3978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vcover(Vector128<ulong> src, out Vector128<uint> dst)
7ffdaf2a3990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vcover(Vector256<ulong> src, out Vector256<uint> dst)
7ffdaf2a39a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vcover(Vector128<uint> src, out Vector128<byte> dst)
7ffdaf2a39c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vcover(Vector256<uint> src, out Vector256<byte> dst)
7ffdaf2a39d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vcover(Vector128<ulong> src, out Vector128<byte> dst)
7ffdaf2a39f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vcover(Vector256<ulong> src, out Vector256<byte> dst)
7ffdaf2a3a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vduplicate(N0 parity, W32 w, Vector256<byte> src)
7ffdaf2a3a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vduplicate(N1 parity, W32 w, Vector256<byte> src)
7ffdaf2a3a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vduplicate(N0 parity, W32 w, Vector256<ushort> src)
7ffdaf2a3a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vduplicate(N1 parity, W32 w, Vector256<ushort> src)
7ffdaf2a3a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vduplicate(N0 parity, W32 w, Vector256<uint> src)
7ffdaf2a3a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vduplicate(N1 parity, W32 w, Vector256<uint> src)
7ffdaf2a3a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vduplicate(N0 parity, W64 w, Vector256<ulong> src)
7ffdaf2a3ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vduplicate(N1 parity, W64 w, Vector256<ulong> src)
7ffdaf2a3ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vdup64(in double src)
7ffdaf2a3ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vdup32(N0 even, Vector256<float> src)
7ffdaf2a3af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vdup32(N1 odd, Vector256<float> src)
7ffdaf2a3b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vdup64(N0 even, Vector256<double> src)
7ffdaf2a3b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vdup64(N1 odd, Vector256<double> src)
7ffdaf2a3b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vgather(MemoryAddress base, Vector256<uint> vidx)
7ffdaf2a8060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vgather(MemoryAddress base, Vector256<uint> vidx, N2 scale)
7ffdaf2a8078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vgather(MemoryAddress base, Vector256<uint> vidx, N4 scale)
7ffdaf2a8090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vgather(MemoryAddress base, Vector256<uint> vidx, N8 scale)
7ffdaf2a80a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vgather(N128 w, in int src, Vector128<int> index)
7ffdaf2a80c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vgather(N128 w, in uint src, Vector256<ulong> vidx)
7ffdaf2a80d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vgather(N128 w, in long src, Vector128<long> vidx)
7ffdaf2a80f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vgather(N128 w, in ulong src, Vector128<ulong> vidx)
7ffdaf2a8108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vgather(N256 w, in int src, Vector256<int> index)
7ffdaf2a8120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vgather(N128 w, in uint src, Vector128<uint> vidx)
7ffdaf2a8138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vgather(N256 w, in uint src, Vector256<uint> vidx)
7ffdaf2a8150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vgather(N256 w, in long src, Vector256<long> index)
7ffdaf2a8168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vgather(N256 w, in ulong src, Vector256<ulong> vidx)
7ffdaf2a8180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vgather(N256 w, in ulong src, Vector128<uint> vidx)
7ffdaf2a8198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vgather(N128 w, in ushort src, Vector128<ushort> vidx)
7ffdaf2a81b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vgather(N128 w, in short src, Vector128<short> vidx)
7ffdaf2a81c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vgather(N128 w, in sbyte src, Vector128<sbyte> vidx)
7ffdaf2a81e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vgather(N128 w, in byte src, Vector128<byte> vidx)
7ffdaf2a81f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vgather(N256 w, in sbyte src, Vector256<sbyte> vidx)
7ffdaf2a8210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vgather(N256 w, in byte src, Vector256<byte> vidx)
7ffdaf2a8228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vgather(N256 w, in short src, Vector256<short> vidx)
7ffdaf2a8240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vgather(N256 w, in ushort src, Vector256<ushort> vidx)
7ffdaf2a8258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vindices(Vector128<sbyte> src, sbyte match)
7ffdaf2a82b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vindices(Vector128<byte> src, byte match)
7ffdaf2a82d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vindices(Vector256<sbyte> src, sbyte match)
7ffdaf2a82e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vindices(Vector256<byte> src, byte match)
7ffdaf2a8300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlane(Vector128<byte> src, Vector256<byte> dst, N0 index)
7ffdaf2a8330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlane(Vector128<byte> src, Vector256<byte> dst, N1 index)
7ffdaf2a8348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vlane(Vector128<short> src, Vector256<short> dst, N0 index)
7ffdaf2a8378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vlane(Vector128<short> src, Vector256<short> dst, N1 index)
7ffdaf2a8390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlane(Vector128<ushort> src, Vector256<ushort> dst, N0 index)
7ffdaf2a83c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlane(Vector128<ushort> src, Vector256<ushort> dst, N1 index)
7ffdaf2a83d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vlane(Vector128<double> src, Vector256<double> dst, N0 index)
7ffdaf2a8480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vlane(Vector128<double> src, Vector256<double> dst, N1 index)
7ffdaf2a8498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vmerge(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2a84b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmerge(Vector128<byte> x, Vector128<byte> y)
7ffdaf2a84c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vmerge(Vector128<short> x, Vector128<short> y)
7ffdaf2a84e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmerge(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2a84f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vmerge(Vector128<int> x, Vector128<int> y)
7ffdaf2a8510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmerge(Vector128<uint> x, Vector128<uint> y)
7ffdaf2a8528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vmerge(Vector128<long> x, Vector128<long> y)
7ffdaf2a8540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmerge(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2a8558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vmergehi(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2a8570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmergehi(Vector128<byte> x, Vector128<byte> y)
7ffdaf2a8588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vmergehi(Vector128<short> x, Vector128<short> y)
7ffdaf2a85a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmergehi(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2a85b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vmergehi(Vector128<int> x, Vector128<int> y)
7ffdaf2a85d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmergehi(Vector128<uint> x, Vector128<uint> y)
7ffdaf2a85e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vmergehi(Vector128<long> x, Vector128<long> y)
7ffdaf2a8600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmergehi(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2a8618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vmergehi(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2a8630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmergehi(Vector256<byte> x, Vector256<byte> y)
7ffdaf2a8648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vmergehi(Vector256<short> x, Vector256<short> y)
7ffdaf2a8660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmergehi(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2a8678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vmergehi(Vector256<int> x, Vector256<int> y)
7ffdaf2a8690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmergehi(Vector256<uint> x, Vector256<uint> y)
7ffdaf2a86a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmergehi(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2a86c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vmergehi(Vector256<long> x, Vector256<long> y)
7ffdaf2a86d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vmergelo(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2a86f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmergelo(Vector128<byte> x, Vector128<byte> y)
7ffdaf2a8708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vmergelo(Vector128<short> x, Vector128<short> y)
7ffdaf2a8720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmergelo(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2a8738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vmergelo(Vector128<int> x, Vector128<int> y)
7ffdaf2a8750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmergelo(Vector128<uint> x, Vector128<uint> y)
7ffdaf2a8768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vmergelo(Vector128<long> x, Vector128<long> y)
7ffdaf2a8780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmergelo(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2a8798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmergelo(Vector256<byte> x, Vector256<byte> y)
7ffdaf2a87b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vmergelo(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2a87c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vmergelo(Vector256<short> x, Vector256<short> y)
7ffdaf2a87e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmergelo(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2a87f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vmergelo(Vector256<int> x, Vector256<int> y)
7ffdaf2a8810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmergelo(Vector256<uint> x, Vector256<uint> y)
7ffdaf2a8828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vmergelo(Vector256<long> x, Vector256<long> y)
7ffdaf2a8840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmergelo(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2a8858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmgather(MemoryAddress base, Vector128<uint> vsrc, Vector128<int> vidx, Vector128<uint> mask)
7ffdaf2a8888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmgather(Vector128<ulong> vsrc, MemoryAddress msrc, Vector128<long> vidx, Vector128<ulong> mask)
7ffdaf2a88a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmgather(Vector128<ulong> vsrc, MemoryAddress msrc, Vector128<int> vidx, Vector128<ulong> mask)
7ffdaf2a88b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmgather(Vector128<uint> vsrc, MemoryAddress msrc, Vector128<long> vidx, Vector128<uint> mask)
7ffdaf2a88d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmgather(Vector128<uint> vsrc, MemoryAddress msrc, Vector256<long> vidx, Vector128<uint> mask)
7ffdaf2a88e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmgather(Vector256<uint> vsrc, MemoryAddress msrc, Vector256<int> vidx, Vector256<uint> mask)
7ffdaf2a8900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmgather(Vector256<ulong> vsrc, MemoryAddress msrc, Vector256<long> vidx, Vector256<ulong> mask)
7ffdaf2a8918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmgather(Vector256<ulong> vsrc, MemoryAddress msrc, Vector128<int> vidx, Vector256<ulong> mask)
7ffdaf2a8930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vmove(Vector128<ushort> src, W16 w, N3 i, N0 j)
7ffdaf2a8948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vmove(Vector128<ushort> src, W16 w, N2 i, N0 j)
7ffdaf2a8960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vmove(Vector128<ushort> src, W16 w, N1 i, N0 j)
7ffdaf2a8978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmove(Vector128<uint> src, Vector128<ulong> dst)
7ffdaf2a8990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vmove(Vector128<int> src, Vector128<long> dst)
7ffdaf2a89a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vmove16x32u(in ushort src)
7ffdaf2a89c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vmovemask(Vector128<sbyte> src)
7ffdaf2a89d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vmovemask(Vector128<byte> src)
7ffdaf2a89f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vmovemask(Vector128<float> src)
7ffdaf2a8a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vmovemask(Vector128<double> src)
7ffdaf2a8a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vmovemask(Vector256<sbyte> src)
7ffdaf2a8a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vmovemask(Vector256<byte> src)
7ffdaf2a8a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vmovemask(Vector256<ulong> src)
7ffdaf2a8a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vmovemask(Vector256<float> src)
7ffdaf2a8a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vmovemask(Vector256<double> src)
7ffdaf2a8a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt(Vector128<sbyte> src, ref sbyte dst)
7ffdaf2a8b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt(Vector128<byte> src, ref byte dst)
7ffdaf2a8b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovntdq(Vector128<short> src, ref short dst)
7ffdaf2a8b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt(Vector128<ushort> src, ref ushort dst)
7ffdaf2a8b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt(Vector128<int> src, ref int dst)
7ffdaf2a8b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt(Vector128<uint> src, ref uint dst)
7ffdaf2a8b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt(Vector128<long> src, ref long dst)
7ffdaf2a8ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt(Vector128<ulong> src, ref ulong dst)
7ffdaf2a8bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovntps(Vector128<float> src, ref float dst)
7ffdaf2a8bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovntpd(Vector128<double> src, ref double dst)
7ffdaf2a8be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt(Vector256<sbyte> src, ref sbyte dst)
7ffdaf2a8c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt(Vector256<byte> src, ref byte dst)
7ffdaf2a8c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt(Vector256<short> src, ref short dst)
7ffdaf2a8c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt(Vector256<ushort> src, ref ushort dst)
7ffdaf2a8c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt(Vector256<int> src, ref int dst)
7ffdaf2a8c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt(Vector256<uint> src, ref uint dst)
7ffdaf2a8c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt(Vector256<long> src, ref long dst)
7ffdaf2a8c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovnt(Vector256<ulong> src, ref ulong dst)
7ffdaf2a8ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovntps(Vector256<float> src, ref float dst)
7ffdaf2a8cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmovntpd(Vector256<double> src, ref double dst)
7ffdaf2a8cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vperm2x128(Vector256<float> x, Vector256<float> y, Perm2x4 spec)
7ffdaf2a8db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vperm2x128(Vector256<double> x, Vector256<double> y, Perm2x4 spec)
7ffdaf2a8dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vperm8x32(Vector256<byte> src, Vector256<uint> spec)
7ffdaf2a8f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vperm8x32(Vector256<sbyte> src, Vector256<uint> spec)
7ffdaf2a8fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vperm8x32(Vector256<short> src, Vector256<uint> spec)
7ffdaf2a8fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vperm8x32(Vector256<ushort> src, Vector256<uint> spec)
7ffdaf2a8fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vperm8x32(Vector256<uint> src, Vector256<uint> spec)
7ffdaf2a8ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vperm8x32(Vector256<int> src, Vector256<uint> spec)
7ffdaf2a9008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vperm8x32(Vector256<long> src, Vector256<uint> spec)
7ffdaf2a9020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vperm8x32(Vector256<ulong> src, Vector256<uint> spec)
7ffdaf2a9038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vperm8x32(Vector256<float> src, Vector256<uint> spec)
7ffdaf2a9050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vperm8x32(Vector256<float> src, Vector256<int> spec)
7ffdaf2a9068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vpmovzxbd(Vector128<byte> src, out Vector256<uint> dst)
7ffdaf2a9140h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vpmovzxbq(Vector128<byte> src, out Vector256<ulong> dst)
7ffdaf2a9158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vpmovzxbq(uint src, out Vector256<ulong> dst)
7ffdaf2a9170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vpmovzxbw(Vector128<byte> src, out Vector256<ushort> dst)
7ffdaf2a9188h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vpmovzxdq(Vector128<uint> src, out Vector256<ulong> dst)
7ffdaf2a91a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vpmovzxwd(Vector128<ushort> src, out Vector256<uint> dst)
7ffdaf2a91b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vpmovzxwq(Vector128<ushort> src, out Vector256<ulong> dst)
7ffdaf2a91d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vpmovzxwq(ulong src, out Vector256<ulong> dst)
7ffdaf2a91e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vreverse(Vector128<byte> src)
7ffdaf2a9200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vreverse(Vector128<sbyte> src)
7ffdaf2a9218h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vreverse(Vector128<short> src)
7ffdaf2a9230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vreverse(Vector128<ushort> src)
7ffdaf2a9248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vreverse(Vector128<int> src)
7ffdaf2a9260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vreverse(Vector128<uint> src)
7ffdaf2a9278h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vreverse(Vector128<long> src)
7ffdaf2a9290h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vreverse(Vector128<ulong> src)
7ffdaf2a92a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vreverse(Vector256<byte> src)
7ffdaf2a92c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vreverse(Vector256<sbyte> src)
7ffdaf2a92d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vreverse(Vector256<short> src)
7ffdaf2a92f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vreverse(Vector256<ushort> src)
7ffdaf2a9308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vreverse(Vector256<int> src)
7ffdaf2a9320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vreverse(Vector256<uint> src)
7ffdaf2a9338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vreverse(Vector256<long> src)
7ffdaf2a9350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vreverse(Vector256<ulong> src)
7ffdaf2a9368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vreverse(Vector256<float> src)
7ffdaf2a9380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> get_MRev256f32()
7ffdaf2a9398h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> get_MRev256u32()
7ffdaf2a93b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vshuf16x8(Vector128<sbyte> src, Vector128<sbyte> spec)
7ffdaf2a93e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vshuf16x8(Vector128<byte> src, Vector128<byte> spec)
7ffdaf2a93f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vshuf16x8(Vector128<short> src, Vector128<byte> spec)
7ffdaf2a9410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vshuf16x8(Vector128<ushort> src, Vector128<byte> spec)
7ffdaf2a9428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vshuf16x8(Vector128<int> src, Vector128<byte> spec)
7ffdaf2a9440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vshuf16x8(Vector128<uint> src, Vector128<byte> spec)
7ffdaf2a9458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vshuf16x8(Vector128<long> src, Vector128<byte> spec)
7ffdaf2a9470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vshuf16x8(Vector128<ulong> src, Vector128<byte> spec)
7ffdaf2a9488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vshuf16x8(Vector256<sbyte> src, Vector256<sbyte> spec)
7ffdaf2a94a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vshuf16x8(Vector256<byte> src, Vector256<byte> spec)
7ffdaf2a94b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vshuf16x8(Vector256<short> src, Vector256<byte> spec)
7ffdaf2a94d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vshuf16x8(Vector256<ushort> src, Vector256<byte> spec)
7ffdaf2a94e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vshuf16x8(Vector256<int> src, Vector256<byte> spec)
7ffdaf2a9500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vshuf16x8(Vector256<uint> src, Vector256<byte> spec)
7ffdaf2a9518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vshuf16x8(Vector256<long> src, Vector256<byte> spec)
7ffdaf2a9530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vshuf16x8(Vector256<ulong> src, Vector256<byte> spec)
7ffdaf2a9548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vshuf32x8(Vector256<byte> a, Vector256<byte> spec)
7ffdaf2a9710h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vswap(Vector128<byte> src, uint i, uint j)
7ffdaf2a9a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vswap(Vector128<ushort> src, uint i, uint j)
7ffdaf2a9aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vswaphl(Vector256<byte> x)
7ffdaf2a9ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vswaphl(Vector256<sbyte> x)
7ffdaf2a9ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vswaphl(Vector256<short> x)
7ffdaf2a9b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vswaphl(Vector256<ushort> x)
7ffdaf2a9b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vswaphl(Vector256<int> x)
7ffdaf2a9b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vswaphl(Vector256<uint> x)
7ffdaf2a9b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vswaphl(Vector256<long> x)
7ffdaf2a9b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vswaphl(Vector256<ulong> x)
7ffdaf2a9b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vswaphl(Vector128<sbyte> x)
7ffdaf2a9b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vswaphl(Vector128<byte> x)
7ffdaf2a9ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vswaphl(Vector128<short> x)
7ffdaf2a9bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vswaphl(Vector128<int> x)
7ffdaf2a9bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vswaphl(Vector128<uint> x)
7ffdaf2a9c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vswaphl(Vector128<ulong> x)
7ffdaf2a9c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vswaphl(Vector128<long> x)
7ffdaf2a9c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vswaphl(Vector256<float> x)
7ffdaf2a9c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vswaphl(Vector256<double> x)
7ffdaf2a9c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vtranspose(ref Vector128<float> row0, ref Vector128<float> row1, ref Vector128<float> row2, ref Vector128<float> row3)
7ffdaf2a9c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vtranspose(ref Vector128<uint> row0, ref Vector128<uint> row1, ref Vector128<uint> row2, ref Vector128<uint> row3)
7ffdaf2a9c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vunpackhi(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2a9cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vunpackhi(Vector128<byte> x, Vector128<byte> y)
7ffdaf2a9cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vunpackhi(Vector128<short> x, Vector128<short> y)
7ffdaf2a9ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vunpackhi(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2a9cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vunpackhi(Vector128<int> x, Vector128<int> y)
7ffdaf2a9d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vunpackhi(Vector128<uint> x, Vector128<uint> y)
7ffdaf2a9d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vunpackhi(Vector128<long> x, Vector128<long> y)
7ffdaf2a9d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vunpackhi(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2a9d58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vunpackhi(Vector128<float> x, Vector128<float> y)
7ffdaf2a9d70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vunpackhi(Vector128<double> x, Vector128<double> y)
7ffdaf2a9d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vunpackhi(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2a9da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vunpackhi(Vector256<byte> x, Vector256<byte> y)
7ffdaf2a9db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vunpackhi(Vector256<short> x, Vector256<short> y)
7ffdaf2a9dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vunpackhi(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2a9de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vunpackhi(Vector256<int> x, Vector256<int> y)
7ffdaf2a9e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vunpackhi(Vector256<uint> x, Vector256<uint> y)
7ffdaf2a9e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vunpackhi(Vector256<long> x, Vector256<long> y)
7ffdaf2a9e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vunpackhi(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2a9e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vunpackhi(Vector256<float> x, Vector256<float> y)
7ffdaf2a9e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vunpackhi(Vector256<double> x, Vector256<double> y)
7ffdaf2a9e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vunpacklo(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2a9e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vunpacklo(Vector128<byte> x, Vector128<byte> y)
7ffdaf2a9ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vunpacklo(Vector128<short> x, Vector128<short> y)
7ffdaf2a9ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vunpacklo(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2a9ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vunpacklo(Vector128<int> x, Vector128<int> y)
7ffdaf2a9ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vunpacklo(Vector128<uint> x, Vector128<uint> y)
7ffdaf2a9f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vunpacklo(Vector128<long> x, Vector128<long> y)
7ffdaf2a9f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vunpacklo(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2a9f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vunpacklo(Vector128<float> x, Vector128<float> y)
7ffdaf2a9f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vunpacklo(Vector128<double> x, Vector128<double> y)
7ffdaf2a9f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vunpacklo(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2a9f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vunpacklo(Vector256<byte> x, Vector256<byte> y)
7ffdaf2a9f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vunpacklo(Vector256<short> x, Vector256<short> y)
7ffdaf2a9fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vunpacklo(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2a9fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vunpacklo(Vector256<int> x, Vector256<int> y)
7ffdaf2a9fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vunpacklo(Vector256<uint> x, Vector256<uint> y)
7ffdaf2a9ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vunpacklo(Vector256<long> x, Vector256<long> y)
7ffdaf2aa010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vunpacklo(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2aa028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vunpacklo(Vector256<float> x, Vector256<float> y)
7ffdaf2aa040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vunpacklo(Vector256<double> x, Vector256<double> y)
7ffdaf2aa058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vand(Vector128<byte> x, Vector128<byte> y)
7ffdaf2aa070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vand(Vector128<short> x, Vector128<short> y)
7ffdaf2aa088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vand(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2aa0a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vand(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2aa0b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vand(Vector128<int> x, Vector128<int> y)
7ffdaf2aa0d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vand(Vector128<uint> x, Vector128<uint> y)
7ffdaf2aa0e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vand(Vector128<long> x, Vector128<long> y)
7ffdaf2aa100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vand(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2aa118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vand(Vector256<byte> x, Vector256<byte> y)
7ffdaf2aa130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vand(Vector256<short> x, Vector256<short> y)
7ffdaf2aa148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vand(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2aa160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vand(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2aa178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vand(Vector256<int> x, Vector256<int> y)
7ffdaf2aa190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vand(Vector256<uint> x, Vector256<uint> y)
7ffdaf2aa1a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vand(Vector256<long> x, Vector256<long> y)
7ffdaf2aa1c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vand(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2aa1d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vand(Vector128<float> x, Vector128<float> y)
7ffdaf2aa1f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vand(Vector128<double> x, Vector128<double> y)
7ffdaf2aa208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vand(Vector256<float> x, Vector256<float> y)
7ffdaf2aa220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vand(Vector256<double> x, Vector256<double> y)
7ffdaf2aa238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vcimpl(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2aa250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vcimpl(Vector128<byte> x, Vector128<byte> y)
7ffdaf2aa268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vcimpl(Vector128<short> x, Vector128<short> y)
7ffdaf2aa280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vcimpl(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2aa298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vcimpl(Vector128<int> x, Vector128<int> y)
7ffdaf2aa2b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vcimpl(Vector128<uint> x, Vector128<uint> y)
7ffdaf2aa2c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vcimpl(Vector128<long> x, Vector128<long> y)
7ffdaf2aa2e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vcimpl(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2aa2f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vcimpl(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2aa310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vcimpl(Vector256<byte> x, Vector256<byte> y)
7ffdaf2aa328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vcimpl(Vector256<short> x, Vector256<short> y)
7ffdaf2aa340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vcimpl(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2aa358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vcimpl(Vector256<int> x, Vector256<int> y)
7ffdaf2aa370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vcimpl(Vector256<uint> x, Vector256<uint> y)
7ffdaf2aa388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vcimpl(Vector256<long> x, Vector256<long> y)
7ffdaf2aa3a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vcimpl(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2aa3b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vcnonimpl(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2aa3d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vcnonimpl(Vector128<byte> x, Vector128<byte> y)
7ffdaf2aa3e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vcnonimpl(Vector128<short> x, Vector128<short> y)
7ffdaf2aa400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vcnonimpl(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2aa418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vcnonimpl(Vector128<int> x, Vector128<int> y)
7ffdaf2aa430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vcnonimpl(Vector128<uint> x, Vector128<uint> y)
7ffdaf2aa448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vcnonimpl(Vector128<long> x, Vector128<long> y)
7ffdaf2aa460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vcnonimpl(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2aa478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vcnonimpl(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2aa490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vcnonimpl(Vector256<byte> x, Vector256<byte> y)
7ffdaf2aa4a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vcnonimpl(Vector256<short> x, Vector256<short> y)
7ffdaf2aa4c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vcnonimpl(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2aa4d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vcnonimpl(Vector256<int> x, Vector256<int> y)
7ffdaf2aa4f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vcnonimpl(Vector256<uint> x, Vector256<uint> y)
7ffdaf2aa508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vcnonimpl(Vector256<long> x, Vector256<long> y)
7ffdaf2aa520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vcnonimpl(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2aa538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vcnonimpl(Vector128<float> x, Vector128<float> y)
7ffdaf2aa550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vcnonimpl(Vector128<double> x, Vector128<double> y)
7ffdaf2aa568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vcnonimpl(Vector256<float> x, Vector256<float> y)
7ffdaf2aa580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vcnonimpl(Vector256<double> x, Vector256<double> y)
7ffdaf2aa598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vimpl(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2aa5b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vimpl(Vector128<byte> x, Vector128<byte> y)
7ffdaf2aa5c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vimpl(Vector128<short> x, Vector128<short> y)
7ffdaf2aa5e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vimpl(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2aa5f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vimpl(Vector128<int> x, Vector128<int> y)
7ffdaf2aa610h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vimpl(Vector128<uint> x, Vector128<uint> y)
7ffdaf2aa628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vimpl(Vector128<long> x, Vector128<long> y)
7ffdaf2aa640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vimpl(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2aa658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vimpl(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2aa670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vimpl(Vector256<byte> x, Vector256<byte> y)
7ffdaf2aa688h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vimpl(Vector256<short> x, Vector256<short> y)
7ffdaf2aa6a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vimpl(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2aa6b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vimpl(Vector256<int> x, Vector256<int> y)
7ffdaf2aa6d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vimpl(Vector256<uint> x, Vector256<uint> y)
7ffdaf2aa6e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vimpl(Vector256<long> x, Vector256<long> y)
7ffdaf2aa700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vimpl(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2aa718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vnand(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2aa730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vnand(Vector128<byte> x, Vector128<byte> y)
7ffdaf2aa748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vnand(Vector128<short> x, Vector128<short> y)
7ffdaf2aa760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vnand(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2aa778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vnand(Vector128<int> x, Vector128<int> y)
7ffdaf2aa790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vnand(Vector128<uint> x, Vector128<uint> y)
7ffdaf2aa7a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vnand(Vector128<long> x, Vector128<long> y)
7ffdaf2aa7c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vnand(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2aa7d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vnand(Vector128<float> x, Vector128<float> y)
7ffdaf2aa7f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vnand(Vector128<double> x, Vector128<double> y)
7ffdaf2aa808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vnand(Vector256<byte> x, Vector256<byte> y)
7ffdaf2aa820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vnand(Vector256<short> x, Vector256<short> y)
7ffdaf2aa838h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vnand(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2aa850h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vnand(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2aa868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vnand(Vector256<int> x, Vector256<int> y)
7ffdaf2aa880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vnand(Vector256<uint> x, Vector256<uint> y)
7ffdaf2aa898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vnand(Vector256<long> x, Vector256<long> y)
7ffdaf2aa8b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vnand(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2aa8c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vnand(Vector256<float> x, Vector256<float> y)
7ffdaf2aa8e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vnand(Vector256<double> x, Vector256<double> y)
7ffdaf2aa8f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vnonimpl(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2aa910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vnonimpl(Vector128<byte> x, Vector128<byte> y)
7ffdaf2aa928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vnonimpl(Vector128<short> x, Vector128<short> y)
7ffdaf2aa940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vnonimpl(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2aa958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vnonimpl(Vector128<int> x, Vector128<int> y)
7ffdaf2aa970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vnonimpl(Vector128<uint> x, Vector128<uint> y)
7ffdaf2aa988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vnonimpl(Vector128<long> x, Vector128<long> y)
7ffdaf2aa9a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vnonimpl(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2aa9b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vnonimpl(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2aa9d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vnonimpl(Vector256<byte> x, Vector256<byte> y)
7ffdaf2aa9e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vnonimpl(Vector256<short> x, Vector256<short> y)
7ffdaf2aaa00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vnonimpl(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2aaa18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vnonimpl(Vector256<int> x, Vector256<int> y)
7ffdaf2aaa30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vnonimpl(Vector256<uint> x, Vector256<uint> y)
7ffdaf2aaa48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vnonimpl(Vector256<long> x, Vector256<long> y)
7ffdaf2aaa60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vnonimpl(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2aaa78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vnor(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2aaa90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vnor(Vector128<byte> x, Vector128<byte> y)
7ffdaf2aaaa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vnor(Vector128<short> x, Vector128<short> y)
7ffdaf2aaac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vnor(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2aaad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vnor(Vector128<int> x, Vector128<int> y)
7ffdaf2aaaf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vnor(Vector128<uint> x, Vector128<uint> y)
7ffdaf2aab08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vnor(Vector128<long> x, Vector128<long> y)
7ffdaf2aab20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vnor(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2aab38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vnor(Vector128<float> x, Vector128<float> y)
7ffdaf2aab50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vnor(Vector128<double> x, Vector128<double> y)
7ffdaf2aab68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vnor(Vector256<byte> x, Vector256<byte> y)
7ffdaf2aab80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vnor(Vector256<short> x, Vector256<short> y)
7ffdaf2aab98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vnor(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2aabb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vnor(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2aabc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vnor(Vector256<int> x, Vector256<int> y)
7ffdaf2aabe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vnor(Vector256<uint> x, Vector256<uint> y)
7ffdaf2aabf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vnor(Vector256<long> x, Vector256<long> y)
7ffdaf2aac10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vnor(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2aac28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vnor(Vector256<float> x, Vector256<float> y)
7ffdaf2aac40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vnor(Vector256<double> x, Vector256<double> y)
7ffdaf2aac58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vnot(Vector128<sbyte> a)
7ffdaf2aac70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vnot(Vector128<byte> a)
7ffdaf2aac88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vnot(Vector128<short> a)
7ffdaf2aaca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vnot(Vector128<ushort> a)
7ffdaf2aacb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vnot(Vector128<int> a)
7ffdaf2aacd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vnot(Vector128<uint> a)
7ffdaf2aace8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vnot(Vector128<long> a)
7ffdaf2aad00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vnot(Vector128<ulong> a)
7ffdaf2aad18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vnot(Vector128<float> a)
7ffdaf2aad30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vnot(Vector128<double> a)
7ffdaf2aad48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vnot(Vector256<sbyte> a)
7ffdaf2aad60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vnot(Vector256<byte> a)
7ffdaf2aad78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vnot(Vector256<short> a)
7ffdaf2aad90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vnot(Vector256<ushort> a)
7ffdaf2aada8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vnot(Vector256<int> a)
7ffdaf2aadc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vnot(Vector256<uint> a)
7ffdaf2aadd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vnot(Vector256<long> a)
7ffdaf2aadf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vnot(Vector256<ulong> a)
7ffdaf2aae08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vnot(Vector256<float> a)
7ffdaf2aae20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vnot(Vector256<double> a)
7ffdaf2aae38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vor(Vector128<byte> x, Vector128<byte> y)
7ffdaf2aae50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vor(Vector128<short> x, Vector128<short> y)
7ffdaf2aae68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vor(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2aae80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vor(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2aae98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vor(Vector128<int> x, Vector128<int> y)
7ffdaf2aaeb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vor(Vector128<uint> x, Vector128<uint> y)
7ffdaf2aaec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vor(Vector128<long> x, Vector128<long> y)
7ffdaf2aaee0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vor(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2aaef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vor(Vector256<byte> x, Vector256<byte> y)
7ffdaf2aaf10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vor(Vector256<short> x, Vector256<short> y)
7ffdaf2aaf28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vor(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2aaf40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vor(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2aaf58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vor(Vector256<int> x, Vector256<int> y)
7ffdaf2aaf70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vor(Vector256<uint> x, Vector256<uint> y)
7ffdaf2aaf88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vor(Vector256<long> x, Vector256<long> y)
7ffdaf2aafa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vor(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2aafb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vor(Vector128<float> x, Vector128<float> y)
7ffdaf2aafd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vor(Vector128<double> x, Vector128<double> y)
7ffdaf2aafe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vor(Vector256<float> x, Vector256<float> y)
7ffdaf2ab000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vor(Vector256<double> x, Vector256<double> y)
7ffdaf2ab018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vselect(Vector128<byte> x, Vector128<byte> y, Vector128<byte> z)
7ffdaf2ab030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vselect(Vector128<ushort> x, Vector128<ushort> y, Vector128<ushort> z)
7ffdaf2ab048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vselect(Vector128<uint> x, Vector128<uint> y, Vector128<uint> z)
7ffdaf2ab060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vselect(Vector128<ulong> x, Vector128<ulong> y, Vector128<ulong> z)
7ffdaf2ab078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vselect(Vector256<byte> x, Vector256<byte> y, Vector256<byte> z)
7ffdaf2ab090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vselect(Vector256<ushort> x, Vector256<ushort> y, Vector256<ushort> z)
7ffdaf2ab0a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vselect(Vector256<uint> x, Vector256<uint> y, Vector256<uint> z)
7ffdaf2ab0c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vselect(Vector256<ulong> x, Vector256<ulong> y, Vector256<ulong> z)
7ffdaf2ab0d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vxnor(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2ab0f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vxnor(Vector128<byte> x, Vector128<byte> y)
7ffdaf2ab108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vxnor(Vector128<short> x, Vector128<short> y)
7ffdaf2ab120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vxnor(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2ab138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vxnor(Vector128<int> x, Vector128<int> y)
7ffdaf2ab150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vxnor(Vector128<uint> x, Vector128<uint> y)
7ffdaf2ab168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vxnor(Vector128<long> x, Vector128<long> y)
7ffdaf2ab180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vxnor(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2ab198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vxnor(Vector256<byte> x, Vector256<byte> y)
7ffdaf2ab1b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vxnor(Vector256<short> x, Vector256<short> y)
7ffdaf2ab1c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vxnor(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2ab1e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vxnor(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2ab1f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vxnor(Vector256<int> x, Vector256<int> y)
7ffdaf2ab210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vxnor(Vector256<uint> x, Vector256<uint> y)
7ffdaf2ab228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vxnor(Vector256<long> x, Vector256<long> y)
7ffdaf2ab240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vxnor(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2ab258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vxnor(Vector128<float> x, Vector128<float> y)
7ffdaf2ab270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vxnor(Vector128<double> x, Vector128<double> y)
7ffdaf2ab288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vxnor(Vector256<float> x, Vector256<float> y)
7ffdaf2ab2a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vxnor(Vector256<double> x, Vector256<double> y)
7ffdaf2ab2b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vxor(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2ab2d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vxor(Vector128<byte> x, Vector128<byte> y)
7ffdaf2ab2e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vxor(Vector128<short> x, Vector128<short> y)
7ffdaf2ab300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vxor(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2ab318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vxor(Vector128<int> x, Vector128<int> y)
7ffdaf2ab330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vxor(Vector128<uint> x, Vector128<uint> y)
7ffdaf2ab348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vxor(Vector128<long> x, Vector128<long> y)
7ffdaf2ab360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vxor(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2ab378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vxor(Vector256<byte> x, Vector256<byte> y)
7ffdaf2ab390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vxor(Vector256<short> x, Vector256<short> y)
7ffdaf2ab3a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vxor(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2ab3c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vxor(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2ab3d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vxor(Vector256<int> x, Vector256<int> y)
7ffdaf2ab3f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vxor(Vector256<uint> x, Vector256<uint> y)
7ffdaf2ab408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vxor(Vector256<long> x, Vector256<long> y)
7ffdaf2ab420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vxor(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2ab438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vxor(Vector128<float> lhs, Vector128<float> rhs)
7ffdaf2ab450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vxor(Vector128<double> lhs, Vector128<double> rhs)
7ffdaf2ab468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vxor(Vector256<float> lhs, Vector256<float> rhs)
7ffdaf2ab480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vxor(Vector256<double> lhs, Vector256<double> rhs)
7ffdaf2ab498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vxor(in Vector128<float> x, in Vector128<float> y)
7ffdaf2ab4b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vxor(in Vector128<double> x, in Vector128<double> y)
7ffdaf2ab4c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vxor(in Vector256<float> x, in Vector256<float> y)
7ffdaf2ab4e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vxor(in Vector256<double> x, in Vector256<double> y)
7ffdaf2ab4f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<sbyte> vxor(Vector512<sbyte> x, Vector512<sbyte> y)
7ffdaf2ab510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vxornot(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2ab528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vxornot(Vector128<byte> x, Vector128<byte> y)
7ffdaf2ab540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vxornot(Vector128<short> x, Vector128<short> y)
7ffdaf2ab558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vxornot(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2ab570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vxornot(Vector128<int> x, Vector128<int> y)
7ffdaf2ab588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vxornot(Vector128<uint> x, Vector128<uint> y)
7ffdaf2ab5a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vxornot(Vector128<long> x, Vector128<long> y)
7ffdaf2ab5b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vxornot(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2ab5d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vxornot(Vector256<byte> x, Vector256<byte> y)
7ffdaf2ab5e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vxornot(Vector256<short> x, Vector256<short> y)
7ffdaf2ab600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vxornot(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2ab618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vxornot(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2ab630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vxornot(Vector256<int> x, Vector256<int> y)
7ffdaf2ab648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vxornot(Vector256<uint> x, Vector256<uint> y)
7ffdaf2ab660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vxornot(Vector256<long> x, Vector256<long> y)
7ffdaf2ab678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vxornot(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2ab690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vxornot(Vector128<float> x, Vector128<float> y)
7ffdaf2ab6a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vxornot(Vector128<double> x, Vector128<double> y)
7ffdaf2ab6c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vxornot(Vector256<float> x, Vector256<float> y)
7ffdaf2ab6d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vxornot(Vector256<double> x, Vector256<double> y)
7ffdaf2ab6f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> get_K1()
7ffdaf2ab708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> get_K2()
7ffdaf2ab720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> get_K4()
7ffdaf2ab738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> get_v128K1()
7ffdaf2ab750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> get_v128K2()
7ffdaf2ab768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> get_v128K4()
7ffdaf2ab780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop(Vector128<ulong> x, Vector128<ulong> y, Vector128<ulong> z)
7ffdaf2ab798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vpop(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdaf2ab7b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc(ulong a, ulong b)
7ffdaf2ab7c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc(ulong a)
7ffdaf2ab7e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz(ulong a, ulong b)
7ffdaf2ab7f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> veq(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2ab810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> veq(Vector128<byte> x, Vector128<byte> y)
7ffdaf2ab828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> veq(Vector128<short> x, Vector128<short> y)
7ffdaf2ab840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> veq(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2ab858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> veq(Vector128<int> x, Vector128<int> y)
7ffdaf2ab870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> veq(Vector128<uint> x, Vector128<uint> y)
7ffdaf2ab888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> veq(Vector128<long> x, Vector128<long> y)
7ffdaf2ab8a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> veq(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2ab8b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> veq(Vector128<float> x, Vector128<float> y)
7ffdaf2ab8d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> veq(Vector128<double> x, Vector128<double> y)
7ffdaf2ab8e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> veq(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2ab900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> veq(Vector256<byte> x, Vector256<byte> y)
7ffdaf2ab918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> veq(Vector256<short> x, Vector256<short> y)
7ffdaf2ab930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> veq(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2ab948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> veq(Vector256<int> x, Vector256<int> y)
7ffdaf2ab960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> veq(Vector256<uint> x, Vector256<uint> y)
7ffdaf2ab978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> veq(Vector256<long> x, Vector256<long> y)
7ffdaf2ab990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> veq(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2ab9a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> veq(Vector256<float> x, Vector256<float> y)
7ffdaf2ab9c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> veq(Vector256<double> x, Vector256<double> y)
7ffdaf2ab9d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vgt(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2ab9f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vgt(Vector128<byte> x, Vector128<byte> y)
7ffdaf2aba08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vgt(Vector128<short> x, Vector128<short> y)
7ffdaf2aba20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vgt(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2aba38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vgt(Vector128<int> x, Vector128<int> y)
7ffdaf2aba50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vgt(Vector128<uint> x, Vector128<uint> y)
7ffdaf2aba68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vgt(Vector128<long> x, Vector128<long> y)
7ffdaf2aba80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vgt(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2aba98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vgt(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2abab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vgt(Vector256<byte> x, Vector256<byte> y)
7ffdaf2abac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vgt(Vector256<short> x, Vector256<short> y)
7ffdaf2abae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vgt(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2abaf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vgt(Vector256<int> x, Vector256<int> y)
7ffdaf2abb10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vgt(Vector256<uint> x, Vector256<uint> y)
7ffdaf2abb28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vgt(Vector256<long> x, Vector256<long> y)
7ffdaf2abb40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vgt(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2abb58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vgt(Vector128<float> x, Vector128<float> y)
7ffdaf2abb70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vgt(Vector128<double> x, Vector128<double> y)
7ffdaf2abb88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vgt(Vector256<float> x, Vector256<float> y)
7ffdaf2abba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vgt(Vector256<double> x, Vector256<double> y)
7ffdaf2abbb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vgteq(Vector128<float> x, Vector128<float> y)
7ffdaf2abbd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vgteq(Vector128<double> x, Vector128<double> y)
7ffdaf2abbe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vgteq(Vector256<float> x, Vector256<float> y)
7ffdaf2abc00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vgteq(Vector256<double> x, Vector256<double> y)
7ffdaf2abc18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vle(Vector128<byte> a, Vector128<byte> b)
7ffdaf2abc30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vle(Vector128<ushort> a, Vector128<ushort> b)
7ffdaf2abc48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vle(Vector128<uint> a, Vector128<uint> b)
7ffdaf2abc60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vle(Vector128<ulong> a, Vector128<ulong> b)
7ffdaf2abc78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vle(Vector256<byte> a, Vector256<byte> b)
7ffdaf2abc90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vle(Vector256<ushort> a, Vector256<ushort> b)
7ffdaf2abca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vle(Vector256<uint> a, Vector256<uint> b)
7ffdaf2abcc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vle(Vector256<ulong> a, Vector256<ulong> b)
7ffdaf2abcd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vle(Vector128<float> a, Vector128<float> b)
7ffdaf2abcf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vle(Vector128<double> a, Vector128<double> b)
7ffdaf2abd08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vle(Vector256<float> a, Vector256<float> b)
7ffdaf2abd20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vle(Vector256<double> a, Vector256<double> b)
7ffdaf2abd38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vlt(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2abd50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlt(Vector128<byte> x, Vector128<byte> y)
7ffdaf2abd68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vlt(Vector128<short> x, Vector128<short> y)
7ffdaf2abd80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlt(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2abd98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vlt(Vector128<int> x, Vector128<int> y)
7ffdaf2abdb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlt(Vector128<uint> x, Vector128<uint> y)
7ffdaf2abdc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vlt(Vector128<long> x, Vector128<long> y)
7ffdaf2abde0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlt(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2abdf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vlt(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2abe10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vlt(Vector256<byte> x, Vector256<byte> y)
7ffdaf2abe28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vlt(Vector256<short> x, Vector256<short> y)
7ffdaf2abe40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vlt(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2abe58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vlt(Vector256<int> x, Vector256<int> y)
7ffdaf2abe70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vlt(Vector256<uint> x, Vector256<uint> y)
7ffdaf2abe88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vlt(Vector256<long> x, Vector256<long> y)
7ffdaf2abea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vlt(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2abeb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vlt(Vector128<float> lhs, Vector128<float> rhs)
7ffdaf2abed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vlt(Vector128<double> lhs, Vector128<double> rhs)
7ffdaf2abee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vlt(Vector256<float> lhs, Vector256<float> rhs)
7ffdaf2abf00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vlt(Vector256<double> lhs, Vector256<double> rhs)
7ffdaf2abf18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmax(Vector128<byte> x, Vector128<byte> y)
7ffdaf2abf30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vmax(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2abf48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vmax(Vector128<short> x, Vector128<short> y)
7ffdaf2abf60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmax(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2abf78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vmax(Vector128<int> x, Vector128<int> y)
7ffdaf2abf90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmax(Vector128<uint> x, Vector128<uint> y)
7ffdaf2c0000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vmax(Vector128<long> x, Vector128<long> y)
7ffdaf2c0030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmax(Vector256<byte> x, Vector256<byte> y)
7ffdaf2c0048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vmax(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2c0060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vmax(Vector256<short> x, Vector256<short> y)
7ffdaf2c0078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmax(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2c0090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vmax(Vector256<int> x, Vector256<int> y)
7ffdaf2c00a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmax(Vector256<uint> x, Vector256<uint> y)
7ffdaf2c00c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vmax(Vector256<long> x, Vector256<long> y)
7ffdaf2c00f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vmax(Vector128<float> x, Vector128<float> y)
7ffdaf2c0108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vmax(Vector128<double> x, Vector128<double> y)
7ffdaf2c0120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vmax(Vector256<float> x, Vector256<float> y)
7ffdaf2c0138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vmax(Vector256<double> x, Vector256<double> y)
7ffdaf2c0150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vmin(Vector128<byte> x, Vector128<byte> y)
7ffdaf2c0168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vmin(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2c0180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vmin(Vector128<short> x, Vector128<short> y)
7ffdaf2c0198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vmin(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2c01b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vmin(Vector128<int> x, Vector128<int> y)
7ffdaf2c01c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmin(Vector128<uint> x, Vector128<uint> y)
7ffdaf2c01e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vmin(Vector128<long> x, Vector128<long> y)
7ffdaf2c01f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vmin(Vector256<byte> x, Vector256<byte> y)
7ffdaf2c0228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vmin(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2c0240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vmin(Vector256<short> x, Vector256<short> y)
7ffdaf2c0258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vmin(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2c0270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vmin(Vector256<int> x, Vector256<int> y)
7ffdaf2c0288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmin(Vector256<uint> x, Vector256<uint> y)
7ffdaf2c02a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmin(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2c02b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vmin(Vector256<long> x, Vector256<long> y)
7ffdaf2c02d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vmin(Vector128<float> x, Vector128<float> y)
7ffdaf2c02e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vmin(Vector128<double> x, Vector128<double> y)
7ffdaf2c0300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vmin(Vector256<float> x, Vector256<float> y)
7ffdaf2c0318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vmin(Vector256<double> x, Vector256<double> y)
7ffdaf2c0330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vneq(Vector128<float> a, Vector128<float> b)
7ffdaf2c0348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vneq(Vector128<double> a, Vector128<double> b)
7ffdaf2c0360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vneq(Vector256<float> a, Vector256<float> b)
7ffdaf2c0378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vneq(Vector256<double> a, Vector256<double> b)
7ffdaf2c0390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vngt(Vector128<float> x, Vector128<float> y)
7ffdaf2c03a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vngt(Vector128<double> x, Vector128<double> y)
7ffdaf2c03c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vngteq(Vector128<float> x, Vector128<float> y)
7ffdaf2c03d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vngteq(Vector128<double> x, Vector128<double> y)
7ffdaf2c03f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vnlt(Vector128<double> x, Vector128<double> y)
7ffdaf2c0408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vnlt(Vector128<float> x, Vector128<float> y)
7ffdaf2c0420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector128<byte> src)
7ffdaf2c0438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector128<sbyte> src)
7ffdaf2c0450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector128<short> src)
7ffdaf2c0468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector128<ushort> src)
7ffdaf2c0480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector128<int> src)
7ffdaf2c0498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector128<uint> src)
7ffdaf2c04b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector128<long> src)
7ffdaf2c04c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector128<ulong> src)
7ffdaf2c04e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector128<float> src)
7ffdaf2c04f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector128<double> src)
7ffdaf2c0510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector256<byte> src)
7ffdaf2c0528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector256<sbyte> src)
7ffdaf2c0540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector256<short> src)
7ffdaf2c0558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector256<ushort> src)
7ffdaf2c0570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector256<int> src)
7ffdaf2c0588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector256<uint> src)
7ffdaf2c05a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector256<long> src)
7ffdaf2c05b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector256<ulong> src)
7ffdaf2c05d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector256<float> src)
7ffdaf2c05e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vnonz(Vector256<double> src)
7ffdaf2c0600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector128<byte> x, Vector128<byte> y)
7ffdaf2c0618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2c0630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector128<short> x, Vector128<short> y)
7ffdaf2c0648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2c0660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector128<int> x, Vector128<int> y)
7ffdaf2c0678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector128<uint> x, Vector128<uint> y)
7ffdaf2c0690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector128<long> x, Vector128<long> y)
7ffdaf2c06a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2c06c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector128<float> x, Vector128<float> y)
7ffdaf2c06d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector128<double> x, Vector128<double> y)
7ffdaf2c06f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector256<byte> x, Vector256<byte> y)
7ffdaf2c0708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2c0720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector256<short> x, Vector256<short> y)
7ffdaf2c0738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2c0750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector256<int> x, Vector256<int> y)
7ffdaf2c0768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector256<uint> x, Vector256<uint> y)
7ffdaf2c0780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector256<long> x, Vector256<long> y)
7ffdaf2c0798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2c07b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector256<float> x, Vector256<float> y)
7ffdaf2c07c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vsame(Vector256<double> x, Vector256<double> y)
7ffdaf2c07e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<sbyte> src)
7ffdaf2c07f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<byte> src)
7ffdaf2c0810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<short> src)
7ffdaf2c0828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<ushort> src)
7ffdaf2c0840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<int> src)
7ffdaf2c0858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<uint> src)
7ffdaf2c0870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<long> src)
7ffdaf2c0888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<ulong> src)
7ffdaf2c08a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<float> src)
7ffdaf2c08b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<double> src)
7ffdaf2c08d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<sbyte> src)
7ffdaf2c08e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<byte> src)
7ffdaf2c0900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<short> src)
7ffdaf2c0918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<ushort> src)
7ffdaf2c0930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<int> src)
7ffdaf2c0948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<uint> src)
7ffdaf2c0960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<long> src)
7ffdaf2c0978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<ulong> src)
7ffdaf2c0990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<float> src)
7ffdaf2c09a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<double> src)
7ffdaf2c09c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<sbyte> src, Vector128<sbyte> mask)
7ffdaf2c09d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<byte> src, Vector128<byte> mask)
7ffdaf2c09f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<short> src, Vector128<short> mask)
7ffdaf2c0a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<ushort> src, Vector128<ushort> mask)
7ffdaf2c0a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<int> src, Vector128<int> mask)
7ffdaf2c0a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<uint> src, Vector128<uint> mask)
7ffdaf2c0a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<long> src, Vector128<long> mask)
7ffdaf2c0a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<ulong> src, Vector128<ulong> mask)
7ffdaf2c0a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<sbyte> src, Vector256<sbyte> mask)
7ffdaf2c0a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<byte> src, Vector256<byte> mask)
7ffdaf2c0ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<short> src, Vector256<short> mask)
7ffdaf2c0ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<ushort> src, Vector256<ushort> mask)
7ffdaf2c0ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<int> src, Vector256<int> mask)
7ffdaf2c0af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<uint> src, Vector256<uint> mask)
7ffdaf2c0b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<long> src, Vector256<long> mask)
7ffdaf2c0b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<ulong> src, Vector256<ulong> mask)
7ffdaf2c0b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<float> src, Vector128<float> mask)
7ffdaf2c0b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector128<double> src, Vector128<double> mask)
7ffdaf2c0b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<float> src, Vector256<float> mask)
7ffdaf2c0b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc(Vector256<double> src, Vector256<double> mask)
7ffdaf2c0ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector128<byte> src, Vector128<byte> mask)
7ffdaf2c0bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector128<sbyte> src, Vector128<sbyte> mask)
7ffdaf2c0bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector128<short> src, Vector128<short> mask)
7ffdaf2c0be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector128<ushort> src, Vector128<ushort> mask)
7ffdaf2c0c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector128<int> src, Vector128<int> mask)
7ffdaf2c0c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector128<uint> src, Vector128<uint> mask)
7ffdaf2c0c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector128<long> src, Vector128<long> mask)
7ffdaf2c0c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector128<ulong> src, Vector128<ulong> mask)
7ffdaf2c0c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector256<sbyte> src, Vector256<sbyte> mask)
7ffdaf2c0c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector256<byte> src, Vector256<byte> mask)
7ffdaf2c0c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector256<short> src, Vector256<short> mask)
7ffdaf2c0ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector256<ushort> src, Vector256<ushort> mask)
7ffdaf2c0cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector256<int> src, Vector256<int> mask)
7ffdaf2c0cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector256<uint> src, Vector256<uint> mask)
7ffdaf2c0cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector256<long> src, Vector256<long> mask)
7ffdaf2c0d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector256<ulong> src, Vector256<ulong> mask)
7ffdaf2c0d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector256<float> src, Vector256<float> mask)
7ffdaf2c0d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector256<double> src, Vector256<double> mask)
7ffdaf2c0d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector128<float> src, Vector128<float> mask)
7ffdaf2c0d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz(Vector128<double> src, Vector128<double> mask)
7ffdaf2c0d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector128<sbyte> x, Vector128<sbyte> y)
7ffdaf2c0d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector128<byte> x, Vector128<byte> y)
7ffdaf2c0db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector128<short> x, Vector128<short> y)
7ffdaf2c0dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector128<ushort> x, Vector128<ushort> y)
7ffdaf2c0de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector128<int> x, Vector128<int> y)
7ffdaf2c0df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector128<uint> x, Vector128<uint> y)
7ffdaf2c0e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector128<long> x, Vector128<long> y)
7ffdaf2c0e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector128<ulong> x, Vector128<ulong> y)
7ffdaf2c0e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector128<float> x, Vector128<float> y)
7ffdaf2c0e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector128<double> x, Vector128<double> y)
7ffdaf2c0e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector256<sbyte> x, Vector256<sbyte> y)
7ffdaf2c0e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector256<byte> x, Vector256<byte> y)
7ffdaf2c0ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector256<short> x, Vector256<short> y)
7ffdaf2c0eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector256<ushort> x, Vector256<ushort> y)
7ffdaf2c0ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector256<int> x, Vector256<int> y)
7ffdaf2c0ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector256<uint> x, Vector256<uint> y)
7ffdaf2c0f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector256<long> x, Vector256<long> y)
7ffdaf2c0f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector256<ulong> x, Vector256<ulong> y)
7ffdaf2c0f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector256<float> x, Vector256<float> y)
7ffdaf2c0f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool vtestznc(Vector256<double> x, Vector256<double> y)
7ffdaf2c0f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vextract(Vector128<ushort> src, byte index)
7ffdaf2c1410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vextract(Vector256<ushort> src, byte index)
7ffdaf2c1428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float vextract(Vector128<float> src, Hex2Kind pos)
7ffdaf2c1440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vextract(Vector256<float> src, byte pos)
7ffdaf2c1458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vextract(Vector256<double> src, byte pos)
7ffdaf2c1470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# float vxscalar(Vector128<float> src, byte pos)
7ffdaf2c1488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# double vxscalar(Vector128<double> src, byte pos)
7ffdaf2c14a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vhi(Vector256<sbyte> src)
7ffdaf2c1590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vhi(Vector256<uint> src)
7ffdaf2c15a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vhi(Vector256<ulong> src)
7ffdaf2c15c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vhi(Vector256<byte> src)
7ffdaf2c15d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vhi(Vector256<short> src)
7ffdaf2c15f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vhi(Vector256<ushort> src)
7ffdaf2c1608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vhi(Vector256<int> src)
7ffdaf2c1620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vhi(Vector256<long> src)
7ffdaf2c1638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vhi(Vector256<float> src)
7ffdaf2c1650h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vhi(Vector256<double> src)
7ffdaf2c1668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vhi(Vector256<ulong> src, out ulong x0, out ulong x1)
7ffdaf2c1680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vhi(Vector256<byte> src, out ulong x0, out ulong x1)
7ffdaf2c1698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Pair<ulong> vhi(Vector256<ulong> src, ref Pair<ulong> dst)
7ffdaf2c16b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vhi(Vector128<float> src)
7ffdaf2c16c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vhi(Vector128<double> src)
7ffdaf2c16e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vlo(Vector256<sbyte> src)
7ffdaf2c18a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vlo(Vector256<byte> src)
7ffdaf2c18c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vlo(Vector256<short> src)
7ffdaf2c18d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vlo(Vector256<ushort> src)
7ffdaf2c18f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vlo(Vector256<int> src)
7ffdaf2c1908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vlo(Vector256<uint> src)
7ffdaf2c1920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vlo(Vector256<long> src)
7ffdaf2c1938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vlo(Vector256<ulong> src)
7ffdaf2c1950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vlo(Vector256<float> src)
7ffdaf2c1968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vlo(Vector256<double> src)
7ffdaf2c1980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vlo(Vector256<ulong> src, out ulong x0, out ulong x1)
7ffdaf2c1998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vlo(Vector256<byte> src, out ulong x0, out ulong x1)
7ffdaf2c19b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short vlo16i(Vector128<short> src)
7ffdaf2c19e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort vlo16u(Vector128<ushort> src)
7ffdaf2c19f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vlo32i(Vector128<int> src)
7ffdaf2c1a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint vlo32u(Vector128<uint> src)
7ffdaf2c1a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long vlo64i(Vector128<long> src)
7ffdaf2c1a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong vlo64u(Vector128<ulong> src)
7ffdaf2c1a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long vlo64i(Vector128<float> src)
7ffdaf2c1a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long vlo64i(Vector128<double> src)
7ffdaf2c1a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte vlo8i(Vector128<sbyte> src)
7ffdaf2c1aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte vlo8u(Vector128<byte> src)
7ffdaf2c1ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vparts(W128 w, byte x0, byte x1, byte x2, byte x3, byte x4, byte x5, byte x6, byte x7, byte x8, byte x9, byte xa, byte xb, byte xc, byte xd, byte xe, byte xf)
7ffdaf2c1ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vparts(W128i w, sbyte x0, sbyte x1, sbyte x2, sbyte x3, sbyte x4, sbyte x5, sbyte x6, sbyte x7, sbyte x8, sbyte x9, sbyte xa, sbyte xb, sbyte xc, sbyte xd, sbyte xe, sbyte xf)
7ffdaf2c1ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vparts(W128i w, short x0, short x1, short x2, short x3, short x4, short x5, short x6, short x7)
7ffdaf2c1b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vparts(W128 w, ushort x0, ushort x1, ushort x2, ushort x3, ushort x4, ushort x5, ushort x6, ushort x7)
7ffdaf2c1b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vparts(W128 w, uint x0, uint x1, uint x2, uint x3)
7ffdaf2c1b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vparts(W128i w, int x0, int x1, int x2, int x3)
7ffdaf2c1b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vparts(W256i w, long x0, long x1)
7ffdaf2c1b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vparts(ulong x0, ulong x1)
7ffdaf2c1b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vparts(W128 w, ulong x0, ulong x1)
7ffdaf2c1b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vparts(W128 w, float x0, float x1, float x2, float x3)
7ffdaf2c1ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vparts(W128 w, double x0, double x1)
7ffdaf2c1bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vparts(W256 w, byte x0, byte x1, byte x2, byte x3, byte x4, byte x5, byte x6, byte x7, byte x8, byte x9, byte xa, byte xb, byte xc, byte xd, byte xe, byte xf, byte x10, byte x11, byte x12, byte x13, byte x14, byte x15, byte x16, byte x17, byte x18, byte x19, byte x1a, byte x1b, byte x1c, byte x1d, byte x1e, byte x1f)
7ffdaf2c1bd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vparts(W256i w, sbyte x0, sbyte x1, sbyte x2, sbyte x3, sbyte x4, sbyte x5, sbyte x6, sbyte x7, sbyte x8, sbyte x9, sbyte xa, sbyte xb, sbyte xc, sbyte xd, sbyte xe, sbyte xf, sbyte x10, sbyte x11, sbyte x12, sbyte x13, sbyte x14, sbyte x15, sbyte x16, sbyte x17, sbyte x18, sbyte x19, sbyte x1a, sbyte x1b, sbyte x1c, sbyte x1d, sbyte x1e, sbyte x1f)
7ffdaf2c1bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vparts(W256 w, ushort x0, ushort x1, ushort x2, ushort x3, ushort x4, ushort x5, ushort x6, ushort x7, ushort x8, ushort x9, ushort xA, ushort xB, ushort xC, ushort xD, ushort xE, ushort xF)
7ffdaf2c1c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vparts(W256i w, short x0, short x1, short x2, short x3, short x4, short x5, short x6, short x7, short x8, short x9, short xA, short xB, short xC, short xD, short xE, short xF)
7ffdaf2c1c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vparts(W256i w, int x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7)
7ffdaf2c1c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vparts(uint x0, uint x1, uint x2, uint x3, uint x4, uint x5, uint x6, uint x7)
7ffdaf2c1c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vparts(W256 w, uint x0, uint x1, uint x2, uint x3, uint x4, uint x5, uint x6, uint x7)
7ffdaf2c1c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vparts(W256i w, long x0, long x1, long x2, long x3)
7ffdaf2c1c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vparts(W256 w, ulong x0, ulong x1, ulong x2, ulong x3)
7ffdaf2c1c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vparts(W256 w, float x0, float x1, float x2, float x3, float x4, float x5, float x6, float x7)
7ffdaf2c1cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vparts(W256 w, double x0, double x1, double x2, double x3)
7ffdaf2c1cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<short> vparts(W512i w, short x0, short x1, short x2, short x3, short x4, short x5, short x6, short x7, short x8, short x9, short x10, short x11, short x12, short x13, short x14, short x15, short x16, short x17, short x18, short x19, short x20, short x21, short x22, short x23, short x24, short x25, short x26, short x27, short x28, short x29, short x30, short x31)
7ffdaf2c1ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vparts(W512 w, ushort x0, ushort x1, ushort x2, ushort x3, ushort x4, ushort x5, ushort x6, ushort x7, ushort x8, ushort x9, ushort x10, ushort x11, ushort x12, ushort x13, ushort x14, ushort x15, ushort x16, ushort x17, ushort x18, ushort x19, ushort x20, ushort x21, ushort x22, ushort x23, ushort x24, ushort x25, ushort x26, ushort x27, ushort x28, ushort x29, ushort x30, ushort x31)
7ffdaf2c1cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<int> vparts(W512i w, int x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8, int x9, int x10, int x11, int x12, int x13, int x14, int x15)
7ffdaf2c1d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vparts(W512 w, uint x0, uint x1, uint x2, uint x3, uint x4, uint x5, uint x6, uint x7, uint x8, uint x9, uint x10, uint x11, uint x12, uint x13, uint x14, uint x15)
7ffdaf2c1d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<long> vparts(W512i w, long x0, long x1, long x2, long x3, long x4, long x5, long x6, long x7)
7ffdaf2c1d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vparts(W512 w, ulong x0, ulong x1, ulong x2, ulong x3, ulong x4, ulong x5, ulong x6, ulong x7)
7ffdaf2c1d58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<float> vparts(W512 w, float x0, float x1, float x2, float x3, float x4, float x5, float x6, float x7, float x8, float x9, float x10, float x11, float x12, float x13, float x14, float x15)
7ffdaf2c1d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<double> vparts(W512 w, double x0, double x1, double x2, double x3, double x4, double x5, double x6, double x7)
7ffdaf2c1da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vshi(Vector128<sbyte> src)
7ffdaf2c1db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vshi(Vector128<byte> src)
7ffdaf2c1dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vshi(Vector128<ushort> src)
7ffdaf2c1de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vshi(Vector128<uint> src)
7ffdaf2c1e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vshi(Vector128<long> src)
7ffdaf2c1e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vshi(Vector128<ulong> src)
7ffdaf2c1e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vrotlv(Vector128<uint> src, Vector128<uint> counts)
7ffdaf2c23b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vrotlv(Vector128<ulong> src, Vector128<ulong> counts)
7ffdaf2c23d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vrotlv(Vector256<uint> src, Vector256<uint> counts)
7ffdaf2c23e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vrotlv(Vector256<ulong> src, Vector256<ulong> counts)
7ffdaf2c2400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotlx(Vector128<byte> src, N8 count)
7ffdaf2c2448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotlx(Vector128<byte> src, N16 count)
7ffdaf2c2460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotlx(Vector128<byte> src, N24 count)
7ffdaf2c2478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotlx(Vector128<byte> src, N32 count)
7ffdaf2c2490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotl(W128 n, N8 offset)
7ffdaf2c24a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotl(W128 n, N16 offset)
7ffdaf2c24c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotl(W128 n, N24 offset)
7ffdaf2c24d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotl(W128 n, N32 offset)
7ffdaf2c24f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotl(W128 n, N40 offset)
7ffdaf2c2508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotl(W128 n, N48 offset)
7ffdaf2c2520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotr(W128 n, N8 offset)
7ffdaf2c2538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotr(W128 n, N16 offset)
7ffdaf2c2550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotr(W128 n, N24 offset)
7ffdaf2c2568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotr(W128 n, N32 offset)
7ffdaf2c2580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotr(N128 n, N40 offset)
7ffdaf2c2598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotr(W128 n, N48 offset)
7ffdaf2c25b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vrotrv(Vector128<uint> src, Vector128<uint> counts)
7ffdaf2c2730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vrotrv(Vector128<ulong> src, Vector128<ulong> counts)
7ffdaf2c2748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vrotrv(Vector256<uint> src, Vector256<uint> counts)
7ffdaf2c2760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vrotrv(Vector256<ulong> src, Vector256<ulong> counts)
7ffdaf2c2778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotrx(Vector128<byte> src, N8 count)
7ffdaf2c27c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotrx(Vector128<byte> src, N16 count)
7ffdaf2c27d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotrx(Vector128<byte> src, N24 count)
7ffdaf2c27f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vrotrx(Vector128<byte> src, N32 count)
7ffdaf2c2808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vsll(Vector128<byte> src, Vector128<byte> count)
7ffdaf2c29a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsll(Vector128<sbyte> src, Vector128<sbyte> count)
7ffdaf2c29b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsll(Vector128<short> src, Vector128<short> count)
7ffdaf2c29d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsll(Vector128<ushort> src, Vector128<ushort> count)
7ffdaf2c29e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsll(Vector128<int> src, Vector128<int> count)
7ffdaf2c2a00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vsll(Vector128<uint> src, Vector128<uint> count)
7ffdaf2c2a18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vsll(Vector128<long> src, Vector128<long> count)
7ffdaf2c2a30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vsll(Vector128<ulong> src, Vector128<ulong> count)
7ffdaf2c2a48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsll(Vector256<sbyte> src, Vector128<sbyte> count)
7ffdaf2c2a60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vsll(Vector256<byte> src, Vector128<byte> count)
7ffdaf2c2a78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsll(Vector256<short> src, Vector128<short> count)
7ffdaf2c2a90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsll(Vector256<ushort> src, Vector128<ushort> count)
7ffdaf2c2aa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsll(Vector256<int> src, Vector128<int> count)
7ffdaf2c2ac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vsll(Vector256<uint> src, Vector128<uint> count)
7ffdaf2c2ad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vsll(Vector256<long> src, Vector128<long> count)
7ffdaf2c2af0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vsll(Vector256<ulong> src, Vector128<ulong> count)
7ffdaf2c2b08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte msb8f(byte density)
7ffdaf2c2b20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsllr(Vector128<sbyte> src, sbyte count)
7ffdaf2c2b68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vsllr(Vector128<byte> src, byte count)
7ffdaf2c2b80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsllr(Vector128<short> src, short count)
7ffdaf2c2b98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsllr(Vector128<ushort> src, ushort count)
7ffdaf2c2bb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsllr(Vector128<int> src, int count)
7ffdaf2c2bc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vsllr(Vector128<uint> src, uint count)
7ffdaf2c2be0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vsllr(Vector128<long> src, long count)
7ffdaf2c2bf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vsllr(Vector128<ulong> src, ulong count)
7ffdaf2c2c10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsllr(Vector256<sbyte> src, sbyte count)
7ffdaf2c2c28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vsllr(Vector256<byte> src, byte count)
7ffdaf2c2c40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsllr(Vector256<short> src, short count)
7ffdaf2c2c58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsllr(Vector256<ushort> src, ushort count)
7ffdaf2c2c70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsllr(Vector256<int> src, int count)
7ffdaf2c2c88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vsllr(Vector256<uint> src, uint count)
7ffdaf2c2ca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vsllr(Vector256<long> src, long count)
7ffdaf2c2cb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vsllr(Vector256<ulong> src, ulong count)
7ffdaf2c2cd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsllv(Vector128<sbyte> src, Vector128<sbyte> counts)
7ffdaf2c2ce8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vsllv(Vector128<byte> src, Vector128<byte> counts)
7ffdaf2c2d00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsllv(Vector128<short> src, Vector128<short> counts)
7ffdaf2c2d18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsllv(Vector128<ushort> src, Vector128<ushort> counts)
7ffdaf2c2d30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsllv(Vector128<int> src, Vector128<int> counts)
7ffdaf2c2d48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vsllv(Vector128<uint> src, Vector128<uint> counts)
7ffdaf2c2d60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vsllv(Vector128<long> src, Vector128<long> counts)
7ffdaf2c2d78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vsllv(Vector128<ulong> src, Vector128<ulong> counts)
7ffdaf2c2d90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsllv(Vector256<sbyte> src, Vector256<sbyte> counts)
7ffdaf2c2da8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vsllv(Vector256<byte> src, Vector256<byte> counts)
7ffdaf2c2dc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsllv(Vector256<short> src, Vector256<short> counts)
7ffdaf2c2dd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsllv(Vector256<ushort> src, Vector256<ushort> counts)
7ffdaf2c2df0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsllv(Vector256<int> src, Vector256<int> counts)
7ffdaf2c2e08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vsllv(Vector256<uint> src, Vector256<uint> counts)
7ffdaf2c2e20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vsllv(Vector256<long> src, Vector256<long> counts)
7ffdaf2c2e38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vsllv(Vector256<ulong> src, Vector256<ulong> counts)
7ffdaf2c2e50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsrav(Vector128<int> src, Vector128<uint> counts)
7ffdaf2c2f28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsrav(Vector256<int> src, Vector256<uint> counts)
7ffdaf2c2f40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vsrl(Vector128<byte> src, Vector128<byte> count)
7ffdaf2c30d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsrl(Vector128<sbyte> src, Vector128<sbyte> count)
7ffdaf2c30f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsrl(Vector128<short> src, Vector128<short> count)
7ffdaf2c3108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsrl(Vector128<ushort> src, Vector128<ushort> count)
7ffdaf2c3120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsrl(Vector128<int> src, Vector128<int> count)
7ffdaf2c3138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vsrl(Vector128<uint> src, Vector128<uint> count)
7ffdaf2c3150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vsrl(Vector128<long> src, Vector128<long> count)
7ffdaf2c3168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vsrl(Vector128<ulong> src, Vector128<ulong> count)
7ffdaf2c3180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsrl(Vector256<sbyte> src, Vector128<sbyte> count)
7ffdaf2c3198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vsrl(Vector256<byte> src, Vector128<byte> count)
7ffdaf2c31b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsrl(Vector256<short> src, Vector128<short> count)
7ffdaf2c31c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsrl(Vector256<ushort> src, Vector128<ushort> count)
7ffdaf2c31e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsrl(Vector256<int> src, Vector128<int> count)
7ffdaf2c31f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vsrl(Vector256<uint> src, Vector128<uint> count)
7ffdaf2c3210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vsrl(Vector256<long> src, Vector128<long> count)
7ffdaf2c3228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vsrl(Vector256<ulong> src, Vector128<ulong> count)
7ffdaf2c3240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte lsb8f(byte density)
7ffdaf2c3258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsrlr(Vector128<sbyte> src, sbyte count)
7ffdaf2c32a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vsrlr(Vector128<byte> src, byte count)
7ffdaf2c32b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsrlr(Vector128<short> src, short count)
7ffdaf2c32d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsrlr(Vector128<ushort> src, ushort count)
7ffdaf2c32e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsrlr(Vector128<int> src, int count)
7ffdaf2c3300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vsrlr(Vector128<uint> src, uint count)
7ffdaf2c3318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vsrlr(Vector128<long> src, long count)
7ffdaf2c3330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vsrlr(Vector128<ulong> src, ulong count)
7ffdaf2c3348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsrlr(Vector256<sbyte> src, sbyte count)
7ffdaf2c3360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vsrlr(Vector256<byte> src, byte count)
7ffdaf2c3378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsrlr(Vector256<short> src, short count)
7ffdaf2c3390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsrlr(Vector256<ushort> src, ushort count)
7ffdaf2c33a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsrlr(Vector256<int> src, int count)
7ffdaf2c33c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vsrlr(Vector256<uint> src, uint count)
7ffdaf2c33d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vsrlr(Vector256<long> src, long count)
7ffdaf2c33f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vsrlr(Vector256<ulong> src, ulong count)
7ffdaf2c3408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vsrlv(Vector256<int> x, Vector256<int> counts)
7ffdaf2c3420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vsrlv(Vector256<uint> x, Vector256<uint> counts)
7ffdaf2c3438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vsrlv(Vector256<long> x, Vector256<long> counts)
7ffdaf2c3450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vsrlv(Vector256<ulong> x, Vector256<ulong> counts)
7ffdaf2c3468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vsrlv(Vector128<sbyte> src, Vector128<sbyte> counts)
7ffdaf2c3480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vsrlv(Vector128<byte> src, Vector128<byte> counts)
7ffdaf2c3498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vsrlv(Vector128<short> src, Vector128<short> counts)
7ffdaf2c34b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vsrlv(Vector128<ushort> src, Vector128<ushort> counts)
7ffdaf2c34c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vsrlv(Vector128<int> x, Vector128<int> counts)
7ffdaf2c34e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vsrlv(Vector128<uint> x, Vector128<uint> counts)
7ffdaf2c34f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vsrlv(Vector128<long> x, Vector128<long> counts)
7ffdaf2c3510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vsrlv(Vector128<ulong> x, Vector128<ulong> counts)
7ffdaf2c3528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vsrlv(Vector256<sbyte> src, Vector256<sbyte> counts)
7ffdaf2c3540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vsrlv(Vector256<byte> src, Vector256<byte> counts)
7ffdaf2c3558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vsrlv(Vector256<short> src, Vector256<short> counts)
7ffdaf2c3570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vsrlv(Vector256<ushort> src, Vector256<ushort> counts)
7ffdaf2c3588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vxorslv(Vector128<uint> x, Vector128<uint> counts)
7ffdaf2c3720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vxorslv(Vector128<ulong> x, Vector128<ulong> counts)
7ffdaf2c3738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vxorslv(Vector256<uint> x, Vector256<uint> counts)
7ffdaf2c3750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vxorslv(Vector256<ulong> x, Vector256<ulong> counts)
7ffdaf2c3768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vxorsrv(Vector128<uint> x, Vector128<uint> counts)
7ffdaf2c3840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vxorsrv(Vector128<ulong> x, Vector128<ulong> counts)
7ffdaf2c3858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vxorsrv(Vector256<uint> x, Vector256<uint> counts)
7ffdaf2c3870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vxorsrv(Vector256<ulong> x, Vector256<ulong> counts)
7ffdaf2c3888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vbytes(W128 w, ulong lo)
7ffdaf2c38a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vbytes(W128 w, ulong lo, ulong hi)
7ffdaf2c38b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vbytes(W256 w, ulong a, ulong b, ulong c, ulong d)
7ffdaf2c38d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vload(W128 w, in sbyte src)
7ffdaf2c38e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vload(W128 w, in byte src)
7ffdaf2c3900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vload(W128 w, in short src)
7ffdaf2c3918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vload(W128 w, in ushort src)
7ffdaf2c3930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vload(W128 w, in int src)
7ffdaf2c3948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vload(W128 w, in uint src)
7ffdaf2c3960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vload(W128 w, in long src)
7ffdaf2c3978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vload(W128 w, in ulong src)
7ffdaf2c3990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vload(W128 w, ReadOnlySpan<sbyte> src)
7ffdaf2c39a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vload(W128 w, ReadOnlySpan<byte> src)
7ffdaf2c39c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vload(W128 w, ReadOnlySpan<short> src)
7ffdaf2c39d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vload(W128 w, ReadOnlySpan<ushort> src)
7ffdaf2c39f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vload(W128 w, ReadOnlySpan<long> src)
7ffdaf2c3a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vload(W128 w, ReadOnlySpan<ulong> src)
7ffdaf2c3a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vload(W256 w, in sbyte src)
7ffdaf2c3a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vload(W256 w, in byte src)
7ffdaf2c3a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vload(W256 w, in short src)
7ffdaf2c3a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vload(W256 w, in ushort src)
7ffdaf2c3a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vload(W256 w, in int src)
7ffdaf2c3a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vload(W256 w, in uint src)
7ffdaf2c3ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vload(W256 w, in long src)
7ffdaf2c3ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vload(W256 w, in ulong src)
7ffdaf2c3ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vload(W256 w, ReadOnlySpan<sbyte> src)
7ffdaf2c3af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vload(W256 w, ReadOnlySpan<byte> src)
7ffdaf2c3b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vload(W256 w, ReadOnlySpan<short> src)
7ffdaf2c3b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vload(W256 w, ReadOnlySpan<ushort> src)
7ffdaf2c3b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vload(W256 w, ReadOnlySpan<int> src)
7ffdaf2c3b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vload(W256 w, ReadOnlySpan<long> src)
7ffdaf2c3b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vload(W256 w, ReadOnlySpan<ulong> src)
7ffdaf2c3b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vload(W512 w, in byte src)
7ffdaf2c3ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vload(W512 w, in ushort src)
7ffdaf2c3bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vload(W128 w, sbyte* pSrc)
7ffdaf2c3bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vload(W128 w, byte* pSrc)
7ffdaf2c3be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vload(W128 w, short* pSrc)
7ffdaf2c3c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vload(W128 w, ushort* pSrc)
7ffdaf2c3c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vload(W128 w, int* pSrc)
7ffdaf2c3c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vload(W128 w, uint* pSrc)
7ffdaf2c3c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vload(W128 w, long* pSrc)
7ffdaf2c3c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vload(W128 w, ulong* pSrc)
7ffdaf2c3c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vload(W256 w, sbyte* pSrc)
7ffdaf2c3c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vload(W256 w, byte* pSrc)
7ffdaf2c3ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vload(W256 w, short* pSrc)
7ffdaf2c3cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vload(W256 w, ushort* pSrc)
7ffdaf2c3cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vload(W256 w, int* pSrc)
7ffdaf2c3cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vload(W256 w, uint* pSrc)
7ffdaf2c3d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vload(W256 w, long* pSrc)
7ffdaf2c3d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vload(W256 w, ulong* pSrc)
7ffdaf2c3d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vmaskload(in int src, Vector128<int> mask)
7ffdaf2c8030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmaskload(in uint src, Vector128<uint> mask)
7ffdaf2c8048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmaskload(in ulong src, Vector128<ulong> mask)
7ffdaf2c8060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vmaskload(in long src, Vector128<long> mask)
7ffdaf2c8078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vmaskload(in float src, Vector128<float> mask)
7ffdaf2c8090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vmaskload(in double src, Vector128<double> mask)
7ffdaf2c80a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vmaskload(in int src, Vector256<int> mask)
7ffdaf2c80c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmaskload(in uint src, Vector256<uint> mask)
7ffdaf2c80d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vmaskload(in long src, Vector256<long> mask)
7ffdaf2c80f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmaskload(in ulong src, Vector256<ulong> mask)
7ffdaf2c8108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vmaskload(in float src, Vector256<float> mask)
7ffdaf2c8120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vmaskload(in double src, Vector256<double> mask)
7ffdaf2c8138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vmaskload(int* pSrc, Vector128<int> mask)
7ffdaf2c8150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vmaskload(uint* pSrc, Vector128<uint> mask)
7ffdaf2c8168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vmaskload(ulong* pSrc, Vector128<ulong> mask)
7ffdaf2c8180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vmaskload(long* pSrc, Vector128<long> mask)
7ffdaf2c8198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vmaskload(int* pSrc, Vector256<int> mask)
7ffdaf2c81b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vmaskload(uint* pSrc, Vector256<uint> mask)
7ffdaf2c81c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vmaskload(long* pSrc, Vector256<long> mask)
7ffdaf2c81e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vmaskload(ulong* pSrc, Vector256<ulong> mask)
7ffdaf2c81f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmaskstore(Vector128<byte> src, Vector128<byte> mask, ref byte dst)
7ffdaf2c8210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmaskstore(Vector128<sbyte> src, Vector128<byte> mask, ref byte dst)
7ffdaf2c8228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmaskstore(Vector128<short> src, Vector128<byte> mask, ref byte dst)
7ffdaf2c8240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmaskstore(Vector128<ushort> src, Vector128<byte> mask, ref byte dst)
7ffdaf2c8258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmaskstore(Vector128<int> src, Vector128<byte> mask, ref byte dst)
7ffdaf2c8270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmaskstore(Vector128<uint> src, Vector128<byte> mask, ref byte dst)
7ffdaf2c8288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmaskstore(Vector128<long> src, Vector128<byte> mask, ref byte dst)
7ffdaf2c82a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmaskstore(Vector128<ulong> src, Vector128<byte> mask, ref byte dst)
7ffdaf2c82b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void maskstore(Vector128<float> src, Vector128<float> mask, ref float dst)
7ffdaf2c82d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmaskstore(Vector128<double> src, Vector128<double> mask, ref double dst)
7ffdaf2c82e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmaskstore(Vector256<float> src, Vector256<float> mask, ref float dst)
7ffdaf2c8300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vmaskstore(Vector256<double> src, Vector256<double> mask, ref double dst)
7ffdaf2c8318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vscalar(W128 w, sbyte a)
7ffdaf2c8378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vscalar(W128 w, byte a)
7ffdaf2c8390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vscalar(W128 w, short a)
7ffdaf2c83a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vscalar(W128 w, ushort a)
7ffdaf2c83c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vscalar(W128 w, int a)
7ffdaf2c83d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vscalar(W128 w, uint a)
7ffdaf2c83f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vscalar(W128 w, long a)
7ffdaf2c8408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vscalar(W128 w, ulong a)
7ffdaf2c8420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vscalar(W128 w, float a)
7ffdaf2c8438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vscalar(W128 w, double a)
7ffdaf2c8450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vscalar(W256 w, sbyte a)
7ffdaf2c8468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vscalar(W256 w, byte a)
7ffdaf2c8480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vscalar(W256 w, short a)
7ffdaf2c8498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vscalar(W256 w, ushort a)
7ffdaf2c84b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vscalar(W256 w, int a)
7ffdaf2c84c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vscalar(W256 w, uint a)
7ffdaf2c84e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vscalar(W256 w, long a)
7ffdaf2c84f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vscalar(W256 w, ulong a)
7ffdaf2c8510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vscalar(W256 w, float a)
7ffdaf2c8528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vscalar(W256 w, double a)
7ffdaf2c8540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vscalar(float src)
7ffdaf2c8558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vscalar(double src)
7ffdaf2c8570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<sbyte> src, ref sbyte dst)
7ffdaf2c8588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<byte> src, ref byte dst)
7ffdaf2c85a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<short> src, ref short dst)
7ffdaf2c85b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<ushort> src, ref ushort dst)
7ffdaf2c85d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<int> src, ref int dst)
7ffdaf2c85e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<uint> src, ref uint dst)
7ffdaf2c8600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<long> src, ref long dst)
7ffdaf2c8618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<ulong> src, ref ulong dst)
7ffdaf2c8630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<float> src, ref float dst)
7ffdaf2c8648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<double> src, ref double dst)
7ffdaf2c8660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<sbyte> src, ref sbyte dst)
7ffdaf2c8678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<byte> src, ref byte dst)
7ffdaf2c8690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<short> src, ref short dst)
7ffdaf2c86a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<ushort> src, ref ushort dst)
7ffdaf2c86c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<int> src, ref int dst)
7ffdaf2c86d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<uint> src, ref uint dst)
7ffdaf2c86f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<long> src, ref long dst)
7ffdaf2c8708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<ulong> src, ref ulong dst)
7ffdaf2c8720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<float> src, ref float dst)
7ffdaf2c8738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<double> src, ref double dst)
7ffdaf2c8750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<sbyte> src, ref sbyte dst, int offset)
7ffdaf2c8768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<byte> src, ref byte dst, int offset)
7ffdaf2c8780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<short> src, ref short dst, int offset)
7ffdaf2c8798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<ushort> src, ref ushort dst, int offset)
7ffdaf2c87b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<int> src, ref int dst, int offset)
7ffdaf2c87c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<uint> src, ref uint dst, int offset)
7ffdaf2c87e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vsave(Vector128<long> src, ref long dst, int offset)
7ffdaf2c87f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<ulong> src, ref ulong dst, int offset)
7ffdaf2c8810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<float> src, ref float dst, int offset)
7ffdaf2c8828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<double> src, ref double dst, int offset)
7ffdaf2c8840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vsave(Vector256<sbyte> src, ref sbyte dst, int offset)
7ffdaf2c8858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<byte> src, ref byte dst, int offset)
7ffdaf2c8870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<short> src, ref short dst, int offset)
7ffdaf2c8888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<ushort> src, ref ushort dst, int offset)
7ffdaf2c88a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<int> src, ref int dst, int offset)
7ffdaf2c88b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<uint> src, ref uint dst, int offset)
7ffdaf2c88d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<long> src, ref long dst, int offset)
7ffdaf2c88e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<ulong> src, ref ulong dst, int offset)
7ffdaf2c8900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<float> src, ref float dst, int offset)
7ffdaf2c8918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<double> src, ref double dst, int offset)
7ffdaf2c8930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector512<byte> src, ref byte dst)
7ffdaf2c8948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<byte> src, Span<byte> dst)
7ffdaf2c8960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<byte> src, Span<byte> dst)
7ffdaf2c8978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector512<byte> src, Span<byte> dst)
7ffdaf2c8990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector128<byte> src, uint offset, Span<byte> dst)
7ffdaf2c89a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector256<byte> src, uint offset, Span<byte> dst)
7ffdaf2c89c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void vstore(Vector512<byte> src, uint offset, Span<byte> dst)
7ffdaf2c89d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> get_Vector256u64()
7ffdaf2c89f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> get_Vector256u32()
7ffdaf2c8a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> get_Vector128u64()
7ffdaf2c8a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> get_Vector128u32()
7ffdaf2c8a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> v8u<ulong>(Vector128<ulong> x)
7ffdb0362898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vones<byte>(W128 w)
7ffdb03b2268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> v8u<byte>(Vector128<byte> x)
7ffdb03b2358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> v16u<byte>(Vector128<byte> x)
7ffdb03b2370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> v32u<byte>(Vector128<byte> x)
7ffdb03b23a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> v64u<byte>(Vector128<byte> x)
7ffdb03b23b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vones<byte>(W256 w)
7ffdb03b2460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> v8u<byte>(Vector256<byte> x)
7ffdb03b24d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> v16u<byte>(Vector256<byte> x)
7ffdb03b2508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> v32u<byte>(Vector256<byte> x)
7ffdb03b2538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> v64u<byte>(Vector256<byte> x)
7ffdb03b2568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> v64u<ushort>(Vector256<ushort> x)
7ffdb03d0600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> v8u<ulong>(Vector256<ulong> x)
7ffdb03d0618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> v8u<ushort>(Vector256<ushort> x)
7ffdb044bc60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> v16u<ushort>(Vector256<ushort> x)
7ffdb044bc78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> v32u<ushort>(Vector256<ushort> x)
7ffdb044bc90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> v8u<uint>(Vector256<uint> x)
7ffdb044bf00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> v16u<uint>(Vector256<uint> x)
7ffdb044bf18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> v32u<uint>(Vector256<uint> x)
7ffdb044bf30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> v64u<uint>(Vector256<uint> x)
7ffdb044bf48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> v16u<ulong>(Vector256<ulong> x)
7ffdb0470240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> v32u<ulong>(Vector256<ulong> x)
7ffdb0470258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> v64u<ulong>(Vector256<ulong> x)
7ffdb0470270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> v8i<byte>(Vector128<byte> x)
7ffdb0471698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> v16i<ushort>(Vector128<ushort> x)
7ffdb04716e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> v32i<uint>(Vector128<uint> x)
7ffdb0471710h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> v8i<byte>(Vector256<byte> x)
7ffdb04717e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> v16i<ushort>(Vector256<ushort> x)
7ffdb04718c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> v32i<uint>(Vector256<uint> x)
7ffdb0471980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vunits<sbyte>(N128 w, sbyte t)
7ffdb04726e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vunits<byte>(N128 w, byte t)
7ffdb0472790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vunits<short>(N128 w, short t)
7ffdb04727c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vunits<ushort>(N128 w, ushort t)
7ffdb0472868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vunits<int>(N128 w, int t)
7ffdb04728e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vunits<uint>(N128 w, uint t)
7ffdb0472970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vunits<long>(N128 w, long t)
7ffdb04729d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vunits<ulong>(N128 w, ulong t)
7ffdb0472a60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vunits<sbyte>(N256 w, sbyte t)
7ffdb0472ac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vunits<byte>(N256 w, byte t)
7ffdb0472b50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vunits<short>(N256 w, short t)
7ffdb0472b80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vunits<ushort>(N256 w, ushort t)
7ffdb0472bf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vunits<int>(N256 w, int t)
7ffdb0472d78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vunits<uint>(N256 w, uint t)
7ffdb0472f28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vunits<long>(N256 w, long t)
7ffdb04731e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vunits<ulong>(N256 w, ulong t)
7ffdb0473288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> v8u<ushort>(Vector128<ushort> x)
7ffdb047a340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> v16u<ushort>(Vector128<ushort> x)
7ffdb047a358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> v32u<ushort>(Vector128<ushort> x)
7ffdb047a370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> v64u<ushort>(Vector128<ushort> x)
7ffdb047a388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> v8u<uint>(Vector128<uint> x)
7ffdb047a4d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> v16u<uint>(Vector128<uint> x)
7ffdb047a4f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> v32u<uint>(Vector128<uint> x)
7ffdb047a508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> v64u<uint>(Vector128<uint> x)
7ffdb047a520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> v16u<ulong>(Vector128<ulong> x)
7ffdb047a6a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> v32u<ulong>(Vector128<ulong> x)
7ffdb047a6b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> v64u<ulong>(Vector128<ulong> x)
7ffdb047a6d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vones<ushort>(W128 w)
7ffdb0530fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vones<uint>(W128 w)
7ffdb0531230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vones<ulong>(W128 w)
7ffdb05314a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vones<ushort>(W256 w)
7ffdb0531890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vones<uint>(W256 w)
7ffdb05319f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vones<ulong>(W256 w)
7ffdb0531bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> v16i<byte>(Vector128<byte> x)
7ffdb053a970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> v32i<byte>(Vector128<byte> x)
7ffdb053a9e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> v64i<byte>(Vector128<byte> x)
7ffdb053abf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> v16i<byte>(Vector256<byte> x)
7ffdb053ac88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> v32i<byte>(Vector256<byte> x)
7ffdb053ad00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> v64i<byte>(Vector256<byte> x)
7ffdb053ad48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vload<byte>(W128 n, ReadOnlySpan<byte> src)
7ffdb053b588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vload<byte>(W256 n, ReadOnlySpan<byte> src)
7ffdb053b738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> v32f<byte>(Vector256<byte> x)
7ffdb053bf30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> v32f<ushort>(Vector256<ushort> x)
7ffdb0570048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> v32f<uint>(Vector256<uint> x)
7ffdb0570150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> v64f<ulong>(Vector256<ulong> x)
7ffdb05701f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> v64i<ulong>(Vector256<ulong> x)
7ffdb05705d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> v64i<ulong>(Vector128<ulong> x)
7ffdb0570660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> v64f<ulong>(Vector128<ulong> x)
7ffdb057b030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> v32f<uint>(Vector128<uint> x)
7ffdb057b048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> v8i<uint>(Vector256<uint> x)
7ffdb05a08a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> v16i<uint>(Vector256<uint> x)
7ffdb05a0960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> v64i<uint>(Vector256<uint> x)
7ffdb05a0a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vload<ushort>(W128 n, ReadOnlySpan<byte> src)
7ffdb05a0d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vdec<byte>(N128 w)
7ffdb05a0de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vdec<sbyte>(N128 w)
7ffdb05a0eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> v16i<uint>(Vector128<uint> x)
7ffdb05a0f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vdec<byte>(N256 w)
7ffdb05a12a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> v8i<uint>(Vector128<uint> x)
7ffdb05a8c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vones<sbyte>(W128 w)
7ffdb0643af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vones<short>(W128 w)
7ffdb0643b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vones<int>(W128 w)
7ffdb0643d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vones<long>(W128 w)
7ffdb0648b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vones<float>(W128 w)
7ffdb06494b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vones<double>(W128 w)
7ffdb0649e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vones<sbyte>(W256 w)
7ffdb064a9a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vones<short>(W256 w)
7ffdb064b6a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vones<int>(W256 w)
7ffdb06703d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vones<long>(W256 w)
7ffdb06710b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vones<float>(W256 w)
7ffdb0671cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vones<double>(W256 w)
7ffdb0672a60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> v8i<ulong>(Vector128<ulong> x)
7ffdb06b1e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<byte>(N128 w, byte t)
7ffdb0728468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<sbyte>(N128 w, sbyte t)
7ffdb0728b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<ushort>(N128 w, ushort t)
7ffdb0728b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<short>(N128 w, short t)
7ffdb0728b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<uint>(N128 w, uint t)
7ffdb0728b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<int>(N128 w, int t)
7ffdb0728ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<ulong>(N128 w, ulong t)
7ffdb0728bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<long>(N128 w, long t)
7ffdb0728bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<float>(N128 w, float t)
7ffdb0728be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<double>(N128 w, double t)
7ffdb0728c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<byte>(N256 w, byte t)
7ffdb0728c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<sbyte>(N256 w, sbyte t)
7ffdb07295f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<ushort>(N256 w, ushort t)
7ffdb0729608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<short>(N256 w, short t)
7ffdb0729638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<uint>(N256 w, uint t)
7ffdb0729650h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<int>(N256 w, int t)
7ffdb0729668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<ulong>(N256 w, ulong t)
7ffdb0729680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<long>(N256 w, long t)
7ffdb0729698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<float>(N256 w, float t)
7ffdb07296b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<double>(N256 w, double t)
7ffdb07296c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<byte>(N512 w)
7ffdb07296e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<sbyte>(N512 w)
7ffdb0729740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<ushort>(N512 w)
7ffdb0729758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<short>(N512 w)
7ffdb0729770h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<uint>(N512 w)
7ffdb0729788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<int>(N512 w)
7ffdb07297a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<ulong>(N512 w)
7ffdb07297b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<long>(N512 w)
7ffdb07297d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<float>(N512 w)
7ffdb07297e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int vcount<double>(N512 w)
7ffdb0729800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vdec<ushort>(N128 w)
7ffdb0729860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vdec<short>(N128 w)
7ffdb0729878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vdec<uint>(N128 w)
7ffdb07298a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vload<uint>(W128 n, ReadOnlySpan<byte> src)
7ffdb07298c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vdec<int>(N128 w)
7ffdb07298f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vdec<ulong>(N128 w)
7ffdb0729920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vload<ulong>(W128 n, ReadOnlySpan<byte> src)
7ffdb0729938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vdec<long>(N128 w)
7ffdb0729950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vdec<sbyte>(N256 w)
7ffdb0729998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vdec<ushort>(N256 w)
7ffdb07299c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vload<ushort>(W256 n, ReadOnlySpan<byte> src)
7ffdb07299e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vdec<short>(N256 w)
7ffdb07299f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vdec<uint>(N256 w)
7ffdb0729a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vload<uint>(W256 n, ReadOnlySpan<byte> src)
7ffdb0729a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vdec<int>(N256 w)
7ffdb0729a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vdec<ulong>(N256 w)
7ffdb0729ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vload<ulong>(W256 n, ReadOnlySpan<byte> src)
7ffdb0729ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vdec<long>(N256 w)
7ffdb0729ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector128<byte> src)
7ffdb0729b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vref<byte>(ref Vector128<byte> src)
7ffdb0729b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector128<sbyte> src)
7ffdb0729bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vref<sbyte>(ref Vector128<sbyte> src)
7ffdb0729c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector128<ushort> src)
7ffdb0729c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vref<ushort>(ref Vector128<ushort> src)
7ffdb0729c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector128<short> src)
7ffdb0729cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vref<short>(ref Vector128<short> src)
7ffdb0729cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector128<uint> src)
7ffdb0729d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vref<uint>(ref Vector128<uint> src)
7ffdb0729d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector128<int> src)
7ffdb0729d70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vref<int>(ref Vector128<int> src)
7ffdb0729da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector128<ulong> src)
7ffdb0729de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vref<ulong>(ref Vector128<ulong> src)
7ffdb0729e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector128<long> src)
7ffdb0729e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vref<long>(ref Vector128<long> src)
7ffdb0729e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector128<float> src)
7ffdb0729ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vref<float>(ref Vector128<float> src)
7ffdb0729ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector128<double> src)
7ffdb0729f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vref<double>(ref Vector128<double> src)
7ffdb0729f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector256<byte> src)
7ffdb0729f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vref<byte>(ref Vector256<byte> src)
7ffdb0729f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector256<sbyte> src)
7ffdb072a010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vref<sbyte>(ref Vector256<sbyte> src)
7ffdb072a028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector256<ushort> src)
7ffdb072a070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vref<ushort>(ref Vector256<ushort> src)
7ffdb072a0a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector256<short> src)
7ffdb072a0e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vref<short>(ref Vector256<short> src)
7ffdb072a100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector256<uint> src)
7ffdb072a148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vref<uint>(ref Vector256<uint> src)
7ffdb072a160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector256<int> src)
7ffdb072a898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vref<int>(ref Vector256<int> src)
7ffdb072a910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector256<ulong> src)
7ffdb072b048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vref<ulong>(ref Vector256<ulong> src)
7ffdb072b0c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector256<long> src)
7ffdb072b180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vref<long>(ref Vector256<long> src)
7ffdb072b198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector256<float> src)
7ffdb072b1e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vref<float>(ref Vector256<float> src)
7ffdb072b1f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector256<double> src)
7ffdb072b240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vref<double>(ref Vector256<double> src)
7ffdb072b540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector512<byte> src)
7ffdb072b588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vref<byte>(ref Vector512<byte> src)
7ffdb072b5d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector512<sbyte> src)
7ffdb072b660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vref<sbyte>(ref Vector512<sbyte> src)
7ffdb072b690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector512<ushort> src)
7ffdb072b6f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vref<ushort>(ref Vector512<ushort> src)
7ffdb072b738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector512<short> src)
7ffdb072b780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vref<short>(ref Vector512<short> src)
7ffdb072b7b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector512<uint> src)
7ffdb072b7f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vref<uint>(ref Vector512<uint> src)
7ffdb072b828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector512<int> src)
7ffdb072b888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vref<int>(ref Vector512<int> src)
7ffdb072b8a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector512<ulong> src)
7ffdb072b948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vref<ulong>(ref Vector512<ulong> src)
7ffdb072b9d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector512<long> src)
7ffdb072ba50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vref<long>(ref Vector512<long> src)
7ffdb072ba80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector512<float> src)
7ffdb072baf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vref<float>(ref Vector512<float> src)
7ffdb072bb28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector512<double> src)
7ffdb072bba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vref<double>(ref Vector512<double> src)
7ffdb072bbe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector128<byte> src)
7ffdb072bc60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector128<byte> src)
7ffdb072bde0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector128<byte> src)
7ffdb0760960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector128<byte> src)
7ffdb0760f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector128<byte> src)
7ffdb0761500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector128<byte> src)
7ffdb07616c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector128<byte> src)
7ffdb0761740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector128<byte> src)
7ffdb0761b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector128<byte> src)
7ffdb0761ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector128<byte> src)
7ffdb0761f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector128<sbyte> src)
7ffdb0761ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector128<sbyte> src)
7ffdb0762070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector128<sbyte> src)
7ffdb07620b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector128<sbyte> src)
7ffdb0762118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector128<sbyte> src)
7ffdb0762190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector128<sbyte> src)
7ffdb07621f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector128<sbyte> src)
7ffdb0762268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector128<sbyte> src)
7ffdb07622f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector128<sbyte> src)
7ffdb0762358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector128<sbyte> src)
7ffdb07623d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector128<short> src)
7ffdb0762430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector128<short> src)
7ffdb07624d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector128<short> src)
7ffdb0762538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector128<short> src)
7ffdb0762610h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector128<short> src)
7ffdb0762640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector128<short> src)
7ffdb07626d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector128<short> src)
7ffdb0762730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector128<short> src)
7ffdb07627a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector128<short> src)
7ffdb0762808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector128<short> src)
7ffdb0762880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector128<ushort> src)
7ffdb07628f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector128<ushort> src)
7ffdb0762988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector128<ushort> src)
7ffdb07629e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector128<ushort> src)
7ffdb0762a30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector128<ushort> src)
7ffdb0762aa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector128<ushort> src)
7ffdb0762b20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector128<ushort> src)
7ffdb0762b80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector128<ushort> src)
7ffdb0762c10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector128<ushort> src)
7ffdb0762c70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector128<ushort> src)
7ffdb0762ce8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector128<int> src)
7ffdb0762d48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector128<int> src)
7ffdb0762df0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector128<int> src)
7ffdb0762e50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector128<int> src)
7ffdb0762ee0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector128<int> src)
7ffdb0762f40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector128<int> src)
7ffdb0762fb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector128<int> src)
7ffdb0762fe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector128<int> src)
7ffdb0763060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector128<int> src)
7ffdb07630c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector128<int> src)
7ffdb0763150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector128<uint> src)
7ffdb07631f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector128<uint> src)
7ffdb0763288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector128<uint> src)
7ffdb07632e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector128<uint> src)
7ffdb0763360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector128<uint> src)
7ffdb07633c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector128<uint> src)
7ffdb0763408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector128<uint> src)
7ffdb0763468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector128<uint> src)
7ffdb0763510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector128<uint> src)
7ffdb0763588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector128<uint> src)
7ffdb07635e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector128<long> src)
7ffdb0763660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector128<long> src)
7ffdb07636f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector128<long> src)
7ffdb0763750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector128<long> src)
7ffdb07637f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector128<long> src)
7ffdb0763858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector128<long> src)
7ffdb07638d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector128<long> src)
7ffdb0763930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector128<long> src)
7ffdb07639a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector128<long> src)
7ffdb07639d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector128<long> src)
7ffdb0763a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector128<ulong> src)
7ffdb0763ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector128<ulong> src)
7ffdb0763b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector128<ulong> src)
7ffdb0763bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector128<ulong> src)
7ffdb0763c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector128<ulong> src)
7ffdb0763ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector128<ulong> src)
7ffdb0763d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector128<ulong> src)
7ffdb0763d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector128<ulong> src)
7ffdb0763db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector128<ulong> src)
7ffdb0763e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector128<ulong> src)
7ffdb0763f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector128<float> src)
7ffdb0768048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector128<float> src)
7ffdb0768108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector128<float> src)
7ffdb07681c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector128<float> src)
7ffdb0768228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector128<float> src)
7ffdb07682a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector128<float> src)
7ffdb0768300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector128<float> src)
7ffdb07683d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector128<float> src)
7ffdb0768438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector128<float> src)
7ffdb07684c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector128<float> src)
7ffdb0768558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector128<double> src)
7ffdb07685d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector128<double> src)
7ffdb0768648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector128<double> src)
7ffdb07686c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector128<double> src)
7ffdb0768720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector128<double> src)
7ffdb0768798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector128<double> src)
7ffdb0768858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector128<double> src)
7ffdb07688e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector128<double> src)
7ffdb0768948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector128<double> src)
7ffdb0768a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector128<double> src)
7ffdb0768a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector256<byte> src)
7ffdb0768b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector256<byte> src)
7ffdb0768ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector256<byte> src)
7ffdb0768c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector256<byte> src)
7ffdb0768cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector256<byte> src)
7ffdb0768d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector256<byte> src)
7ffdb0768e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector256<byte> src)
7ffdb0769098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector256<byte> src)
7ffdb07690f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector256<byte> src)
7ffdb0769188h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector256<byte> src)
7ffdb0769200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector256<sbyte> src)
7ffdb0769278h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector256<sbyte> src)
7ffdb0769320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector256<sbyte> src)
7ffdb0769350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector256<sbyte> src)
7ffdb0769410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector256<sbyte> src)
7ffdb0769470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector256<sbyte> src)
7ffdb0769500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector256<sbyte> src)
7ffdb0769a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector256<sbyte> src)
7ffdb0769d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector256<sbyte> src)
7ffdb0769fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector256<sbyte> src)
7ffdb076a2b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector256<short> src)
7ffdb076a568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector256<short> src)
7ffdb076a628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector256<short> src)
7ffdb076a6b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector256<short> src)
7ffdb076a9a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector256<short> src)
7ffdb076a9e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector256<short> src)
7ffdb076af40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector256<short> src)
7ffdb076b1f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector256<short> src)
7ffdb076b4c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector256<short> src)
7ffdb076b798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector256<short> src)
7ffdb076b7f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector256<ushort> src)
7ffdb076b8b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector256<ushort> src)
7ffdb076bdc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector256<ushort> src)
7ffdb076be58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector256<ushort> src)
7ffdb0790258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector256<ushort> src)
7ffdb07902e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector256<ushort> src)
7ffdb07905a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector256<ushort> src)
7ffdb0790648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector256<ushort> src)
7ffdb07906c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector256<ushort> src)
7ffdb0790780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector256<ushort> src)
7ffdb07907e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector256<int> src)
7ffdb0790888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector256<int> src)
7ffdb0790900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector256<int> src)
7ffdb07909a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector256<int> src)
7ffdb0790a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector256<int> src)
7ffdb0790a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector256<int> src)
7ffdb0790b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector256<int> src)
7ffdb0790b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector256<int> src)
7ffdb0790c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector256<int> src)
7ffdb0790d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector256<int> src)
7ffdb0790d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector256<uint> src)
7ffdb0790e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector256<uint> src)
7ffdb0790ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector256<uint> src)
7ffdb0790f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector256<uint> src)
7ffdb0790fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector256<uint> src)
7ffdb0791020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector256<uint> src)
7ffdb0791080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector256<uint> src)
7ffdb07910e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector256<uint> src)
7ffdb0791158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector256<uint> src)
7ffdb07911b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector256<uint> src)
7ffdb0791230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector256<long> src)
7ffdb0791290h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector256<long> src)
7ffdb0791338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector256<long> src)
7ffdb07913c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector256<long> src)
7ffdb0791458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector256<long> src)
7ffdb07914d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector256<long> src)
7ffdb0791590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector256<long> src)
7ffdb07915f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector256<long> src)
7ffdb0791668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector256<long> src)
7ffdb0791698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector256<long> src)
7ffdb0791710h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector256<ulong> src)
7ffdb07917b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector256<ulong> src)
7ffdb0791860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector256<ulong> src)
7ffdb07918c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector256<ulong> src)
7ffdb0791998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector256<ulong> src)
7ffdb07919f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector256<ulong> src)
7ffdb0791ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector256<ulong> src)
7ffdb0791b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector256<ulong> src)
7ffdb0791b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector256<ulong> src)
7ffdb0791c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector256<ulong> src)
7ffdb0791cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector256<float> src)
7ffdb0791d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector256<float> src)
7ffdb0791da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector256<float> src)
7ffdb0791e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector256<float> src)
7ffdb0791e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector256<float> src)
7ffdb0791ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector256<float> src)
7ffdb0791f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector256<float> src)
7ffdb0792028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector256<float> src)
7ffdb07920a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector256<float> src)
7ffdb0792118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector256<float> src)
7ffdb0792190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector256<double> src)
7ffdb0792250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector256<double> src)
7ffdb07922e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector256<double> src)
7ffdb0792340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector256<double> src)
7ffdb07923b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector256<double> src)
7ffdb0792418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector256<double> src)
7ffdb07924a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector256<double> src)
7ffdb0792508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector256<double> src)
7ffdb0792580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector256<double> src)
7ffdb07925e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector256<double> src)
7ffdb0792658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector512<byte> src)
7ffdb0792688h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector512<byte> src)
7ffdb0792718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector512<byte> src)
7ffdb0792778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector512<byte> src)
7ffdb07927d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector512<byte> src)
7ffdb0792868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector512<byte> src)
7ffdb07928c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector512<byte> src)
7ffdb0792940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector512<byte> src)
7ffdb07929a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector512<byte> src)
7ffdb0792a18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector512<byte> src)
7ffdb0792a78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector512<sbyte> src)
7ffdb0792af0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector512<sbyte> src)
7ffdb0792b68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector512<sbyte> src)
7ffdb0792bc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector512<sbyte> src)
7ffdb0792c28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector512<sbyte> src)
7ffdb0792ca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector512<sbyte> src)
7ffdb0792d00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector512<sbyte> src)
7ffdb0792d78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector512<sbyte> src)
7ffdb0792dd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector512<sbyte> src)
7ffdb0792e38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector512<sbyte> src)
7ffdb0792eb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector512<short> src)
7ffdb0792f10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector512<short> src)
7ffdb0792fb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector512<short> src)
7ffdb0793018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector512<short> src)
7ffdb0793120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector512<short> src)
7ffdb0793150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector512<short> src)
7ffdb07931c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector512<short> src)
7ffdb0793228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector512<short> src)
7ffdb07932a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector512<short> src)
7ffdb0793300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector512<short> src)
7ffdb0793360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector512<ushort> src)
7ffdb0793408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector512<ushort> src)
7ffdb0793480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector512<ushort> src)
7ffdb07934f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector512<ushort> src)
7ffdb0793528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector512<ushort> src)
7ffdb07935a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector512<ushort> src)
7ffdb0793600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector512<ushort> src)
7ffdb0793678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector512<ushort> src)
7ffdb07936d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector512<ushort> src)
7ffdb0793750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector512<ushort> src)
7ffdb07937e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector512<int> src)
7ffdb0793840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector512<int> src)
7ffdb07938d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector512<int> src)
7ffdb0793930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector512<int> src)
7ffdb07939c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector512<int> src)
7ffdb0793de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector512<int> src)
7ffdb0793ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector512<int> src)
7ffdb0793f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector512<int> src)
7ffdb0798030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector512<int> src)
7ffdb0798150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector512<int> src)
7ffdb0798840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector512<uint> src)
7ffdb07988d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector512<uint> src)
7ffdb0798948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector512<uint> src)
7ffdb07989c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector512<uint> src)
7ffdb0798a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector512<uint> src)
7ffdb0798a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector512<uint> src)
7ffdb0798ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector512<uint> src)
7ffdb0798b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector512<uint> src)
7ffdb0798bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector512<uint> src)
7ffdb0798c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector512<uint> src)
7ffdb0798c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector512<long> src)
7ffdb0798cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector512<long> src)
7ffdb0798d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector512<long> src)
7ffdb0798de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector512<long> src)
7ffdb0798e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector512<long> src)
7ffdb0798eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector512<long> src)
7ffdb07992f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector512<long> src)
7ffdb0799380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector512<long> src)
7ffdb0799530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector512<long> src)
7ffdb0799698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector512<long> src)
7ffdb0799758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector512<ulong> src)
7ffdb0799800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector512<ulong> src)
7ffdb0799878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector512<ulong> src)
7ffdb07998f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector512<ulong> src)
7ffdb07999b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector512<ulong> src)
7ffdb0799a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector512<ulong> src)
7ffdb0799b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector512<ulong> src)
7ffdb0799b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector512<ulong> src)
7ffdb0799bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector512<ulong> src)
7ffdb0799c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector512<ulong> src)
7ffdb0799c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector512<float> src)
7ffdb0799ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector512<float> src)
7ffdb0799e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector512<float> src)
7ffdb0799e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector512<float> src)
7ffdb0799f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector512<float> src)
7ffdb0799f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector512<float> src)
7ffdb0799fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector512<float> src)
7ffdb079a040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector512<float> src)
7ffdb079a0a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector512<float> src)
7ffdb079a100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector512<float> src)
7ffdb079a130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vedit<byte>(in Vector512<double> src)
7ffdb079a190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref sbyte vedit<sbyte>(in Vector512<double> src)
7ffdb079a2c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vedit<ushort>(in Vector512<double> src)
7ffdb079a3d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref short vedit<short>(in Vector512<double> src)
7ffdb079a478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vedit<uint>(in Vector512<double> src)
7ffdb079a4d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref int vedit<int>(in Vector512<double> src)
7ffdb079a538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vedit<ulong>(in Vector512<double> src)
7ffdb079a598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref long vedit<long>(in Vector512<double> src)
7ffdb079a5f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref float vedit<float>(in Vector512<double> src)
7ffdb079a658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref double vedit<double>(in Vector512<double> src)
7ffdb079a6b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> v16i<ulong>(Vector128<ulong> x)
7ffdb079a700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> v16i<ulong>(Vector256<ulong> x)
7ffdb079a778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<short> v16i<byte>(Vector512<byte> x)
7ffdb079a820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<short> v16i<ushort>(Vector512<ushort> x)
7ffdb079a868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<short> v16i<uint>(Vector512<uint> x)
7ffdb079a8b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<short> v16i<ulong>(Vector512<ulong> x)
7ffdb079a8e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> v16u<byte>(Vector512<byte> x)
7ffdb079aa00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> v16u<ushort>(Vector512<ushort> x)
7ffdb079aec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> v16u<uint>(Vector512<uint> x)
7ffdb079af10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> v16u<ulong>(Vector512<ulong> x)
7ffdb079af70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> v32f<byte>(Vector128<byte> x)
7ffdb079afa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> v32f<ushort>(Vector128<ushort> x)
7ffdb079afd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> v32f<ulong>(Vector128<ulong> x)
7ffdb079b000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> v32f<ulong>(Vector256<ulong> x)
7ffdb079b0a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> v32i<ushort>(Vector128<ushort> x)
7ffdb079b0f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> v32i<ulong>(Vector128<ulong> x)
7ffdb079b168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> v32i<ushort>(Vector256<ushort> x)
7ffdb079b180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> v32i<ulong>(Vector256<ulong> x)
7ffdb079b1b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<int> v32i<byte>(Vector512<byte> x)
7ffdb079b1e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<int> v32i<ushort>(Vector512<ushort> x)
7ffdb079b240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<int> v32i<uint>(Vector512<uint> x)
7ffdb079b270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<int> v32i<ulong>(Vector512<ulong> x)
7ffdb079b2a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> v32u<byte>(Vector512<byte> x)
7ffdb079b360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> v32u<ushort>(Vector512<ushort> x)
7ffdb079b3a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> v32u<uint>(Vector512<uint> x)
7ffdb079b438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> v32u<ulong>(Vector512<ulong> x)
7ffdb079ba08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> v64f<byte>(Vector128<byte> x)
7ffdb079bb70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> v64f<ushort>(Vector128<ushort> x)
7ffdb079bb88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> v64f<uint>(Vector128<uint> x)
7ffdb079bbb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> v64f<byte>(Vector256<byte> x)
7ffdb079bc00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> v64f<ushort>(Vector256<ushort> x)
7ffdb079bc30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> v64f<uint>(Vector256<uint> x)
7ffdb079bc78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<double> v64f<byte>(Vector512<byte> x)
7ffdb079bca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<double> v64f<ushort>(Vector512<ushort> x)
7ffdb079bcf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<double> v64f<uint>(Vector512<uint> x)
7ffdb079bd20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<double> v64f<ulong>(Vector512<ulong> x)
7ffdb079bd50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> v64i<ushort>(Vector128<ushort> x)
7ffdb079bd80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> v64i<uint>(Vector128<uint> x)
7ffdb079bdb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> v64i<ushort>(Vector256<ushort> x)
7ffdb079bde0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<long> v64i<byte>(Vector512<byte> x)
7ffdb079be10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<long> v64i<ushort>(Vector512<ushort> x)
7ffdb079be58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<long> v64i<uint>(Vector512<uint> x)
7ffdb079be88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<long> v64i<ulong>(Vector512<ulong> x)
7ffdb079beb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> v64u<byte>(Vector512<byte> x)
7ffdb079bf90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> v64u<ushort>(Vector512<ushort> x)
7ffdb079bfd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> v64u<uint>(Vector512<uint> x)
7ffdb07d0018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> v64u<ulong>(Vector512<ulong> x)
7ffdb07d0048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> v8i<ushort>(Vector128<ushort> x)
7ffdb07d0078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> v8i<ushort>(Vector256<ushort> x)
7ffdb07d0090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> v8i<ulong>(Vector256<ulong> x)
7ffdb07d00c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<sbyte> v8i<byte>(Vector512<byte> x)
7ffdb07d00f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<sbyte> v8i<ushort>(Vector512<ushort> x)
7ffdb07d0138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<sbyte> v8i<uint>(Vector512<uint> x)
7ffdb07d0198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<sbyte> v8i<ulong>(Vector512<ulong> x)
7ffdb07d01e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> v8u<byte>(Vector512<byte> x)
7ffdb07d0228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> v8u<ushort>(Vector512<ushort> x)
7ffdb07d0270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> v8u<uint>(Vector512<uint> x)
7ffdb07d02a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> v8u<ulong>(Vector512<ulong> x)
7ffdb07d02d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vfirst<byte>(in Vector128<byte> src)
7ffdb07d0300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vfirst<ushort>(in Vector128<ushort> src)
7ffdb07d0330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vfirst<uint>(in Vector128<uint> src)
7ffdb07d0348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vfirst<ulong>(in Vector128<ulong> src)
7ffdb07d0378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vfirst<byte>(in Vector256<byte> src)
7ffdb07d0390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vfirst<ushort>(in Vector256<ushort> src)
7ffdb07d03c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vfirst<uint>(in Vector256<uint> src)
7ffdb07d03d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vfirst<ulong>(in Vector256<ulong> src)
7ffdb07d03f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte vfirst<byte>(in Vector512<byte> src)
7ffdb07d0408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort vfirst<ushort>(in Vector512<ushort> src)
7ffdb07d0438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint vfirst<uint>(in Vector512<uint> src)
7ffdb07d0450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong vfirst<ulong>(in Vector512<ulong> src)
7ffdb07d0468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vparts<byte>(W512 w, Vector256<byte> a, Vector256<byte> b)
7ffdb07d0480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vparts<ushort>(W512 w, Vector256<ushort> a, Vector256<ushort> b)
7ffdb07d04c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vparts<uint>(W512 w, Vector256<uint> a, Vector256<uint> b)
7ffdb07d04e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vparts<ulong>(W512 w, Vector256<ulong> a, Vector256<ulong> b)
7ffdb07d04f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hash32 vhash<byte>(Vector128<byte> src)
7ffdb07d0588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hash32 vhash<ushort>(Vector128<ushort> src)
7ffdb07d0918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hash32 vhash<uint>(Vector128<uint> src)
7ffdb07d0930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hash32 vhash<ulong>(Vector128<ulong> src)
7ffdb07d0948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hash32 vhash<byte>(Vector256<byte> src)
7ffdb07d09a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hash32 vhash<ushort>(Vector256<ushort> src)
7ffdb07d0b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hash32 vhash<uint>(Vector256<uint> src)
7ffdb07d0c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hash32 vhash<ulong>(Vector256<ulong> src)
7ffdb07d0cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hash32 vhash<byte>(Vector512<byte> src)
7ffdb07d1068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hash32 vhash<ushort>(Vector512<ushort> src)
7ffdb07d1728h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hash32 vhash<uint>(Vector512<uint> src)
7ffdb07d1800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hash32 vhash<ulong>(Vector512<ulong> src)
7ffdb07d1878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vzero<byte>(W128 w, byte t)
7ffdb07d2190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> vzero<sbyte>(W128 w, sbyte t)
7ffdb07d2208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vzero<ushort>(W128 w, ushort t)
7ffdb07d2220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> vzero<short>(W128 w, short t)
7ffdb07d2238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vzero<uint>(W128 w, uint t)
7ffdb07d2250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> vzero<int>(W128 w, int t)
7ffdb07d2268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vzero<ulong>(W128 w, ulong t)
7ffdb07d2280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> vzero<long>(W128 w, long t)
7ffdb07d2298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> vzero<float>(W128 w, float t)
7ffdb07d22b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> vzero<double>(W128 w, double t)
7ffdb07d2310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vzero<byte>(W256 w, byte t)
7ffdb07d2340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> vzero<sbyte>(W256 w, sbyte t)
7ffdb07d2358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vzero<ushort>(W256 w, ushort t)
7ffdb07d2370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> vzero<short>(W256 w, short t)
7ffdb07d2388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vzero<uint>(W256 w, uint t)
7ffdb07d23a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> vzero<int>(W256 w, int t)
7ffdb07d23b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vzero<ulong>(W256 w, ulong t)
7ffdb07d23d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> vzero<long>(W256 w, long t)
7ffdb07d23e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> vzero<float>(W256 w, float t)
7ffdb07d2400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> vzero<double>(W256 w, double t)
7ffdb07d2448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vzero<byte>(W512 w, byte t)
7ffdb07d24c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<sbyte> vzero<sbyte>(W512 w, sbyte t)
7ffdb07d24d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vzero<ushort>(W512 w, ushort t)
7ffdb07d24f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<short> vzero<short>(W512 w, short t)
7ffdb07d2508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vzero<uint>(W512 w, uint t)
7ffdb07d2520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<int> vzero<int>(W512 w, int t)
7ffdb07d2538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vzero<ulong>(W512 w, ulong t)
7ffdb07d2550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<long> vzero<long>(W512 w, long t)
7ffdb07d2568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<float> vzero<float>(W512 w, float t)
7ffdb07d2580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<double> vzero<double>(W512 w, double t)
7ffdb07d2598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<byte> vload<byte>(W512 n, ReadOnlySpan<byte> src)
7ffdb07d2658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ushort> vload<ushort>(W512 n, ReadOnlySpan<byte> src)
7ffdb07d33c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<uint> vload<uint>(W512 n, ReadOnlySpan<byte> src)
7ffdb07d3438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector512<ulong> vload<ulong>(W512 n, ReadOnlySpan<byte> src)
7ffdb07d3498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vector<byte>(W64 w, value<byte> src)
7ffdb0361758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vector<ushort>(W64 w, value<ushort> src)
7ffdb0369050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vector<uint>(W64 w, value<uint> src)
7ffdb036b450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vector<ulong>(W64 w, value<ulong> src)
7ffdb03805d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vector<byte>(W128 w, value<byte> src)
7ffdb03817b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vector<ushort>(W128 w, value<ushort> src)
7ffdb0382760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vector<uint>(W128 w, value<uint> src)
7ffdb03830f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vector<ulong>(W128 w, value<ulong> src)
7ffdb03832b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vector<byte>(W256 w, value<byte> src)
7ffdb0383d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vector<ushort>(W256 w, value<ushort> src)
7ffdb0388468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vector<uint>(W256 w, value<uint> src)
7ffdb0388f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vector<ulong>(W256 w, value<ulong> src)
7ffdb0389338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hash32 hash<byte>(value<byte> src)
7ffdb0389c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hash32 hash<ushort>(value<ushort> src)
7ffdb038aa60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hash32 hash<uint>(value<uint> src)
7ffdb038b288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Hash32 hash<ulong>(value<ulong> src)
7ffdb038bd38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<byte> from<byte>(ReadOnlySpan<byte> src)
7ffdb03b01f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ushort> from<ushort>(ReadOnlySpan<byte> src)
7ffdb03b0d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<uint> from<uint>(ReadOnlySpan<byte> src)
7ffdb03b0dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ulong> from<ulong>(ReadOnlySpan<byte> src)
7ffdb03b0f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<byte>(value<byte> a, value<byte> b)
7ffdb03b1de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq0<byte>(value<byte> a, value<byte> b)
7ffdb03b20e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq1<byte>(value<byte> a, value<byte> b)
7ffdb03b2118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq3<byte>(value<byte> a, value<byte> b)
7ffdb03b2148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<byte>(W128 w, value<byte> a, value<byte> b)
7ffdb03b2160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<byte>(W256 w, value<byte> a, value<byte> b)
7ffdb03b2178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<byte>(W512 w, value<byte> a, value<byte> b)
7ffdb03b2190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq2<byte>(value<byte> a, value<byte> b)
7ffdb03b21a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<ushort>(value<ushort> a, value<ushort> b)
7ffdb03b9860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq0<ushort>(value<ushort> a, value<ushort> b)
7ffdb03b9890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq1<ushort>(value<ushort> a, value<ushort> b)
7ffdb03b98a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq3<ushort>(value<ushort> a, value<ushort> b)
7ffdb03b98d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<ushort>(W128 w, value<ushort> a, value<ushort> b)
7ffdb03b98f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<ushort>(W256 w, value<ushort> a, value<ushort> b)
7ffdb03b9908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<ushort>(W512 w, value<ushort> a, value<ushort> b)
7ffdb03b9920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq2<ushort>(value<ushort> a, value<ushort> b)
7ffdb03b9938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<uint>(value<uint> a, value<uint> b)
7ffdb03bba50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq0<uint>(value<uint> a, value<uint> b)
7ffdb03bba98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq1<uint>(value<uint> a, value<uint> b)
7ffdb03bbac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq3<uint>(value<uint> a, value<uint> b)
7ffdb03bbb10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<uint>(W128 w, value<uint> a, value<uint> b)
7ffdb03bbb28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<uint>(W256 w, value<uint> a, value<uint> b)
7ffdb03bbb40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<uint>(W512 w, value<uint> a, value<uint> b)
7ffdb03bbb58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq2<uint>(value<uint> a, value<uint> b)
7ffdb03bbb70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<ulong>(value<ulong> a, value<ulong> b)
7ffdb03d03d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq0<ulong>(value<ulong> a, value<ulong> b)
7ffdb03d0408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq1<ulong>(value<ulong> a, value<ulong> b)
7ffdb03d0420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq3<ulong>(value<ulong> a, value<ulong> b)
7ffdb03d0438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<ulong>(W128 w, value<ulong> a, value<ulong> b)
7ffdb03d0450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<ulong>(W256 w, value<ulong> a, value<ulong> b)
7ffdb03d0468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq<ulong>(W512 w, value<ulong> a, value<ulong> b)
7ffdb03d0480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eq2<ulong>(value<ulong> a, value<ulong> b)
7ffdb03d0498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<byte> and<byte>(value<byte> a, value<byte> b)
7ffdb03d0e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ushort> and<ushort>(value<ushort> a, value<ushort> b)
7ffdb03d1338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<uint> and<uint>(value<uint> a, value<uint> b)
7ffdb03d1500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ulong> and<ulong>(value<ulong> a, value<ulong> b)
7ffdb03d15f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<byte> or<byte>(value<byte> a, value<byte> b)
7ffdb03d1698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ushort> or<ushort>(value<ushort> a, value<ushort> b)
7ffdb03d17e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<uint> or<uint>(value<uint> a, value<uint> b)
7ffdb03d1b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ulong> or<ulong>(value<ulong> a, value<ulong> b)
7ffdb03d2538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<byte> xor<byte>(value<byte> a, value<byte> b)
7ffdb03d2c28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ushort> xor<ushort>(value<ushort> a, value<ushort> b)
7ffdb03d36a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<uint> xor<uint>(value<uint> a, value<uint> b)
7ffdb03d3f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ulong> xor<ulong>(value<ulong> a, value<ulong> b)
7ffdb03d8540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<byte> negate<byte>(value<byte> a)
7ffdb03d8d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ushort> negate<ushort>(value<ushort> a)
7ffdb03d93c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<uint> negate<uint>(value<uint> a)
7ffdb03d9bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ulong> negate<ulong>(value<ulong> a)
7ffdb03da1a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<byte> invert<byte>(value<byte> a)
7ffdb03da760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ushort> invert<ushort>(value<ushort> a)
7ffdb03dae20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<uint> invert<uint>(value<uint> a)
7ffdb03db408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ulong> invert<ulong>(value<ulong> a)
7ffdb03dba20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp<byte>(value<byte> a, value<byte> b)
7ffdb03f0000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp<ushort>(value<ushort> a, value<ushort> b)
7ffdb03f0708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp<uint>(value<uint> a, value<uint> b)
7ffdb03f0cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int cmp<ulong>(value<ulong> a, value<ulong> b)
7ffdb03f1038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt<byte>(value<byte> a, value<byte> b)
7ffdb03f16b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt<ushort>(value<ushort> a, value<ushort> b)
7ffdb03f1ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt<uint>(value<uint> a, value<uint> b)
7ffdb03f23d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lt<ulong>(value<ulong> a, value<ulong> b)
7ffdb03f28e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt<byte>(value<byte> a, value<byte> b)
7ffdb03f2e38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt<ushort>(value<ushort> a, value<ushort> b)
7ffdb03f3180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt<uint>(value<uint> a, value<uint> b)
7ffdb03f36d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gt<ulong>(value<ulong> a, value<ulong> b)
7ffdb03f8828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq<byte>(value<byte> a, value<byte> b)
7ffdb03f8d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq<ushort>(value<ushort> a, value<ushort> b)
7ffdb03f92f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq<uint>(value<uint> a, value<uint> b)
7ffdb03f95a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit gteq<ulong>(value<ulong> a, value<ulong> b)
7ffdb03f9b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq<byte>(value<byte> a, value<byte> b)
7ffdb03f9fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq<ushort>(value<ushort> a, value<ushort> b)
7ffdb03fa610h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq<uint>(value<uint> a, value<uint> b)
7ffdb03facd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lteq<ulong>(value<ulong> a, value<ulong> b)
7ffdb03fb1c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<byte> sll<byte>(value<byte> a, byte count)
7ffdb03fb4b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ushort> sll<ushort>(value<ushort> a, byte count)
7ffdb03fbc18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<uint> sll<uint>(value<uint> a, byte count)
7ffdb0420240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ulong> sll<ulong>(value<ulong> a, byte count)
7ffdb0420540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<byte> srl<byte>(value<byte> a, byte count)
7ffdb0420a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ushort> srl<ushort>(value<ushort> a, byte count)
7ffdb0421b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<uint> srl<uint>(value<uint> a, byte count)
7ffdb04220d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ulong> srl<ulong>(value<ulong> a, byte count)
7ffdb0422928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<byte> add<byte>(value<byte> a, value<byte> b)
7ffdb0422f10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ushort> add<ushort>(value<ushort> a, value<ushort> b)
7ffdb0423528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<uint> add<uint>(value<uint> a, value<uint> b)
7ffdb0423b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ulong> add<ulong>(value<ulong> a, value<ulong> b)
7ffdb04282e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<byte> sub<byte>(value<byte> a, value<byte> b)
7ffdb0428888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ushort> sub<ushort>(value<ushort> a, value<ushort> b)
7ffdb0428f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<uint> sub<uint>(value<uint> a, value<uint> b)
7ffdb0429548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ulong> sub<ulong>(value<ulong> a, value<ulong> b)
7ffdb0429950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<byte> div<byte>(value<byte> a, value<byte> b)
7ffdb042a508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ushort> div<ushort>(value<ushort> a, value<ushort> b)
7ffdb042ad48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<uint> div<uint>(value<uint> a, value<uint> b)
7ffdb042b000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ulong> div<ulong>(value<ulong> a, value<ulong> b)
7ffdb042b528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<byte> mod<byte>(value<byte> a, value<byte> b)
7ffdb042ba20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ushort> mod<ushort>(value<ushort> a, value<ushort> b)
7ffdb0440018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<uint> mod<uint>(value<uint> a, value<uint> b)
7ffdb0440528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ulong> mod<ulong>(value<ulong> a, value<ulong> b)
7ffdb04407f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<byte> inc<byte>(value<byte> a)
7ffdb0440ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ushort> inc<ushort>(value<ushort> a)
7ffdb04410b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<uint> inc<uint>(value<uint> a)
7ffdb04415d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ulong> inc<ulong>(value<ulong> a)
7ffdb0441e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<byte> dec<byte>(value<byte> a)
7ffdb0442448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ushort> dec<ushort>(value<ushort> a)
7ffdb0442a90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<uint> dec<uint>(value<uint> a)
7ffdb0443468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# value<ulong> dec<ulong>(value<ulong> a)
7ffdb0443d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<byte>(in byte a, in byte b, ref byte dst)
7ffdb08a2c10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<byte>(W256 w, in byte a, in byte b, ref byte dst)
7ffdb08a2c70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<byte>(W256 n, int vcount, int blocklen, in byte a, in byte b, ref byte dst)
7ffdb08a2c88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<ushort>(in ushort a, in ushort b, ref ushort dst)
7ffdb08a2d60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<ushort>(W256 w, in ushort a, in ushort b, ref ushort dst)
7ffdb08a2ef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<ushort>(W256 n, int vcount, int blocklen, in ushort a, in ushort b, ref ushort dst)
7ffdb08a2f10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> and<ushort>(W256 w, in ushort a, in ushort b)
7ffdb08a2f40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<uint>(in uint a, in uint b, ref uint dst)
7ffdb08a3288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<uint>(W256 w, in uint a, in uint b, ref uint dst)
7ffdb08a3348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<uint>(W256 n, int vcount, int blocklen, in uint a, in uint b, ref uint dst)
7ffdb08a3360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> and<uint>(W256 w, in uint a, in uint b)
7ffdb08a3408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<ulong>(in ulong a, in ulong b, ref ulong dst)
7ffdb08a39f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<ulong>(W256 w, in ulong a, in ulong b, ref ulong dst)
7ffdb08a3a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<ulong>(W256 n, int vcount, int blocklen, in ulong a, in ulong b, ref ulong dst)
7ffdb08a3a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> and<ulong>(W256 w, in ulong a, in ulong b)
7ffdb08a3ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<byte>(in byte a, in byte b, ref byte dst)
7ffdb08a3fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<byte>(W256 w, in byte a, in byte b, ref byte dst)
7ffdb08a8018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<byte>(W256 w, int vcount, int blocklen, in byte a, in byte b, ref byte dst)
7ffdb08a8030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<ushort>(in ushort a, in ushort b, ref ushort dst)
7ffdb08a8270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<ushort>(W256 w, in ushort a, in ushort b, ref ushort dst)
7ffdb08a83a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<ushort>(W256 w, int vcount, int blocklen, in ushort a, in ushort b, ref ushort dst)
7ffdb08a83c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vcimpl<ushort>(W256 w, in ushort a, in ushort b)
7ffdb08a83f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<uint>(in uint a, in uint b, ref uint dst)
7ffdb08a8960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<uint>(W256 w, in uint a, in uint b, ref uint dst)
7ffdb08a89c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<uint>(W256 w, int vcount, int blocklen, in uint a, in uint b, ref uint dst)
7ffdb08a89d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vcimpl<uint>(W256 w, in uint a, in uint b)
7ffdb08a8a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<ulong>(in ulong a, in ulong b, ref ulong dst)
7ffdb08a8c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<ulong>(W256 w, in ulong a, in ulong b, ref ulong dst)
7ffdb08a8c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<ulong>(W256 w, int vcount, int blocklen, in ulong a, in ulong b, ref ulong dst)
7ffdb08a8c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vcimpl<ulong>(W256 w, in ulong a, in ulong b)
7ffdb08a8cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<byte>(in byte a, in byte b, ref byte dst)
7ffdb08a8fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<byte>(W256 w, in byte a, in byte b, ref byte dst)
7ffdb08a9008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<byte>(W256 w, int vcount, int blocklen, in byte a, in byte b, ref byte dst)
7ffdb08a9020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<ushort>(in ushort a, in ushort b, ref ushort dst)
7ffdb08a9098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<ushort>(W256 w, in ushort a, in ushort b, ref ushort dst)
7ffdb08a9110h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<ushort>(W256 w, int vcount, int blocklen, in ushort a, in ushort b, ref ushort dst)
7ffdb08a9128h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vcnonimpl<ushort>(W256 w, in ushort a, in ushort b)
7ffdb08a9158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<uint>(in uint a, in uint b, ref uint dst)
7ffdb08a92a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<uint>(W256 w, in uint a, in uint b, ref uint dst)
7ffdb08a92d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<uint>(W256 w, int vcount, int blocklen, in uint a, in uint b, ref uint dst)
7ffdb08a92f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vcnonimpl<uint>(W256 w, in uint a, in uint b)
7ffdb08a9380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<ulong>(in ulong a, in ulong b, ref ulong dst)
7ffdb08a9608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<ulong>(W256 w, in ulong a, in ulong b, ref ulong dst)
7ffdb08a9638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<ulong>(W256 w, int vcount, int blocklen, in ulong a, in ulong b, ref ulong dst)
7ffdb08a9650h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vcnonimpl<ulong>(W256 w, in ulong a, in ulong b)
7ffdb08a96e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<byte>(in byte a, in byte b)
7ffdb08aa340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<byte>(W256 n, in byte a, in byte b)
7ffdb08aa3d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<uint>(W256 n, int vcount, int blocklen, in uint a, in uint b)
7ffdb08aa3e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ulong>(W256 n, int vcount, int blocklen, in ulong a, in ulong b)
7ffdb08aa418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ushort>(in ushort a, in ushort b)
7ffdb08aa4a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ushort>(W256 n, in ushort a, in ushort b)
7ffdb08aa550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<ushort>(W256 w, in ushort a, in ushort b)
7ffdb08aa598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<uint>(in uint a, in uint b)
7ffdb08aa778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<uint>(W256 n, in uint a, in uint b)
7ffdb08aa790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<uint>(W256 w, in uint a, in uint b)
7ffdb08aa7d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ulong>(in ulong a, in ulong b)
7ffdb08aa988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ulong>(W256 n, in ulong a, in ulong b)
7ffdb08aa9b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<ulong>(W256 w, in ulong a, in ulong b)
7ffdb08aa9e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<byte>(in byte a, in byte b, ref byte dst)
7ffdb08abf00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<byte>(W256 n, in byte a, in byte b, ref byte dst)
7ffdb08abf90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<byte>(W256 n, int vcount, int blocklen, in byte a, in byte b, ref byte dst)
7ffdb08abfa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<ushort>(in ushort a, in ushort b, ref ushort dst)
7ffdb08e0018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<ushort>(W256 n, in ushort a, in ushort b, ref ushort dst)
7ffdb08e00a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<ushort>(W256 n, int vcount, int blocklen, in ushort a, in ushort b, ref ushort dst)
7ffdb08e00c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vimpl<ushort>(W256 w, in ushort a, in ushort b)
7ffdb08e00f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<uint>(in uint a, in uint b, ref uint dst)
7ffdb08e0210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<uint>(W256 n, in uint a, in uint b, ref uint dst)
7ffdb08e0258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<uint>(W256 n, int vcount, int blocklen, in uint a, in uint b, ref uint dst)
7ffdb08e0270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vimpl<uint>(W256 w, in uint a, in uint b)
7ffdb08e0300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<ulong>(in ulong a, in ulong b, ref ulong dst)
7ffdb08e03f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<ulong>(W256 n, in ulong a, in ulong b, ref ulong dst)
7ffdb08e0420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<ulong>(W256 n, int vcount, int blocklen, in ulong a, in ulong b, ref ulong dst)
7ffdb08e0438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vimpl<ulong>(W256 w, in ulong a, in ulong b)
7ffdb08e0480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<byte>(in byte A, in byte B, ref byte Z)
7ffdb08e1410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<byte>(W256 n, in byte a, in byte b, ref byte z)
7ffdb08e1500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<byte>(W256 w, int vcount, int blocklen, in byte a, in byte b, ref byte z)
7ffdb08e1518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<ushort>(in ushort A, in ushort B, ref ushort Z)
7ffdb08e15d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<ushort>(W256 n, in ushort a, in ushort b, ref ushort z)
7ffdb08e1980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<ushort>(W256 w, int vcount, int blocklen, in ushort a, in ushort b, ref ushort z)
7ffdb08e1998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vnand<ushort>(N256 w, in ushort a, in ushort b)
7ffdb08e1a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<uint>(in uint A, in uint B, ref uint Z)
7ffdb08e1de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<uint>(W256 n, in uint a, in uint b, ref uint z)
7ffdb08e1e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<uint>(W256 w, int vcount, int blocklen, in uint a, in uint b, ref uint z)
7ffdb08e1e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vnand<uint>(N256 w, in uint a, in uint b)
7ffdb08e1ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<ulong>(in ulong A, in ulong B, ref ulong Z)
7ffdb08e1f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<ulong>(W256 n, in ulong a, in ulong b, ref ulong z)
7ffdb08e1f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<ulong>(W256 w, int vcount, int blocklen, in ulong a, in ulong b, ref ulong z)
7ffdb08e1f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vnand<ulong>(N256 w, in ulong a, in ulong b)
7ffdb08e2028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<byte>(in byte a, in byte b, ref byte dst)
7ffdb08e2298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<byte>(W256 w, in byte a, in byte b, ref byte dst)
7ffdb08e23d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<byte>(W256 w, int vcount, int blocklen, in byte a, in byte b, ref byte dst)
7ffdb08e23e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<ushort>(in ushort a, in ushort b, ref ushort dst)
7ffdb08e25e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<ushort>(W256 w, in ushort a, in ushort b, ref ushort dst)
7ffdb08e2760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<ushort>(W256 w, int vcount, int blocklen, in ushort a, in ushort b, ref ushort dst)
7ffdb08e2778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vnonimpl<ushort>(W256 w, in ushort a, in ushort b)
7ffdb08e27d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<uint>(in uint a, in uint b, ref uint dst)
7ffdb08e2e20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<uint>(W256 w, in uint a, in uint b, ref uint dst)
7ffdb08e2e80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<uint>(W256 w, int vcount, int blocklen, in uint a, in uint b, ref uint dst)
7ffdb08e2e98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vnonimpl<uint>(W256 w, in uint a, in uint b)
7ffdb08e2f58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<ulong>(in ulong a, in ulong b, ref ulong dst)
7ffdb08e32d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<ulong>(W256 w, in ulong a, in ulong b, ref ulong dst)
7ffdb08e3330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<ulong>(W256 w, int vcount, int blocklen, in ulong a, in ulong b, ref ulong dst)
7ffdb08e3348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vnonimpl<ulong>(W256 w, in ulong a, in ulong b)
7ffdb08e3360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<byte>(in byte a, in byte b, ref byte dst)
7ffdb08e35b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<byte>(W256 w, in byte a, in byte b, ref byte dst)
7ffdb08e35e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<byte>(W256 w, int vcount, int blocklen, in byte a, in byte b, ref byte dst)
7ffdb08e3600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<ushort>(in ushort a, in ushort b, ref ushort dst)
7ffdb08e3750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<ushort>(W256 w, in ushort a, in ushort b, ref ushort dst)
7ffdb08e37e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<ushort>(W256 w, int vcount, int blocklen, in ushort a, in ushort b, ref ushort dst)
7ffdb08e37f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vnor<ushort>(W256 w, in ushort a, in ushort b)
7ffdb08e3828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<uint>(in uint a, in uint b, ref uint dst)
7ffdb08e3c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<uint>(W256 w, in uint a, in uint b, ref uint dst)
7ffdb08e3cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<uint>(W256 w, int vcount, int blocklen, in uint a, in uint b, ref uint dst)
7ffdb08e3cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vnor<uint>(W256 w, in uint a, in uint b)
7ffdb08e3d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<ulong>(in ulong a, in ulong b, ref ulong dst)
7ffdb08e8108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<ulong>(W256 w, in ulong a, in ulong b, ref ulong dst)
7ffdb08e8120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<ulong>(W256 w, int vcount, int blocklen, in ulong a, in ulong b, ref ulong dst)
7ffdb08e8138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vnor<ulong>(W256 w, in ulong a, in ulong b)
7ffdb08e8150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<byte>(in byte src, ref byte dst)
7ffdb08e82a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<byte>(W256 w, in byte src, ref byte dst)
7ffdb08e8318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<byte>(W256 w, int count, int step, in byte src, ref byte dst)
7ffdb08e8330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<ushort>(in ushort src, ref ushort dst)
7ffdb08e83c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<ushort>(W256 w, in ushort src, ref ushort dst)
7ffdb08e8450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<ushort>(W256 w, int count, int step, in ushort src, ref ushort dst)
7ffdb08e8468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vnot<ushort>(W256 w, in ushort src)
7ffdb08e8498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<uint>(in uint src, ref uint dst)
7ffdb08e89c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<uint>(W256 w, in uint src, ref uint dst)
7ffdb08e8a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<uint>(W256 w, int count, int step, in uint src, ref uint dst)
7ffdb08e8a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vnot<uint>(W256 w, in uint src)
7ffdb08e8b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<ulong>(in ulong src, ref ulong dst)
7ffdb08e9038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<ulong>(W256 w, in ulong src, ref ulong dst)
7ffdb08e9050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<ulong>(W256 w, int count, int step, in ulong src, ref ulong dst)
7ffdb08e9068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vnot<ulong>(W256 w, in ulong src)
7ffdb08e9098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<ushort>(in ushort A, in ushort B, ref ushort Z)
7ffdb08e96c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<ushort>(W256 w, in ushort a, in ushort b, ref ushort dst)
7ffdb08e97e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<ushort>(W256 w, int vcount, int blocklen, in ushort a, in ushort b, ref ushort dst)
7ffdb08e9818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vor<ushort>(W256 w, in ushort a, in ushort b)
7ffdb08e98a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<uint>(in uint A, in uint B, ref uint Z)
7ffdb08e9c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<uint>(W256 w, in uint a, in uint b, ref uint dst)
7ffdb08e9c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<uint>(W256 w, int vcount, int blocklen, in uint a, in uint b, ref uint dst)
7ffdb08e9c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vor<uint>(W256 w, in uint a, in uint b)
7ffdb08e9ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<ulong>(in ulong A, in ulong B, ref ulong Z)
7ffdb08e9f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<ulong>(W256 w, in ulong a, in ulong b, ref ulong dst)
7ffdb08e9fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<ulong>(W256 w, int vcount, int blocklen, in ulong a, in ulong b, ref ulong dst)
7ffdb08e9fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vor<ulong>(W256 w, in ulong a, in ulong b)
7ffdb08e9ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<byte>(in byte a, in byte b, in byte C, ref byte dst)
7ffdb0930330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<byte>(W256 n, in byte a, in byte b, in byte c, ref byte dst)
7ffdb0930360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<byte>(W256 n, int vcount, int blocklen, in byte a, in byte b, in byte c, ref byte dst)
7ffdb0930378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<ushort>(in ushort a, in ushort b, in ushort C, ref ushort dst)
7ffdb0930450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<ushort>(W256 n, in ushort a, in ushort b, in ushort c, ref ushort dst)
7ffdb09304c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<ushort>(W256 n, int vcount, int blocklen, in ushort a, in ushort b, in ushort c, ref ushort dst)
7ffdb09304e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vselect<ushort>(W256 n, in ushort a, in ushort b, in ushort c)
7ffdb0930510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<uint>(in uint a, in uint b, in uint C, ref uint dst)
7ffdb0930660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<uint>(W256 n, in uint a, in uint b, in uint c, ref uint dst)
7ffdb0930708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<uint>(W256 n, int vcount, int blocklen, in uint a, in uint b, in uint c, ref uint dst)
7ffdb0930720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vselect<uint>(W256 n, in uint a, in uint b, in uint c)
7ffdb09307c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<ulong>(in ulong a, in ulong b, in ulong C, ref ulong dst)
7ffdb0930888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<ulong>(W256 n, in ulong a, in ulong b, in ulong c, ref ulong dst)
7ffdb09308a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<ulong>(W256 n, int vcount, int blocklen, in ulong a, in ulong b, in ulong c, ref ulong dst)
7ffdb09308b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vselect<ulong>(W256 n, in ulong a, in ulong b, in ulong c)
7ffdb09308d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<byte>(in byte a)
7ffdb09309f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<byte>(W256 w, in byte a)
7ffdb0930a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<byte>(W256 n, int vcount, int blocklen, in byte a)
7ffdb0930a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<byte>(in byte a, in byte b)
7ffdb0930af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<byte>(W256 w, in byte a, in byte b)
7ffdb0930b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<byte>(W256 n, int vcount, int blocklen, in byte a, in byte b)
7ffdb0930b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ushort>(in ushort a)
7ffdb0930c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ushort>(W256 w, in ushort a)
7ffdb0930c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ushort>(W256 n, int vcount, int blocklen, in ushort a)
7ffdb0930c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ushort>(in ushort a, in ushort b)
7ffdb0930ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ushort>(W256 w, in ushort a, in ushort b)
7ffdb0930f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ushort>(W256 n, int vcount, int blocklen, in ushort a, in ushort b)
7ffdb0930f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<uint>(in uint a)
7ffdb0930fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<uint>(W256 w, in uint a)
7ffdb0931008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<uint>(W256 n, int vcount, int blocklen, in uint a)
7ffdb0931020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<uint>(in uint a, in uint b)
7ffdb09311e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<uint>(W256 w, in uint a, in uint b)
7ffdb0931200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<uint>(W256 n, int vcount, int blocklen, in uint a, in uint b)
7ffdb0931218h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ulong>(in ulong a)
7ffdb0931398h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ulong>(W256 w, in ulong a)
7ffdb09313c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ulong>(W256 n, int vcount, int blocklen, in ulong a)
7ffdb09313e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ulong>(in ulong a, in ulong b)
7ffdb0931500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ulong>(W256 w, in ulong a, in ulong b)
7ffdb0931518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ulong>(W256 n, int vcount, int blocklen, in ulong a, in ulong b)
7ffdb0931530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<byte>(in byte a, in byte b, ref byte dst)
7ffdb0933ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<byte>(W256 n, in byte a, in byte b, ref byte z)
7ffdb0933c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<byte>(W256 n, int vcount, int blocklen, in byte a, in byte b, ref byte z)
7ffdb0933c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<ushort>(in ushort a, in ushort b, ref ushort dst)
7ffdb0933d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<ushort>(W256 n, in ushort a, in ushort b, ref ushort z)
7ffdb0933ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<ushort>(W256 n, int vcount, int blocklen, in ushort a, in ushort b, ref ushort z)
7ffdb0933eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vxnor<ushort>(W256 w, in ushort a, in ushort b)
7ffdb0933ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<uint>(in uint a, in uint b, ref uint dst)
7ffdb09381c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<uint>(W256 n, in uint a, in uint b, ref uint z)
7ffdb0938240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<uint>(W256 n, int vcount, int blocklen, in uint a, in uint b, ref uint z)
7ffdb0938258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vxnor<uint>(W256 w, in uint a, in uint b)
7ffdb09383a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<ulong>(in ulong a, in ulong b, ref ulong dst)
7ffdb09384c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<ulong>(W256 n, in ulong a, in ulong b, ref ulong z)
7ffdb0938510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<ulong>(W256 n, int vcount, int blocklen, in ulong a, in ulong b, ref ulong z)
7ffdb0938528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vxnor<ulong>(W256 w, in ulong a, in ulong b)
7ffdb0938540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<byte>(in byte a, in byte b, ref byte dst)
7ffdb0938708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<byte>(W256 n, in byte a, in byte b, ref byte z)
7ffdb0938798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<byte>(W256 n, int vcount, int blocklen, in byte a, in byte b, ref byte z)
7ffdb09387b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<ushort>(in ushort a, in ushort b, ref ushort dst)
7ffdb0938858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<ushort>(W256 n, in ushort a, in ushort b, ref ushort z)
7ffdb0938918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<ushort>(W256 n, int vcount, int blocklen, in ushort a, in ushort b, ref ushort z)
7ffdb0938930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vxor<ushort>(W256 w, in ushort a, in ushort b)
7ffdb0938960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<uint>(in uint a, in uint b, ref uint dst)
7ffdb0938b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<uint>(W256 n, in uint a, in uint b, ref uint z)
7ffdb0938ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<uint>(W256 n, int vcount, int blocklen, in uint a, in uint b, ref uint z)
7ffdb0938bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vxor<uint>(W256 w, in uint a, in uint b)
7ffdb0938c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<ulong>(in ulong a, in ulong b, ref ulong dst)
7ffdb0938d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<ulong>(W256 n, in ulong a, in ulong b, ref ulong z)
7ffdb0938df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<ulong>(W256 n, int vcount, int blocklen, in ulong a, in ulong b, ref ulong z)
7ffdb0938e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vxor<ulong>(W256 w, in ulong a, in ulong b)
7ffdb0938e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<byte>(in byte A, in byte B, ref byte Z)
7ffdb09a2f40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<byte>(W256 w, in byte a, in byte b, ref byte dst)
7ffdb09a2fa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<byte>(W256 w, int vcount, int blocklen, in byte a, in byte b, ref byte dst)
7ffdb09a2fb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<byte>(in byte A, in byte B, ref byte dst)
7ffdb0a42bf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<byte>(W256 w, in byte a, in byte b, ref byte c)
7ffdb0a42c58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<byte>(W256 w, int vcount, int blocklen, in byte a, in byte b, ref byte c)
7ffdb0a42c70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<ushort>(in ushort A, in ushort B, ref ushort dst)
7ffdb0a42e08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<ushort>(W256 w, in ushort a, in ushort b, ref ushort c)
7ffdb0a42eb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<ushort>(W256 w, int vcount, int blocklen, in ushort a, in ushort b, ref ushort c)
7ffdb0a42ec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vxornot<ushort>(W256 w, in ushort a, in ushort b)
7ffdb0a42ef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<uint>(in uint A, in uint B, ref uint dst)
7ffdb0a43270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<uint>(W256 w, in uint a, in uint b, ref uint c)
7ffdb0a43288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<uint>(W256 w, int vcount, int blocklen, in uint a, in uint b, ref uint c)
7ffdb0a432a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vxornot<uint>(W256 w, in uint a, in uint b)
7ffdb0a43348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<ulong>(in ulong A, in ulong B, ref ulong dst)
7ffdb0a43690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<ulong>(W256 w, in ulong a, in ulong b, ref ulong c)
7ffdb0a436a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<ulong>(W256 w, int vcount, int blocklen, in ulong a, in ulong b, ref ulong c)
7ffdb0a436c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vxornot<ulong>(W256 w, in ulong a, in ulong b)
7ffdb0a436d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> and<byte>(W128 w, in byte a, in byte b)
7ffdb0ee1ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> and<ushort>(W128 w, in ushort a, in ushort b)
7ffdb0ee1b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> and<uint>(W128 w, in uint a, in uint b)
7ffdb0ee1b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> and<ulong>(W128 w, in ulong a, in ulong b)
7ffdb0ee1b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> and<byte>(W256 w, in byte a, in byte b)
7ffdb0ee1b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<byte>(W128 n, in byte a, in byte b, ref byte dst)
7ffdb0ee1b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<ushort>(W128 n, in ushort a, in ushort b, ref ushort dst)
7ffdb0ee1bd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<uint>(W128 n, in uint a, in uint b, ref uint dst)
7ffdb0ee1bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<ulong>(W128 n, in ulong a, in ulong b, ref ulong dst)
7ffdb0ee1c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<byte>(W128 w, int vcount, int blocklen, in byte a, in byte b, ref byte dst)
7ffdb0ee1c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<ushort>(W128 w, int vcount, int blocklen, in ushort a, in ushort b, ref ushort dst)
7ffdb0ee1c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<uint>(W128 w, int vcount, int blocklen, in uint a, in uint b, ref uint dst)
7ffdb0ee1c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void and<ulong>(W128 w, int vcount, int blocklen, in ulong a, in ulong b, ref ulong dst)
7ffdb0ee1cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vcimpl<byte>(W128 w, in byte a, in byte b)
7ffdb0ee1cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vcimpl<ushort>(W128 w, in ushort a, in ushort b)
7ffdb0ee1d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vcimpl<uint>(W128 w, in uint a, in uint b)
7ffdb0ee1d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vcimpl<ulong>(W128 w, in ulong a, in ulong b)
7ffdb0ee1d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vcimpl<byte>(W256 w, in byte a, in byte b)
7ffdb0ee1d58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<byte>(W128 w, in byte a, in byte b, ref byte dst)
7ffdb0ee1d70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<ushort>(W128 w, in ushort a, in ushort b, ref ushort dst)
7ffdb0ee1db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<uint>(W128 w, in uint a, in uint b, ref uint dst)
7ffdb0ee1dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<ulong>(W128 w, in ulong a, in ulong b, ref ulong dst)
7ffdb0ee1de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<byte>(W128 w, int vcount, int blocklen, in byte a, in byte b, ref byte dst)
7ffdb0ee1e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<ushort>(W128 w, int vcount, int blocklen, in ushort a, in ushort b, ref ushort dst)
7ffdb0ee1e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<uint>(W128 w, int vcount, int blocklen, in uint a, in uint b, ref uint dst)
7ffdb0ee1e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cimpl<ulong>(W128 w, int vcount, int blocklen, in ulong a, in ulong b, ref ulong dst)
7ffdb0ee1e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vcnonimpl<byte>(W128 w, in byte a, in byte b)
7ffdb0ee1ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vcnonimpl<ushort>(W128 w, in ushort a, in ushort b)
7ffdb0ee1ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vcnonimpl<uint>(W128 w, in uint a, in uint b)
7ffdb0ee1f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vcnonimpl<ulong>(W128 w, in ulong a, in ulong b)
7ffdb0ee1f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vcnonimpl<byte>(W256 w, in byte a, in byte b)
7ffdb0ee1f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<byte>(W128 w, in byte a, in byte b, ref byte dst)
7ffdb0ee1f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<ushort>(W128 w, in ushort a, in ushort b, ref ushort dst)
7ffdb0ee1f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<uint>(W128 w, in uint a, in uint b, ref uint dst)
7ffdb0ee1fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<ulong>(W128 w, in ulong a, in ulong b, ref ulong dst)
7ffdb0ee1fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<byte>(W128 w, int vcount, int blocklen, in byte a, in byte b, ref byte dst)
7ffdb0ee1fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<ushort>(W128 w, int vcount, int blocklen, in ushort a, in ushort b, ref ushort dst)
7ffdb0ee2040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<uint>(W128 w, int vcount, int blocklen, in uint a, in uint b, ref uint dst)
7ffdb0ee2058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void cnonimpl<ulong>(W128 w, int vcount, int blocklen, in ulong a, in ulong b, ref ulong dst)
7ffdb0ee2070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vimpl<byte>(W128 w, in byte a, in byte b)
7ffdb0ee2088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vimpl<ushort>(W128 w, in ushort a, in ushort b)
7ffdb0ee20d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vimpl<uint>(W128 w, in uint a, in uint b)
7ffdb0ee20e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vimpl<ulong>(W128 w, in ulong a, in ulong b)
7ffdb0ee2100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vimpl<byte>(W256 w, in byte a, in byte b)
7ffdb0ee2118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<byte>(W128 n, in byte a, in byte b, ref byte dst)
7ffdb0ee2130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<ushort>(W128 n, in ushort a, in ushort b, ref ushort dst)
7ffdb0ee2178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<uint>(W128 n, in uint a, in uint b, ref uint dst)
7ffdb0ee2190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<ulong>(W128 n, in ulong a, in ulong b, ref ulong dst)
7ffdb0ee21a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<byte>(W128 n, int vcount, int blocklen, in byte a, in byte b, ref byte dst)
7ffdb0ee21c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<ushort>(W128 n, int vcount, int blocklen, in ushort a, in ushort b, ref ushort dst)
7ffdb0ee2220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<uint>(W128 n, int vcount, int blocklen, in uint a, in uint b, ref uint dst)
7ffdb0ee2238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void impl<ulong>(W128 n, int vcount, int blocklen, in ulong a, in ulong b, ref ulong dst)
7ffdb0ee2250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vnand<byte>(W128 w, in byte a, in byte b)
7ffdb0ee2268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vnand<ushort>(W128 w, in ushort a, in ushort b)
7ffdb0ee22b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vnand<uint>(W128 w, in uint a, in uint b)
7ffdb0ee22c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vnand<ulong>(W128 w, in ulong a, in ulong b)
7ffdb0ee22e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vnand<byte>(N256 w, in byte a, in byte b)
7ffdb0ee22f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<byte>(W128 w, in byte a, in byte b, ref byte z)
7ffdb0ee2310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<ushort>(W128 w, in ushort a, in ushort b, ref ushort z)
7ffdb0ee2358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<uint>(W128 w, in uint a, in uint b, ref uint z)
7ffdb0ee2370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<ulong>(W128 w, in ulong a, in ulong b, ref ulong z)
7ffdb0ee2388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<byte>(W128 w, int vcount, int blocklen, in byte a, in byte b, ref byte z)
7ffdb0ee23a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<ushort>(W128 w, int vcount, int blocklen, in ushort a, in ushort b, ref ushort z)
7ffdb0ee2400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<uint>(W128 w, int vcount, int blocklen, in uint a, in uint b, ref uint z)
7ffdb0ee2418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nand<ulong>(W128 w, int vcount, int blocklen, in ulong a, in ulong b, ref ulong z)
7ffdb0ee2430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vnonimpl<byte>(W128 w, in byte a, in byte b)
7ffdb0ee2448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vnonimpl<ushort>(W128 w, in ushort a, in ushort b)
7ffdb0ee2490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vnonimpl<uint>(W128 w, in uint a, in uint b)
7ffdb0ee24a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vnonimpl<ulong>(W128 w, in ulong a, in ulong b)
7ffdb0ee24c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vnonimpl<byte>(W256 w, in byte a, in byte b)
7ffdb0ee24d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<byte>(W128 w, in byte a, in byte b, ref byte dst)
7ffdb0ee24f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<ushort>(W128 w, in ushort a, in ushort b, ref ushort dst)
7ffdb0ee2538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<uint>(W128 w, in uint a, in uint b, ref uint dst)
7ffdb0ee2550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<ulong>(W128 w, in ulong a, in ulong b, ref ulong dst)
7ffdb0ee2568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<byte>(W128 w, int vcount, int blocklen, in byte a, in byte b, ref byte dst)
7ffdb0ee2580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<ushort>(W128 w, int vcount, int blocklen, in ushort a, in ushort b, ref ushort dst)
7ffdb0ee25e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<uint>(W128 w, int vcount, int blocklen, in uint a, in uint b, ref uint dst)
7ffdb0ee25f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nonimpl<ulong>(W128 w, int vcount, int blocklen, in ulong a, in ulong b, ref ulong dst)
7ffdb0ee2610h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vnor<byte>(W128 w, in byte a, in byte b)
7ffdb0ee2628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vnor<ushort>(W128 w, in ushort a, in ushort b)
7ffdb0ee2670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vnor<uint>(W128 w, in uint a, in uint b)
7ffdb0ee2688h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vnor<ulong>(W128 w, in ulong a, in ulong b)
7ffdb0ee26a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vnor<byte>(W256 w, in byte a, in byte b)
7ffdb0ee26b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<byte>(W128 n, in byte a, in byte b, ref byte z)
7ffdb0ee26d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<ushort>(W128 n, in ushort a, in ushort b, ref ushort z)
7ffdb0ee2718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<uint>(W128 n, in uint a, in uint b, ref uint z)
7ffdb0ee2730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<ulong>(W128 n, in ulong a, in ulong b, ref ulong z)
7ffdb0ee2748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<byte>(W128 n, int vcount, int blocklen, in byte a, in byte b, ref byte dst)
7ffdb0ee2760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<ushort>(W128 n, int vcount, int blocklen, in ushort a, in ushort b, ref ushort dst)
7ffdb0ee27c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<uint>(W128 n, int vcount, int blocklen, in uint a, in uint b, ref uint dst)
7ffdb0ee27d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void nor<ulong>(W128 n, int vcount, int blocklen, in ulong a, in ulong b, ref ulong dst)
7ffdb0ee27f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vnot<byte>(W128 w, in byte src)
7ffdb0ee2808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vnot<ushort>(W128 w, in ushort src)
7ffdb0ee2850h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vnot<uint>(W128 w, in uint src)
7ffdb0ee2868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vnot<ulong>(W128 w, in ulong src)
7ffdb0ee2880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vnot<byte>(W256 w, in byte src)
7ffdb0ee2898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<byte>(W128 w, in byte src, ref byte dst)
7ffdb0ee28b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<ushort>(W128 w, in ushort src, ref ushort dst)
7ffdb0ee28f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<uint>(W128 w, in uint src, ref uint dst)
7ffdb0ee2910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<ulong>(W128 w, in ulong src, ref ulong dst)
7ffdb0ee2928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<byte>(W128 w, int count, int step, in byte src, ref byte dst)
7ffdb0ee2940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<ushort>(W128 w, int count, int step, in ushort src, ref ushort dst)
7ffdb0ee29a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<uint>(W128 w, int count, int step, in uint src, ref uint dst)
7ffdb0ee29b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void not<ulong>(W128 w, int count, int step, in ulong src, ref ulong dst)
7ffdb0ee29d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vselect<byte>(W128 n, in byte a, in byte b, in byte c)
7ffdb0ee29e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vselect<ushort>(W128 n, in ushort a, in ushort b, in ushort c)
7ffdb0ee2a30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vselect<uint>(W128 n, in uint a, in uint b, in uint c)
7ffdb0ee2a48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vselect<ulong>(W128 n, in ulong a, in ulong b, in ulong c)
7ffdb0ee2a60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vselect<byte>(W256 n, in byte a, in byte b, in byte c)
7ffdb0ee2a78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<byte>(W128 n, in byte a, in byte b, in byte c, ref byte dst)
7ffdb0ee2a90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<ushort>(W128 n, in ushort a, in ushort b, in ushort c, ref ushort dst)
7ffdb0ee2ad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<uint>(W128 n, in uint a, in uint b, in uint c, ref uint dst)
7ffdb0ee2af0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<ulong>(W128 n, in ulong a, in ulong b, in ulong c, ref ulong dst)
7ffdb0ee2b08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<byte>(W128 n, int vcount, int blocklen, in byte a, in byte b, in byte c, ref byte dst)
7ffdb0ee2b20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<ushort>(W128 n, int vcount, int blocklen, in ushort a, in ushort b, in ushort c, ref ushort dst)
7ffdb0ee2b80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<uint>(W128 n, int vcount, int blocklen, in uint a, in uint b, in uint c, ref uint dst)
7ffdb0ee2b98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void select<ulong>(W128 n, int vcount, int blocklen, in ulong a, in ulong b, in ulong c, ref ulong dst)
7ffdb0ee2bb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<byte>(W128 w, in byte a)
7ffdb0ee2bc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ushort>(W128 w, in ushort a)
7ffdb0ee2c10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<uint>(W128 w, in uint a)
7ffdb0ee2c28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ulong>(W128 w, in ulong a)
7ffdb0ee2c40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<byte>(W128 w, in byte a, in byte b)
7ffdb0ee2c58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ushort>(W128 w, in ushort a, in ushort b)
7ffdb0ee2ca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<uint>(W128 w, in uint a, in uint b)
7ffdb0ee2cb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestc<ulong>(W128 w, in ulong a, in ulong b)
7ffdb0ee2cd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<byte>(W128 n, int vcount, int blocklen, in byte a)
7ffdb0ee2ce8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ushort>(W128 n, int vcount, int blocklen, in ushort a)
7ffdb0ee2d30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<uint>(W128 n, int vcount, int blocklen, in uint a)
7ffdb0ee2d48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ulong>(W128 n, int vcount, int blocklen, in ulong a)
7ffdb0ee2d60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<byte>(W128 n, int vcount, int blocklen, in byte a, in byte b)
7ffdb0ee2d78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ushort>(W128 n, int vcount, int blocklen, in ushort a, in ushort b)
7ffdb0ee2dc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<uint>(W128 n, int vcount, int blocklen, in uint a, in uint b)
7ffdb0ee2dd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ulong>(W128 n, int vcount, int blocklen, in ulong a, in ulong b)
7ffdb0ee2df0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<byte>(W128 w, in byte a, in byte b)
7ffdb0ee2e08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<ushort>(W128 w, in ushort a, in ushort b)
7ffdb0ee2e50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<uint>(W128 w, in uint a, in uint b)
7ffdb0ee2e68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<ulong>(W128 w, in ulong a, in ulong b)
7ffdb0ee2e80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit vtestz<byte>(W256 w, in byte a, in byte b)
7ffdb0ee2e98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<byte>(W128 n, in byte a)
7ffdb0ee2eb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ushort>(W128 n, in ushort a)
7ffdb0ee2ee0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<uint>(W128 n, in uint a)
7ffdb0ee2ef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ulong>(W128 n, in ulong a)
7ffdb0ee2f10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<byte>(W128 n, in byte a, in byte b)
7ffdb0ee2f28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ushort>(W128 n, in ushort a, in ushort b)
7ffdb0ee2f58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<uint>(W128 n, in uint a, in uint b)
7ffdb0ee2f70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ulong>(W128 n, in ulong a, in ulong b)
7ffdb0ee2f88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<byte>(W256 n, in byte a)
7ffdb0ee2fa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ushort>(W256 n, in ushort a)
7ffdb0ee2fd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<uint>(W256 n, in uint a)
7ffdb0ee2fe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ulong>(W256 n, in ulong a)
7ffdb0ee3000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<byte>(W128 n, int vcount, int blocklen, in byte a)
7ffdb0ee3018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ushort>(W128 n, int vcount, int blocklen, in ushort a)
7ffdb0ee3060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<uint>(W128 n, int vcount, int blocklen, in uint a)
7ffdb0ee3078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ulong>(W128 n, int vcount, int blocklen, in ulong a)
7ffdb0ee3090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<byte>(W128 n, int vcount, int blocklen, in byte a, in byte b)
7ffdb0ee30a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ushort>(W128 n, int vcount, int blocklen, in ushort a, in ushort b)
7ffdb0ee30f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<uint>(W128 n, int vcount, int blocklen, in uint a, in uint b)
7ffdb0ee3108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ulong>(W128 n, int vcount, int blocklen, in ulong a, in ulong b)
7ffdb0ee3120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<byte>(W256 n, int vcount, int blocklen, in byte a)
7ffdb0ee3138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ushort>(W256 n, int vcount, int blocklen, in ushort a)
7ffdb0ee3180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<uint>(W256 n, int vcount, int blocklen, in uint a)
7ffdb0ee3198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ulong>(W256 n, int vcount, int blocklen, in ulong a)
7ffdb0ee31b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<byte>(W256 n, int vcount, int blocklen, in byte a, in byte b)
7ffdb0ee31c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ushort>(W256 n, int vcount, int blocklen, in ushort a, in ushort b)
7ffdb0ee31e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vor<byte>(W128 w, in byte a, in byte b)
7ffdb0ee31f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vor<ushort>(W128 w, in ushort a, in ushort b)
7ffdb0ee3240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vor<uint>(W128 w, in uint a, in uint b)
7ffdb0ee3258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vor<ulong>(W128 w, in ulong a, in ulong b)
7ffdb0ee3270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vor<byte>(W256 w, in byte a, in byte b)
7ffdb0ee3288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<byte>(W128 w, in byte a, in byte b, ref byte z)
7ffdb0ee32a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<ushort>(W128 w, in ushort a, in ushort b, ref ushort z)
7ffdb0ee32e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<uint>(W128 w, in uint a, in uint b, ref uint z)
7ffdb0ee3300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<ulong>(W128 w, in ulong a, in ulong b, ref ulong z)
7ffdb0ee3318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<byte>(W128 w, int vcount, int blocklen, in byte a, in byte b, ref byte dst)
7ffdb0ee3330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<ushort>(W128 w, int vcount, int blocklen, in ushort a, in ushort b, ref ushort dst)
7ffdb0ee3390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<uint>(W128 w, int vcount, int blocklen, in uint a, in uint b, ref uint dst)
7ffdb0ee33a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void or<ulong>(W128 w, int vcount, int blocklen, in ulong a, in ulong b, ref ulong dst)
7ffdb0ee33c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vxnor<byte>(W128 w, in byte a, in byte b)
7ffdb0ee33d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vxnor<ushort>(W128 w, in ushort a, in ushort b)
7ffdb0ee3420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vxnor<uint>(W128 w, in uint a, in uint b)
7ffdb0ee3438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vxnor<ulong>(W128 w, in ulong a, in ulong b)
7ffdb0ee3450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vxnor<byte>(W256 w, in byte a, in byte b)
7ffdb0ee3468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<byte>(W128 n, in byte a, in byte b, ref byte z)
7ffdb0ee3480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<ushort>(W128 n, in ushort a, in ushort b, ref ushort z)
7ffdb0ee34c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<uint>(W128 n, in uint a, in uint b, ref uint z)
7ffdb0ee34e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<ulong>(W128 n, in ulong a, in ulong b, ref ulong z)
7ffdb0ee34f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<byte>(W128 n, int vcount, int blocklen, in byte a, in byte b, ref byte z)
7ffdb0ee3510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<ushort>(W128 n, int vcount, int blocklen, in ushort a, in ushort b, ref ushort z)
7ffdb0ee3570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<uint>(W128 n, int vcount, int blocklen, in uint a, in uint b, ref uint z)
7ffdb0ee3588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xnor<ulong>(W128 n, int vcount, int blocklen, in ulong a, in ulong b, ref ulong z)
7ffdb0ee35a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vxor<byte>(W128 w, in byte a, in byte b)
7ffdb0ee35b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vxor<ushort>(W128 w, in ushort a, in ushort b)
7ffdb0ee3600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vxor<uint>(W128 w, in uint a, in uint b)
7ffdb0ee3618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vxor<ulong>(W128 w, in ulong a, in ulong b)
7ffdb0ee3630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vxor<byte>(W256 w, in byte a, in byte b)
7ffdb0ee3648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<byte>(W128 n, in byte a, in byte b, ref byte z)
7ffdb0ee3660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<ushort>(W128 n, in ushort a, in ushort b, ref ushort z)
7ffdb0ee36a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<uint>(W128 n, in uint a, in uint b, ref uint z)
7ffdb0ee36c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<ulong>(W128 n, in ulong a, in ulong b, ref ulong z)
7ffdb0ee36d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<byte>(W128 n, int vcount, int blocklen, in byte a, in byte b, ref byte z)
7ffdb0ee36f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<ushort>(W128 n, int vcount, int blocklen, in ushort a, in ushort b, ref ushort z)
7ffdb0ee3750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<uint>(W128 n, int vcount, int blocklen, in uint a, in uint b, ref uint z)
7ffdb0ee3768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xor<ulong>(W128 n, int vcount, int blocklen, in ulong a, in ulong b, ref ulong z)
7ffdb0ee3780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vxornot<byte>(W128 w, in byte a, in byte b)
7ffdb0ee3798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> vxornot<ushort>(W128 w, in ushort a, in ushort b)
7ffdb0ee37e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> vxornot<uint>(W128 w, in uint a, in uint b)
7ffdb0ee37f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> vxornot<ulong>(W128 w, in ulong a, in ulong b)
7ffdb0ee3810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vxornot<byte>(W256 w, in byte a, in byte b)
7ffdb0ee3828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<byte>(W128 w, in byte a, in byte b, ref byte c)
7ffdb0ee3840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<ushort>(W128 w, in ushort a, in ushort b, ref ushort c)
7ffdb0ee3888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<uint>(W128 w, in uint a, in uint b, ref uint c)
7ffdb0ee38a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<ulong>(W128 w, in ulong a, in ulong b, ref ulong c)
7ffdb0ee38b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<byte>(W128 w, int vcount, int blocklen, in byte a, in byte b, ref byte c)
7ffdb0ee38d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<ushort>(W128 w, int vcount, int blocklen, in ushort a, in ushort b, ref ushort c)
7ffdb0ee3930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<uint>(W128 w, int vcount, int blocklen, in uint a, in uint b, ref uint c)
7ffdb0ee3948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void xornot<ulong>(W128 w, int vcount, int blocklen, in ulong a, in ulong b, ref ulong c)
7ffdb0ee3960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> eval<ulong>(ApiComparisonClass kind, Vector128<ulong> a, Vector128<ulong> b)
7ffdb0a72e98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> eval<ulong>(ApiComparisonClass kind, Vector256<ulong> a, Vector256<ulong> b)
7ffdb0a73210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> eval<ulong>(UnaryBitLogicKind kind, Vector128<ulong> a)
7ffdb0a79b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> eval<ulong>(BinaryBitLogicKind kind, Vector128<ulong> a, Vector128<ulong> b)
7ffdb0a79b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> eval<ulong>(TernaryBitLogicKind kind, Vector128<ulong> x, Vector128<ulong> y, Vector128<ulong> z)
7ffdb0a79bd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> eval<ulong>(UnaryBitLogicKind kind, Vector256<ulong> a)
7ffdb0a7a9e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> eval<ulong>(BinaryBitLogicKind kind, Vector256<ulong> a, Vector256<ulong> b)
7ffdb0a7ad30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> eval<ulong>(TernaryBitLogicKind kind, Vector256<ulong> x, Vector256<ulong> y, Vector256<ulong> z)
7ffdb0a7aec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> eval<byte>(UnaryBitLogicKind kind, Vector128<byte> a)
7ffdb0e8b840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> eval<sbyte>(UnaryBitLogicKind kind, Vector128<sbyte> a)
7ffdb0e8b858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> eval<ushort>(UnaryBitLogicKind kind, Vector128<ushort> a)
7ffdb0e8b870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> eval<short>(UnaryBitLogicKind kind, Vector128<short> a)
7ffdb0e8b888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> eval<uint>(UnaryBitLogicKind kind, Vector128<uint> a)
7ffdb0e8b8a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> eval<int>(UnaryBitLogicKind kind, Vector128<int> a)
7ffdb0e8b8b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> eval<long>(UnaryBitLogicKind kind, Vector128<long> a)
7ffdb0e8b8d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> eval<byte>(UnaryBitLogicKind kind, Vector256<byte> a)
7ffdb0e8b8e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> eval<sbyte>(UnaryBitLogicKind kind, Vector256<sbyte> a)
7ffdb0e8b900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> eval<ushort>(UnaryBitLogicKind kind, Vector256<ushort> a)
7ffdb0e8b918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> eval<short>(UnaryBitLogicKind kind, Vector256<short> a)
7ffdb0e8b930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> eval<uint>(UnaryBitLogicKind kind, Vector256<uint> a)
7ffdb0e8b948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> eval<int>(UnaryBitLogicKind kind, Vector256<int> a)
7ffdb0e8b960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> eval<long>(UnaryBitLogicKind kind, Vector256<long> a)
7ffdb0e8b978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> eval<byte>(ApiComparisonClass kind, Vector128<byte> a, Vector128<byte> b)
7ffdb0e8b990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> eval<sbyte>(ApiComparisonClass kind, Vector128<sbyte> a, Vector128<sbyte> b)
7ffdb0e8b9a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> eval<ushort>(ApiComparisonClass kind, Vector128<ushort> a, Vector128<ushort> b)
7ffdb0e8b9c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> eval<short>(ApiComparisonClass kind, Vector128<short> a, Vector128<short> b)
7ffdb0e8b9d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> eval<uint>(ApiComparisonClass kind, Vector128<uint> a, Vector128<uint> b)
7ffdb0e8b9f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> eval<int>(ApiComparisonClass kind, Vector128<int> a, Vector128<int> b)
7ffdb0e8ba08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> eval<long>(ApiComparisonClass kind, Vector128<long> a, Vector128<long> b)
7ffdb0e8ba20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> eval<float>(ApiComparisonClass kind, Vector128<float> a, Vector128<float> b)
7ffdb0e8ba38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> eval<double>(ApiComparisonClass kind, Vector128<double> a, Vector128<double> b)
7ffdb0e8ba50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> eval<byte>(ApiComparisonClass kind, Vector256<byte> a, Vector256<byte> b)
7ffdb0e8ba68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> eval<sbyte>(ApiComparisonClass kind, Vector256<sbyte> a, Vector256<sbyte> b)
7ffdb0e8ba80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> eval<ushort>(ApiComparisonClass kind, Vector256<ushort> a, Vector256<ushort> b)
7ffdb0e8ba98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> eval<short>(ApiComparisonClass kind, Vector256<short> a, Vector256<short> b)
7ffdb0e8bab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> eval<uint>(ApiComparisonClass kind, Vector256<uint> a, Vector256<uint> b)
7ffdb0e8bac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> eval<int>(ApiComparisonClass kind, Vector256<int> a, Vector256<int> b)
7ffdb0e8bae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> eval<long>(ApiComparisonClass kind, Vector256<long> a, Vector256<long> b)
7ffdb0e8baf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> eval<byte>(BinaryBitLogicKind kind, Vector128<byte> a, Vector128<byte> b)
7ffdb0e8bb10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> eval<sbyte>(BinaryBitLogicKind kind, Vector128<sbyte> a, Vector128<sbyte> b)
7ffdb0e8bb28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> eval<ushort>(BinaryBitLogicKind kind, Vector128<ushort> a, Vector128<ushort> b)
7ffdb0e8bb40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> eval<short>(BinaryBitLogicKind kind, Vector128<short> a, Vector128<short> b)
7ffdb0e8bb58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> eval<uint>(BinaryBitLogicKind kind, Vector128<uint> a, Vector128<uint> b)
7ffdb0e8bb70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> eval<int>(BinaryBitLogicKind kind, Vector128<int> a, Vector128<int> b)
7ffdb0e8bb88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> eval<long>(BinaryBitLogicKind kind, Vector128<long> a, Vector128<long> b)
7ffdb0e8bba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> eval<byte>(BinaryBitLogicKind kind, Vector256<byte> a, Vector256<byte> b)
7ffdb0e8bbb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> eval<sbyte>(BinaryBitLogicKind kind, Vector256<sbyte> a, Vector256<sbyte> b)
7ffdb0e8bbd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> eval<ushort>(BinaryBitLogicKind kind, Vector256<ushort> a, Vector256<ushort> b)
7ffdb0e8bbe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> eval<short>(BinaryBitLogicKind kind, Vector256<short> a, Vector256<short> b)
7ffdb0e8bc00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> eval<uint>(BinaryBitLogicKind kind, Vector256<uint> a, Vector256<uint> b)
7ffdb0e8bc18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> eval<int>(BinaryBitLogicKind kind, Vector256<int> a, Vector256<int> b)
7ffdb0e8bc30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> eval<long>(BinaryBitLogicKind kind, Vector256<long> a, Vector256<long> b)
7ffdb0e8bc48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> eval<byte>(TernaryBitLogicKind kind, Vector128<byte> x, Vector128<byte> y, Vector128<byte> z)
7ffdb0e8bc60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> eval<sbyte>(TernaryBitLogicKind kind, Vector128<sbyte> x, Vector128<sbyte> y, Vector128<sbyte> z)
7ffdb0e8bc78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> eval<ushort>(TernaryBitLogicKind kind, Vector128<ushort> x, Vector128<ushort> y, Vector128<ushort> z)
7ffdb0e8bc90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> eval<short>(TernaryBitLogicKind kind, Vector128<short> x, Vector128<short> y, Vector128<short> z)
7ffdb0e8bca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> eval<uint>(TernaryBitLogicKind kind, Vector128<uint> x, Vector128<uint> y, Vector128<uint> z)
7ffdb0e8bcc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> eval<int>(TernaryBitLogicKind kind, Vector128<int> x, Vector128<int> y, Vector128<int> z)
7ffdb0e8bcd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> eval<long>(TernaryBitLogicKind kind, Vector128<long> x, Vector128<long> y, Vector128<long> z)
7ffdb0e8bcf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> eval<byte>(TernaryBitLogicKind kind, Vector256<byte> x, Vector256<byte> y, Vector256<byte> z)
7ffdb0e8bd08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> eval<sbyte>(TernaryBitLogicKind kind, Vector256<sbyte> x, Vector256<sbyte> y, Vector256<sbyte> z)
7ffdb0e8bd20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> eval<ushort>(TernaryBitLogicKind kind, Vector256<ushort> x, Vector256<ushort> y, Vector256<ushort> z)
7ffdb0e8bd38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> eval<short>(TernaryBitLogicKind kind, Vector256<short> x, Vector256<short> y, Vector256<short> z)
7ffdb0e8bd50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> eval<uint>(TernaryBitLogicKind kind, Vector256<uint> x, Vector256<uint> y, Vector256<uint> z)
7ffdb0e8bd68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> eval<int>(TernaryBitLogicKind kind, Vector256<int> x, Vector256<int> y, Vector256<int> z)
7ffdb0e8bd80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> eval<long>(TernaryBitLogicKind kind, Vector256<long> x, Vector256<long> y, Vector256<long> z)
7ffdb0e8bd98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> eval<byte>(ApiBinaryArithmeticClass kind, Vector128<byte> x, Vector128<byte> y)
7ffdb0e8bdb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> eval<sbyte>(ApiBinaryArithmeticClass kind, Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb0e8bde0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> eval<ushort>(ApiBinaryArithmeticClass kind, Vector128<ushort> x, Vector128<ushort> y)
7ffdb0e8bdf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> eval<short>(ApiBinaryArithmeticClass kind, Vector128<short> x, Vector128<short> y)
7ffdb0e8be10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> eval<uint>(ApiBinaryArithmeticClass kind, Vector128<uint> x, Vector128<uint> y)
7ffdb0e8be28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> eval<int>(ApiBinaryArithmeticClass kind, Vector128<int> x, Vector128<int> y)
7ffdb0e8be40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> eval<ulong>(ApiBinaryArithmeticClass kind, Vector128<ulong> x, Vector128<ulong> y)
7ffdb0e8be58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> eval<long>(ApiBinaryArithmeticClass kind, Vector128<long> x, Vector128<long> y)
7ffdb0e8be70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> eval<float>(ApiBinaryArithmeticClass kind, Vector128<float> x, Vector128<float> y)
7ffdb0e8be88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> eval<double>(ApiBinaryArithmeticClass kind, Vector128<double> x, Vector128<double> y)
7ffdb0e8bea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> eval<byte>(ApiBinaryArithmeticClass kind, Vector256<byte> x, Vector256<byte> y)
7ffdb0e8beb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> eval<sbyte>(ApiBinaryArithmeticClass kind, Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb0e8bee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> eval<ushort>(ApiBinaryArithmeticClass kind, Vector256<ushort> x, Vector256<ushort> y)
7ffdb0e8bf00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> eval<short>(ApiBinaryArithmeticClass kind, Vector256<short> x, Vector256<short> y)
7ffdb0e8bf18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> eval<uint>(ApiBinaryArithmeticClass kind, Vector256<uint> x, Vector256<uint> y)
7ffdb0e8bf30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> eval<int>(ApiBinaryArithmeticClass kind, Vector256<int> x, Vector256<int> y)
7ffdb0e8bf48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> eval<ulong>(ApiBinaryArithmeticClass kind, Vector256<ulong> x, Vector256<ulong> y)
7ffdb0e8bf60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> eval<long>(ApiBinaryArithmeticClass kind, Vector256<long> x, Vector256<long> y)
7ffdb0e8bf78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> eval<float>(ApiBinaryArithmeticClass kind, Vector256<float> x, Vector256<float> y)
7ffdb0e8bf90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> eval<double>(ApiBinaryArithmeticClass kind, Vector256<double> x, Vector256<double> y)
7ffdb0e8bfa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<Vector128<byte>> lookup<byte>(N128 w, UnaryBitLogicKind kind)
7ffdb0e8bfc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<Vector128<sbyte>> lookup<sbyte>(N128 w, UnaryBitLogicKind kind)
7ffdb0ee0090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<Vector128<ushort>> lookup<ushort>(N128 w, UnaryBitLogicKind kind)
7ffdb0ee0120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<Vector128<short>> lookup<short>(N128 w, UnaryBitLogicKind kind)
7ffdb0ee01b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<Vector128<uint>> lookup<uint>(N128 w, UnaryBitLogicKind kind)
7ffdb0ee0240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<Vector128<int>> lookup<int>(N128 w, UnaryBitLogicKind kind)
7ffdb0ee02d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<Vector128<ulong>> lookup<ulong>(N128 w, UnaryBitLogicKind kind)
7ffdb0ee0360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<Vector128<long>> lookup<long>(N128 w, UnaryBitLogicKind kind)
7ffdb0ee03f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<Vector256<byte>> lookup<byte>(N256 w, UnaryBitLogicKind kind)
7ffdb0ee0480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<Vector256<sbyte>> lookup<sbyte>(N256 w, UnaryBitLogicKind kind)
7ffdb0ee0528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<Vector256<ushort>> lookup<ushort>(N256 w, UnaryBitLogicKind kind)
7ffdb0ee05b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<Vector256<short>> lookup<short>(N256 w, UnaryBitLogicKind kind)
7ffdb0ee0648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<Vector256<uint>> lookup<uint>(N256 w, UnaryBitLogicKind kind)
7ffdb0ee06d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<Vector256<int>> lookup<int>(N256 w, UnaryBitLogicKind kind)
7ffdb0ee0768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<Vector256<ulong>> lookup<ulong>(N256 w, UnaryBitLogicKind kind)
7ffdb0ee07f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<Vector256<long>> lookup<long>(N256 w, UnaryBitLogicKind kind)
7ffdb0ee0888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<byte>> lookup<byte>(N128 w, ApiComparisonClass kind)
7ffdb0ee0918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<sbyte>> lookup<sbyte>(N128 w, ApiComparisonClass kind)
7ffdb0ee0960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<ushort>> lookup<ushort>(N128 w, ApiComparisonClass kind)
7ffdb0ee0990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<short>> lookup<short>(N128 w, ApiComparisonClass kind)
7ffdb0ee09c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<uint>> lookup<uint>(N128 w, ApiComparisonClass kind)
7ffdb0ee09f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<int>> lookup<int>(N128 w, ApiComparisonClass kind)
7ffdb0ee0a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<ulong>> lookup<ulong>(N128 w, ApiComparisonClass kind)
7ffdb0ee0a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<long>> lookup<long>(N128 w, ApiComparisonClass kind)
7ffdb0ee0a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector256<byte>> lookup<byte>(N256 w, ApiComparisonClass kind)
7ffdb0ee0ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector256<sbyte>> lookup<sbyte>(N256 w, ApiComparisonClass kind)
7ffdb0ee0b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector256<ushort>> lookup<ushort>(N256 w, ApiComparisonClass kind)
7ffdb0ee0be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector256<short>> lookup<short>(N256 w, ApiComparisonClass kind)
7ffdb0ee0c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector256<uint>> lookup<uint>(N256 w, ApiComparisonClass kind)
7ffdb0ee0d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector256<int>> lookup<int>(N256 w, ApiComparisonClass kind)
7ffdb0ee0d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector256<ulong>> lookup<ulong>(N256 w, ApiComparisonClass kind)
7ffdb0ee0e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector256<long>> lookup<long>(N256 w, ApiComparisonClass kind)
7ffdb0ee0eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<Vector128<byte>> lookup<byte>(N128 w, BitShiftClass kind)
7ffdb0ee0f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<Vector128<sbyte>> lookup<sbyte>(N128 w, BitShiftClass kind)
7ffdb0ee0ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<Vector128<ushort>> lookup<ushort>(N128 w, BitShiftClass kind)
7ffdb0ee1080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<Vector128<short>> lookup<short>(N128 w, BitShiftClass kind)
7ffdb0ee1110h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<Vector128<uint>> lookup<uint>(N128 w, BitShiftClass kind)
7ffdb0ee11a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<Vector128<int>> lookup<int>(N128 w, BitShiftClass kind)
7ffdb0ee1230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<Vector128<ulong>> lookup<ulong>(N128 w, BitShiftClass kind)
7ffdb0ee12c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<Vector128<long>> lookup<long>(N128 w, BitShiftClass kind)
7ffdb0ee1350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<Vector256<byte>> lookup<byte>(N256 w, BitShiftClass kind)
7ffdb0ee13e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<Vector256<sbyte>> lookup<sbyte>(N256 w, BitShiftClass kind)
7ffdb0ee1488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<Vector256<ushort>> lookup<ushort>(N256 w, BitShiftClass kind)
7ffdb0ee1518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<Vector256<short>> lookup<short>(N256 w, BitShiftClass kind)
7ffdb0ee15a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<Vector256<uint>> lookup<uint>(N256 w, BitShiftClass kind)
7ffdb0ee1638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<Vector256<int>> lookup<int>(N256 w, BitShiftClass kind)
7ffdb0ee16c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<Vector256<ulong>> lookup<ulong>(N256 w, BitShiftClass kind)
7ffdb0ee1758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<Vector256<long>> lookup<long>(N256 w, BitShiftClass kind)
7ffdb0ee17e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<byte>> lookup<byte>(N128 w, BinaryBitLogicKind kind)
7ffdb0ee1878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<sbyte>> lookup<sbyte>(N128 w, BinaryBitLogicKind kind)
7ffdb0ee18a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<ushort>> lookup<ushort>(N128 w, BinaryBitLogicKind kind)
7ffdb0ee18c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<short>> lookup<short>(N128 w, BinaryBitLogicKind kind)
7ffdb0ee18d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<uint>> lookup<uint>(N128 w, BinaryBitLogicKind kind)
7ffdb0ee18f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<int>> lookup<int>(N128 w, BinaryBitLogicKind kind)
7ffdb0ee1908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<ulong>> lookup<ulong>(N128 w, BinaryBitLogicKind kind)
7ffdb0ee1920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<long>> lookup<long>(N128 w, BinaryBitLogicKind kind)
7ffdb0ee1938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector256<byte>> lookup<byte>(N256 w, BinaryBitLogicKind kind)
7ffdb0ee1950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector256<sbyte>> lookup<sbyte>(N256 w, BinaryBitLogicKind kind)
7ffdb0ee1998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector256<ushort>> lookup<ushort>(N256 w, BinaryBitLogicKind kind)
7ffdb0ee19c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector256<short>> lookup<short>(N256 w, BinaryBitLogicKind kind)
7ffdb0ee19f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector256<uint>> lookup<uint>(N256 w, BinaryBitLogicKind kind)
7ffdb0ee1a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector256<int>> lookup<int>(N256 w, BinaryBitLogicKind kind)
7ffdb0ee1a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector256<ulong>> lookup<ulong>(N256 w, BinaryBitLogicKind kind)
7ffdb0ee1a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector256<long>> lookup<long>(N256 w, BinaryBitLogicKind kind)
7ffdb0ee1ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> eval<ulong>(ApiComparisonClass kind, Vector128<ulong> a, Vector128<ulong> b)
7ffdb0a72f40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> eval<ulong>(ApiComparisonClass kind, Vector256<ulong> a, Vector256<ulong> b)
7ffdb0a732b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> eval<ulong>(UnaryBitLogicKind kind, Vector128<ulong> a)
7ffdb0a79c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> eval<ulong>(BinaryBitLogicKind kind, Vector128<ulong> a, Vector128<ulong> b)
7ffdb0a79fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> eval<ulong>(TernaryBitLogicKind kind, Vector128<ulong> x, Vector128<ulong> y, Vector128<ulong> z)
7ffdb0a7a0e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> eval<ulong>(UnaryBitLogicKind kind, Vector256<ulong> a)
7ffdb0a7aef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> eval<ulong>(BinaryBitLogicKind kind, Vector256<ulong> a, Vector256<ulong> b)
7ffdb0a7af58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> eval<ulong>(TernaryBitLogicKind kind, Vector256<ulong> x, Vector256<ulong> y, Vector256<ulong> z)
7ffdb0a7b018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> eval<byte>(UnaryBitLogicKind kind, Vector128<byte> a)
7ffdb0d92a78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> eval<sbyte>(UnaryBitLogicKind kind, Vector128<sbyte> a)
7ffdb0d92b08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> eval<ushort>(UnaryBitLogicKind kind, Vector128<ushort> a)
7ffdb0d92b38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> eval<short>(UnaryBitLogicKind kind, Vector128<short> a)
7ffdb0d92b68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> eval<uint>(UnaryBitLogicKind kind, Vector128<uint> a)
7ffdb0d92ca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> eval<int>(UnaryBitLogicKind kind, Vector128<int> a)
7ffdb0d92d48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> eval<long>(UnaryBitLogicKind kind, Vector128<long> a)
7ffdb0d92df0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> eval<byte>(ApiComparisonClass kind, Vector128<byte> a, Vector128<byte> b)
7ffdb0d92e98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> eval<sbyte>(ApiComparisonClass kind, Vector128<sbyte> a, Vector128<sbyte> b)
7ffdb0d92f40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> eval<ushort>(ApiComparisonClass kind, Vector128<ushort> a, Vector128<ushort> b)
7ffdb0d92f70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> eval<short>(ApiComparisonClass kind, Vector128<short> a, Vector128<short> b)
7ffdb0d92fb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> eval<uint>(ApiComparisonClass kind, Vector128<uint> a, Vector128<uint> b)
7ffdb0d93078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> eval<int>(ApiComparisonClass kind, Vector128<int> a, Vector128<int> b)
7ffdb0d93138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> eval<long>(ApiComparisonClass kind, Vector128<long> a, Vector128<long> b)
7ffdb0d93288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> eval<float>(ApiComparisonClass kind, Vector128<float> a, Vector128<float> b)
7ffdb0d93360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> eval<double>(ApiComparisonClass kind, Vector128<double> a, Vector128<double> b)
7ffdb0d934e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> eval<byte>(ApiBinaryArithmeticClass kind, Vector128<byte> x, Vector128<byte> y)
7ffdb0d93660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> eval<sbyte>(ApiBinaryArithmeticClass kind, Vector128<sbyte> x, Vector128<sbyte> y)
7ffdb0d93738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> eval<ushort>(ApiBinaryArithmeticClass kind, Vector128<ushort> x, Vector128<ushort> y)
7ffdb0d937b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> eval<short>(ApiBinaryArithmeticClass kind, Vector128<short> x, Vector128<short> y)
7ffdb0d937f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> eval<uint>(ApiBinaryArithmeticClass kind, Vector128<uint> x, Vector128<uint> y)
7ffdb0d938b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> eval<int>(ApiBinaryArithmeticClass kind, Vector128<int> x, Vector128<int> y)
7ffdb0d93978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> eval<ulong>(ApiBinaryArithmeticClass kind, Vector128<ulong> x, Vector128<ulong> y)
7ffdb0d93a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> eval<long>(ApiBinaryArithmeticClass kind, Vector128<long> x, Vector128<long> y)
7ffdb0d93ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<float> eval<float>(ApiBinaryArithmeticClass kind, Vector128<float> x, Vector128<float> y)
7ffdb0d93b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<double> eval<double>(ApiBinaryArithmeticClass kind, Vector128<double> x, Vector128<double> y)
7ffdb0d93c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> eval<byte>(BinaryBitLogicKind kind, Vector128<byte> a, Vector128<byte> b)
7ffdb0d93d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> eval<sbyte>(BinaryBitLogicKind kind, Vector128<sbyte> a, Vector128<sbyte> b)
7ffdb0d980c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> eval<ushort>(BinaryBitLogicKind kind, Vector128<ushort> a, Vector128<ushort> b)
7ffdb0d982e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> eval<short>(BinaryBitLogicKind kind, Vector128<short> a, Vector128<short> b)
7ffdb0d983c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> eval<uint>(BinaryBitLogicKind kind, Vector128<uint> a, Vector128<uint> b)
7ffdb0d984c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> eval<int>(BinaryBitLogicKind kind, Vector128<int> a, Vector128<int> b)
7ffdb0d98588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> eval<long>(BinaryBitLogicKind kind, Vector128<long> a, Vector128<long> b)
7ffdb0d98810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<byte>> lookup<byte>(N128 w, BinaryBitLogicKind kind)
7ffdb0d98900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<sbyte>> lookup<sbyte>(N128 w, BinaryBitLogicKind kind)
7ffdb0d98b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<ushort>> lookup<ushort>(N128 w, BinaryBitLogicKind kind)
7ffdb0d98c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<short>> lookup<short>(N128 w, BinaryBitLogicKind kind)
7ffdb0d98cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<uint>> lookup<uint>(N128 w, BinaryBitLogicKind kind)
7ffdb0d98d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<int>> lookup<int>(N128 w, BinaryBitLogicKind kind)
7ffdb0d98e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<ulong>> lookup<ulong>(N128 w, BinaryBitLogicKind kind)
7ffdb0d98f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<Vector128<long>> lookup<long>(N128 w, BinaryBitLogicKind kind)
7ffdb0d98fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> eval<byte>(TernaryBitLogicKind kind, Vector128<byte> x, Vector128<byte> y, Vector128<byte> z)
7ffdb0d990e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> eval<sbyte>(TernaryBitLogicKind kind, Vector128<sbyte> x, Vector128<sbyte> y, Vector128<sbyte> z)
7ffdb0d991b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> eval<ushort>(TernaryBitLogicKind kind, Vector128<ushort> x, Vector128<ushort> y, Vector128<ushort> z)
7ffdb0d99248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> eval<short>(TernaryBitLogicKind kind, Vector128<short> x, Vector128<short> y, Vector128<short> z)
7ffdb0d99320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> eval<uint>(TernaryBitLogicKind kind, Vector128<uint> x, Vector128<uint> y, Vector128<uint> z)
7ffdb0d993f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> eval<int>(TernaryBitLogicKind kind, Vector128<int> x, Vector128<int> y, Vector128<int> z)
7ffdb0d99488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> eval<long>(TernaryBitLogicKind kind, Vector128<long> x, Vector128<long> y, Vector128<long> z)
7ffdb0d995c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f01<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d99668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f01<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d996f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f01<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d997a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f01<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d99800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f01<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d998a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f01<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d99938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f01<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d999e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f01<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d99a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f02<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d99aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f02<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d99b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f02<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d99ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f02<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d99c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f02<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d99cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f02<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d99d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f02<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d99de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f02<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d99e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f03<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d99f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f03<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d99f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f03<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d99ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f03<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d9a088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f03<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d9a0e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f03<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d9a148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f03<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d9a1a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f03<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d9a238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f04<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d9a298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f04<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d9a328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f04<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d9a400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f04<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d9a460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f04<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d9a508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f04<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d9a550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f04<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d9a598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f04<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d9a5c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f05<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d9a640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f05<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d9a688h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f05<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d9a6b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f05<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d9a718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f05<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d9a748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f05<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d9a778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f05<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d9a7a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f05<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d9a808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f06<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d9a838h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f06<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d9a8c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f06<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d9a940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f06<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d9a970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f06<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d9a9d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f06<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d9aa18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f06<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d9aa90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f06<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d9aac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f07<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d9ab08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f07<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d9abb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f07<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d9abe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f07<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d9ac28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f07<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d9ac88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f07<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d9acb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f07<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d9ad30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f07<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d9ad60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f08<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d9ada8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f08<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d9ae38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f08<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d9ae80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f08<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d9aef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f08<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d9af40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f08<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d9af70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f08<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d9afd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f08<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d9b018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f09<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d9b0f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f09<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d9b180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f09<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d9b228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f09<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d9b258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f09<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d9b2a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f09<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d9b2b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f09<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d9b348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f09<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d9b3c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f0a<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d9b3f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f0a<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d9b450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f0a<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d9b480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f0a<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d9b498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f0a<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d9b4b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f0a<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d9b4c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f0a<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d9b4e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f0a<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d9b4f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f0b<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d9b510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f0b<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d9b570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f0b<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d9b588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f0b<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d9b5a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f0b<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d9b5b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f0b<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d9b5d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f0b<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d9b5e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f0b<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d9b618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f0c<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d9b630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f0c<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d9b678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f0c<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d9b690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f0c<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d9b6a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f0c<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d9b6c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f0c<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d9b6d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f0c<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d9b6f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f0c<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d9b708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f0d<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d9b720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f0d<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d9b780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f0d<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d9b798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f0d<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d9b7b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f0d<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d9b7c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f0d<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d9b7e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f0d<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d9b7f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f0d<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d9b810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f0e<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d9b828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f0e<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d9b888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f0e<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d9b8e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f0e<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d9b900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f0e<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d9b918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f0e<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d9b930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f0e<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d9b948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f0e<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d9b960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f0f<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d9b978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f0f<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d9b9a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f0f<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d9b9c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f0f<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d9b9d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f0f<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d9b9f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f0f<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d9ba08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f0f<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d9ba20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f0f<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d9ba38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f10<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d9ba50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f10<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d9ba98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f10<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d9bab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f10<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d9bac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f10<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d9bae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f10<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d9baf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f10<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d9bb10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f10<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d9bb40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f11<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d9bb58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f11<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d9bb88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f11<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d9bba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f11<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d9bc48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f11<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d9bcc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f11<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d9bd20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f11<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d9bd98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f11<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d9bdc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f12<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d9bde0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f12<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d9be40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f12<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d9be58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f12<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0d9beb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f12<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0d9bed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f12<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0d9bf00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f12<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0d9bf18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f12<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0d9bf30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f13<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0d9bf78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f13<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0d9bfc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f13<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0d9bfd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f13<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0dd0018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f13<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0dd0078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f13<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0dd00a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f13<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0dd0180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f13<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0dd0198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f14<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0dd0270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f14<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0dd0600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f14<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0dd0720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f14<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0dd0780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f14<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0dd07e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f14<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0dd07f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f14<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0dd0858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f14<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0dd0c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f15<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0dd0c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f15<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0dd0cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f15<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0dd1200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f15<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0dd12c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f15<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0dd1800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f15<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0dd1ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f15<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0dd2208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f15<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0dd2640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f16<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0dd2d90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f16<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0dd3240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f16<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0dd3318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f16<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0dd33d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f16<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0dd3528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f16<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0dd3540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f16<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0dd3558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f16<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0dd3570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f17<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0dd3588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f17<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0dd36a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f17<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0dd38b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f17<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0dd3a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f17<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0dd3ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f17<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0dd3c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f17<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0dd3db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f17<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0dd3f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f18<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0dd8090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f18<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0dd80d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f18<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0dd8198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f18<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0dd8258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f18<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0dd8318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f18<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0dd8330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f18<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0dd83c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f18<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0dd8408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f19<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0dd8480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f19<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0dd84f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f19<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0dd85e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f19<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0dd8648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f19<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0dd86c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f19<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0dd86f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f19<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0dd8798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f19<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0dd87b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f1a<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0dd8870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f1a<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0dd88d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f1a<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0dd88e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f1a<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0dd8948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f1a<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0dd89a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f1a<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0dd8a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f1a<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0dd8a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f1a<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0dd8ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f1b<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0dd8b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f1b<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0dd9e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f1b<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0ddaee0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f1b<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0ddb150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f1b<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0ddb5e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f1b<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0ddb6a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f1b<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0ddb8a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f1b<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0ddb9a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> f97<byte>(Vector128<byte> a, Vector128<byte> b, Vector128<byte> c)
7ffdb0ddbb10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<sbyte> f97<sbyte>(Vector128<sbyte> a, Vector128<sbyte> b, Vector128<sbyte> c)
7ffdb0ddbc60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ushort> f97<ushort>(Vector128<ushort> a, Vector128<ushort> b, Vector128<ushort> c)
7ffdb0ddbd80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<short> f97<short>(Vector128<short> a, Vector128<short> b, Vector128<short> c)
7ffdb0ddbe70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<uint> f97<uint>(Vector128<uint> a, Vector128<uint> b, Vector128<uint> c)
7ffdb0ddbfc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<int> f97<int>(Vector128<int> a, Vector128<int> b, Vector128<int> c)
7ffdb0e100c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<ulong> f97<ulong>(Vector128<ulong> a, Vector128<ulong> b, Vector128<ulong> c)
7ffdb0e101f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<long> f97<long>(Vector128<long> a, Vector128<long> b, Vector128<long> c)
7ffdb0e10990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> eval<byte>(UnaryBitLogicKind kind, Vector256<byte> a)
7ffdb0e11488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> eval<sbyte>(UnaryBitLogicKind kind, Vector256<sbyte> a)
7ffdb0e11c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> eval<ushort>(UnaryBitLogicKind kind, Vector256<ushort> a)
7ffdb0e123a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> eval<short>(UnaryBitLogicKind kind, Vector256<short> a)
7ffdb0e12a60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> eval<uint>(UnaryBitLogicKind kind, Vector256<uint> a)
7ffdb0e13168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> eval<int>(UnaryBitLogicKind kind, Vector256<int> a)
7ffdb0e135e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> eval<long>(UnaryBitLogicKind kind, Vector256<long> a)
7ffdb0e18678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> eval<byte>(ApiComparisonClass kind, Vector256<byte> a, Vector256<byte> b)
7ffdb0e18dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> eval<sbyte>(ApiComparisonClass kind, Vector256<sbyte> a, Vector256<sbyte> b)
7ffdb0e195d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> eval<ushort>(ApiComparisonClass kind, Vector256<ushort> a, Vector256<ushort> b)
7ffdb0e19d58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> eval<short>(ApiComparisonClass kind, Vector256<short> a, Vector256<short> b)
7ffdb0e1a3d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> eval<uint>(ApiComparisonClass kind, Vector256<uint> a, Vector256<uint> b)
7ffdb0e1a868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> eval<int>(ApiComparisonClass kind, Vector256<int> a, Vector256<int> b)
7ffdb0e1b318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> eval<long>(ApiComparisonClass kind, Vector256<long> a, Vector256<long> b)
7ffdb0e60678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> eval<byte>(ApiBinaryArithmeticClass kind, Vector256<byte> x, Vector256<byte> y)
7ffdb0e60e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> eval<sbyte>(ApiBinaryArithmeticClass kind, Vector256<sbyte> x, Vector256<sbyte> y)
7ffdb0e61548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> eval<ushort>(ApiBinaryArithmeticClass kind, Vector256<ushort> x, Vector256<ushort> y)
7ffdb0e61c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> eval<short>(ApiBinaryArithmeticClass kind, Vector256<short> x, Vector256<short> y)
7ffdb0e620b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> eval<uint>(ApiBinaryArithmeticClass kind, Vector256<uint> x, Vector256<uint> y)
7ffdb0e627f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> eval<int>(ApiBinaryArithmeticClass kind, Vector256<int> x, Vector256<int> y)
7ffdb0e62820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> eval<ulong>(ApiBinaryArithmeticClass kind, Vector256<ulong> x, Vector256<ulong> y)
7ffdb0e62b98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> eval<long>(ApiBinaryArithmeticClass kind, Vector256<long> x, Vector256<long> y)
7ffdb0e62f10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<float> eval<float>(ApiBinaryArithmeticClass kind, Vector256<float> x, Vector256<float> y)
7ffdb0e63588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<double> eval<double>(ApiBinaryArithmeticClass kind, Vector256<double> x, Vector256<double> y)
7ffdb0e63f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> eval<byte>(BinaryBitLogicKind kind, Vector256<byte> a, Vector256<byte> b)
7ffdb0e68660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> eval<sbyte>(BinaryBitLogicKind kind, Vector256<sbyte> a, Vector256<sbyte> b)
7ffdb0e69e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> eval<ushort>(BinaryBitLogicKind kind, Vector256<ushort> a, Vector256<ushort> b)
7ffdb0e6b8a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> eval<short>(BinaryBitLogicKind kind, Vector256<short> a, Vector256<short> b)
7ffdb0e80fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> eval<uint>(BinaryBitLogicKind kind, Vector256<uint> a, Vector256<uint> b)
7ffdb0e829e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> eval<int>(BinaryBitLogicKind kind, Vector256<int> a, Vector256<int> b)
7ffdb0e83b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> eval<long>(BinaryBitLogicKind kind, Vector256<long> a, Vector256<long> b)
7ffdb0e89218h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> eval<byte>(TernaryBitLogicKind kind, Vector256<byte> x, Vector256<byte> y, Vector256<byte> z)
7ffdb0e89608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> eval<sbyte>(TernaryBitLogicKind kind, Vector256<sbyte> x, Vector256<sbyte> y, Vector256<sbyte> z)
7ffdb0e89818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> eval<ushort>(TernaryBitLogicKind kind, Vector256<ushort> x, Vector256<ushort> y, Vector256<ushort> z)
7ffdb0e89980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> eval<short>(TernaryBitLogicKind kind, Vector256<short> x, Vector256<short> y, Vector256<short> z)
7ffdb0e89a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> eval<uint>(TernaryBitLogicKind kind, Vector256<uint> x, Vector256<uint> y, Vector256<uint> z)
7ffdb0e89aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> eval<int>(TernaryBitLogicKind kind, Vector256<int> x, Vector256<int> y, Vector256<int> z)
7ffdb0e89b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> eval<long>(TernaryBitLogicKind kind, Vector256<long> x, Vector256<long> y, Vector256<long> z)
7ffdb0e89bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f00<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e89c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f00<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e89c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f00<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e89c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f00<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e89c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f00<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e89cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f00<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e89cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f00<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e89ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f00<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e89cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f01<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e89d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f01<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e89d58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f01<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e89d70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f01<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e89d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f01<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e89da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f01<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e89dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f01<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e89de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f01<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e89e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f02<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e89e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f02<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e89e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f02<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e89e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f02<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e89e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f02<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e89ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f02<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e89ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f02<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e89ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f02<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e89ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f03<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e89f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f03<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e89f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f03<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e89f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f03<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e89f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f03<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e89f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f03<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e89f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f03<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e89fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f03<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e89fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f04<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e89fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f04<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8a028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f04<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8a040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f04<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8a058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f04<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8a070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f04<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8a088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f04<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8a0a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f04<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8a0b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f05<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8a0d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f05<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8a100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f05<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8a118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f05<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8a130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f05<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8a148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f05<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8a160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f05<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8a178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f05<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8a190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f06<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8a1a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f06<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8a208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f06<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8a220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f06<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8a238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f06<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8a250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f06<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8a268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f06<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8a280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f06<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8a298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f07<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8a2b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f07<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8a2f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f07<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8a310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f07<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8a328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f07<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8a340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f07<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8a358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f07<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8a370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f07<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8a388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f08<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8a3a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f08<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8a3e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f08<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8a400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f08<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8a418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f08<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8a430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f08<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8a448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f08<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8a460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f08<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8a478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f09<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8a490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f09<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8a4d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f09<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8a4f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f09<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8a508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f09<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8a520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f09<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8a538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f09<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8a550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f09<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8a568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f0a<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8a580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f0a<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8a5c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f0a<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8a5e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f0a<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8a5f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f0a<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8a610h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f0a<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8a628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f0a<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8a640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f0a<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8a658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f0b<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8a670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f0b<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8a6d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f0b<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8a6e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f0b<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8a700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f0b<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8a718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f0b<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8a730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f0b<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8a748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f0b<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8a760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f0c<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8a778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f0c<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8a7c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f0c<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8a7d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f0c<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8a7f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f0c<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8a808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f0c<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8a820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f0c<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8a838h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f0c<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8a850h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f0d<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8a868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f0d<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8a8c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f0d<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8a8e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f0d<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8a8f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f0d<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8a910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f0d<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8a928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f0d<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8a940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f0d<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8a958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f0e<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8a970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f0e<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8a9d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f0e<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8a9e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f0e<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8aa00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f0e<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8aa18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f0e<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8aa30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f0e<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8aa48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f0e<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8aa60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f0f<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8aa78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f0f<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8aaa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f0f<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8aac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f0f<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8aad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f0f<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8aaf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f0f<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8ab08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f0f<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8ab20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f0f<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8ab38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f10<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8ab50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f10<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8ab98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f10<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8abb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f10<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8abc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f10<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8abe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f10<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8abf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f10<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8ac10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f10<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8ac28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f11<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8ac40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f11<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8ac70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f11<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8ac88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f11<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8aca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f11<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8acb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f11<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8acd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f11<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8ace8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f11<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8ad00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f12<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8ad18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f12<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8ad78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f12<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8ad90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f12<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8ada8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f12<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8adc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f12<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8add8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f12<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8adf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f12<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8ae38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f13<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8ae50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f13<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8ae98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f13<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8aeb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f13<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8aec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f13<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8aee0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f13<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8aef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f13<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8af10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f13<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8af28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f14<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8af40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f14<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8afa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f14<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8afb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f14<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8afd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f14<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8afe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f14<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8b000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f14<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8b018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f14<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8b030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f15<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8b048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f15<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8b090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f15<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8b0a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f15<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8b0c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f15<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8b0d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f15<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8b0f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f15<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8b108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f15<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8b120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f16<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8b138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f16<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8b198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f16<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8b1b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f16<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8b1c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f16<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8b1e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f16<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8b1f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f16<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8b210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f16<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8b228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f17<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8b240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f17<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8b2b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f17<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8b2d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f17<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8b2e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f17<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8b300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f17<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8b318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f17<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8b330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f17<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8b348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f18<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8b360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f18<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8b3a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f18<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8b3c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f18<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8b3d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f18<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8b3f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f18<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8b408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f18<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8b420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f18<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8b438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f19<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8b450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f19<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8b498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f19<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8b4b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f19<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8b4c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f19<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8b4e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f19<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8b4f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f19<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8b510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f19<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8b528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f1a<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8b540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f1a<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8b5a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f1a<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8b5b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f1a<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8b5d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f1a<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8b5e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f1a<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8b600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f1a<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8b618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f1a<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8b630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f1b<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8b648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f1b<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8b690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f1b<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8b6a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f1b<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8b6c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f1b<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8b6d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f1b<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8b6f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f1b<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8b708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f1b<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8b720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> f97<byte>(Vector256<byte> a, Vector256<byte> b, Vector256<byte> c)
7ffdb0e8b738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<sbyte> f97<sbyte>(Vector256<sbyte> a, Vector256<sbyte> b, Vector256<sbyte> c)
7ffdb0e8b798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> f97<ushort>(Vector256<ushort> a, Vector256<ushort> b, Vector256<ushort> c)
7ffdb0e8b7b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<short> f97<short>(Vector256<short> a, Vector256<short> b, Vector256<short> c)
7ffdb0e8b7c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> f97<uint>(Vector256<uint> a, Vector256<uint> b, Vector256<uint> c)
7ffdb0e8b7e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<int> f97<int>(Vector256<int> a, Vector256<int> b, Vector256<int> c)
7ffdb0e8b7f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> f97<ulong>(Vector256<ulong> a, Vector256<ulong> b, Vector256<ulong> c)
7ffdb0e8b810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<long> f97<long>(Vector256<long> a, Vector256<long> b, Vector256<long> c)
7ffdb0e8b828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> literal<ulong>(ulong value)
7ffdb0a7b480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> binary<ulong>(ApiComparisonClass op, ILogixExpr<ulong> left, ILogixExpr<ulong> right)
7ffdb0ab96e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryBitwiseOpExpr<ulong> or<ulong>(ILogixExpr<ulong> lhs, ILogixExpr<ulong> rhs)
7ffdb0cda070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryBitwiseOpExpr<ulong> and<ulong>(ILogixExpr<ulong> lhs, ILogixExpr<ulong> rhs)
7ffdb0cda1a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> equals<ulong>(ILogixExpr<ulong> lhs, ILogixExpr<ulong> rhs, ILogixVarExpr<ulong>[] variables)
7ffdb0cda1d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VariableExpr<ulong> variable<ulong>(char name, ulong value)
7ffdb0cda208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryBitwiseOpExpr<ulong> binary<ulong>(BinaryBitLogicKind op, ILogixExpr<ulong> left, ILogixExpr<ulong> right)
7ffdb0cda4c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryBitwiseOpExpr<ulong> xor<ulong>(ILogixExpr<ulong> lhs, ILogixExpr<ulong> rhs)
7ffdb0cda580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryBitwiseOpExpr<ulong> not<ulong>(ILogixExpr<ulong> operand)
7ffdb0cdab08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryBitwiseOpExpr<ulong> unary<ulong>(UnaryBitLogicKind op, ILogixExpr<ulong> operand)
7ffdb0cdac58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> true<ulong>()
7ffdb0cdbd68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> false<ulong>()
7ffdb0cdbd98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<Vector256<ulong>> false<ulong>(N256 n)
7ffdb0cdbdb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryBitwiseOpExpr<ulong> and<ulong>(ulong lhs, ulong rhs)
7ffdb0cdbde0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryBitwiseOpExpr<ulong> or<ulong>(ulong lhs, ulong rhs)
7ffdb0cdbfd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryBitwiseOpExpr<ulong> xor<ulong>(ulong lhs, ulong rhs)
7ffdb0d901e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryBitwiseOpExpr<ulong> not<ulong>(ulong operand)
7ffdb0d90468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryBitwiseOpExpr<ulong> nand<ulong>(ILogixExpr<ulong> lhs, ILogixExpr<ulong> rhs)
7ffdb0d90630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryBitwiseOpExpr<ulong> nand<ulong>(ulong lhs, ulong rhs)
7ffdb0d90660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryBitwiseOpExpr<ulong> nor<ulong>(ILogixExpr<ulong> lhs, ILogixExpr<ulong> rhs)
7ffdb0d90828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryBitwiseOpExpr<ulong> nor<ulong>(ulong lhs, ulong rhs)
7ffdb0d90888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryBitwiseOpExpr<ulong> xnor<ulong>(ILogixExpr<ulong> lhs, ILogixExpr<ulong> rhs)
7ffdb0d90a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryBitwiseOpExpr<ulong> xnor<ulong>(ulong lhs, ulong rhs)
7ffdb0d90a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# TernaryBitwiseOpExpr<ulong> ternary<ulong>(TernaryBitLogicKind op, ILogixExpr<ulong> a, ILogixExpr<ulong> b, ILogixExpr<ulong> c)
7ffdb0d90c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> shift<ulong>(BitShiftClass op, ILogixExpr<ulong> src, byte count)
7ffdb0d90de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> shiftx<ulong>(BitShiftClass op, ILogixExpr<ulong> src, ILogixExpr<byte> count)
7ffdb0d90fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> sll<ulong>(ILogixExpr<ulong> src, byte count)
7ffdb0d90fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> sll<ulong>(ulong src, byte count)
7ffdb0d90ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> srl<ulong>(ILogixExpr<ulong> src, byte count)
7ffdb0d91200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> srl<ulong>(ulong src, byte count)
7ffdb0d91230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> rotr<ulong>(ILogixExpr<ulong> src, byte count)
7ffdb0d913f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> rotr<ulong>(ulong src, byte count)
7ffdb0d91428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> rotl<ulong>(ILogixExpr<ulong> src, byte count)
7ffdb0d915f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> rotl<ulong>(ulong src, byte count)
7ffdb0d91680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> sll<ulong>(ILogixExpr<ulong> src, ILogixExpr<byte> count)
7ffdb0d91848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> sllx<ulong>(ulong src, ILogixExpr<byte> count)
7ffdb0d91878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> srl<ulong>(ILogixExpr<ulong> src, ILogixExpr<byte> count)
7ffdb0d91a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> srl<ulong>(ulong src, ILogixExpr<byte> count)
7ffdb0d91a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> rotr<ulong>(ILogixExpr<ulong> src, ILogixExpr<byte> count)
7ffdb0d91c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> rotr<ulong>(ulong src, ILogixExpr<byte> count)
7ffdb0d91c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> rotl<ulong>(ILogixExpr<ulong> src, ILogixExpr<byte> count)
7ffdb0d91e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ShiftOpExpr<ulong> rotl<ulong>(ulong src, ILogixExpr<byte> count)
7ffdb0d91e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VariableExpr<ulong> variable<ulong>(string name, ILogixExpr<ulong> value)
7ffdb0d92058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VariableExpr<ulong> variable<ulong>(char name, ILogixExpr<ulong> value)
7ffdb0d92070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VariableExpr<ulong> variable<ulong>(AsciLetterLoSym name, ILogixExpr<ulong> value)
7ffdb0d92088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VariableExpr<ulong> variable<ulong>(uint name, ILogixExpr<ulong> init)
7ffdb0d920a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VariableExpr<ulong> variable<ulong>(string name, ulong value)
7ffdb0d920d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VariableExpr<ulong> variable<ulong>(AsciLetterLoSym name, ulong value)
7ffdb0d92280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VariableExpr<ulong> variable<ulong>(uint name, ulong value)
7ffdb0d92430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VariedExpr<ulong> varied<ulong>(ILogixExpr<ulong> baseExpr, VariableExpr<ulong>[] variables)
7ffdb0d925e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VariedExpr<N1,ulong> varied<ulong>(N1 n, ILogixExpr<ulong> baseExpr, ILogixVarExpr<ulong> v0)
7ffdb0d926b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VariedExpr<N2,ulong> varied<ulong>(N2 n, ILogixExpr<ulong> baseExpr, ILogixVarExpr<ulong> v0, ILogixVarExpr<ulong> v1)
7ffdb0d92838h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VariedExpr<N3,ulong> varied<ulong>(N3 n, ILogixExpr<ulong> baseExpr, ILogixVarExpr<ulong> v0, ILogixVarExpr<ulong> v1, ILogixVarExpr<ulong> v2)
7ffdb0d92958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> AndOverOr<ulong>()
7ffdb0cd9f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ValueTuple<ILogixVarExpr<ulong>,ILogixVarExpr<ulong>,ILogixVarExpr<ulong>> vars3<ulong>()
7ffdb0cda040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> AndOverXOr<ulong>()
7ffdb0cda538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> OrOverAnd<ulong>()
7ffdb0cda700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> NotOverAnd<ulong>()
7ffdb0cda8c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ValueTuple<ILogixVarExpr<ulong>,ILogixVarExpr<ulong>> vars2<ulong>()
7ffdb0cda9b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> NotOverXOr<ulong>()
7ffdb0cdaca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<Vector128<ulong>> AndOverOr128<ulong>()
7ffdb0cdaf40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<Vector128<ulong>> AndOverXOr128<ulong>()
7ffdb0cdb270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<Vector128<ulong>> OrOverAnd128<ulong>()
7ffdb0cdb318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<Vector128<ulong>> NotOverAnd128<ulong>()
7ffdb0cdb378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<Vector128<ulong>> NotOverXOr128<ulong>()
7ffdb0cdb540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<Vector256<ulong>> AndOverOr256<ulong>()
7ffdb0cdb588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<Vector256<ulong>> AndOverXOr256<ulong>()
7ffdb0cdb8b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<Vector256<ulong>> OrOverAnd256<ulong>()
7ffdb0cdb930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<Vector256<ulong>> NotOverAnd256<ulong>()
7ffdb0cdb9f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<Vector256<ulong>> NotOverXOr256<ulong>()
7ffdb0cdbb58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitVector4 vector(N4 n, UnaryBitLogicKind kind)
7ffdae0c94a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitVector4 vector(N4 n, BinaryBitLogicKind kind)
7ffdae0c94b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitVector8 vector(N8 n, TernaryBitLogicKind kind)
7ffdae0c94d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitVector16 vector(N16 n, BinaryBitLogicKind kind)
7ffdae0c94e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<N2,N2,byte> table(UnaryBitLogicKind kind)
7ffdae0c9500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<N4,N3,byte> table(BinaryBitLogicKind kind)
7ffdae0c9518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<N8,N4,byte> table(TernaryBitLogicKind kind)
7ffdae0c9530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitBlock<N4,byte> bitblock(BitVector4 src)
7ffdae0c95d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitBlock<N8,byte> bitblock(BitVector8 src)
7ffdae0c95f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string label(uint index)
7ffdae0c3270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<byte> vector<byte>(in Question<byte> src)
7ffdb0ca34e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<ushort> vector<ushort>(in Question<ushort> src)
7ffdb0ca3ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<uint> vector<uint>(in Question<uint> src)
7ffdb0ca86d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<ulong> vector<ulong>(in Question<ulong> src)
7ffdb0ca8e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<byte> vector<byte>(in QuestionResponse<byte> src)
7ffdb0ca9638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<ushort> vector<ushort>(in QuestionResponse<ushort> src)
7ffdb0ca9848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<uint> vector<uint>(in QuestionResponse<uint> src)
7ffdb0ca9980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<ulong> vector<ulong>(in QuestionResponse<ulong> src)
7ffdb0ca9ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> matrix<byte>(in SurveyResponse<byte> src)
7ffdb0ca9bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> matrix<ushort>(in SurveyResponse<ushort> src)
7ffdb0caa970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> matrix<uint>(in SurveyResponse<uint> src)
7ffdb0cab120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> matrix<ulong>(in SurveyResponse<ulong> src)
7ffdb0cab948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> matrix<byte>(in Survey<byte> src)
7ffdb0cd0120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> matrix<ushort>(in Survey<ushort> src)
7ffdb0cd09a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> matrix<uint>(in Survey<uint> src)
7ffdb0cd1170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> matrix<ulong>(in Survey<ulong> src)
7ffdb0cd1968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RowBits<byte> rows<byte>(in Survey<byte> src)
7ffdb0cd2100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RowBits<ushort> rows<ushort>(in Survey<ushort> src)
7ffdb0cd2bb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RowBits<uint> rows<uint>(in Survey<uint> src)
7ffdb0cd2d78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RowBits<ulong> rows<ulong>(in Survey<ulong> src)
7ffdb0cd2f40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RowBits<byte> rows<byte>(in SurveyResponse<byte> src)
7ffdb0cd3108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RowBits<ushort> rows<ushort>(in SurveyResponse<ushort> src)
7ffdb0cd3150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RowBits<uint> rows<uint>(in SurveyResponse<uint> src)
7ffdb0cd3168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# RowBits<ulong> rows<ulong>(in SurveyResponse<ulong> src)
7ffdb0cd3180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format<byte>(in SurveyResponse<byte> src)
7ffdb0cd3198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format<ushort>(in SurveyResponse<ushort> src)
7ffdb0cd31e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format<uint>(in SurveyResponse<uint> src)
7ffdb0cd3210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format<ulong>(in SurveyResponse<ulong> src)
7ffdb0cd3240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format<byte>(in Question<byte> src)
7ffdb0cd3270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format<ushort>(in Question<ushort> src)
7ffdb0cd34e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format<uint>(in Question<uint> src)
7ffdb0cd3678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format<ulong>(in Question<ulong> src)
7ffdb0cd3810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format<byte>(in Survey<byte> src)
7ffdb0cd39a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format<ushort>(in Survey<ushort> src)
7ffdb0cd39d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format<uint>(in Survey<uint> src)
7ffdb0cd39f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format<ulong>(in Survey<ulong> src)
7ffdb0cd3a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format<byte>(in QuestionChoice<byte> src)
7ffdb0cd3a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format<ushort>(in QuestionChoice<ushort> src)
7ffdb0cd3a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format<uint>(in QuestionChoice<uint> src)
7ffdb0cd3a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format<ulong>(in QuestionChoice<ulong> src)
7ffdb0cd3a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string title<byte>(byte id, string label)
7ffdb0cd3a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string title<ushort>(ushort id, string label)
7ffdb0cd3bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string title<uint>(uint id, string label)
7ffdb0cd3ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string title<ulong>(ulong id, string label)
7ffdb0cd3d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Survey<byte> template<byte>(uint id, string name, int length, int width)
7ffdb0cd3e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# QuestionChoice<byte> choice<byte>(byte id, string label)
7ffdb0cd3e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Question<byte> question<byte>(uint id, string statement, int maxselect, QuestionChoice<byte>[] choices)
7ffdb0cd3ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Survey<byte> define<byte>(uint id, string name, Question<byte>[] questions)
7ffdb0cd3ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Survey<ushort> template<ushort>(uint id, string name, int length, int width)
7ffdb0cd3f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# QuestionChoice<ushort> choice<ushort>(ushort id, string label)
7ffdb0cd3f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Question<ushort> question<ushort>(uint id, string statement, int maxselect, QuestionChoice<ushort>[] choices)
7ffdb0cd3f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Survey<ushort> define<ushort>(uint id, string name, Question<ushort>[] questions)
7ffdb0cd3f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Survey<uint> template<uint>(uint id, string name, int length, int width)
7ffdb0cd3fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# QuestionChoice<uint> choice<uint>(uint id, string label)
7ffdb0cd3fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Question<uint> question<uint>(uint id, string statement, int maxselect, QuestionChoice<uint>[] choices)
7ffdb0cd8000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Survey<uint> define<uint>(uint id, string name, Question<uint>[] questions)
7ffdb0cd8018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Survey<ulong> template<ulong>(uint id, string name, int length, int width)
7ffdb0cd8078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# QuestionChoice<ulong> choice<ulong>(ulong id, string label)
7ffdb0cd8090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Question<ulong> question<ulong>(uint id, string statement, int maxselect, QuestionChoice<ulong>[] choices)
7ffdb0cd80a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Survey<ulong> define<ulong>(uint id, string name, Question<ulong>[] questions)
7ffdb0cd80c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Survey<byte> template<byte>(uint id, string name)
7ffdb0cd8120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Survey<ushort> template<ushort>(uint id, string name)
7ffdb0cd8168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Survey<uint> template<uint>(uint id, string name)
7ffdb0cd81c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Survey<ulong> template<ulong>(uint id, string name)
7ffdb0cd81e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Survey<byte> template<byte>(uint id, string name, int length)
7ffdb0cd8240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Survey<ushort> template<ushort>(uint id, string name, int length)
7ffdb0cd8288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Survey<uint> template<uint>(uint id, string name, int length)
7ffdb0cd82a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Survey<ulong> template<ulong>(uint id, string name, int length)
7ffdb0cd82b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# QuestionResponse<byte> response<byte>(uint questionId, QuestionChoice<byte>[] chosen)
7ffdb0cd83a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# QuestionResponse<ushort> response<ushort>(uint questionId, QuestionChoice<ushort>[] chosen)
7ffdb0cd83c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# QuestionResponse<uint> response<uint>(uint questionId, QuestionChoice<uint>[] chosen)
7ffdb0cd83d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# QuestionResponse<ulong> response<ulong>(uint questionId, QuestionChoice<ulong>[] chosen)
7ffdb0cd83f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SurveyResponse<byte> response<byte>(uint surveyId, QuestionResponse<byte>[] answered)
7ffdb0cd8408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SurveyResponse<ushort> response<ushort>(uint surveyId, QuestionResponse<ushort>[] answered)
7ffdb0cd8438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SurveyResponse<uint> response<uint>(uint surveyId, QuestionResponse<uint>[] answered)
7ffdb0cd8498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SurveyResponse<ulong> response<ulong>(uint surveyId, QuestionResponse<ulong>[] answered)
7ffdb0cd84b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonPredExpr<ulong> predicate<ulong>(ApiComparisonClass kind, ILogixExpr<ulong> a, ILogixExpr<ulong> b)
7ffdb0ca3000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonPredExpr<ulong> predicate<ulong>(ApiComparisonClass kind, ulong a, ulong b)
7ffdb0ca3138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonPredExpr<ulong> equals<ulong>(ILogixExpr<ulong> a, ILogixExpr<ulong> b)
7ffdb0ca3300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonPredExpr<ulong> equals<ulong>(ulong a, ulong b)
7ffdb0ca3330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonPredExpr<ulong> lt<ulong>(ILogixExpr<ulong> a, ILogixExpr<ulong> b)
7ffdb0ca3360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonPredExpr<ulong> lt<ulong>(ulong a, ulong b)
7ffdb0ca3390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonPredExpr<ulong> lteq<ulong>(ILogixExpr<ulong> a, ILogixExpr<ulong> b)
7ffdb0ca33c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonPredExpr<ulong> lteq<ulong>(ulong a, ulong b)
7ffdb0ca33f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonPredExpr<ulong> gt<ulong>(ILogixExpr<ulong> a, ILogixExpr<ulong> b)
7ffdb0ca3420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonPredExpr<ulong> gt<ulong>(ulong a, ulong b)
7ffdb0ca3450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonPredExpr<ulong> gteq<ulong>(ILogixExpr<ulong> a, ILogixExpr<ulong> b)
7ffdb0ca3480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonPredExpr<ulong> gteq<ulong>(ulong a, ulong b)
7ffdb0ca34b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong add<ulong>(ulong a, ulong b)
7ffdb0a72208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sub<ulong>(ulong a, ulong b)
7ffdb0a72220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong inc<ulong>(ulong a)
7ffdb0a722f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong dec<ulong>(ulong a)
7ffdb0a72310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong negate<ulong>(ulong a)
7ffdb0a72328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong equals<ulong>(ulong a, ulong b)
7ffdb0a723e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong neq<ulong>(ulong a, ulong b)
7ffdb0a72400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong lt<ulong>(ulong a, ulong b)
7ffdb0a72418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong lteq<ulong>(ulong a, ulong b)
7ffdb0a72430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong gt<ulong>(ulong a, ulong b)
7ffdb0a72448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong gteq<ulong>(ulong a, ulong b)
7ffdb0a72460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong not<ulong>(ulong a)
7ffdb0a786f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong identity<ulong>(ulong a)
7ffdb0a78708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong sll<ulong>(ulong a, byte count)
7ffdb0a78720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong srl<ulong>(ulong a, byte count)
7ffdb0a78738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rotl<ulong>(ulong a, byte count)
7ffdb0a78750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rotr<ulong>(ulong a, byte count)
7ffdb0a78768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte true<byte>(byte a, byte b)
7ffdb0b51578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nand<byte>(byte a, byte b)
7ffdb0b515a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte cimpl<byte>(byte a, byte b)
7ffdb0b515d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte lnot<byte>(byte a, byte b)
7ffdb0b51608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte impl<byte>(byte a, byte b)
7ffdb0b51638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rnot<byte>(byte a, byte b)
7ffdb0b51668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xnor<byte>(byte a, byte b)
7ffdb0b51698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nor<byte>(byte a, byte b)
7ffdb0b516c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte or<byte>(byte a, byte b)
7ffdb0b516f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xor<byte>(byte a, byte b)
7ffdb0b51728h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte right<byte>(byte a, byte b)
7ffdb0b51758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte nonimpl<byte>(byte a, byte b)
7ffdb0b51788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte left<byte>(byte a, byte b)
7ffdb0b517b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte cnonimpl<byte>(byte a, byte b)
7ffdb0b517e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte and<byte>(byte a, byte b)
7ffdb0b51818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte false<byte>(byte a, byte b)
7ffdb0b51848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte true<sbyte>(sbyte a, sbyte b)
7ffdb0b583d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte false<sbyte>(sbyte a, sbyte b)
7ffdb0b58540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort true<ushort>(ushort a, ushort b)
7ffdb0b58780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort nand<ushort>(ushort a, ushort b)
7ffdb0b58798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort cimpl<ushort>(ushort a, ushort b)
7ffdb0b587b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort lnot<ushort>(ushort a, ushort b)
7ffdb0b587c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort impl<ushort>(ushort a, ushort b)
7ffdb0b587e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rnot<ushort>(ushort a, ushort b)
7ffdb0b587f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xnor<ushort>(ushort a, ushort b)
7ffdb0b58810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort nor<ushort>(ushort a, ushort b)
7ffdb0b58828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort or<ushort>(ushort a, ushort b)
7ffdb0b58840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xor<ushort>(ushort a, ushort b)
7ffdb0b58870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort right<ushort>(ushort a, ushort b)
7ffdb0b58888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort nonimpl<ushort>(ushort a, ushort b)
7ffdb0b588a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort left<ushort>(ushort a, ushort b)
7ffdb0b588b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort cnonimpl<ushort>(ushort a, ushort b)
7ffdb0b588d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort and<ushort>(ushort a, ushort b)
7ffdb0b588e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort false<ushort>(ushort a, ushort b)
7ffdb0b58900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short true<short>(short a, short b)
7ffdb0b5a118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short false<short>(short a, short b)
7ffdb0b5a2f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint true<uint>(uint a, uint b)
7ffdb0b828c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint nand<uint>(uint a, uint b)
7ffdb0b828e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cimpl<uint>(uint a, uint b)
7ffdb0b828f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint lnot<uint>(uint a, uint b)
7ffdb0b82910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint impl<uint>(uint a, uint b)
7ffdb0b82928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rnot<uint>(uint a, uint b)
7ffdb0b82940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xnor<uint>(uint a, uint b)
7ffdb0b82958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint nor<uint>(uint a, uint b)
7ffdb0b82970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint or<uint>(uint a, uint b)
7ffdb0b82988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xor<uint>(uint a, uint b)
7ffdb0b829a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint right<uint>(uint a, uint b)
7ffdb0b829b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint nonimpl<uint>(uint a, uint b)
7ffdb0b829d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint left<uint>(uint a, uint b)
7ffdb0b829e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint cnonimpl<uint>(uint a, uint b)
7ffdb0b82a00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint and<uint>(uint a, uint b)
7ffdb0b82a18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint false<uint>(uint a, uint b)
7ffdb0b82a30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int true<int>(int a, int b)
7ffdb0b837e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int false<int>(int a, int b)
7ffdb0b83a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong true<ulong>(ulong a, ulong b)
7ffdb0b88a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong nand<ulong>(ulong a, ulong b)
7ffdb0b88a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cimpl<ulong>(ulong a, ulong b)
7ffdb0b88a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong lnot<ulong>(ulong a, ulong b)
7ffdb0b88a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong impl<ulong>(ulong a, ulong b)
7ffdb0b88ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong rnot<ulong>(ulong a, ulong b)
7ffdb0b88ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xnor<ulong>(ulong a, ulong b)
7ffdb0b88ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong nor<ulong>(ulong a, ulong b)
7ffdb0b88af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong or<ulong>(ulong a, ulong b)
7ffdb0b88b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xor<ulong>(ulong a, ulong b)
7ffdb0b88b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong right<ulong>(ulong a, ulong b)
7ffdb0b88b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong nonimpl<ulong>(ulong a, ulong b)
7ffdb0b88b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong left<ulong>(ulong a, ulong b)
7ffdb0b88b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong cnonimpl<ulong>(ulong a, ulong b)
7ffdb0b88b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong and<ulong>(ulong a, ulong b)
7ffdb0b88ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong false<ulong>(ulong a, ulong b)
7ffdb0b88bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long true<long>(long a, long b)
7ffdb0b88d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long false<long>(long a, long b)
7ffdb0b88f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte not<byte>(byte a)
7ffdb0b89458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte identity<byte>(byte a)
7ffdb0b89488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte not<sbyte>(sbyte a)
7ffdb0b896b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte identity<sbyte>(sbyte a)
7ffdb0b896c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort not<ushort>(ushort a)
7ffdb0b89a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort identity<ushort>(ushort a)
7ffdb0b89a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short not<short>(short a)
7ffdb0b89da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short identity<short>(short a)
7ffdb0b89db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint not<uint>(uint a)
7ffdb0b8a148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint identity<uint>(uint a)
7ffdb0b8a160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int not<int>(int a)
7ffdb0b8a490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int identity<int>(int a)
7ffdb0b8a4a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long not<long>(long a)
7ffdb0b8a5e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long identity<long>(long a)
7ffdb0b8a5f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f5f<byte>(byte a, byte b, byte c)
7ffdb0b8a6e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f5e<byte>(byte a, byte b, byte c)
7ffdb0b8a718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f5d<byte>(byte a, byte b, byte c)
7ffdb0b8a748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f5c<byte>(byte a, byte b, byte c)
7ffdb0b8a778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f5b<byte>(byte a, byte b, byte c)
7ffdb0b8a7a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f5a<byte>(byte a, byte b, byte c)
7ffdb0b8a7d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f59<byte>(byte a, byte b, byte c)
7ffdb0b8a808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f58<byte>(byte a, byte b, byte c)
7ffdb0b8a838h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f57<byte>(byte a, byte b, byte c)
7ffdb0b8a868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f56<byte>(byte a, byte b, byte c)
7ffdb0b8a898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f55<byte>(byte a, byte b, byte c)
7ffdb0b8a8c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f54<byte>(byte a, byte b, byte c)
7ffdb0b8a910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f53<byte>(byte a, byte b, byte c)
7ffdb0b8a940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f52<byte>(byte a, byte b, byte c)
7ffdb0b8a970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f51<byte>(byte a, byte b, byte c)
7ffdb0b8a9a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f50<byte>(byte a, byte b, byte c)
7ffdb0b8a9d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f4f<byte>(byte a, byte b, byte c)
7ffdb0b8aa00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f4e<byte>(byte a, byte b, byte c)
7ffdb0b8aa30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f4d<byte>(byte a, byte b, byte c)
7ffdb0b8aa60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f4c<byte>(byte a, byte b, byte c)
7ffdb0b8aa90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f4b<byte>(byte a, byte b, byte c)
7ffdb0b8aac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f4a<byte>(byte a, byte b, byte c)
7ffdb0b8aaf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f49<byte>(byte a, byte b, byte c)
7ffdb0b8ab20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f48<byte>(byte a, byte b, byte c)
7ffdb0b8ab50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f47<byte>(byte a, byte b, byte c)
7ffdb0b8ab80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f46<byte>(byte a, byte b, byte c)
7ffdb0b8abb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f45<byte>(byte a, byte b, byte c)
7ffdb0b8abe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f44<byte>(byte a, byte b, byte c)
7ffdb0b8ac10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f43<byte>(byte a, byte b, byte c)
7ffdb0b8ac40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f42<byte>(byte a, byte b, byte c)
7ffdb0b8ac70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f41<byte>(byte a, byte b, byte c)
7ffdb0b8aca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f40<byte>(byte a, byte b, byte c)
7ffdb0b8acd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f3f<byte>(byte a, byte b, byte c)
7ffdb0b8ad00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f3e<byte>(byte a, byte b, byte c)
7ffdb0b8ad30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f3d<byte>(byte a, byte b, byte c)
7ffdb0b8ad60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f3c<byte>(byte a, byte b, byte c)
7ffdb0b8ad90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f3b<byte>(byte a, byte b, byte c)
7ffdb0b8adc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f3a<byte>(byte a, byte b, byte c)
7ffdb0b8adf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f39<byte>(byte a, byte b, byte c)
7ffdb0b8ae20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f38<byte>(byte a, byte b, byte c)
7ffdb0b8ae50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f37<byte>(byte a, byte b, byte c)
7ffdb0b8ae80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f36<byte>(byte a, byte b, byte c)
7ffdb0b8aeb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f35<byte>(byte a, byte b, byte c)
7ffdb0b8aee0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f34<byte>(byte a, byte b, byte c)
7ffdb0b8af10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f33<byte>(byte a, byte b, byte c)
7ffdb0b8af40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f32<byte>(byte a, byte b, byte c)
7ffdb0b8af70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f31<byte>(byte a, byte b, byte c)
7ffdb0b8afa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f30<byte>(byte a, byte b, byte c)
7ffdb0b8afd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f2f<byte>(byte a, byte b, byte c)
7ffdb0b8b000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f2e<byte>(byte a, byte b, byte c)
7ffdb0b8b030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f2d<byte>(byte a, byte b, byte c)
7ffdb0b8b060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f2c<byte>(byte a, byte b, byte c)
7ffdb0b8b090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f2b<byte>(byte a, byte b, byte c)
7ffdb0b8b0c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f2a<byte>(byte a, byte b, byte c)
7ffdb0b8b0f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f29<byte>(byte a, byte b, byte c)
7ffdb0b8b120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f28<byte>(byte a, byte b, byte c)
7ffdb0b8b150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f27<byte>(byte a, byte b, byte c)
7ffdb0b8b180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f26<byte>(byte a, byte b, byte c)
7ffdb0b8b1b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f25<byte>(byte a, byte b, byte c)
7ffdb0b8b1e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f24<byte>(byte a, byte b, byte c)
7ffdb0b8b210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f23<byte>(byte a, byte b, byte c)
7ffdb0b8b240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f22<byte>(byte a, byte b, byte c)
7ffdb0b8b270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f21<byte>(byte a, byte b, byte c)
7ffdb0b8b2a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f20<byte>(byte a, byte b, byte c)
7ffdb0b8b2d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f1f<byte>(byte a, byte b, byte c)
7ffdb0b8b300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f1e<byte>(byte a, byte b, byte c)
7ffdb0b8b330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f1d<byte>(byte a, byte b, byte c)
7ffdb0b8b360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f1c<byte>(byte a, byte b, byte c)
7ffdb0b8b390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f1b<byte>(byte a, byte b, byte c)
7ffdb0b8b3c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f1a<byte>(byte a, byte b, byte c)
7ffdb0b8b3f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f19<byte>(byte a, byte b, byte c)
7ffdb0b8b420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f18<byte>(byte a, byte b, byte c)
7ffdb0b8b450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f17<byte>(byte a, byte b, byte c)
7ffdb0b8b480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f16<byte>(byte a, byte b, byte c)
7ffdb0b8b4b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f15<byte>(byte a, byte b, byte c)
7ffdb0b8b4e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f14<byte>(byte a, byte b, byte c)
7ffdb0b8b510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f13<byte>(byte a, byte b, byte c)
7ffdb0b8b540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f12<byte>(byte a, byte b, byte c)
7ffdb0b8b588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f11<byte>(byte a, byte b, byte c)
7ffdb0b8b5b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f10<byte>(byte a, byte b, byte c)
7ffdb0b8b5e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f0f<byte>(byte a, byte b, byte c)
7ffdb0b8b618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f0e<byte>(byte a, byte b, byte c)
7ffdb0b8b648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f0d<byte>(byte a, byte b, byte c)
7ffdb0b8b678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f0c<byte>(byte a, byte b, byte c)
7ffdb0b8b6a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f0b<byte>(byte a, byte b, byte c)
7ffdb0b8b6d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f0a<byte>(byte a, byte b, byte c)
7ffdb0b8b708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f09<byte>(byte a, byte b, byte c)
7ffdb0b8b738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f08<byte>(byte a, byte b, byte c)
7ffdb0b8b768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f07<byte>(byte a, byte b, byte c)
7ffdb0b8b798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f06<byte>(byte a, byte b, byte c)
7ffdb0b8b7c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f05<byte>(byte a, byte b, byte c)
7ffdb0b8b7f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f04<byte>(byte a, byte b, byte c)
7ffdb0b8b828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f03<byte>(byte a, byte b, byte c)
7ffdb0b8b858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f02<byte>(byte a, byte b, byte c)
7ffdb0b8b888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f01<byte>(byte a, byte b, byte c)
7ffdb0b8b8b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xor1<byte>(byte a)
7ffdb0b8be10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f5f<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f5e<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f5d<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f5c<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f5b<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f5a<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f59<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f58<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f57<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f56<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1d58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f55<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1d70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f54<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f53<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f52<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f51<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f50<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f4f<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f4e<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f4d<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f4c<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f4b<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f4a<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f49<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f48<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f47<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f46<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f45<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f44<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f43<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f42<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f41<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f40<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f3f<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f3e<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f3d<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f3c<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f3b<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba1ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f3a<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f39<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f38<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f37<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f36<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f35<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f34<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba20a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f33<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba20b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f32<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba20d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f31<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba20e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f30<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f2f<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f2e<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2130h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f2d<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f2c<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f2b<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f2a<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f29<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba21a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f28<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba21c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f27<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba21d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f26<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba21f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f25<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f24<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f23<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f22<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f21<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f20<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2280h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f1f<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f1e<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba22b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f1d<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba22c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f1c<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba22e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f1b<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba22f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f1a<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f19<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f18<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f17<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f16<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f15<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f14<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba23a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f13<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba23b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f12<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba23d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f11<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f10<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f0f<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f0e<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f0d<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f0c<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f0b<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2490h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f0a<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba24a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f09<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba24c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f08<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba24d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f07<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba24f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f06<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f05<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f04<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f03<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f02<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f01<ushort>(ushort a, ushort b, ushort c)
7ffdb0ba2580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xor1<ushort>(ushort a)
7ffdb0ba2a60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f5f<uint>(uint a, uint b, uint c)
7ffdb0ba8f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f5e<uint>(uint a, uint b, uint c)
7ffdb0ba8f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f5d<uint>(uint a, uint b, uint c)
7ffdb0ba8f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f5c<uint>(uint a, uint b, uint c)
7ffdb0ba8f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f5b<uint>(uint a, uint b, uint c)
7ffdb0ba8f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f5a<uint>(uint a, uint b, uint c)
7ffdb0ba8f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f59<uint>(uint a, uint b, uint c)
7ffdb0ba8fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f58<uint>(uint a, uint b, uint c)
7ffdb0ba8fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f57<uint>(uint a, uint b, uint c)
7ffdb0ba8fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f56<uint>(uint a, uint b, uint c)
7ffdb0ba8ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f55<uint>(uint a, uint b, uint c)
7ffdb0ba9008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f54<uint>(uint a, uint b, uint c)
7ffdb0ba9020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f53<uint>(uint a, uint b, uint c)
7ffdb0ba9038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f52<uint>(uint a, uint b, uint c)
7ffdb0ba9050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f51<uint>(uint a, uint b, uint c)
7ffdb0ba9068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f50<uint>(uint a, uint b, uint c)
7ffdb0ba9080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f4f<uint>(uint a, uint b, uint c)
7ffdb0ba9098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f4e<uint>(uint a, uint b, uint c)
7ffdb0ba90b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f4d<uint>(uint a, uint b, uint c)
7ffdb0ba90c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f4c<uint>(uint a, uint b, uint c)
7ffdb0ba90e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f4b<uint>(uint a, uint b, uint c)
7ffdb0ba90f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f4a<uint>(uint a, uint b, uint c)
7ffdb0ba9110h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f49<uint>(uint a, uint b, uint c)
7ffdb0ba9128h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f48<uint>(uint a, uint b, uint c)
7ffdb0ba9158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f47<uint>(uint a, uint b, uint c)
7ffdb0ba9170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f46<uint>(uint a, uint b, uint c)
7ffdb0ba9188h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f45<uint>(uint a, uint b, uint c)
7ffdb0ba91a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f44<uint>(uint a, uint b, uint c)
7ffdb0ba91b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f43<uint>(uint a, uint b, uint c)
7ffdb0ba91d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f42<uint>(uint a, uint b, uint c)
7ffdb0ba91e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f41<uint>(uint a, uint b, uint c)
7ffdb0ba9200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f40<uint>(uint a, uint b, uint c)
7ffdb0ba9218h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f3f<uint>(uint a, uint b, uint c)
7ffdb0ba9230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f3e<uint>(uint a, uint b, uint c)
7ffdb0ba9248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f3d<uint>(uint a, uint b, uint c)
7ffdb0ba9260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f3c<uint>(uint a, uint b, uint c)
7ffdb0ba9278h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f3b<uint>(uint a, uint b, uint c)
7ffdb0ba9290h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f3a<uint>(uint a, uint b, uint c)
7ffdb0ba92a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f39<uint>(uint a, uint b, uint c)
7ffdb0ba92c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f38<uint>(uint a, uint b, uint c)
7ffdb0ba92d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f37<uint>(uint a, uint b, uint c)
7ffdb0ba92f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f36<uint>(uint a, uint b, uint c)
7ffdb0ba9308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f35<uint>(uint a, uint b, uint c)
7ffdb0ba9320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f34<uint>(uint a, uint b, uint c)
7ffdb0ba9338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f33<uint>(uint a, uint b, uint c)
7ffdb0ba9350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f32<uint>(uint a, uint b, uint c)
7ffdb0ba9368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f31<uint>(uint a, uint b, uint c)
7ffdb0ba9380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f30<uint>(uint a, uint b, uint c)
7ffdb0ba9398h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f2f<uint>(uint a, uint b, uint c)
7ffdb0ba93b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f2e<uint>(uint a, uint b, uint c)
7ffdb0ba93c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f2d<uint>(uint a, uint b, uint c)
7ffdb0ba93e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f2c<uint>(uint a, uint b, uint c)
7ffdb0ba93f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f2b<uint>(uint a, uint b, uint c)
7ffdb0ba9410h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f2a<uint>(uint a, uint b, uint c)
7ffdb0ba9428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f29<uint>(uint a, uint b, uint c)
7ffdb0ba9440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f28<uint>(uint a, uint b, uint c)
7ffdb0ba9458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f27<uint>(uint a, uint b, uint c)
7ffdb0ba9470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f26<uint>(uint a, uint b, uint c)
7ffdb0ba9488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f25<uint>(uint a, uint b, uint c)
7ffdb0ba94a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f24<uint>(uint a, uint b, uint c)
7ffdb0ba94b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f23<uint>(uint a, uint b, uint c)
7ffdb0ba94d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f22<uint>(uint a, uint b, uint c)
7ffdb0ba94e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f21<uint>(uint a, uint b, uint c)
7ffdb0ba9500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f20<uint>(uint a, uint b, uint c)
7ffdb0ba9518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f1f<uint>(uint a, uint b, uint c)
7ffdb0ba9530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f1e<uint>(uint a, uint b, uint c)
7ffdb0ba9548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f1d<uint>(uint a, uint b, uint c)
7ffdb0ba9560h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f1c<uint>(uint a, uint b, uint c)
7ffdb0ba9578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f1b<uint>(uint a, uint b, uint c)
7ffdb0ba9590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f1a<uint>(uint a, uint b, uint c)
7ffdb0ba95a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f19<uint>(uint a, uint b, uint c)
7ffdb0ba95c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f18<uint>(uint a, uint b, uint c)
7ffdb0ba95d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f17<uint>(uint a, uint b, uint c)
7ffdb0ba95f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f16<uint>(uint a, uint b, uint c)
7ffdb0ba9608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f15<uint>(uint a, uint b, uint c)
7ffdb0ba9620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f14<uint>(uint a, uint b, uint c)
7ffdb0ba9638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f13<uint>(uint a, uint b, uint c)
7ffdb0ba9650h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f12<uint>(uint a, uint b, uint c)
7ffdb0ba9668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f11<uint>(uint a, uint b, uint c)
7ffdb0ba9680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f10<uint>(uint a, uint b, uint c)
7ffdb0ba9698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f0f<uint>(uint a, uint b, uint c)
7ffdb0ba96b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f0e<uint>(uint a, uint b, uint c)
7ffdb0ba96c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f0d<uint>(uint a, uint b, uint c)
7ffdb0ba96e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f0c<uint>(uint a, uint b, uint c)
7ffdb0ba96f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f0b<uint>(uint a, uint b, uint c)
7ffdb0ba9710h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f0a<uint>(uint a, uint b, uint c)
7ffdb0ba9728h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f09<uint>(uint a, uint b, uint c)
7ffdb0ba9740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f08<uint>(uint a, uint b, uint c)
7ffdb0ba9758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f07<uint>(uint a, uint b, uint c)
7ffdb0ba9770h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f06<uint>(uint a, uint b, uint c)
7ffdb0ba9788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f05<uint>(uint a, uint b, uint c)
7ffdb0ba97a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f04<uint>(uint a, uint b, uint c)
7ffdb0ba97b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f03<uint>(uint a, uint b, uint c)
7ffdb0ba97d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f02<uint>(uint a, uint b, uint c)
7ffdb0ba97e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f01<uint>(uint a, uint b, uint c)
7ffdb0ba9800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xor1<uint>(uint a)
7ffdb0ba9848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint select<uint>(uint a, uint b, uint c)
7ffdb0ba99f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f5f<ulong>(ulong a, ulong b, ulong c)
7ffdb0be17e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f5e<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f5d<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f5c<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1830h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f5b<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f5a<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f59<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f58<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f57<ulong>(ulong a, ulong b, ulong c)
7ffdb0be18a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f56<ulong>(ulong a, ulong b, ulong c)
7ffdb0be18c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f55<ulong>(ulong a, ulong b, ulong c)
7ffdb0be18d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f54<ulong>(ulong a, ulong b, ulong c)
7ffdb0be18f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f53<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f52<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f51<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f50<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f4f<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f4e<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f4d<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f4c<ulong>(ulong a, ulong b, ulong c)
7ffdb0be19b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f4b<ulong>(ulong a, ulong b, ulong c)
7ffdb0be19c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f4a<ulong>(ulong a, ulong b, ulong c)
7ffdb0be19e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f49<ulong>(ulong a, ulong b, ulong c)
7ffdb0be19f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f48<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f47<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f46<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f45<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f44<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f43<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f42<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f41<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f40<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f3f<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f3e<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f3d<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f3c<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f3b<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f3a<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f39<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f38<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f37<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f36<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f35<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1bd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f34<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f33<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f32<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f31<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f30<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f2f<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f2e<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f2d<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f2c<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f2b<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f2a<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f29<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f28<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f27<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f26<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f25<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1d58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f24<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1d70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f23<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f22<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f21<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f20<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f1f<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f1e<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f1d<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f1c<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f1b<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f1a<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f19<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f18<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f17<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f16<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f15<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f14<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f13<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f12<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f11<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f10<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f0f<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f0e<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f0d<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f0c<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f0b<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f0a<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f09<ulong>(ulong a, ulong b, ulong c)
7ffdb0be1ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f08<ulong>(ulong a, ulong b, ulong c)
7ffdb0be2010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f07<ulong>(ulong a, ulong b, ulong c)
7ffdb0be2028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f06<ulong>(ulong a, ulong b, ulong c)
7ffdb0be2040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f05<ulong>(ulong a, ulong b, ulong c)
7ffdb0be2058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f04<ulong>(ulong a, ulong b, ulong c)
7ffdb0be2070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f03<ulong>(ulong a, ulong b, ulong c)
7ffdb0be20a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f02<ulong>(ulong a, ulong b, ulong c)
7ffdb0be20b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f01<ulong>(ulong a, ulong b, ulong c)
7ffdb0be20d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xor1<ulong>(ulong a)
7ffdb0be28e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong select<ulong>(ulong a, ulong b, ulong c)
7ffdb0be3648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rotl<byte>(byte a, byte count)
7ffdb0bead60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte rotr<byte>(byte a, byte count)
7ffdb0beada8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte sll<byte>(byte a, byte count)
7ffdb0beae20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte srl<byte>(byte a, byte count)
7ffdb0beae50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rotl<ushort>(ushort a, byte count)
7ffdb0beafd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort rotr<ushort>(ushort a, byte count)
7ffdb0beafe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort sll<ushort>(ushort a, byte count)
7ffdb0beb018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort srl<ushort>(ushort a, byte count)
7ffdb0beb030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rotl<uint>(uint a, byte count)
7ffdb0beb138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint rotr<uint>(uint a, byte count)
7ffdb0beb150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint sll<uint>(uint a, byte count)
7ffdb0beb180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint srl<uint>(uint a, byte count)
7ffdb0beb198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte false<byte>()
7ffdb0c10648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte false<sbyte>()
7ffdb0c10678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort false<ushort>()
7ffdb0c10690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short false<short>()
7ffdb0c106a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint false<uint>()
7ffdb0c106c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int false<int>()
7ffdb0c106d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong false<ulong>()
7ffdb0c106f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long false<long>()
7ffdb0c10768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte false<byte>(byte a)
7ffdb0c10780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte false<sbyte>(sbyte a)
7ffdb0c107b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort false<ushort>(ushort a)
7ffdb0c107c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short false<short>(short a)
7ffdb0c107e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint false<uint>(uint a)
7ffdb0c107f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int false<int>(int a)
7ffdb0c10810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong false<ulong>(ulong a)
7ffdb0c10828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long false<long>(long a)
7ffdb0c10840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte false<byte>(byte a, byte b, byte c)
7ffdb0c10900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte false<sbyte>(sbyte a, sbyte b, sbyte c)
7ffdb0c10948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort false<ushort>(ushort a, ushort b, ushort c)
7ffdb0c10960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short false<short>(short a, short b, short c)
7ffdb0c10990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint false<uint>(uint a, uint b, uint c)
7ffdb0c109a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int false<int>(int a, int b, int c)
7ffdb0c109c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong false<ulong>(ulong a, ulong b, ulong c)
7ffdb0c109f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long false<long>(long a, long b, long c)
7ffdb0c10a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte true<byte>()
7ffdb0c10a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte true<sbyte>()
7ffdb0c10a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort true<ushort>()
7ffdb0c10a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short true<short>()
7ffdb0c10ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint true<uint>()
7ffdb0c10af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int true<int>()
7ffdb0c10b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong true<ulong>()
7ffdb0c10b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long true<long>()
7ffdb0c10bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte true<byte>(byte a)
7ffdb0c10c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte true<sbyte>(sbyte a)
7ffdb0c10c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort true<ushort>(ushort a)
7ffdb0c10c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short true<short>(short a)
7ffdb0c10c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint true<uint>(uint a)
7ffdb0c10d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int true<int>(int a)
7ffdb0c10db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong true<ulong>(ulong a)
7ffdb0c10df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long true<long>(long a)
7ffdb0c10e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte true<byte>(byte a, byte b, byte c)
7ffdb0c10ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte true<sbyte>(sbyte a, sbyte b, sbyte c)
7ffdb0c10f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort true<ushort>(ushort a, ushort b, ushort c)
7ffdb0c10f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short true<short>(short a, short b, short c)
7ffdb0c10f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint true<uint>(uint a, uint b, uint c)
7ffdb0c10f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int true<int>(int a, int b, int c)
7ffdb0c10f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong true<ulong>(ulong a, ulong b, ulong c)
7ffdb0c10fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long true<long>(long a, long b, long c)
7ffdb0c10fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<byte>(byte a)
7ffdb0c11110h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ushort>(ushort a)
7ffdb0c11170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<uint>(uint a)
7ffdb0c111a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ulong>(ulong a)
7ffdb0c111d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte xornot<byte>(byte a, byte b)
7ffdb0c11830h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort xornot<ushort>(ushort a, ushort b)
7ffdb0c11890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint xornot<uint>(uint a, uint b)
7ffdb0c118d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong xornot<ulong>(ulong a, ulong b)
7ffdb0c11908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte add<byte>(byte a, byte b)
7ffdb0c11938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort add<ushort>(ushort a, ushort b)
7ffdb0c11950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint add<uint>(uint a, uint b)
7ffdb0c11980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte sub<byte>(byte a, byte b)
7ffdb0c11998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort sub<ushort>(ushort a, ushort b)
7ffdb0c119b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint sub<uint>(uint a, uint b)
7ffdb0c119c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte div<byte>(byte a, byte b)
7ffdb0c119e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort div<ushort>(ushort a, ushort b)
7ffdb0c11a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint div<uint>(uint a, uint b)
7ffdb0c11a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong div<ulong>(ulong a, ulong b)
7ffdb0c11a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte mod<byte>(byte a, byte b)
7ffdb0c11a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort mod<ushort>(ushort a, ushort b)
7ffdb0c11ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint mod<uint>(uint a, uint b)
7ffdb0c11b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong mod<ulong>(ulong a, ulong b)
7ffdb0c11b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte negate<byte>(byte a)
7ffdb0c11b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort negate<ushort>(ushort a)
7ffdb0c11b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint negate<uint>(uint a)
7ffdb0c11ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte inc<byte>(byte a)
7ffdb0c11bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort inc<ushort>(ushort a)
7ffdb0c11bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint inc<uint>(uint a)
7ffdb0c11c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte dec<byte>(byte a)
7ffdb0c11c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort dec<ushort>(ushort a)
7ffdb0c11d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint dec<uint>(uint a)
7ffdb0c11db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte equals<byte>(byte a, byte b)
7ffdb0c11e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort equals<ushort>(ushort a, ushort b)
7ffdb0c11ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint equals<uint>(uint a, uint b)
7ffdb0c11f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte neq<byte>(byte a, byte b)
7ffdb0c12058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort neq<ushort>(ushort a, ushort b)
7ffdb0c12088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint neq<uint>(uint a, uint b)
7ffdb0c120b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte lt<byte>(byte a, byte b)
7ffdb0c121a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort lt<ushort>(ushort a, ushort b)
7ffdb0c121d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint lt<uint>(uint a, uint b)
7ffdb0c12208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte lteq<byte>(byte a, byte b)
7ffdb0c12340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort lteq<ushort>(ushort a, ushort b)
7ffdb0c12388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint lteq<uint>(uint a, uint b)
7ffdb0c123b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte gt<byte>(byte a, byte b)
7ffdb0c12478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort gt<ushort>(ushort a, ushort b)
7ffdb0c12520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint gt<uint>(uint a, uint b)
7ffdb0c12580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte gteq<byte>(byte a, byte b)
7ffdb0c12658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort gteq<ushort>(ushort a, ushort b)
7ffdb0c126b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint gteq<uint>(uint a, uint b)
7ffdb0c12748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte select<byte>(byte a, byte b, byte c)
7ffdb0c12b98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort select<ushort>(ushort a, ushort b, ushort c)
7ffdb0c12bf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f00<byte>(byte a, byte b, byte c)
7ffdb0c12ca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f00<ushort>(ushort a, ushort b, ushort c)
7ffdb0c12cb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f00<uint>(uint a, uint b, uint c)
7ffdb0c12cd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f00<ulong>(ulong a, ulong b, ulong c)
7ffdb0c12ce8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte f97<byte>(byte a, byte b, byte c)
7ffdb0ca2ef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort f97<ushort>(ushort a, ushort b, ushort c)
7ffdb0ca2fb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint f97<uint>(uint a, uint b, uint c)
7ffdb0ca2fd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong f97<ulong>(ulong a, ulong b, ulong c)
7ffdb0ca2fe8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eval<ulong>(ApiComparisonClass kind, ulong a, ulong b)
7ffdb0a72bf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong eval<ulong>(UnaryBitLogicKind kind, ulong a)
7ffdb0a781c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong eval<ulong>(BinaryBitLogicKind kind, ulong a, ulong b)
7ffdb0a78210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong eval<ulong>(BitShiftClass kind, ulong a, byte count)
7ffdb0a78690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong eval<ulong>(TernaryBitLogicKind kind, ulong a, ulong b, ulong c)
7ffdb0a786c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eval<byte>(ApiComparisonClass kind, byte a, byte b)
7ffdb0b33990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eval<sbyte>(ApiComparisonClass kind, sbyte a, sbyte b)
7ffdb0b33a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eval<ushort>(ApiComparisonClass kind, ushort a, ushort b)
7ffdb0b38780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eval<short>(ApiComparisonClass kind, short a, short b)
7ffdb0b39500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eval<uint>(ApiComparisonClass kind, uint a, uint b)
7ffdb0b39608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eval<int>(ApiComparisonClass kind, int a, int b)
7ffdb0b396b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eval<long>(ApiComparisonClass kind, long a, long b)
7ffdb0b3a610h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryPredicate<byte> lookup<byte>(ApiComparisonClass kind)
7ffdb0b3a898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryPredicate<sbyte> lookup<sbyte>(ApiComparisonClass kind)
7ffdb0b3ab68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryPredicate<ushort> lookup<ushort>(ApiComparisonClass kind)
7ffdb0b3aca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryPredicate<short> lookup<short>(ApiComparisonClass kind)
7ffdb0b3ae68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryPredicate<uint> lookup<uint>(ApiComparisonClass kind)
7ffdb0b3afb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryPredicate<int> lookup<int>(ApiComparisonClass kind)
7ffdb0b3be58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryPredicate<ulong> lookup<ulong>(ApiComparisonClass kind)
7ffdb0b50000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryPredicate<long> lookup<long>(ApiComparisonClass kind)
7ffdb0b50c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte eval<byte>(BinaryBitLogicKind kind, byte a, byte b)
7ffdb0b51530h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte eval<sbyte>(BinaryBitLogicKind kind, sbyte a, sbyte b)
7ffdb0b583a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort eval<ushort>(BinaryBitLogicKind kind, ushort a, ushort b)
7ffdb0b58768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short eval<short>(BinaryBitLogicKind kind, short a, short b)
7ffdb0b59db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint eval<uint>(BinaryBitLogicKind kind, uint a, uint b)
7ffdb0b82898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int eval<int>(BinaryBitLogicKind kind, int a, int b)
7ffdb0b83798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long eval<long>(BinaryBitLogicKind kind, long a, long b)
7ffdb0b88d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte eval<byte>(UnaryBitLogicKind kind, byte a)
7ffdb0b89428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte eval<sbyte>(UnaryBitLogicKind kind, sbyte a)
7ffdb0b89680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort eval<ushort>(UnaryBitLogicKind kind, ushort a)
7ffdb0b89a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short eval<short>(UnaryBitLogicKind kind, short a)
7ffdb0b89d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint eval<uint>(UnaryBitLogicKind kind, uint a)
7ffdb0b8a118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int eval<int>(UnaryBitLogicKind kind, int a)
7ffdb0b8a478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long eval<long>(UnaryBitLogicKind kind, long a)
7ffdb0b8a5c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte eval<byte>(TernaryBitLogicKind kind, byte a, byte b, byte c)
7ffdb0b8a688h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte eval<sbyte>(TernaryBitLogicKind kind, sbyte a, sbyte b, sbyte c)
7ffdb0ba0678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort eval<ushort>(TernaryBitLogicKind kind, ushort a, ushort b, ushort c)
7ffdb0ba1c08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short eval<short>(TernaryBitLogicKind kind, short a, short b, short c)
7ffdb0ba3300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint eval<uint>(TernaryBitLogicKind kind, uint a, uint b, uint c)
7ffdb0ba8ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int eval<int>(TernaryBitLogicKind kind, int a, int b, int c)
7ffdb0baa250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long eval<long>(TernaryBitLogicKind kind, long a, long b, long c)
7ffdb0be8f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte eval<byte>(BitShiftClass kind, byte a, byte count)
7ffdb0beace8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort eval<ushort>(BitShiftClass kind, ushort a, byte count)
7ffdb0beafb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint eval<uint>(BitShiftClass kind, uint a, byte count)
7ffdb0beb120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<byte> lookup<byte>(BitShiftClass kind)
7ffdb0beb378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<sbyte> lookup<sbyte>(BitShiftClass kind)
7ffdb0beb510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<ushort> lookup<ushort>(BitShiftClass kind)
7ffdb0beb690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<short> lookup<short>(BitShiftClass kind)
7ffdb0beb7b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<uint> lookup<uint>(BitShiftClass kind)
7ffdb0beb8d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<int> lookup<int>(BitShiftClass kind)
7ffdb0beb9c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<ulong> lookup<ulong>(BitShiftClass kind)
7ffdb0bebb70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Shifter<long> lookup<long>(BitShiftClass kind)
7ffdb0bebc00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<byte> lookup<byte>(UnaryBitLogicKind kind)
7ffdb0bebd20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<sbyte> lookup<sbyte>(UnaryBitLogicKind kind)
7ffdb0bebe28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<ushort> lookup<ushort>(UnaryBitLogicKind kind)
7ffdb0bebea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<short> lookup<short>(UnaryBitLogicKind kind)
7ffdb0bebed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<uint> lookup<uint>(UnaryBitLogicKind kind)
7ffdb0c10000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<int> lookup<int>(UnaryBitLogicKind kind)
7ffdb0c10090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<ulong> lookup<ulong>(UnaryBitLogicKind kind)
7ffdb0c10150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<long> lookup<long>(UnaryBitLogicKind kind)
7ffdb0c10258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr get_AndOverOr()
7ffdae0c2088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr get_AndOverXOr()
7ffdae0c20a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr get_OrOverAnd()
7ffdae0c20b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr get_NotOverAnd()
7ffdae0c20d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr get_NotOverXOr()
7ffdae0c20e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ValueTuple<LogicVariable,LogicVariable> get_vars2()
7ffdae0c2100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ValueTuple<LogicVariable,LogicVariable,LogicVariable> get_vars3()
7ffdae0c2118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eval(ILogicExpr expr)
7ffdae0c1ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied(ComparisonExpr expr, bit a, bit b)
7ffdae0c1fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit equal(VariedLogicExpr a, VariedLogicExpr b)
7ffdae0c2028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> eval<ulong>(ILogixExpr<ulong> expr)
7ffdb0a72910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<Vector128<ulong>> eval<ulong>(ILogixExpr<Vector128<ulong>> expr)
7ffdb0a72ee0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<Vector256<ulong>> eval<ulong>(ILogixExpr<Vector256<ulong>> expr)
7ffdb0a73240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eval<ulong>(ILogicExpr<ulong> expr)
7ffdb0abb168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> eval<ulong>(IComparisonExpr<ulong> expr)
7ffdb0abbb70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<Vector128<ulong>> eval<ulong>(IComparisonExpr<Vector128<ulong>> expr)
7ffdb0abbcd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<Vector256<ulong>> eval<ulong>(IComparisonExpr<Vector256<ulong>> expr)
7ffdb0abbd80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eval<ulong>(IComparisonPredExpr<ulong> expr)
7ffdb0abbe28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> eval<ulong>(IArithmeticExpr<ulong> expr)
7ffdb0abbf90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<byte>(ComparisonExpr<byte> expr, byte a, byte b)
7ffdb0af0270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<sbyte>(ComparisonExpr<sbyte> expr, sbyte a, sbyte b)
7ffdb0af06d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<ushort>(ComparisonExpr<ushort> expr, ushort a, ushort b)
7ffdb0af0c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<short>(ComparisonExpr<short> expr, short a, short b)
7ffdb0af10b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<uint>(ComparisonExpr<uint> expr, uint a, uint b)
7ffdb0af1578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<int>(ComparisonExpr<int> expr, int a, int b)
7ffdb0af19b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<ulong>(ComparisonExpr<ulong> expr, ulong a, ulong b)
7ffdb0af1ef0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<long>(ComparisonExpr<long> expr, long a, long b)
7ffdb0af2070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<byte>(ComparisonExpr<Vector128<byte>> expr, Vector128<byte> a, Vector128<byte> b)
7ffdb0af2550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<sbyte>(ComparisonExpr<Vector128<sbyte>> expr, Vector128<sbyte> a, Vector128<sbyte> b)
7ffdb0af2bc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<ushort>(ComparisonExpr<Vector128<ushort>> expr, Vector128<ushort> a, Vector128<ushort> b)
7ffdb0af30a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<short>(ComparisonExpr<Vector128<short>> expr, Vector128<short> a, Vector128<short> b)
7ffdb0af3540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<uint>(ComparisonExpr<Vector128<uint>> expr, Vector128<uint> a, Vector128<uint> b)
7ffdb0af39a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<int>(ComparisonExpr<Vector128<int>> expr, Vector128<int> a, Vector128<int> b)
7ffdb0af3ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<ulong>(ComparisonExpr<Vector128<ulong>> expr, Vector128<ulong> a, Vector128<ulong> b)
7ffdb0af8570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<long>(ComparisonExpr<Vector128<long>> expr, Vector128<long> a, Vector128<long> b)
7ffdb0af8ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<byte>(ComparisonExpr<Vector256<byte>> expr, Vector256<byte> a, Vector256<byte> b)
7ffdb0af9c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<sbyte>(ComparisonExpr<Vector256<sbyte>> expr, Vector256<sbyte> a, Vector256<sbyte> b)
7ffdb0afa988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<ushort>(ComparisonExpr<Vector256<ushort>> expr, Vector256<ushort> a, Vector256<ushort> b)
7ffdb0afada8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<short>(ComparisonExpr<Vector256<short>> expr, Vector256<short> a, Vector256<short> b)
7ffdb0afb258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<uint>(ComparisonExpr<Vector256<uint>> expr, Vector256<uint> a, Vector256<uint> b)
7ffdb0afb720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<int>(ComparisonExpr<Vector256<int>> expr, Vector256<int> a, Vector256<int> b)
7ffdb0afbb88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<ulong>(ComparisonExpr<Vector256<ulong>> expr, Vector256<ulong> a, Vector256<ulong> b)
7ffdb0b30060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit satisfied<long>(ComparisonExpr<Vector256<long>> expr, Vector256<long> a, Vector256<long> b)
7ffdb0b302b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# IReadOnlyList<ulong> solve<ulong>(ComparisonExpr<ulong> expr, Interval<ulong> domain, int varyix)
7ffdb0b306f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# IReadOnlyList<ulong> solve<ulong>(ComparisonExpr<ulong> expr, Interval<ulong> domain)
7ffdb0b31f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr define(ApiComparisonClass kind, ILogicExpr lhs, ILogicExpr rhs, ILogicVarExpr[] vars)
7ffdae0c1c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr equals(ILogicExpr lhs, ILogicExpr rhs, ILogicVarExpr[] variables)
7ffdae0c1c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> define<ulong>(ApiComparisonClass kind, ILogixExpr<ulong> lhs, ILogixExpr<ulong> rhs, ILogixVarExpr<ulong>[] vars)
7ffdb0ab8e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> equals<ulong>(ILogicExpr<ulong> lhs, ILogicExpr<ulong> rhs, ILogixVarExpr<ulong>[] variables)
7ffdb0ab9620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> compare<ulong>(ApiComparisonClass kind, ILogixExpr<ulong> lhs, ILogixExpr<ulong> rhs)
7ffdb0ab96b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> compare<ulong>(ApiComparisonClass kind, ulong lhs, ulong rhs)
7ffdb0ab9770h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> equals<ulong>(ILogixExpr<ulong> lhs, ILogixExpr<ulong> rhs)
7ffdb0ab99e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> equals<ulong>(ulong lhs, ulong rhs)
7ffdb0ab9a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> neq<ulong>(ILogixExpr<ulong> lhs, ILogixExpr<ulong> rhs)
7ffdb0ab9c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> neq<ulong>(ulong lhs, ulong rhs)
7ffdb0ab9cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> lt<ulong>(ILogixExpr<ulong> lhs, ILogixExpr<ulong> rhs)
7ffdb0ab9f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> lt<ulong>(ulong lhs, ulong rhs)
7ffdb0ab9fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> lteq<ulong>(ILogixExpr<ulong> lhs, ILogixExpr<ulong> rhs)
7ffdb0aba1f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> lteq<ulong>(ulong lhs, ulong rhs)
7ffdb0aba268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> gt<ulong>(ILogixExpr<ulong> lhs, ILogixExpr<ulong> rhs)
7ffdb0aba4c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> gt<ulong>(ulong lhs, ulong rhs)
7ffdb0aba538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> gteq<ulong>(ILogixExpr<ulong> lhs, ILogixExpr<ulong> rhs)
7ffdb0aba760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> gteq<ulong>(ulong lhs, ulong rhs)
7ffdb0aba808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryLogicOpExpr not(ILogicExpr a)
7ffdae0c1248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryLogicOpExpr not(bit a)
7ffdae0c1260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr and(ILogicExpr a, ILogicExpr b)
7ffdae0c12a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr and(bit a, bit b)
7ffdae0c12c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr nand(ILogicExpr a, ILogicExpr b)
7ffdae0c1308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr nand(bit a, bit b)
7ffdae0c1320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr or(ILogicExpr a, ILogicExpr b)
7ffdae0c1368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr or(bit a, bit b)
7ffdae0c1380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr nor(ILogicExpr a, ILogicExpr b)
7ffdae0c13c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr nor(bit a, bit b)
7ffdae0c13f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr xor(ILogicExpr a, ILogicExpr b)
7ffdae0c1428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr xor(bit a, bit b)
7ffdae0c1440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr xnor(ILogicExpr a, ILogicExpr b)
7ffdae0c1488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr xnor(bit a, bit b)
7ffdae0c14a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr left(ILogicExpr a, ILogicExpr b)
7ffdae0c14e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr left(bit a, bit b)
7ffdae0c1518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr right(ILogicExpr a, ILogicExpr b)
7ffdae0c1548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr right(bit a, bit b)
7ffdae0c1560h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr lnot(ILogicExpr a, ILogicExpr b)
7ffdae0c15a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr lnot(bit a, bit b)
7ffdae0c15c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr rnot(ILogicExpr a, ILogicExpr b)
7ffdae0c1608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr rnot(bit a, bit b)
7ffdae0c1620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr cimpl(ILogicExpr a, ILogicExpr b)
7ffdae0c1728h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr cimpl(bit a, bit b)
7ffdae0c1740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# TernaryLogicOpExpr select(ILogicExpr a, ILogicExpr b, ILogicExpr c)
7ffdae0c17e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# TernaryLogicOpExpr select(bit a, bit b, bit c)
7ffdae0c1800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LiteralLogicSeqExpr bitseq(bit[] terms)
7ffdae0c1830h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr compare(ApiComparisonClass kind, ILogicExpr lhs, ILogicExpr rhs, ILogicVarExpr[] variables)
7ffdae0c1938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr equals(ILogicExpr lhs, ILogicExpr rhs, ILogicVarExpr[] variables)
7ffdae0c1968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LiteralLogicExpr true()
7ffdae0c1998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LiteralLogicExpr false()
7ffdae0c19c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LiteralLogicExpr literal(bit a)
7ffdae0c19f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryLogicOpExpr unary(UnaryBitLogicKind op, ILogicExpr a)
7ffdae0c1a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryLogicOpExpr unary(UnaryBitLogicKind kind, bit a)
7ffdae0c1aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr binary(BinaryBitLogicKind kind, ILogicExpr a, ILogicExpr b)
7ffdae0c1ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr binary(BinaryBitLogicKind kind, bit a, bit b)
7ffdae0c1ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# TernaryLogicOpExpr ternary(TernaryBitLogicKind kind, ILogicExpr a, ILogicExpr b, ILogicExpr c)
7ffdae0c1b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# TernaryLogicOpExpr ternary(TernaryBitLogicKind kind, bit a, bit b, bit c)
7ffdae0c1b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogicVariable lvar(char name, bit init)
7ffdae0c1b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogicVariable lvar(uint symbol, bit init)
7ffdae0c1b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogicVariable[] lvars(uint n)
7ffdae0c1bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# VariedLogicExpr varied(ILogicExpr expr, LogicVariable[] vars)
7ffdae0c1c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryLogicOpExpr<ulong> not<ulong>(ILogicExpr<ulong> a)
7ffdb0ab31f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryLogicOpExpr<ulong> unary<ulong>(UnaryBitLogicKind op, ILogicExpr<ulong> a)
7ffdb0ab3348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryLogicOpExpr<ulong> not<ulong>(bit a)
7ffdb0ab33a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryLogicOpExpr<ulong> unary<ulong>(UnaryBitLogicKind op, bit a)
7ffdb0ab33d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LiteralLogicExpr<ulong> literal<ulong>(bit a)
7ffdb0ab3408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> and<ulong>(ILogicExpr<ulong> a, ILogicExpr<ulong> b)
7ffdb0ab3690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> binary<ulong>(BinaryBitLogicKind kind, ILogicExpr<ulong> a, ILogicExpr<ulong> b)
7ffdb0ab38d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> and<ulong>(bit a, bit b)
7ffdb0ab3960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> binary<ulong>(BinaryBitLogicKind kind, bit a, bit b)
7ffdb0ab3978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> nand<ulong>(ILogicExpr<ulong> a, ILogicExpr<ulong> b)
7ffdb0ab3c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> nand<ulong>(bit a, bit b)
7ffdb0ab3cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> or<ulong>(ILogicExpr<ulong> a, ILogicExpr<ulong> b)
7ffdb0ab3d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> or<ulong>(bit a, bit b)
7ffdb0ab3dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> nor<ulong>(ILogicExpr<ulong> a, ILogicExpr<ulong> b)
7ffdb0ab3e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> nor<ulong>(bit a, bit b)
7ffdb0ab3f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> xor<ulong>(ILogicExpr<ulong> a, ILogicExpr<ulong> b)
7ffdb0ab3f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> xor<ulong>(bit a, bit b)
7ffdb0ab8030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> xnor<ulong>(ILogicExpr<ulong> a, ILogicExpr<ulong> b)
7ffdb0ab80c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> left<ulong>(bit a, bit b)
7ffdb0ab8138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> right<ulong>(ILogicExpr<ulong> a, ILogicExpr<ulong> b)
7ffdb0ab81b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> right<ulong>(bit a, bit b)
7ffdb0ab8228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> lnot<ulong>(ILogicExpr<ulong> a, ILogicExpr<ulong> b)
7ffdb0ab82b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> lnot<ulong>(bit a, bit b)
7ffdb0ab8330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> rnot<ulong>(ILogicExpr<ulong> a, ILogicExpr<ulong> b)
7ffdb0ab83d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> rnot<ulong>(bit a, bit b)
7ffdb0ab8438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> impl<ulong>(ILogicExpr<ulong> a, ILogicExpr<ulong> b)
7ffdb0ab85d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> impl<ulong>(bit a, bit b)
7ffdb0ab8648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> nonimpl<ulong>(ILogicExpr<ulong> a, ILogicExpr<ulong> b)
7ffdb0ab8780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> nonimpl<ulong>(bit a, bit b)
7ffdb0ab87f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> cimpl<ulong>(ILogicExpr<ulong> a, ILogicExpr<ulong> b)
7ffdb0ab88d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> cimpl<ulong>(bit a, bit b)
7ffdb0ab8900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> cnonimpl<ulong>(ILogicExpr<ulong> a, ILogicExpr<ulong> b)
7ffdb0ab8978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryLogicOpExpr<ulong> cnonimpl<ulong>(bit a, bit b)
7ffdb0ab89a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# TernaryLogicOpExpr<ulong> select<ulong>(ILogicExpr<ulong> a, ILogicExpr<ulong> b, ILogicExpr<ulong> c)
7ffdb0ab8a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# TernaryLogicOpExpr<ulong> ternary<ulong>(TernaryBitLogicKind kind, ILogicExpr<ulong> a, ILogicExpr<ulong> b, ILogicExpr<ulong> c)
7ffdb0ab8bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> compare<ulong>(ApiComparisonClass kind, ILogicExpr<ulong> lhs, ILogicExpr<ulong> rhs, ILogixVarExpr<ulong>[] variables)
7ffdb0ab8c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ComparisonExpr<ulong> equals<ulong>(ILogicExpr<ulong> lhs, ILogicExpr<ulong> rhs, ILogixVarExpr<ulong>[] variables)
7ffdb0ab8ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LiteralLogicExpr<ulong> true<ulong>()
7ffdb0ab8f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LiteralLogicExpr<ulong> false<ulong>()
7ffdb0ab8f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryLogicOpExpr<ulong> identity<ulong>(ILogicExpr<ulong> a)
7ffdb0ab9008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# TernaryLogicOpExpr<ulong> ternary<ulong>(TernaryBitLogicKind kind, bit a, bit b, bit c)
7ffdb0ab9230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryArithmeticOpExpr<ulong> unary<ulong>(ApiUnaryArithmeticClass op, ILogixExpr<ulong> a)
7ffdb0a7b2e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryArithmeticOpExpr<ulong> unary<ulong>(ApiUnaryArithmeticClass op, ulong a)
7ffdb0a7b450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryArithmeticOpExpr<ulong> binary<ulong>(ApiBinaryArithmeticClass op, ILogixExpr<ulong> a, ILogixExpr<ulong> b)
7ffdb0a7b6c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryArithmeticOpExpr<ulong> binary<ulong>(ApiBinaryArithmeticClass op, ulong a, ulong b)
7ffdb0a7be58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryArithmeticOpExpr<ulong> inc<ulong>(ILogixExpr<ulong> a)
7ffdb0ab01c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryArithmeticOpExpr<ulong> inc<ulong>(ulong a)
7ffdb0ab0270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryArithmeticOpExpr<ulong> dec<ulong>(ILogixExpr<ulong> a)
7ffdb0ab02b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryArithmeticOpExpr<ulong> dec<ulong>(ulong a)
7ffdb0ab0378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryArithmeticOpExpr<ulong> negate<ulong>(ILogixExpr<ulong> a)
7ffdb0ab03c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryArithmeticOpExpr<ulong> negate<ulong>(ulong a)
7ffdb0ab09c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryArithmeticOpExpr<ulong> add<ulong>(ILogixExpr<ulong> a, ILogixExpr<ulong> b)
7ffdb0ab0a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryArithmeticOpExpr<ulong> add<ulong>(ulong a, ulong b)
7ffdb0ab0ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryArithmeticOpExpr<ulong> sub<ulong>(ILogixExpr<ulong> a, ILogixExpr<ulong> b)
7ffdb0ab0b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryArithmeticOpExpr<ulong> sub<ulong>(ulong a, ulong b)
7ffdb0ab0b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<Vector128<ulong>> eval<ulong>(ILogixExpr<Vector128<ulong>> expr)
7ffdb0a72f28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<Vector256<ulong>> eval<ulong>(ILogixExpr<Vector256<ulong>> expr)
7ffdb0a73288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<Vector128<ulong>> eval<ulong>(IOperatorExpr<Vector128<ulong>> expr)
7ffdb0a789a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<Vector256<ulong>> eval<ulong>(IOperatorExpr<Vector256<ulong>> expr)
7ffdb0a794d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> eval<ulong>(ILogixExpr<ulong> expr)
7ffdb0a72988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> eval<ulong>(IOperatorExpr<ulong> expr)
7ffdb0a73a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong eval<ulong>(ApiComparisonClass kind, ulong a, ulong b)
7ffdb0a721d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<ulong> lookup<ulong>(ApiComparisonClass kind)
7ffdb0a738d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eval(ILogicExpr expr)
7ffdae0c1008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eval(ILogicOpExpr expr)
7ffdae0c1020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> eval<ulong>(IComparisonExpr<ulong> expr)
7ffdb0a72898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> eval<ulong>(ILogixExpr<ulong> expr)
7ffdb0a728b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eval<ulong>(IComparisonPredExpr<ulong> expr)
7ffdb0a72a30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<Vector128<ulong>> eval<ulong>(IComparisonExpr<Vector128<ulong>> expr)
7ffdb0a72cb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<Vector128<ulong>> eval<ulong>(ILogixExpr<Vector128<ulong>> expr)
7ffdb0a72e68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<Vector256<ulong>> eval<ulong>(IComparisonExpr<Vector256<ulong>> expr)
7ffdb0a73030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<Vector256<ulong>> eval<ulong>(ILogixExpr<Vector256<ulong>> expr)
7ffdb0a731e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> eval<ulong>(IArithmeticExpr<ulong> expr)
7ffdb0a71b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> eval<ulong>(ILogixVarExpr<ulong> expr)
7ffdb0a71d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> eval<ulong>(IArithmeticOpExpr<ulong> expr)
7ffdb0a71d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> eval<ulong>(ILogixExpr<ulong> expr)
7ffdb0a71dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> eval<ulong>(IUnaryArithmeticOpExpr<ulong> expr)
7ffdb0a71e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> eval<ulong>(IBinaryArithmeticOpExpr<ulong> expr)
7ffdb0a71e48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> inc<ulong>(IUnaryArithmeticOpExpr<ulong> a)
7ffdb0a72058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> dec<ulong>(IUnaryArithmeticOpExpr<ulong> a)
7ffdb0a72070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> negate<ulong>(IUnaryArithmeticOpExpr<ulong> a)
7ffdb0a72088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> eval<ulong>(IComparisonExpr<ulong> expr)
7ffdb0a720b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> add<ulong>(IBinaryArithmeticOpExpr<ulong> expr)
7ffdb0a720d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# LogixLiteral<ulong> sub<ulong>(IBinaryArithmeticOpExpr<ulong> expr)
7ffdb0a720e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<ScalarBits<byte>> Lookup<byte>(BinaryBitLogicKind kind)
7ffdb0a43f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<ScalarBits<ushort>> Lookup<ushort>(BinaryBitLogicKind kind)
7ffdb0a48318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<ScalarBits<uint>> Lookup<uint>(BinaryBitLogicKind kind)
7ffdb0a48588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<ScalarBits<ulong>> Lookup<ulong>(BinaryBitLogicKind kind)
7ffdb0a487e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<byte> EvalDirect<byte>(BinaryBitLogicKind kind, ScalarBits<byte> x, ScalarBits<byte> y)
7ffdb0a48a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<ushort> EvalDirect<ushort>(BinaryBitLogicKind kind, ScalarBits<ushort> x, ScalarBits<ushort> y)
7ffdb0a70d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<uint> EvalDirect<uint>(BinaryBitLogicKind kind, ScalarBits<uint> x, ScalarBits<uint> y)
7ffdb0a70e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<ulong> EvalDirect<ulong>(BinaryBitLogicKind kind, ScalarBits<ulong> x, ScalarBits<ulong> y)
7ffdb0a70f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<byte> EvalRef<byte>(BinaryBitLogicKind kind, ScalarBits<byte> x, ScalarBits<byte> y)
7ffdb0a71140h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<ushort> EvalRef<ushort>(BinaryBitLogicKind kind, ScalarBits<ushort> x, ScalarBits<ushort> y)
7ffdb0a714e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<uint> EvalRef<uint>(BinaryBitLogicKind kind, ScalarBits<uint> x, ScalarBits<uint> y)
7ffdb0a71710h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<ulong> EvalRef<ulong>(BinaryBitLogicKind kind, ScalarBits<ulong> x, ScalarBits<ulong> y)
7ffdb0a71920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> eval<byte>(UnaryBitLogicKind kind, in BitMatrix<byte> A, in BitMatrix<byte> Z)
7ffdb09d9458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> not<byte>(in BitMatrix<byte> a, in BitMatrix<byte> dst)
7ffdb09d9470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> identity<byte>(in BitMatrix<byte> A, in BitMatrix<byte> dst)
7ffdb09d94a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> eval<ushort>(UnaryBitLogicKind kind, in BitMatrix<ushort> A, in BitMatrix<ushort> Z)
7ffdb09d95f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> not<ushort>(in BitMatrix<ushort> a, in BitMatrix<ushort> dst)
7ffdb09d9608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> identity<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> dst)
7ffdb09d9620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> eval<uint>(UnaryBitLogicKind kind, in BitMatrix<uint> A, in BitMatrix<uint> Z)
7ffdb09d9728h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> not<uint>(in BitMatrix<uint> a, in BitMatrix<uint> dst)
7ffdb09d9740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> identity<uint>(in BitMatrix<uint> A, in BitMatrix<uint> dst)
7ffdb09d9758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> eval<ulong>(UnaryBitLogicKind kind, in BitMatrix<ulong> A, in BitMatrix<ulong> Z)
7ffdb09d9878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> not<ulong>(in BitMatrix<ulong> a, in BitMatrix<ulong> dst)
7ffdb09d98a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> identity<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> dst)
7ffdb09d98d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> eval<byte>(BinaryBitLogicKind kind, in BitMatrix<byte> a, in BitMatrix<byte> b, in BitMatrix<byte> dst)
7ffdb09d9ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> true<byte>(in BitMatrix<byte> a, in BitMatrix<byte> b, in BitMatrix<byte> dst)
7ffdb09d9b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> nand<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> dst)
7ffdb09d9b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> cimpl<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb09d9bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> lnot<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb09d9bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> impl<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb09d9c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> rnot<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb09d9c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> xnor<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb09d9c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> nor<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> dst)
7ffdb09d9cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> or<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> dst)
7ffdb09d9ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> xor<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb09d9d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> right<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb09d9d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> nonimpl<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb09d9d70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> left<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb09d9da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> cnonimpl<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb09d9dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> and<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> dst)
7ffdb09d9e00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> false<byte>(in BitMatrix<byte> a, in BitMatrix<byte> b, in BitMatrix<byte> dst)
7ffdb09d9e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> eval<ushort>(BinaryBitLogicKind kind, in BitMatrix<ushort> a, in BitMatrix<ushort> b, in BitMatrix<ushort> dst)
7ffdb09db0f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> true<ushort>(in BitMatrix<ushort> a, in BitMatrix<ushort> b, in BitMatrix<ushort> dst)
7ffdb09db120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> nand<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> dst)
7ffdb09db138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> cimpl<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb09db150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> lnot<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb09db168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> impl<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb09db180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> rnot<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb09db198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> xnor<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb09db1b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> nor<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> dst)
7ffdb09db1c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> or<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> dst)
7ffdb09db1e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> xor<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb09db1f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> right<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb09db210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> nonimpl<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb09db228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> left<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb09db240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> cnonimpl<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb09db258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> and<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> dst)
7ffdb09db270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> false<ushort>(in BitMatrix<ushort> a, in BitMatrix<ushort> b, in BitMatrix<ushort> dst)
7ffdb09db288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> eval<uint>(BinaryBitLogicKind kind, in BitMatrix<uint> a, in BitMatrix<uint> b, in BitMatrix<uint> dst)
7ffdb0a00090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> true<uint>(in BitMatrix<uint> a, in BitMatrix<uint> b, in BitMatrix<uint> dst)
7ffdb0a000f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> nand<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> dst)
7ffdb0a00108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> cimpl<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb0a00138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> lnot<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb0a00150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> impl<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb0a00168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> rnot<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb0a00180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> xnor<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb0a00198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> nor<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> dst)
7ffdb0a001c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> or<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> dst)
7ffdb0a001e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> xor<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb0a001f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> right<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb0a00210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> nonimpl<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb0a00228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> left<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb0a00240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> cnonimpl<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb0a00258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> and<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> dst)
7ffdb0a00270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> false<uint>(in BitMatrix<uint> a, in BitMatrix<uint> b, in BitMatrix<uint> dst)
7ffdb0a00288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> eval<ulong>(BinaryBitLogicKind kind, in BitMatrix<ulong> a, in BitMatrix<ulong> b, in BitMatrix<ulong> dst)
7ffdb0a010c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> true<ulong>(in BitMatrix<ulong> a, in BitMatrix<ulong> b, in BitMatrix<ulong> dst)
7ffdb0a01128h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> nand<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> dst)
7ffdb0a01140h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> cimpl<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb0a01158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> lnot<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb0a01170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> impl<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb0a01188h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> rnot<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb0a011a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> xnor<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb0a011b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> nor<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> dst)
7ffdb0a011d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> or<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> dst)
7ffdb0a011e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> xor<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb0a01200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> right<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb0a01218h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> nonimpl<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb0a01230h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> left<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb0a01248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> cnonimpl<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb0a01260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> and<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> dst)
7ffdb0a01278h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> false<ulong>(in BitMatrix<ulong> a, in BitMatrix<ulong> b, in BitMatrix<ulong> dst)
7ffdb0a012a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> identity<byte>(in BitMatrix<byte> a)
7ffdb0a026b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> identity<ushort>(in BitMatrix<ushort> a)
7ffdb0a02700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> identity<uint>(in BitMatrix<uint> a)
7ffdb0a02748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> identity<ulong>(in BitMatrix<ulong> a)
7ffdb0a02790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> left<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B)
7ffdb0a08528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> left<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B)
7ffdb0a085a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> left<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B)
7ffdb0a085e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> left<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B)
7ffdb0a08600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> right<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B)
7ffdb0a08780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> right<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B)
7ffdb0a087e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> right<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B)
7ffdb0a08840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> right<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B)
7ffdb0a08870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> impl<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B)
7ffdb0a09098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> impl<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B)
7ffdb0a09bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> impl<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B)
7ffdb0a0b378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> impl<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B)
7ffdb0a0b4b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> xornot<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb0a42b98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> xornot<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb0a42d30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> xornot<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb0a43210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> xornot<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb0a435d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> select<byte>(in BitMatrix<byte> a, in BitMatrix<byte> b, in BitMatrix<byte> c, in BitMatrix<byte> dst)
7ffdb0a437f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> select<ushort>(in BitMatrix<ushort> a, in BitMatrix<ushort> b, in BitMatrix<ushort> c, in BitMatrix<ushort> dst)
7ffdb0a439c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> select<uint>(in BitMatrix<uint> a, in BitMatrix<uint> b, in BitMatrix<uint> c, in BitMatrix<uint> dst)
7ffdb0a43db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> select<ulong>(in BitMatrix<ulong> a, in BitMatrix<ulong> b, in BitMatrix<ulong> c, in BitMatrix<ulong> dst)
7ffdb0a43e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix4 and(in BitMatrix4 A, in BitMatrix4 B)
7ffdae093660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix8 and(in BitMatrix8 A, in BitMatrix8 B)
7ffdae093678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix8 and(in BitMatrix8 A, in BitMatrix8 B, in BitMatrix8 dst)
7ffdae093690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix16 and(in BitMatrix16 A, in BitMatrix16 B)
7ffdae0936a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix16 and(in BitMatrix16 A, in BitMatrix16 B, in BitMatrix16 dst)
7ffdae0936c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix32 and(in BitMatrix32 A, in BitMatrix32 B)
7ffdae0936d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix32 and(in BitMatrix32 A, in BitMatrix32 B, in BitMatrix32 Z)
7ffdae0936f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 and(BitMatrix64 A, BitMatrix64 B)
7ffdae093708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix64 and(in BitMatrix64 A, in BitMatrix64 B, in BitMatrix64 dst)
7ffdae093720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix8 cimpl(in BitMatrix8 A, in BitMatrix8 B, ref BitMatrix8 Z)
7ffdae0937e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix8 cimpl(in BitMatrix8 A, in BitMatrix8 B)
7ffdae0937f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix16 cimpl(in BitMatrix16 A, in BitMatrix16 B, ref BitMatrix16 Z)
7ffdae093810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix16 cimpl(in BitMatrix16 A, in BitMatrix16 B)
7ffdae093828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix32 cimpl(in BitMatrix32 A, in BitMatrix32 B, ref BitMatrix32 Z)
7ffdae093840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix32 cimpl(in BitMatrix32 A, in BitMatrix32 B)
7ffdae093858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix64 cimpl(in BitMatrix64 A, in BitMatrix64 B, ref BitMatrix64 Z)
7ffdae093870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 cimpl(in BitMatrix64 A, in BitMatrix64 B)
7ffdae093888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix8 cnonimpl(in BitMatrix8 A, in BitMatrix8 B, in BitMatrix8 Z)
7ffdae0938b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix16 cnonimpl(in BitMatrix16 A, in BitMatrix16 B, in BitMatrix16 Z)
7ffdae0938d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix32 cnonimpl(in BitMatrix32 A, in BitMatrix32 B, in BitMatrix32 Z)
7ffdae0938e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 cnonimpl(in BitMatrix64 A, in BitMatrix64 B, in BitMatrix64 Z)
7ffdae093900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix8 cnonimpl(in BitMatrix8 A, in BitMatrix8 B)
7ffdae093918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix16 cnonimpl(in BitMatrix16 A, in BitMatrix16 B)
7ffdae093930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix32 cnonimpl(in BitMatrix32 A, in BitMatrix32 B)
7ffdae093948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 cnonimpl(BitMatrix64 A, BitMatrix64 B)
7ffdae093960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitVector4 diagonal(in BitMatrix4 A)
7ffdae0939c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitVector8 diagonal(in BitMatrix8 A)
7ffdae0939d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitVector16 diagonal(in BitMatrix16 A)
7ffdae0939f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitVector32 diagonal(in BitMatrix32 A)
7ffdae093a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitVector64 diagonal(in BitMatrix64 A)
7ffdae093a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 empty(in BitMatrix8 A)
7ffdae093a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 empty(in BitMatrix16 A)
7ffdae093a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 empty(in BitMatrix32 A)
7ffdae093a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 empty(in BitMatrix64 A)
7ffdae093a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ValueGraph<byte> graph(BitMatrix8 A)
7ffdae093b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ValueGraph<byte> graph(BitMatrix16 A)
7ffdae093b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ValueGraph<byte> graph(BitMatrix32 A)
7ffdae093b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ValueGraph<byte> graph(BitMatrix64 A)
7ffdae093b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix8 hprod(in BitMatrix8 a, in BitMatrix8 b, ref BitMatrix8 dst)
7ffdae098018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix16 hprod(in BitMatrix16 a, in BitMatrix16 b, ref BitMatrix16 dst)
7ffdae098030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix32 hprod(in BitMatrix32 a, in BitMatrix32 b, ref BitMatrix32 dst)
7ffdae098048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix64 hprod(in BitMatrix64 A, in BitMatrix64 B, ref BitMatrix64 dst)
7ffdae098060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix4 identity(N4 n)
7ffdae0980a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix8 identity(N8 n)
7ffdae0980c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix16 identity(N16 n)
7ffdae0980d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix32 identity(N32 n)
7ffdae0980f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 identity(N64 n)
7ffdae098108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix8 impl(in BitMatrix8 A, in BitMatrix8 B, in BitMatrix8 Z)
7ffdae0981c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix16 impl(in BitMatrix16 A, in BitMatrix16 B, in BitMatrix16 Z)
7ffdae0981e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix32 impl(in BitMatrix32 A, in BitMatrix32 B, in BitMatrix32 Z)
7ffdae0981f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 impl(BitMatrix64 A, BitMatrix64 B, BitMatrix64 Z)
7ffdae098210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitVector4 mul(BitMatrix4 A, BitVector4 x)
7ffdae0983c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitVector8 mul(in BitMatrix8 A, in BitVector8 B)
7ffdae0983d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix4 mul(in BitMatrix4 A, in BitMatrix4 B, ref BitMatrix4 Z)
7ffdae0983f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix8 mul(in BitMatrix8 A, in BitMatrix8 B)
7ffdae098438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitVector16 mul(in BitMatrix16 A, in BitVector16 x)
7ffdae098450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix16 mul(in BitMatrix16 A, in BitMatrix16 B)
7ffdae098468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix32 mul(ref BitMatrix32 A, in BitMatrix32 B)
7ffdae098480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix32 mul(BitMatrix32 A, in BitMatrix32 B)
7ffdae098498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitVector32 mul(in BitMatrix32 A, in BitVector32 x)
7ffdae0984b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 mul(ref BitMatrix64 A, BitMatrix64 B)
7ffdae0984c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 mul(BitMatrix64 A, BitMatrix64 B)
7ffdae0984e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitVector64 mul(BitMatrix64 A, BitVector64 B)
7ffdae0984f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix8 nand(in BitMatrix8 A, in BitMatrix8 B, in BitMatrix8 Z)
7ffdae098588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix16 nand(in BitMatrix16 A, in BitMatrix16 B, in BitMatrix16 Z)
7ffdae0985a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix32 nand(in BitMatrix32 A, in BitMatrix32 B, in BitMatrix32 Z)
7ffdae0985b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix64 nand(in BitMatrix64 A, in BitMatrix64 B, in BitMatrix64 Z)
7ffdae0985d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<N8,byte> natural(in BitMatrix8 A)
7ffdae0985e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<N16,byte> natural(in BitMatrix16 A)
7ffdae098600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<N32,byte> natural(in BitMatrix32 A)
7ffdae098618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<N64,byte> natural(in BitMatrix64 A)
7ffdae098630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix8 nonimpl(in BitMatrix8 A, in BitMatrix8 B, ref BitMatrix8 Z)
7ffdae0986c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix8 nonimpl(in BitMatrix8 A, in BitMatrix8 B)
7ffdae0986d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix16 nonimpl(in BitMatrix16 A, in BitMatrix16 B, ref BitMatrix16 Z)
7ffdae0986f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix16 nonimpl(in BitMatrix16 A, in BitMatrix16 B)
7ffdae098708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix32 nonimpl(in BitMatrix32 A, in BitMatrix32 B, ref BitMatrix32 Z)
7ffdae098720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix32 nonimpl(in BitMatrix32 A, in BitMatrix32 B)
7ffdae098738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix64 nonimpl(in BitMatrix64 A, in BitMatrix64 B, ref BitMatrix64 Z)
7ffdae098750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 nonimpl(in BitMatrix64 A, in BitMatrix64 B)
7ffdae098768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix8 nor(in BitMatrix8 A, in BitMatrix8 B, in BitMatrix8 Z)
7ffdae098798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix4 nor(in BitMatrix4 A, in BitMatrix4 B)
7ffdae0987b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix8 nor(in BitMatrix8 A, in BitMatrix8 B)
7ffdae0987c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix16 nor(in BitMatrix16 A, in BitMatrix16 B, in BitMatrix16 Z)
7ffdae0987e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix16 nor(in BitMatrix16 A, in BitMatrix16 B)
7ffdae0987f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix32 nor(in BitMatrix32 A, in BitMatrix32 B, in BitMatrix32 Z)
7ffdae098810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix32 nor(in BitMatrix32 A, in BitMatrix32 B)
7ffdae098828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 nor(in BitMatrix64 A, in BitMatrix64 B, in BitMatrix64 Z)
7ffdae098840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 nor(in BitMatrix64 A, in BitMatrix64 B)
7ffdae098858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix4 not(in BitMatrix4 A)
7ffdae0988a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix8 not(in BitMatrix8 A)
7ffdae0988b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix8 not(in BitMatrix8 A, ref BitMatrix8 Z)
7ffdae0988d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix16 not(in BitMatrix16 A)
7ffdae0988e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix16 not(in BitMatrix16 A, ref BitMatrix16 Z)
7ffdae098900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix32 not(in BitMatrix32 A)
7ffdae098918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix32 not(in BitMatrix32 A, ref BitMatrix32 Z)
7ffdae098930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 not(BitMatrix64 A)
7ffdae098948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix64 not(BitMatrix64 A, ref BitMatrix64 Z)
7ffdae098960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix4 or(in BitMatrix4 A, in BitMatrix4 B)
7ffdae0989d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix8 or(in BitMatrix8 A, in BitMatrix8 B)
7ffdae0989f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix16 or(in BitMatrix16 A, in BitMatrix16 B, ref BitMatrix16 Z)
7ffdae098a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix16 or(in BitMatrix16 A, in BitMatrix16 B)
7ffdae098a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix32 or(in BitMatrix32 A, in BitMatrix32 B, ref BitMatrix32 Z)
7ffdae098a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix32 or(in BitMatrix32 A, in BitMatrix32 B)
7ffdae098a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix64 or(in BitMatrix64 A, in BitMatrix64 B, ref BitMatrix64 Z)
7ffdae098a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 or(BitMatrix64 A, BitMatrix64 B)
7ffdae098a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix16 permute(in NatPerm<N16> perm, in BitMatrix16 A)
7ffdae098ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix32 permute(in NatPerm<N32> perm, in BitMatrix32 A)
7ffdae098ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 permute(NatPerm<N64> perm, BitMatrix64 A)
7ffdae098ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 permute(NatPerm<N64> spec)
7ffdae098af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop(in BitMatrix8 A)
7ffdae098b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop(in BitMatrix16 A)
7ffdae098b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop(in BitMatrix32 A)
7ffdae098b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pop(in BitMatrix64 A)
7ffdae098b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix8 premul(in NatPerm<N8> spec, in BitMatrix8 A)
7ffdae098b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix16 premul(in NatPerm<N16> spec, BitMatrix16 A)
7ffdae098b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix32 premul(in NatPerm<N32> spec, in BitMatrix32 A)
7ffdae098ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 premul(in NatPerm<N64> spec, in BitMatrix64 A)
7ffdae098bb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix4 primal(N4 n, ushort src)
7ffdae098bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix4 primal(N4 n, BitVector4[] rows)
7ffdae098be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix8 primal(N8 n, Span<byte> src)
7ffdae098c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix8 primal(N8 n, uint lo, uint hi)
7ffdae098c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix8 primal(N8 n, ulong src)
7ffdae098c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix16 primal(N16 n, Span<ushort> src)
7ffdae098c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix16 primal(N16 n, ReadOnlySpan<byte> src)
7ffdae098c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix32 primal(N32 n, uint[] src)
7ffdae098c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 primal(N64 n, Span<ulong> src)
7ffdae098ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 primal(N64 n, ReadOnlySpan<byte> src)
7ffdae098cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix8 primal(N8 n8, byte row0, byte row1, byte row2, byte row3, byte row4, byte row5, byte row6, byte row7)
7ffdae098cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void rowswap(in BitMatrix16 A, uint i, uint j)
7ffdae098d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void rowswap(in BitMatrix32 A, uint i, uint j)
7ffdae098d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void rowswap(in BitMatrix64 A, uint i, uint j)
7ffdae098d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix8 select(in BitMatrix8 A, in BitMatrix8 B, in BitMatrix8 C, in BitMatrix8 Z)
7ffdae098e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix16 select(in BitMatrix16 A, in BitMatrix16 B, in BitMatrix16 C, in BitMatrix16 Z)
7ffdae098e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix32 select(in BitMatrix32 A, in BitMatrix32 B, in BitMatrix32 C, in BitMatrix32 Z)
7ffdae098e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix64 select(in BitMatrix64 A, in BitMatrix64 B, in BitMatrix64 C, in BitMatrix64 Z)
7ffdae098e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc(in BitMatrix8 a)
7ffdae098eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc(in BitMatrix8 a, in BitMatrix8 mask)
7ffdae098ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc(in BitMatrix16 a)
7ffdae098ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc(in BitMatrix16 a, in BitMatrix16 mask)
7ffdae098f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc(in BitMatrix32 a)
7ffdae098f18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc(in BitMatrix32 a, in BitMatrix32 mask)
7ffdae098f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc(in BitMatrix64 a)
7ffdae098f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc(in BitMatrix64 a, in BitMatrix64 mask)
7ffdae098f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz(in BitMatrix8 A)
7ffdae098fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz(in BitMatrix8 A, in BitMatrix8 M)
7ffdae098fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz(in BitMatrix16 A)
7ffdae098fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz(in BitMatrix16 A, in BitMatrix16 M)
7ffdae098ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz(in BitMatrix32 A)
7ffdae099008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz(in BitMatrix64 A)
7ffdae099038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz(in BitMatrix64 A, in BitMatrix64 M)
7ffdae099050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<N16,N8,uint> transpose(in BitMatrix<N8,N16,uint> A)
7ffdae099068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N8,Bit32> unpack32(in BitMatrix8 A, in Matrix<N8,Bit32> Z)
7ffdae099278h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N8,Bit32> unpack32(in BitMatrix<byte> A, in Matrix<N8,Bit32> Z)
7ffdae099290h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N16,Bit32> unpack32(in BitMatrix16 A, in Matrix<N16,Bit32> Z)
7ffdae0992a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N16,Bit32> unpack32(in BitMatrix<ushort> A, in Matrix<N16,Bit32> Z)
7ffdae0992c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N32,Bit32> unpack32(in BitMatrix32 A, in Matrix<N32,Bit32> Z)
7ffdae0992d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N32,Bit32> unpack32(in BitMatrix<uint> A, in Matrix<N32,Bit32> Z)
7ffdae0992f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N64,Bit32> unpack32(in BitMatrix64 A, in Matrix<N64,Bit32> Z)
7ffdae099308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N64,Bit32> unpack32(in BitMatrix<ulong> A, in Matrix<N64,Bit32> Z)
7ffdae099320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector128<byte> vload(in BitMatrix8 A)
7ffdae099338h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vload(in BitMatrix16 A)
7ffdae099350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vload(in BitMatrix32 A, uint offset)
7ffdae099368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vload(in BitMatrix64 A, uint offset)
7ffdae099380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix8 xnor(in BitMatrix8 A, in BitMatrix8 B, ref BitMatrix8 Z)
7ffdae0993b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix16 xnor(in BitMatrix16 A, in BitMatrix16 B, ref BitMatrix16 Z)
7ffdae0993c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix32 xnor(in BitMatrix32 A, in BitMatrix32 B, ref BitMatrix32 Z)
7ffdae0993e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix64 xnor(in BitMatrix64 A, in BitMatrix64 B, ref BitMatrix64 Z)
7ffdae0993f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix4 xor(in BitMatrix4 A, in BitMatrix4 B)
7ffdae099440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix8 xor(in BitMatrix8 a, in BitMatrix8 b, in BitMatrix8 dst)
7ffdae099458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix16 xor(in BitMatrix16 a, in BitMatrix16 b, in BitMatrix16 dst)
7ffdae099470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix32 xor(in BitMatrix32 a, in BitMatrix32 b, in BitMatrix32 dst)
7ffdae099488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix64 xor(in BitMatrix64 a, in BitMatrix64 b, in BitMatrix64 dst)
7ffdae0994a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> and<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B)
7ffdb0939248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> and<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B)
7ffdb0939878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> and<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B)
7ffdb0939aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> and<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B)
7ffdb0939b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<byte> and<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> dst)
7ffdb0939bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ushort> and<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> dst)
7ffdb0939c20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<uint> and<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> dst)
7ffdb0939da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ulong> and<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> dst)
7ffdb0939f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<byte> cimpl<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb093a118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ushort> cimpl<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb093a160h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<uint> cimpl<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb093a1a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ulong> cimpl<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb093a1f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> cnonimpl<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb093a268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> cnonimpl<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb093a2b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> cnonimpl<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb093a358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> cnonimpl<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb093a3b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<byte> diagonal<byte>(in BitMatrix<byte> A)
7ffdb093a508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<ushort> diagonal<ushort>(in BitMatrix<ushort> A)
7ffdb093a6d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<uint> diagonal<uint>(in BitMatrix<uint> A)
7ffdb093a790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<ulong> diagonal<ulong>(in BitMatrix<ulong> A)
7ffdb093a910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> false<byte>()
7ffdb093aaa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> false<ushort>()
7ffdb093ab20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> false<uint>()
7ffdb093ab98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> false<ulong>()
7ffdb093abc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> false<byte>(in BitMatrix<byte> A)
7ffdb093ac10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> false<ushort>(in BitMatrix<ushort> A)
7ffdb093ace8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> false<uint>(in BitMatrix<uint> A)
7ffdb093ad60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> false<ulong>(in BitMatrix<ulong> A)
7ffdb093adf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> false<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B)
7ffdb093ae38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> false<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B)
7ffdb093af10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> false<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B)
7ffdb093af58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> false<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B)
7ffdb093afd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> false<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb093b030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> false<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb093b090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> false<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb093b0d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> false<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb093b168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ValueGraph<byte> graph<byte>(in BitMatrix<byte> A)
7ffdb093b198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ValueGraph<ushort> graph<ushort>(in BitMatrix<ushort> A)
7ffdb093b258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ValueGraph<uint> graph<uint>(in BitMatrix<uint> A)
7ffdb093b720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ValueGraph<ulong> graph<ulong>(in BitMatrix<ulong> A)
7ffdb093bbb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<byte> hprod<byte>(in BitMatrix<byte> a, in BitMatrix<byte> b, ref BitMatrix<byte> dst)
7ffdb0960330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ushort> hprod<ushort>(in BitMatrix<ushort> a, in BitMatrix<ushort> b, ref BitMatrix<ushort> dst)
7ffdb0960678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<uint> hprod<uint>(in BitMatrix<uint> a, in BitMatrix<uint> b, ref BitMatrix<uint> dst)
7ffdb0960c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ulong> hprod<ulong>(in BitMatrix<ulong> a, in BitMatrix<ulong> b, ref BitMatrix<ulong> dst)
7ffdb09610c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<byte> identity<byte>(in BitMatrix<byte> A)
7ffdb0961368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ushort> identity<ushort>(in BitMatrix<ushort> A)
7ffdb0961398h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<uint> identity<uint>(in BitMatrix<uint> A)
7ffdb09613f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ulong> identity<ulong>(in BitMatrix<ulong> A)
7ffdb0961458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<byte> identity<byte>(in BitMatrix<byte> A, in BitMatrix<byte> Z)
7ffdb0961488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ushort> identity<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> Z)
7ffdb0961968h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<uint> identity<uint>(in BitMatrix<uint> A, in BitMatrix<uint> Z)
7ffdb0961a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ulong> identity<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> Z)
7ffdb0961ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> impl<byte>(BitMatrix<byte> A, BitMatrix<byte> B)
7ffdb0961bd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> impl<ushort>(BitMatrix<ushort> A, BitMatrix<ushort> B)
7ffdb0961cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> impl<uint>(BitMatrix<uint> A, BitMatrix<uint> B)
7ffdb0961e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> impl<ulong>(BitMatrix<ulong> A, BitMatrix<ulong> B)
7ffdb0962010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> impl<byte>(BitMatrix<byte> A, BitMatrix<byte> B, BitMatrix<byte> Z)
7ffdb09621d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> impl<ushort>(BitMatrix<ushort> A, BitMatrix<ushort> B, BitMatrix<ushort> Z)
7ffdb09622e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> impl<uint>(BitMatrix<uint> A, BitMatrix<uint> B, BitMatrix<uint> Z)
7ffdb0962400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> impl<ulong>(BitMatrix<ulong> A, BitMatrix<ulong> B, BitMatrix<ulong> Z)
7ffdb0962580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> left<byte>(BitMatrix<byte> A, BitMatrix<byte> B)
7ffdb09626d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> left<ushort>(BitMatrix<ushort> A, BitMatrix<ushort> B)
7ffdb0962718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> left<uint>(BitMatrix<uint> A, BitMatrix<uint> B)
7ffdb0962778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> left<ulong>(BitMatrix<ulong> A, BitMatrix<ulong> B)
7ffdb09627a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> left<byte>(BitMatrix<byte> A, BitMatrix<byte> B, BitMatrix<byte> Z)
7ffdb09627f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> left<ushort>(BitMatrix<ushort> A, BitMatrix<ushort> B, BitMatrix<ushort> Z)
7ffdb0962880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> left<uint>(BitMatrix<uint> A, BitMatrix<uint> B, BitMatrix<uint> Z)
7ffdb0962910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> left<ulong>(BitMatrix<ulong> A, BitMatrix<ulong> B, BitMatrix<ulong> Z)
7ffdb09629a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<byte> lnot<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb0962a48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<byte> not<byte>(in BitMatrix<byte> A, in BitMatrix<byte> Z)
7ffdb0962a60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ushort> lnot<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb0962b50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ushort> not<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> Z)
7ffdb0962bb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<uint> lnot<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb0962bf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<uint> not<uint>(in BitMatrix<uint> A, in BitMatrix<uint> Z)
7ffdb0962c28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ulong> lnot<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb0962d00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ulong> not<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> Z)
7ffdb0962d30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> load<byte>(byte[] src)
7ffdb0962dd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> load<ushort>(ushort[] src)
7ffdb0962e68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> load<uint>(uint[] src)
7ffdb0962e98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> load<ulong>(ulong[] src)
7ffdb0962f10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> load<byte>(Span<byte> src)
7ffdb0962f70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> load<ushort>(Span<ushort> src)
7ffdb0963000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> load<uint>(Span<uint> src)
7ffdb0963018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> load<ulong>(Span<ulong> src)
7ffdb0963078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> load<byte>(SpanBlock256<byte> src)
7ffdb09630c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> load<ushort>(SpanBlock256<ushort> src)
7ffdb0963120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> load<uint>(SpanBlock256<uint> src)
7ffdb0963168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> load<ulong>(SpanBlock256<ulong> src)
7ffdb0963180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<byte> nand<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb09631b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ushort> nand<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb0963210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<uint> nand<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb09632a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ulong> nand<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb0963360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<byte> nonimpl<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb09636a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ushort> nonimpl<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb0963ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<uint> nonimpl<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb0968570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ulong> nonimpl<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb0969050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> nor<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb0969b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> nor<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb096a0d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> nor<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb096ad00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> nor<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb096bb58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> not<byte>(BitMatrix<byte> a)
7ffdb09a0540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> not<ushort>(BitMatrix<ushort> a)
7ffdb09a0ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> not<uint>(BitMatrix<uint> a)
7ffdb09a1470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> not<ulong>(BitMatrix<ulong> a)
7ffdb09a1ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<byte> or<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb09a2f28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ushort> or<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb09a30a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<uint> or<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb09a3270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ulong> or<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb09a3480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> right<byte>(BitMatrix<byte> A, BitMatrix<byte> B)
7ffdb09a3690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> right<ushort>(BitMatrix<ushort> A, BitMatrix<ushort> B)
7ffdb09a3708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> right<uint>(BitMatrix<uint> A, BitMatrix<uint> B)
7ffdb09a3720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> right<ulong>(BitMatrix<ulong> A, BitMatrix<ulong> B)
7ffdb09a3738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> right<byte>(BitMatrix<byte> A, BitMatrix<byte> B, BitMatrix<byte> Z)
7ffdb09a37b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> right<ushort>(BitMatrix<ushort> A, BitMatrix<ushort> B, BitMatrix<ushort> Z)
7ffdb09a3870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> right<uint>(BitMatrix<uint> A, BitMatrix<uint> B, BitMatrix<uint> Z)
7ffdb09a3930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> right<ulong>(BitMatrix<ulong> A, BitMatrix<ulong> B, BitMatrix<ulong> Z)
7ffdb09a3978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<byte> rnot<byte>(in BitMatrix<byte> A, in BitMatrix<byte> b, in BitMatrix<byte> dst)
7ffdb09a3a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ushort> rnot<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> b, in BitMatrix<ushort> dst)
7ffdb09a3b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<uint> rnot<uint>(in BitMatrix<uint> A, in BitMatrix<uint> b, in BitMatrix<uint> dst)
7ffdb09a3c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ulong> rnot<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> b, in BitMatrix<ulong> dst)
7ffdb09a3e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<byte> select<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> C, in BitMatrix<byte> Z)
7ffdb09a8000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ushort> select<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> C, in BitMatrix<ushort> Z)
7ffdb09a8150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<uint> select<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> C, in BitMatrix<uint> Z)
7ffdb09a8438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ulong> select<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> C, in BitMatrix<ulong> Z)
7ffdb09a8810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<byte>(in BitMatrix<byte> a)
7ffdb09a8ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ushort>(in BitMatrix<ushort> a)
7ffdb09a8c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<uint>(in BitMatrix<uint> a)
7ffdb09a8db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ulong>(in BitMatrix<ulong> a)
7ffdb09a8f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<byte>(in BitMatrix<byte> a, in BitMatrix<byte> mask)
7ffdb09a8ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ushort>(in BitMatrix<ushort> a, in BitMatrix<ushort> mask)
7ffdb09a9110h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<uint>(in BitMatrix<uint> a, in BitMatrix<uint> mask)
7ffdb09a9260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testc<ulong>(in BitMatrix<ulong> a, in BitMatrix<ulong> mask)
7ffdb09a93e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<byte>(in BitMatrix<byte> A)
7ffdb09a9578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ushort>(in BitMatrix<ushort> A)
7ffdb09a9668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<uint>(in BitMatrix<uint> A)
7ffdb09a97a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ulong>(in BitMatrix<ulong> A)
7ffdb09a9b00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<byte>(in BitMatrix<byte> A, in BitMatrix<byte> M)
7ffdb09aa058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> M)
7ffdb09aa328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<uint>(in BitMatrix<uint> A, in BitMatrix<uint> M)
7ffdb09aa880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit testz<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> M)
7ffdb09aabc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<byte> true<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb09aadd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ushort> true<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb09aae50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<uint> true<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb09aaf40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ulong> true<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb09aaf88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N16,byte> unpack32<byte>(in BitMatrix16 src, in Matrix<N16,byte> dst)
7ffdb09ab048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N16,ushort> unpack32<ushort>(in BitMatrix16 src, in Matrix<N16,ushort> dst)
7ffdb09ab9a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N16,uint> unpack32<uint>(in BitMatrix16 src, in Matrix<N16,uint> dst)
7ffdb09d0030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N16,ulong> unpack32<ulong>(in BitMatrix16 src, in Matrix<N16,ulong> dst)
7ffdb09d0678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N8,byte> unpack32<byte>(in BitMatrix8 src, in Matrix<N8,byte> dst)
7ffdb09d0bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N8,ushort> unpack32<ushort>(in BitMatrix8 src, in Matrix<N8,ushort> dst)
7ffdb09d1068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N8,uint> unpack32<uint>(in BitMatrix8 src, in Matrix<N8,uint> dst)
7ffdb09d14d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N8,ulong> unpack32<ulong>(in BitMatrix8 src, in Matrix<N8,ulong> dst)
7ffdb09d1998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N32,byte> unpack32<byte>(in BitMatrix32 src, in Matrix<N32,byte> dst)
7ffdb09d1ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N32,ushort> unpack32<ushort>(in BitMatrix32 src, in Matrix<N32,ushort> dst)
7ffdb09d23a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N32,uint> unpack32<uint>(in BitMatrix32 src, in Matrix<N32,uint> dst)
7ffdb09d2970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N32,ulong> unpack32<ulong>(in BitMatrix32 src, in Matrix<N32,ulong> dst)
7ffdb09d2f70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N64,byte> unpack32<byte>(in BitMatrix64 src, in Matrix<N64,byte> dst)
7ffdb09d3570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N64,ushort> unpack32<ushort>(in BitMatrix64 src, in Matrix<N64,ushort> dst)
7ffdb09d3ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N64,uint> unpack32<uint>(in BitMatrix64 src, in Matrix<N64,uint> dst)
7ffdb09d3fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref Matrix<N64,ulong> unpack32<ulong>(in BitMatrix64 src, in Matrix<N64,ulong> dst)
7ffdb09d8528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<byte> xnor<byte>(in BitMatrix<byte> A, in BitMatrix<byte> B, in BitMatrix<byte> Z)
7ffdb09d8960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ushort> xnor<ushort>(in BitMatrix<ushort> A, in BitMatrix<ushort> B, in BitMatrix<ushort> Z)
7ffdb09d89f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<uint> xnor<uint>(in BitMatrix<uint> A, in BitMatrix<uint> B, in BitMatrix<uint> Z)
7ffdb09d8a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitMatrix<ulong> xnor<ulong>(in BitMatrix<ulong> A, in BitMatrix<ulong> B, in BitMatrix<ulong> Z)
7ffdb09d8b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<byte> xor<byte>(BitMatrix<byte> A, BitMatrix<byte> B, BitMatrix<byte> Z)
7ffdb09d8c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ushort> xor<ushort>(BitMatrix<ushort> A, BitMatrix<ushort> B, BitMatrix<ushort> Z)
7ffdb09d8d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<uint> xor<uint>(BitMatrix<uint> A, BitMatrix<uint> B, BitMatrix<uint> Z)
7ffdb09d8ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitMatrix<ulong> xor<ulong>(BitMatrix<ulong> A, BitMatrix<ulong> B, BitMatrix<ulong> Z)
7ffdb09d90e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eval(BinaryBitLogicKind kind, bit a, bit b)
7ffdae090dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BinaryOp<bit> lookup(BinaryBitLogicKind kind)
7ffdae090de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eval(TernaryBitLogicKind kind, bit a, bit b, bit c)
7ffdae090df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# TernaryOp<bit> lookup(TernaryBitLogicKind kind)
7ffdae090e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit eval(UnaryBitLogicKind kind, bit a)
7ffdae090e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# UnaryOp<bit> lookup(UnaryBitLogicKind kind)
7ffdae090e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit Nand_kind(bit a, bit b)
7ffdae07b258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit Xor_kind(bit a, bit b)
7ffdae07b270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit false(bit a, bit b)
7ffdae07b438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit true(bit a, bit b)
7ffdae07b450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit and(bit a, bit b)
7ffdae07b468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nand(bit a, bit b)
7ffdae07b480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit or(bit a, bit b)
7ffdae07b498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nor(bit a, bit b)
7ffdae07b4b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit xor(bit a, bit b)
7ffdae07b4c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit xnor(bit a, bit b)
7ffdae07b4e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit impl(bit a, bit b)
7ffdae07b4f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit nonimpl(bit a, bit b)
7ffdae07b510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit left(bit a, bit b)
7ffdae07b528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit right(bit a, bit b)
7ffdae07b540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit lnot(bit a, bit b)
7ffdae07b558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit rnot(bit a, bit b)
7ffdae07b570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit cimpl(bit a, bit b)
7ffdae07b588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit cnonimpl(bit a, bit b)
7ffdae07b5a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit select(bit a, bit b, bit c)
7ffdae07b5d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit false(bit a, bit b, bit c)
7ffdae07b5e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit true(bit a, bit b, bit c)
7ffdae07b600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f01(bit a, bit b, bit c)
7ffdae07b618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f02(bit a, bit b, bit c)
7ffdae07b630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f03(bit a, bit b, bit c)
7ffdae07b648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f04(bit a, bit b, bit c)
7ffdae07b660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f05(bit a, bit b, bit c)
7ffdae07b678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f06(bit a, bit b, bit c)
7ffdae07b690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f07(bit a, bit b, bit c)
7ffdae07b6a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f08(bit a, bit b, bit c)
7ffdae07b6c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f09(bit a, bit b, bit c)
7ffdae07b6d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f0a(bit a, bit b, bit c)
7ffdae07b6f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f0b(bit a, bit b, bit c)
7ffdae07b708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f0c(bit a, bit b, bit c)
7ffdae07b720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f0d(bit a, bit b, bit c)
7ffdae07b738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f0e(bit a, bit b, bit c)
7ffdae07b750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f0f(bit a, bit b, bit c)
7ffdae07b768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f10(bit a, bit b, bit c)
7ffdae07b780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f11(bit a, bit b, bit c)
7ffdae07b798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f12(bit a, bit b, bit c)
7ffdae07b7b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f13(bit a, bit b, bit c)
7ffdae07b7c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f14(bit a, bit b, bit c)
7ffdae07b7e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f15(bit a, bit b, bit c)
7ffdae07b7f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f16(bit a, bit b, bit c)
7ffdae07b810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f17(bit a, bit b, bit c)
7ffdae07b828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f18(bit a, bit b, bit c)
7ffdae07b840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f19(bit a, bit b, bit c)
7ffdae07b858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f1a(bit a, bit b, bit c)
7ffdae07b870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f1b(bit a, bit b, bit c)
7ffdae07b888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f1c(bit a, bit b, bit c)
7ffdae07b8a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f1d(bit a, bit b, bit c)
7ffdae07b8b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f1e(bit a, bit b, bit c)
7ffdae07b8d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f1f(bit a, bit b, bit c)
7ffdae07b8e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f20(bit a, bit b, bit c)
7ffdae07b900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f21(bit a, bit b, bit c)
7ffdae07b918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f22(bit a, bit b, bit c)
7ffdae07b930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f23(bit a, bit b, bit c)
7ffdae07b948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f24(bit a, bit b, bit c)
7ffdae07b960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f25(bit a, bit b, bit c)
7ffdae07b978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f26(bit a, bit b, bit c)
7ffdae07b990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f27(bit a, bit b, bit c)
7ffdae07b9a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f28(bit a, bit b, bit c)
7ffdae07b9c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f29(bit a, bit b, bit c)
7ffdae07b9d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f2a(bit a, bit b, bit c)
7ffdae07b9f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f2b(bit a, bit b, bit c)
7ffdae07ba08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f2c(bit a, bit b, bit c)
7ffdae07ba20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f2d(bit a, bit b, bit c)
7ffdae07ba38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f2e(bit a, bit b, bit c)
7ffdae07ba50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f2f(bit a, bit b, bit c)
7ffdae090000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f30(bit a, bit b, bit c)
7ffdae090018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f31(bit a, bit b, bit c)
7ffdae090030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f32(bit a, bit b, bit c)
7ffdae090048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f33(bit a, bit b, bit c)
7ffdae090060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f34(bit a, bit b, bit c)
7ffdae090078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f35(bit a, bit b, bit c)
7ffdae090090h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f36(bit a, bit b, bit c)
7ffdae0900a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f37(bit a, bit b, bit c)
7ffdae0900c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f38(bit a, bit b, bit c)
7ffdae0900d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f39(bit a, bit b, bit c)
7ffdae0900f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f3a(bit a, bit b, bit c)
7ffdae090108h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f3b(bit a, bit b, bit c)
7ffdae090120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f3c(bit a, bit b, bit c)
7ffdae090138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f3d(bit a, bit b, bit c)
7ffdae090150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f3e(bit a, bit b, bit c)
7ffdae090168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f3f(bit a, bit b, bit c)
7ffdae090180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f40(bit a, bit b, bit c)
7ffdae090198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f41(bit a, bit b, bit c)
7ffdae0901b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f42(bit a, bit b, bit c)
7ffdae0901c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f43(bit a, bit b, bit c)
7ffdae0901e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f44(bit a, bit b, bit c)
7ffdae0901f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f45(bit a, bit b, bit c)
7ffdae090210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f46(bit a, bit b, bit c)
7ffdae090228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f47(bit a, bit b, bit c)
7ffdae090240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f48(bit a, bit b, bit c)
7ffdae090258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f49(bit a, bit b, bit c)
7ffdae090270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f4a(bit a, bit b, bit c)
7ffdae090288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f4b(bit a, bit b, bit c)
7ffdae0902a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f4c(bit a, bit b, bit c)
7ffdae0902b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f4d(bit a, bit b, bit c)
7ffdae0902d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f4e(bit a, bit b, bit c)
7ffdae0902e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f4f(bit a, bit b, bit c)
7ffdae090300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f50(bit a, bit b, bit c)
7ffdae090318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f51(bit a, bit b, bit c)
7ffdae090330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f52(bit a, bit b, bit c)
7ffdae090348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f53(bit a, bit b, bit c)
7ffdae090360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f54(bit a, bit b, bit c)
7ffdae090378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f55(bit a, bit b, bit c)
7ffdae090390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f56(bit a, bit b, bit c)
7ffdae0903a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f57(bit a, bit b, bit c)
7ffdae0903c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f58(bit a, bit b, bit c)
7ffdae0903d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f59(bit a, bit b, bit c)
7ffdae0903f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f5a(bit a, bit b, bit c)
7ffdae090408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f5b(bit a, bit b, bit c)
7ffdae090420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f5c(bit a, bit b, bit c)
7ffdae090438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f5d(bit a, bit b, bit c)
7ffdae090450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f5e(bit a, bit b, bit c)
7ffdae090468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit f5f(bit a, bit b, bit c)
7ffdae090480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit not(bit a)
7ffdae090618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit identity(bit a)
7ffdae090630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit false(bit a)
7ffdae090648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit true(bit a)
7ffdae090660h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte pack(Span<Bit32> src, N8 count)
7ffdae07a790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort pack(Span<Bit32> src, N16 count)
7ffdae07a7a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pack(Span<Bit32> src, N32 count)
7ffdae07a7c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong pack(Span<Bit32> src, N64 count)
7ffdae07a7d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte pack<byte>(Span<Bit32> src, byte t)
7ffdb07993c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort pack<ushort>(Span<Bit32> src, ushort t)
7ffdb0799980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint pack<uint>(Span<Bit32> src, uint t)
7ffdb0799d70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong pack<ulong>(Span<Bit32> src, ulong t)
7ffdb079a238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from(byte src)
7ffdae07a4a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from(ushort src)
7ffdae07a4c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from(uint src)
7ffdae07a4d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from(ulong src)
7ffdae07a4f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitSpan32 fill(byte src, in BitSpan32 dst)
7ffdae07a508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitSpan32 fill(ushort src, in BitSpan32 dst)
7ffdae07a520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitSpan32 fill(uint src, in BitSpan32 dst)
7ffdae07a538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitSpan32 fill(ulong src, in BitSpan32 dst)
7ffdae07a550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Span<uint> extract(in BitSpan32 src, int offset, int count)
7ffdae07a568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte extract8(in BitSpan32 src, int offset)
7ffdae07a580h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort extract16(in BitSpan32 src, int offset)
7ffdae07a598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint extract32(in BitSpan32 src, int offset)
7ffdae07a5b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong extract64(in BitSpan32 src, int offset)
7ffdae07a5c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 alloc(int len)
7ffdae079f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 and(BitSpan32 x, BitSpan32 y, BitSpan32 z)
7ffdae079f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 and(BitSpan32 x, BitSpan32 y)
7ffdae079f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 or(BitSpan32 x, BitSpan32 y, BitSpan32 z)
7ffdae079f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 or(BitSpan32 x, BitSpan32 y)
7ffdae079f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 xor(BitSpan32 x, BitSpan32 y, BitSpan32 z)
7ffdae079f98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 xor(BitSpan32 x, BitSpan32 y)
7ffdae079fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 not(BitSpan32 x, BitSpan32 z)
7ffdae079fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 not(BitSpan32 x)
7ffdae079fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 select(BitSpan32 a, BitSpan32 b, BitSpan32 c, BitSpan32 z)
7ffdae079ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 select(BitSpan32 a, BitSpan32 b, BitSpan32 c)
7ffdae07a010h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 sll(BitSpan32 a, int offset, BitSpan32 z)
7ffdae07a028h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 same(BitSpan32 a, BitSpan32 b)
7ffdae07a040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int pop(BitSpan32 src)
7ffdae07a058h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitSpan32 clear(in BitSpan32 src)
7ffdae07a0b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitSpan32 clear(in BitSpan32 src, int maxbits)
7ffdae07a0d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitSpan32 clear(in BitSpan32 src, int i0, int i1)
7ffdae07a0e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 concat(in BitSpan32 head, in BitSpan32 tail)
7ffdae07a100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string format(in BitSpan32 src, Nullable<BitFormat> fmt)
7ffdae07a1a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load(Span<Bit32> src)
7ffdae07a220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load(Bit32[] src)
7ffdae07a238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load(ref Bit32 bits, int count)
7ffdae07a250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load(ReadOnlySpan<byte> packed)
7ffdae07a268h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int lsb(in BitSpan32 src)
7ffdae07a2c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int msb(in BitSpan32 src)
7ffdae07a2e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 parse(string src)
7ffdae07a2f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 replicate(in BitSpan32 src, int count)
7ffdae07a310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitSpan32 replicate(in BitSpan32 src, in BitSpan32 dst)
7ffdae07a328h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitSpan32 reverse(in BitSpan32 src)
7ffdae07a340h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte slice(in BitSpan32 src, W8 w, int offset, int count)
7ffdae07a3a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort slice(in BitSpan32 src, W16 w, int offset, int count)
7ffdae07a3b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint slice(in BitSpan32 src, W32 w, int offset, int count)
7ffdae07a3d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong slice(in BitSpan32 src, W64 w, int offset, int count)
7ffdae07a3e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte slice(in BitSpan32 src, W8i w, int offset, int count)
7ffdae07a400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short slice(in BitSpan32 src, W16i w, int offset, int count)
7ffdae07a418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int slice(in BitSpan32 src, W32i w, int offset, int count)
7ffdae07a430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long slice(in BitSpan32 src, W64i w, int offset, int count)
7ffdae07a448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 trim(in BitSpan32 src)
7ffdae07a460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 truncate(in BitSpan32 src, int maxbits)
7ffdae07a478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte bitslice<byte>(in BitSpan32 src, int offset)
7ffdb079b3d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort bitslice<ushort>(in BitSpan32 src, int offset)
7ffdb079bc60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitslice<uint>(in BitSpan32 src, int offset)
7ffdb079bdc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bitslice<ulong>(in BitSpan32 src, int offset)
7ffdb079bf30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte bitslice<byte>(in BitSpan32 src)
7ffdb07d0168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort bitslice<ushort>(in BitSpan32 src)
7ffdb07d0210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitslice<uint>(in BitSpan32 src)
7ffdb07d0360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bitslice<ulong>(in BitSpan32 src)
7ffdb07d04b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte bitslice<byte>(in BitSpan32 src, int offset, int count)
7ffdb07d0960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort bitslice<ushort>(in BitSpan32 src, int offset, int count)
7ffdb07d0af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint bitslice<uint>(in BitSpan32 src, int offset, int count)
7ffdb07d0be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong bitslice<ulong>(in BitSpan32 src, int offset, int count)
7ffdb07d0d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte extract<byte>(in BitSpan32 src, int offset)
7ffdb07d1698h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort extract<ushort>(in BitSpan32 src, int offset)
7ffdb07d1740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint extract<uint>(in BitSpan32 src, int offset)
7ffdb07d17a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong extract<ulong>(in BitSpan32 src, int offset)
7ffdb07d1818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitSpan32 fill<byte>(byte src, in BitSpan32 dst)
7ffdb07d18f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitSpan32 fill<sbyte>(sbyte src, in BitSpan32 dst)
7ffdb07d19b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitSpan32 fill<ushort>(ushort src, in BitSpan32 dst)
7ffdb07d1b30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitSpan32 fill<short>(short src, in BitSpan32 dst)
7ffdb07d1ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitSpan32 fill<uint>(uint src, in BitSpan32 dst)
7ffdb07d1d10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitSpan32 fill<int>(int src, in BitSpan32 dst)
7ffdb07d1da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitSpan32 fill<ulong>(ulong src, in BitSpan32 dst)
7ffdb07d1ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref BitSpan32 fill<long>(long src, in BitSpan32 dst)
7ffdb07d1f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from<byte>(byte src)
7ffdb07d1fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from<sbyte>(sbyte src)
7ffdb07d2040h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from<ushort>(ushort src)
7ffdb07d20b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from<short>(short src)
7ffdb07d2118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from<uint>(uint src)
7ffdb07d2178h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from<int>(int src)
7ffdb07d22c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from<ulong>(ulong src)
7ffdb07d2418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from<long>(long src)
7ffdb07d25c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from<byte>(byte src, int maxbits)
7ffdb07d2628h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from<sbyte>(sbyte src, int maxbits)
7ffdb07d3420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from<ushort>(ushort src, int maxbits)
7ffdb07d34f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from<short>(short src, int maxbits)
7ffdb07d3510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from<uint>(uint src, int maxbits)
7ffdb07d3528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from<int>(int src, int maxbits)
7ffdb07d3540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from<ulong>(ulong src, int maxbits)
7ffdb07d3558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 from<long>(long src, int maxbits)
7ffdb07d35d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load<byte>(Span<byte> packed)
7ffdb07d3888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load<sbyte>(Span<sbyte> packed)
7ffdb07d3978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load<ushort>(Span<ushort> packed)
7ffdb07d3a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load<short>(Span<short> packed)
7ffdb07d3b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load<uint>(Span<uint> packed)
7ffdb07d3c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load<int>(Span<int> packed)
7ffdb07d3d08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load<ulong>(Span<ulong> packed)
7ffdb07d3df8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load<long>(Span<long> packed)
7ffdb07d3eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load<byte>(ReadOnlySpan<byte> packed)
7ffdb07d3fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load<sbyte>(ReadOnlySpan<sbyte> packed)
7ffdb07d83a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load<ushort>(ReadOnlySpan<ushort> packed)
7ffdb07d8480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load<short>(ReadOnlySpan<short> packed)
7ffdb07d8528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load<uint>(ReadOnlySpan<uint> packed)
7ffdb07d8618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load<int>(ReadOnlySpan<int> packed)
7ffdb07d86c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load<ulong>(ReadOnlySpan<ulong> packed)
7ffdb07d8780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan32 load<long>(ReadOnlySpan<long> packed)
7ffdb07d8840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte slice<byte>(in BitSpan32 src, int offset, int count)
7ffdb07d8900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# sbyte slice<sbyte>(in BitSpan32 src, int offset, int count)
7ffdb07d8b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort slice<ushort>(in BitSpan32 src, int offset, int count)
7ffdb07d8c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# short slice<short>(in BitSpan32 src, int offset, int count)
7ffdb07d8d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint slice<uint>(in BitSpan32 src, int offset, int count)
7ffdb07d8dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int slice<int>(in BitSpan32 src, int offset, int count)
7ffdb07d9020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong slice<ulong>(in BitSpan32 src, int offset, int count)
7ffdb07d9308h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# long slice<long>(in BitSpan32 src, int offset, int count)
7ffdb07d95a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool IsPrimalGeneric(ApiGridKind k)
7ffdae03b288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool IsFixedNatural(ApiGridKind k)
7ffdae03b2a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool IsSubGrid(ApiGridKind k)
7ffdae03b2b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# CpuCellWidth Width(ApiGridKind k)
7ffdae03b2d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ApiGridClass Category(ApiGridKind k)
7ffdae03b2e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool IsSome(ApiGridKind k)
7ffdae03b300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# string Indicator(ApiGridKind k)
7ffdae03b318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# NatKind GridClosures(Type src)
7ffdae03b330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bool IsSome(NatKind src)
7ffdae03b348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# int NonEmptyCount(NatKind src)
7ffdae03b360h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Option<ApiGridKind> GridKind(Type src)
7ffdae03b378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Option<CpuCellWidth> GridWidth(Type src)
7ffdae03b390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,byte> exchange<byte>(N256 w, N16 m, N16 n, byte t)
7ffdb0763e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,ushort> exchange<ushort>(N256 w, N16 m, N16 n, ushort t)
7ffdb0768330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,uint> exchange<uint>(N256 w, N16 m, N16 n, uint t)
7ffdb07687b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,ulong> exchange<ulong>(N256 w, N16 m, N16 n, ulong t)
7ffdb0768a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,byte> one<byte>(N16 w, N4 m, N4 n, byte t)
7ffdb0768d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,sbyte> one<sbyte>(N16 w, N4 m, N4 n, sbyte t)
7ffdb0769158h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,ushort> one<ushort>(N16 w, N4 m, N4 n, ushort t)
7ffdb0769290h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,short> one<short>(N16 w, N4 m, N4 n, short t)
7ffdb07693e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SubGrid32<N5,N5,byte> one<byte>(N32 w, N5 m, N5 n, byte t)
7ffdb07694e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SubGrid32<N5,N5,sbyte> one<sbyte>(N32 w, N5 m, N5 n, sbyte t)
7ffdb0769cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SubGrid32<N5,N5,ushort> one<ushort>(N32 w, N5 m, N5 n, ushort t)
7ffdb0769ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SubGrid32<N5,N5,short> one<short>(N32 w, N5 m, N5 n, short t)
7ffdb076a310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SubGrid32<N5,N5,uint> one<uint>(N32 w, N5 m, N5 n, uint t)
7ffdb076a640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SubGrid32<N5,N5,int> one<int>(N32 w, N5 m, N5 n, int t)
7ffdb076a700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SubGrid64<N6,N6,byte> one<byte>(N64 w, N6 m, N6 n, byte t)
7ffdb076a9d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SubGrid64<N6,N6,ushort> one<ushort>(N64 w, N6 m, N6 n, ushort t)
7ffdb076b1e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SubGrid64<N6,N6,uint> one<uint>(N64 w, N6 m, N6 n, uint t)
7ffdb076b510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SubGrid64<N6,N6,ulong> one<ulong>(N64 w, N6 m, N6 n, ulong t)
7ffdb076b810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SubGrid64<N7,N7,byte> one<byte>(N64 w, N7 m, N7 n, byte t)
7ffdb076b900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SubGrid64<N7,N7,ushort> one<ushort>(N64 w, N7 m, N7 n, ushort t)
7ffdb076be70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SubGrid64<N7,N7,uint> one<uint>(N64 w, N7 m, N7 n, uint t)
7ffdb07902d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SubGrid64<N7,N7,ulong> one<ulong>(N64 w, N7 m, N7 n, ulong t)
7ffdb0790600h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,byte> one<byte>(N64 w, N8 m, N8 n, byte t)
7ffdb07906a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,ushort> one<ushort>(N64 w, N8 m, N8 n, ushort t)
7ffdb0790810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,uint> one<uint>(N64 w, N8 m, N8 n, uint t)
7ffdb0790948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,ulong> one<ulong>(N64 w, N8 m, N8 n, ulong t)
7ffdb0790a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,byte> one<byte>(N256 w, N16 m, N16 n, byte t)
7ffdb0790b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,ushort> one<ushort>(N256 w, N16 m, N16 n, ushort t)
7ffdb0791320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,uint> one<uint>(N256 w, N16 m, N16 n, uint t)
7ffdb0791740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,ulong> one<ulong>(N256 w, N16 m, N16 n, ulong t)
7ffdb0791a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> ones<byte>(int rows, int cols, byte zero)
7ffdb0728240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> ones<ushort>(int rows, int cols, ushort zero)
7ffdb0728288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> ones<uint>(int rows, int cols, uint zero)
7ffdb07282b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> ones<ulong>(int rows, int cols, ulong zero)
7ffdb07282e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> negate<byte>(BitSpanBlocks256<byte> x)
7ffdb0728348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> negate<ushort>(BitSpanBlocks256<ushort> x)
7ffdb0728420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> negate<uint>(BitSpanBlocks256<uint> x)
7ffdb0728438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> negate<ulong>(BitSpanBlocks256<ulong> x)
7ffdb0728450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> xor<byte>(BitSpanBlocks256<byte> gx, BitSpanBlocks256<byte> gy)
7ffdb0728480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> xor<ushort>(BitSpanBlocks256<ushort> gx, BitSpanBlocks256<ushort> gy)
7ffdb0728c30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> xor<uint>(BitSpanBlocks256<uint> gx, BitSpanBlocks256<uint> gy)
7ffdb0729620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> xor<ulong>(BitSpanBlocks256<ulong> gx, BitSpanBlocks256<ulong> gy)
7ffdb0729728h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> xnor<byte>(BitSpanBlocks256<byte> gx, BitSpanBlocks256<byte> gy)
7ffdb0729818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> xnor<ushort>(BitSpanBlocks256<ushort> gx, BitSpanBlocks256<ushort> gy)
7ffdb07298d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> xnor<uint>(BitSpanBlocks256<uint> gx, BitSpanBlocks256<uint> gy)
7ffdb0729980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> xnor<ulong>(BitSpanBlocks256<ulong> gx, BitSpanBlocks256<ulong> gy)
7ffdb0729a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> or<byte>(BitSpanBlocks256<byte> gx, BitSpanBlocks256<byte> gy)
7ffdb0729b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> or<ushort>(BitSpanBlocks256<ushort> gx, BitSpanBlocks256<ushort> gy)
7ffdb0729d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> or<uint>(BitSpanBlocks256<uint> gx, BitSpanBlocks256<uint> gy)
7ffdb072a088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> or<ulong>(BitSpanBlocks256<ulong> gx, BitSpanBlocks256<ulong> gy)
7ffdb072b258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> nor<byte>(BitSpanBlocks256<byte> gx, BitSpanBlocks256<byte> gy)
7ffdb072b8e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> nor<ushort>(BitSpanBlocks256<ushort> gx, BitSpanBlocks256<ushort> gy)
7ffdb0760930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> nor<uint>(BitSpanBlocks256<uint> gx, BitSpanBlocks256<uint> gy)
7ffdb0761f68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> nor<ulong>(BitSpanBlocks256<ulong> gx, BitSpanBlocks256<ulong> gy)
7ffdb0762250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> and<byte>(BitSpanBlocks256<byte> a, BitSpanBlocks256<byte> b)
7ffdb07625c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> and<ushort>(BitSpanBlocks256<ushort> a, BitSpanBlocks256<ushort> b)
7ffdb07628c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> and<uint>(BitSpanBlocks256<uint> a, BitSpanBlocks256<uint> b)
7ffdb0762b98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> and<ulong>(BitSpanBlocks256<ulong> a, BitSpanBlocks256<ulong> b)
7ffdb0762ec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> nand<byte>(in BitSpanBlocks256<byte> a, in BitSpanBlocks256<byte> b)
7ffdb0763198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> nand<ushort>(in BitSpanBlocks256<ushort> a, in BitSpanBlocks256<ushort> b)
7ffdb0763498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> nand<uint>(in BitSpanBlocks256<uint> a, in BitSpanBlocks256<uint> b)
7ffdb07637e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> nand<ulong>(in BitSpanBlocks256<ulong> a, in BitSpanBlocks256<ulong> b)
7ffdb0763ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,ushort> create(N64 w, N16 m, N4 n, ushort x0, ushort x1, ushort x2, ushort x3)
7ffdae038960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,ulong> create(N64 w, N4 m, N16 n, ulong src)
7ffdae038978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N8,N16,ushort> create(N128 w, N8 m, N16 n, ushort x0, ushort x1, ushort x2, ushort x3, ushort x4, ushort x5, ushort x6, ushort x7)
7ffdae038990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N16,N8,byte> create(N128 w, N16 m, N8 n, byte x0, byte x1, byte x2, byte x3, byte x4, byte x5, byte x6, byte x7, byte x8, byte x9, byte xA, byte xB, byte xC, byte xD, byte xE, byte xF)
7ffdae0389a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N4,N32,uint> create(N128 w, N4 m, N32 n, uint x0, uint x1, uint x2, uint x3)
7ffdae0389c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N2,N64,ulong> create(N128 w, N2 m, N64 n, ulong x0, ulong x1)
7ffdae0389d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,ushort> create(N256 w, N16 m, N16 n, ushort x0, ushort x1, ushort x2, ushort x3, ushort x4, ushort x5, ushort x6, ushort x7, ushort x8, ushort x9, ushort xA, ushort xB, ushort xC, ushort xD, ushort xE, ushort xF)
7ffdae0389f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,uint> create(N256 w, N16 m, N16 n, uint x0, uint x1, uint x2, uint x3, uint x4, uint x5, uint x6, uint x7)
7ffdae038a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,ulong> create(N256 w, N16 m, N16 n, ulong x0, ulong x1, ulong x2, ulong x3)
7ffdae038a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,ushort> define(Perm4L spec)
7ffdae038a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,ushort> define(NatPerm<N4> spec)
7ffdae038a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,ulong> define(Perm16L p)
7ffdae038ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,ulong> define(NatPerm<N16> p)
7ffdae038ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ByteSize gridsize(int rows, int cols)
7ffdae038c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GridSpec gridspec(ushort rows, ushort cols, ushort segwidth)
7ffdae038ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GridMetrics metrics(in GridSpec spec)
7ffdae039758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GridMetrics metrics(ushort rows, ushort cols, ushort segwidth)
7ffdae039770h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SubGrid32<N8,N3,uint> subgrid(Perm8L p)
7ffdae03a700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SubGrid32<N8,N3,uint> subgrid(NatPerm<N8> p)
7ffdae03a718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# SubGrid256<N32,N5,ulong> subgrid(NatPerm<N32> p)
7ffdae03a730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong tablesize(ulong rows, ulong cols)
7ffdae03a868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,ulong> transpose2(BitGrid64<N16,N4,ulong> A)
7ffdae03a8c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,ulong> transpose(BitGrid64<N16,N4,ulong> A)
7ffdae03a8e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,ushort> transpose(in BitGrid256<N16,N16,ushort> g)
7ffdae03a928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N16,ushort> col<ulong>(BitGrid64<N16,N4,ulong> g, int index)
7ffdb03bbea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,ushort> load<ushort>(Vector256<ushort> src, N16 m, N16 n)
7ffdb03d0570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> alloc<byte>(uint m, uint n, byte t)
7ffdb03d0810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> alloc<ushort>(uint m, uint n, ushort t)
7ffdb03d1020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> alloc<uint>(uint m, uint n, uint t)
7ffdb03d1368h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> alloc<ulong>(uint m, uint n, ulong t)
7ffdb03d1470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> alloc<byte>(int m, int n, byte t)
7ffdb03d1590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> alloc<ushort>(int m, int n, ushort t)
7ffdb03d15d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> alloc<uint>(int m, int n, uint t)
7ffdb03d1680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> alloc<ulong>(int m, int n, ulong t)
7ffdb03d17b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<byte> zero<byte>(N16 w)
7ffdb03d1818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<sbyte> zero<sbyte>(N16 w)
7ffdb03d19c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<ushort> zero<ushort>(N16 w)
7ffdb03d1b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<short> zero<short>(N16 w)
7ffdb03d1ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<byte> zero<byte>(N32 w)
7ffdb03d21a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<sbyte> zero<sbyte>(N32 w)
7ffdb03d2370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<ushort> zero<ushort>(N32 w)
7ffdb03d2568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<short> zero<short>(N32 w)
7ffdb03d2808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<uint> zero<uint>(N32 w)
7ffdb03d2a48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<int> zero<int>(N32 w)
7ffdb03d2c10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<byte> zero<byte>(N64 w)
7ffdb03d2eb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ushort> zero<ushort>(N64 w)
7ffdb03d3210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<uint> zero<uint>(N64 w)
7ffdb03d3450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ulong> zero<ulong>(N64 w)
7ffdb03d3738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N1,N16,byte> zero<byte>(N16 w, N1 m, N16 n, byte t)
7ffdb03d3948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N1,N16,sbyte> zero<sbyte>(N16 w, N1 m, N16 n, sbyte t)
7ffdb03d3cf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N1,N16,ushort> zero<ushort>(N16 w, N1 m, N16 n, ushort t)
7ffdb03d3f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N1,N16,short> zero<short>(N16 w, N1 m, N16 n, short t)
7ffdb03d8300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N16,N1,byte> zero<byte>(N16 w, N16 m, N1 n, byte t)
7ffdb03d8558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N16,N1,sbyte> zero<sbyte>(N16 w, N16 m, N1 n, sbyte t)
7ffdb03d8858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N16,N1,ushort> zero<ushort>(N16 w, N16 m, N1 n, ushort t)
7ffdb03d8ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N16,N1,short> zero<short>(N16 w, N16 m, N1 n, short t)
7ffdb03d8dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N2,N8,byte> zero<byte>(N16 w, N2 m, N8 n, byte t)
7ffdb03d90e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N2,N8,sbyte> zero<sbyte>(N16 w, N2 m, N8 n, sbyte t)
7ffdb03d93e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N2,N8,ushort> zero<ushort>(N16 w, N2 m, N8 n, ushort t)
7ffdb03d9668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N2,N8,short> zero<short>(N16 w, N2 m, N8 n, short t)
7ffdb03d9920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N8,N2,byte> zero<byte>(N16 w, N8 m, N2 n, byte t)
7ffdb03d9c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N8,N2,sbyte> zero<sbyte>(N16 w, N8 m, N2 n, sbyte t)
7ffdb03d9f08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N8,N2,ushort> zero<ushort>(N16 w, N8 m, N2 n, ushort t)
7ffdb03da1d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N8,N2,short> zero<short>(N16 w, N8 m, N2 n, short t)
7ffdb03da460h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,byte> zero<byte>(N16 w, N4 m, N4 n, byte t)
7ffdb03da778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,sbyte> zero<sbyte>(N16 w, N4 m, N4 n, sbyte t)
7ffdb03daa48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,ushort> zero<ushort>(N16 w, N4 m, N4 n, ushort t)
7ffdb03dadf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,short> zero<short>(N16 w, N4 m, N4 n, short t)
7ffdb03dae50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N1,N32,byte> zero<byte>(N32 w, N1 m, N32 n, byte t)
7ffdb03db150h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N1,N32,sbyte> zero<sbyte>(N32 w, N1 m, N32 n, sbyte t)
7ffdb03db420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N1,N32,ushort> zero<ushort>(N32 w, N1 m, N32 n, ushort t)
7ffdb03db6d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N1,N32,short> zero<short>(N32 w, N1 m, N32 n, short t)
7ffdb03dba08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N1,N32,uint> zero<uint>(N32 w, N1 m, N32 n, uint t)
7ffdb03dbcc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N1,N32,int> zero<int>(N32 w, N1 m, N32 n, int t)
7ffdb03dbd68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N32,N1,byte> zero<byte>(N32 w, N32 m, N1 n, byte t)
7ffdb03f0018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N32,N1,sbyte> zero<sbyte>(N32 w, N32 m, N1 n, sbyte t)
7ffdb03f0438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N32,N1,ushort> zero<ushort>(N32 w, N32 m, N1 n, ushort t)
7ffdb03f06f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N32,N1,short> zero<short>(N32 w, N32 m, N1 n, short t)
7ffdb03f0a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N32,N1,uint> zero<uint>(N32 w, N32 m, N1 n, uint t)
7ffdb03f0cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N32,N1,int> zero<int>(N32 w, N32 m, N1 n, int t)
7ffdb03f0d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N16,N2,byte> zero<byte>(N32 w, N16 m, N2 n, byte t)
7ffdb03f1050h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N16,N2,sbyte> zero<sbyte>(N32 w, N16 m, N2 n, sbyte t)
7ffdb03f1428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N16,N2,ushort> zero<ushort>(N32 w, N16 m, N2 n, ushort t)
7ffdb03f16c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N16,N2,short> zero<short>(N32 w, N16 m, N2 n, short t)
7ffdb03f1a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N16,N2,uint> zero<uint>(N32 w, N16 m, N2 n, uint t)
7ffdb03f1cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N16,N2,int> zero<int>(N32 w, N16 m, N2 n, int t)
7ffdb03f20d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N2,N16,byte> zero<byte>(N32 w, N2 m, N16 n, byte t)
7ffdb03f23e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N2,N16,sbyte> zero<sbyte>(N32 w, N2 m, N16 n, sbyte t)
7ffdb03f2670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N2,N16,ushort> zero<ushort>(N32 w, N2 m, N16 n, ushort t)
7ffdb03f28f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N2,N16,short> zero<short>(N32 w, N2 m, N16 n, short t)
7ffdb03f2b80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N2,N16,uint> zero<uint>(N32 w, N2 m, N16 n, uint t)
7ffdb03f2e50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N2,N16,int> zero<int>(N32 w, N2 m, N16 n, int t)
7ffdb03f2f10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N8,N4,byte> zero<byte>(N32 w, N8 m, N4 n, byte t)
7ffdb03f3198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N8,N4,sbyte> zero<sbyte>(N32 w, N8 m, N4 n, sbyte t)
7ffdb03f3438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N8,N4,ushort> zero<ushort>(N32 w, N8 m, N4 n, ushort t)
7ffdb03f36f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N8,N4,short> zero<short>(N32 w, N8 m, N4 n, short t)
7ffdb03f85d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N8,N4,uint> zero<uint>(N32 w, N8 m, N4 n, uint t)
7ffdb03f8870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N8,N4,int> zero<int>(N32 w, N8 m, N4 n, int t)
7ffdb03f8a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N4,N8,byte> zero<byte>(N32 w, N4 m, N8 n, byte t)
7ffdb03f8dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N4,N8,sbyte> zero<sbyte>(N32 w, N4 m, N8 n, sbyte t)
7ffdb03f9080h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N4,N8,ushort> zero<ushort>(N32 w, N4 m, N8 n, ushort t)
7ffdb03f9320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N4,N8,short> zero<short>(N32 w, N4 m, N8 n, short t)
7ffdb03f9590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N4,N8,uint> zero<uint>(N32 w, N4 m, N8 n, uint t)
7ffdb03f98c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N4,N8,int> zero<int>(N32 w, N4 m, N8 n, int t)
7ffdb03f9908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,byte> zero<byte>(N64 w, N1 m, N64 n, byte t)
7ffdb03f9bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,ushort> zero<ushort>(N64 w, N1 m, N64 n, ushort t)
7ffdb03f9fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,uint> zero<uint>(N64 w, N1 m, N64 n, uint t)
7ffdb03fa310h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,ulong> zero<ulong>(N64 w, N1 m, N64 n, ulong t)
7ffdb03fa5f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,byte> zero<byte>(N64 w, N64 m, N1 n, byte t)
7ffdb03faa30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,ushort> zero<ushort>(N64 w, N64 m, N1 n, ushort t)
7ffdb03facb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,uint> zero<uint>(N64 w, N64 m, N1 n, uint t)
7ffdb03faf40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,ulong> zero<ulong>(N64 w, N64 m, N1 n, ulong t)
7ffdb03fb1e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,byte> zero<byte>(N64 w, N2 m, N32 n, byte t)
7ffdb03fb210h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,ushort> zero<ushort>(N64 w, N2 m, N32 n, ushort t)
7ffdb03fb510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,uint> zero<uint>(N64 w, N2 m, N32 n, uint t)
7ffdb03fb948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,ulong> zero<ulong>(N64 w, N2 m, N32 n, ulong t)
7ffdb03fbc30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,byte> zero<byte>(N64 w, N32 m, N2 n, byte t)
7ffdb03fbc60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,ushort> zero<ushort>(N64 w, N32 m, N2 n, ushort t)
7ffdb03fbee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,uint> zero<uint>(N64 w, N32 m, N2 n, uint t)
7ffdb0420288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,ulong> zero<ulong>(N64 w, N32 m, N2 n, ulong t)
7ffdb0420528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,byte> zero<byte>(N64 w, N4 m, N16 n, byte t)
7ffdb0420588h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,ushort> zero<ushort>(N64 w, N4 m, N16 n, ushort t)
7ffdb0420828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,uint> zero<uint>(N64 w, N4 m, N16 n, uint t)
7ffdb0420b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,ulong> zero<ulong>(N64 w, N4 m, N16 n, ulong t)
7ffdb0421a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,byte> zero<byte>(N64 w, N16 m, N4 n, byte t)
7ffdb0421de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,ushort> zero<ushort>(N64 w, N16 m, N4 n, ushort t)
7ffdb04220a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,uint> zero<uint>(N64 w, N16 m, N4 n, uint t)
7ffdb04220e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,ulong> zero<ulong>(N64 w, N16 m, N4 n, ulong t)
7ffdb0422898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,byte> zero<byte>(N64 w, N8 m, N8 n, byte t)
7ffdb0422940h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,ushort> zero<ushort>(N64 w, N8 m, N8 n, ushort t)
7ffdb0422bc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,uint> zero<uint>(N64 w, N8 m, N8 n, uint t)
7ffdb0422ef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,ulong> zero<ulong>(N64 w, N8 m, N8 n, ulong t)
7ffdb0423228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N1,N128,byte> zero<byte>(N128 w, N1 m, N128 n, byte t)
7ffdb04232a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N1,N128,ushort> zero<ushort>(N128 w, N1 m, N128 n, ushort t)
7ffdb0423540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N1,N128,uint> zero<uint>(N128 w, N1 m, N128 n, uint t)
7ffdb0423888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N1,N128,ulong> zero<ulong>(N128 w, N1 m, N128 n, ulong t)
7ffdb0423b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N128,N1,byte> zero<byte>(N128 w, N128 m, N1 n, byte t)
7ffdb0428018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N128,N1,ushort> zero<ushort>(N128 w, N128 m, N1 n, ushort t)
7ffdb0428378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N128,N1,uint> zero<uint>(N128 w, N128 m, N1 n, uint t)
7ffdb0428630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N128,N1,ulong> zero<ulong>(N128 w, N128 m, N1 n, ulong t)
7ffdb0428978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N2,N64,byte> zero<byte>(N128 block, N2 m, N64 n, byte t)
7ffdb0428cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N2,N64,ushort> zero<ushort>(N128 block, N2 m, N64 n, ushort t)
7ffdb0428f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N2,N64,uint> zero<uint>(N128 block, N2 m, N64 n, uint t)
7ffdb0429260h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N2,N64,ulong> zero<ulong>(N128 block, N2 m, N64 n, ulong t)
7ffdb04295c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N64,N2,byte> zero<byte>(N128 block, N64 m, N2 n, byte t)
7ffdb0429650h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N64,N2,ushort> zero<ushort>(N128 block, N64 m, N2 n, ushort t)
7ffdb0429a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N64,N2,uint> zero<uint>(N128 block, N64 m, N2 n, uint t)
7ffdb042a250h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N64,N2,ulong> zero<ulong>(N128 block, N64 m, N2 n, ulong t)
7ffdb042a538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N4,N32,byte> zero<byte>(N128 w, N4 m, N32 n, byte t)
7ffdb042a928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N4,N32,ushort> zero<ushort>(N128 w, N4 m, N32 n, ushort t)
7ffdb042ad60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N4,N32,uint> zero<uint>(N128 w, N4 m, N32 n, uint t)
7ffdb042afd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N4,N32,ulong> zero<ulong>(N128 w, N4 m, N32 n, ulong t)
7ffdb042b018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N32,N4,byte> zero<byte>(N128 w, N32 m, N4 n, byte t)
7ffdb042b288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N32,N4,ushort> zero<ushort>(N128 w, N32 m, N4 n, ushort t)
7ffdb042b510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N32,N4,uint> zero<uint>(N128 w, N32 m, N4 n, uint t)
7ffdb042b798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N32,N4,ulong> zero<ulong>(N128 w, N32 m, N4 n, ulong t)
7ffdb042ba08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N8,N16,byte> zero<byte>(N128 w, N8 m, N16 n, byte t)
7ffdb042bd50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N8,N16,ushort> zero<ushort>(N128 w, N8 m, N16 n, ushort t)
7ffdb0440030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N8,N16,uint> zero<uint>(N128 w, N8 m, N16 n, uint t)
7ffdb0440060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N8,N16,ulong> zero<ulong>(N128 w, N8 m, N16 n, ulong t)
7ffdb04402d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N16,N8,byte> zero<byte>(N128 w, N16 m, N8 n, byte t)
7ffdb0440558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N16,N8,ushort> zero<ushort>(N128 w, N16 m, N8 n, ushort t)
7ffdb04405a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N16,N8,uint> zero<uint>(N128 w, N16 m, N8 n, uint t)
7ffdb0440828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N16,N8,ulong> zero<ulong>(N128 w, N16 m, N8 n, ulong t)
7ffdb0440a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N1,N256,byte> zero<byte>(N256 w, N1 m, N256 n, byte t)
7ffdb0440e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N1,N256,ushort> zero<ushort>(N256 w, N1 m, N256 n, ushort t)
7ffdb04410c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N1,N256,uint> zero<uint>(N256 w, N1 m, N256 n, uint t)
7ffdb0441350h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N1,N256,ulong> zero<ulong>(N256 w, N1 m, N256 n, ulong t)
7ffdb04415f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N256,N1,byte> zero<byte>(N256 w, N256 m, N1 n, byte t)
7ffdb0441b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N256,N1,ushort> zero<ushort>(N256 w, N256 m, N1 n, ushort t)
7ffdb0441e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N256,N1,uint> zero<uint>(N256 w, N256 m, N1 n, uint t)
7ffdb04421c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N256,N1,ulong> zero<ulong>(N256 w, N256 m, N1 n, ulong t)
7ffdb0442508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N128,N2,byte> zero<byte>(N256 w, N128 m, N2 n, byte t)
7ffdb04427f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N128,N2,ushort> zero<ushort>(N256 w, N128 m, N2 n, ushort t)
7ffdb0443180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N128,N2,uint> zero<uint>(N256 w, N128 m, N2 n, uint t)
7ffdb0443480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N128,N2,ulong> zero<ulong>(N256 w, N128 m, N2 n, ulong t)
7ffdb0443720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N4,N64,byte> zero<byte>(N256 w, N4 m, N64 n, byte t)
7ffdb0443d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N4,N64,ushort> zero<ushort>(N256 w, N4 m, N64 n, ushort t)
7ffdb0448030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N4,N64,uint> zero<uint>(N256 w, N4 m, N64 n, uint t)
7ffdb0448618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N4,N64,ulong> zero<ulong>(N256 w, N4 m, N64 n, ulong t)
7ffdb04488d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N64,N4,byte> zero<byte>(N256 w, N64 m, N4 n, byte t)
7ffdb0448b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N64,N4,ushort> zero<ushort>(N256 w, N64 m, N4 n, ushort t)
7ffdb0448e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N64,N4,uint> zero<uint>(N256 w, N64 m, N4 n, uint t)
7ffdb04490c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N64,N4,ulong> zero<ulong>(N256 w, N64 m, N4 n, ulong t)
7ffdb04493b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N8,N32,byte> zero<byte>(N256 w, N8 m, N32 n, byte t)
7ffdb0449638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N8,N32,ushort> zero<ushort>(N256 w, N8 m, N32 n, ushort t)
7ffdb04498d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N8,N32,uint> zero<uint>(N256 w, N8 m, N32 n, uint t)
7ffdb0449ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N8,N32,ulong> zero<ulong>(N256 w, N8 m, N32 n, ulong t)
7ffdb0449e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N32,N8,byte> zero<byte>(N256 w, N32 m, N8 n, byte t)
7ffdb044a148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N32,N8,ushort> zero<ushort>(N256 w, N32 m, N8 n, ushort t)
7ffdb044a448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N32,N8,uint> zero<uint>(N256 w, N32 m, N8 n, uint t)
7ffdb044a6e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N32,N8,ulong> zero<ulong>(N256 w, N32 m, N8 n, ulong t)
7ffdb044a970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,byte> zero<byte>(N256 w, N16 m, N16 n, byte t)
7ffdb044abf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,ushort> zero<ushort>(N256 w, N16 m, N16 n, ushort t)
7ffdb044ae98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,uint> zero<uint>(N256 w, N16 m, N16 n, uint t)
7ffdb044aec8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,ulong> zero<ulong>(N256 w, N16 m, N16 n, ulong t)
7ffdb044aef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<byte> and<byte>(BitGrid16<byte> gx, BitGrid16<byte> gy)
7ffdb044af28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<sbyte> and<sbyte>(BitGrid16<sbyte> gx, BitGrid16<sbyte> gy)
7ffdb044b390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<ushort> and<ushort>(BitGrid16<ushort> gx, BitGrid16<ushort> gy)
7ffdb044b3f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<short> and<short>(BitGrid16<short> gx, BitGrid16<short> gy)
7ffdb044b438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<byte> and<byte>(BitGrid32<byte> gx, BitGrid32<byte> gy)
7ffdb044b498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<sbyte> and<sbyte>(BitGrid32<sbyte> gx, BitGrid32<sbyte> gy)
7ffdb044b510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<ushort> and<ushort>(BitGrid32<ushort> gx, BitGrid32<ushort> gy)
7ffdb044b570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<short> and<short>(BitGrid32<short> gx, BitGrid32<short> gy)
7ffdb044b5d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<uint> and<uint>(BitGrid32<uint> gx, BitGrid32<uint> gy)
7ffdb044b630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<int> and<int>(BitGrid32<int> gx, BitGrid32<int> gy)
7ffdb044b690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<byte> and<byte>(BitGrid64<byte> gx, BitGrid64<byte> gy)
7ffdb044b6d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ushort> and<ushort>(BitGrid64<ushort> gx, BitGrid64<ushort> gy)
7ffdb044b738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<uint> and<uint>(BitGrid64<uint> gx, BitGrid64<uint> gy)
7ffdb044b768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ulong> and<ulong>(BitGrid64<ulong> gx, BitGrid64<ulong> gy)
7ffdb044b7b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> and<byte>(in BitSpanBlocks256<byte> a, in BitSpanBlocks256<byte> b, in BitSpanBlocks256<byte> dst)
7ffdb044b7e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<byte> vector<byte>(in BitSpanBlocks256<byte> src, int block, W256 w)
7ffdb044b858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void store<byte>(Vector256<byte> src, in BitSpanBlocks256<byte> dst, int block)
7ffdb044ba08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> and<ushort>(in BitSpanBlocks256<ushort> a, in BitSpanBlocks256<ushort> b, in BitSpanBlocks256<ushort> dst)
7ffdb044bbd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ushort> vector<ushort>(in BitSpanBlocks256<ushort> src, int block, W256 w)
7ffdb044bc00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void store<ushort>(Vector256<ushort> src, in BitSpanBlocks256<ushort> dst, int block)
7ffdb044bd20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> and<uint>(in BitSpanBlocks256<uint> a, in BitSpanBlocks256<uint> b, in BitSpanBlocks256<uint> dst)
7ffdb044be70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<uint> vector<uint>(in BitSpanBlocks256<uint> src, int block, W256 w)
7ffdb044bea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void store<uint>(Vector256<uint> src, in BitSpanBlocks256<uint> dst, int block)
7ffdb044bfd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> and<ulong>(in BitSpanBlocks256<ulong> a, in BitSpanBlocks256<ulong> b, in BitSpanBlocks256<ulong> dst)
7ffdb0470138h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Vector256<ulong> vector<ulong>(in BitSpanBlocks256<ulong> src, int block, W256 w)
7ffdb0470180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void store<ulong>(Vector256<ulong> src, in BitSpanBlocks256<ulong> dst, int block)
7ffdb0470300h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> broadcast<byte>(byte cell, in BitSpanBlocks256<byte> dst)
7ffdb0470498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> broadcast<ushort>(ushort cell, in BitSpanBlocks256<ushort> dst)
7ffdb0470510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> broadcast<uint>(uint cell, in BitSpanBlocks256<uint> dst)
7ffdb0470558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> broadcast<ulong>(ulong cell, in BitSpanBlocks256<ulong> dst)
7ffdb04705a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte cell<byte>(ref byte src, int bitpos)
7ffdb04705e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort cell<ushort>(ref ushort src, int bitpos)
7ffdb0470648h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint cell<uint>(ref uint src, int bitpos)
7ffdb0470678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong cell<ulong>(ref ulong src, int bitpos)
7ffdb04706c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte cell<byte>(in BitSpanBlocks256<byte> src, int bitpos)
7ffdb0470708h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort cell<ushort>(in BitSpanBlocks256<ushort> src, int bitpos)
7ffdb0470768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint cell<uint>(in BitSpanBlocks256<uint> src, int bitpos)
7ffdb04707b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong cell<ulong>(in BitSpanBlocks256<ulong> src, int bitpos)
7ffdb04707f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit col<byte>(BitGrid16<N1,N16,byte> g, int index)
7ffdb0470840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit col<sbyte>(BitGrid16<N1,N16,sbyte> g, int index)
7ffdb0470870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit col<ushort>(BitGrid16<N1,N16,ushort> g, int index)
7ffdb0470888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit col<short>(BitGrid16<N1,N16,short> g, int index)
7ffdb04708b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N2,byte> col<byte>(BitGrid16<N2,N8,byte> g, int index)
7ffdb04708e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N2,byte> col<sbyte>(BitGrid16<N2,N8,sbyte> g, int index)
7ffdb0470a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N2,byte> col<ushort>(BitGrid16<N2,N8,ushort> g, int index)
7ffdb0470ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N2,byte> col<short>(BitGrid16<N2,N8,short> g, int index)
7ffdb0470b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N8,byte> col<byte>(BitGrid16<N8,N2,byte> g, int index)
7ffdb0470b70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N8,byte> col<sbyte>(BitGrid16<N8,N2,sbyte> g, int index)
7ffdb0470c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N8,byte> col<ushort>(BitGrid16<N8,N2,ushort> g, int index)
7ffdb0470c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N8,byte> col<short>(BitGrid16<N8,N2,short> g, int index)
7ffdb0470ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N4,byte> col<byte>(BitGrid16<N4,N4,byte> g, int index)
7ffdb0470de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N4,byte> col<sbyte>(BitGrid16<N4,N4,sbyte> g, int index)
7ffdb0470e70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N4,byte> col<ushort>(BitGrid16<N4,N4,ushort> g, int index)
7ffdb0470e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N4,byte> col<short>(BitGrid16<N4,N4,short> g, int index)
7ffdb0470ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit col<byte>(BitGrid32<N1,N32,byte> g, int index)
7ffdb0470eb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit col<sbyte>(BitGrid32<N1,N32,sbyte> g, int index)
7ffdb0470ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit col<ushort>(BitGrid32<N1,N32,ushort> g, int index)
7ffdb04711a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit col<short>(BitGrid32<N1,N32,short> g, int index)
7ffdb04711b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit col<uint>(BitGrid32<N1,N32,uint> g, int index)
7ffdb04711d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit col<int>(BitGrid32<N1,N32,int> g, int index)
7ffdb04711e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N2,byte> col<byte>(BitGrid32<N2,N16,byte> g, int index)
7ffdb0471200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N2,byte> col<sbyte>(BitGrid32<N2,N16,sbyte> g, int index)
7ffdb0471218h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N2,byte> col<ushort>(BitGrid32<N2,N16,ushort> g, int index)
7ffdb0471290h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N2,byte> col<short>(BitGrid32<N2,N16,short> g, int index)
7ffdb0471578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N2,byte> col<uint>(BitGrid32<N2,N16,uint> g, int index)
7ffdb04715c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N2,byte> col<int>(BitGrid32<N2,N16,int> g, int index)
7ffdb04715d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N4,byte> col<byte>(BitGrid32<N4,N8,byte> g, int index)
7ffdb0471608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N4,byte> col<sbyte>(BitGrid32<N4,N8,sbyte> g, int index)
7ffdb0471668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N4,byte> col<ushort>(BitGrid32<N4,N8,ushort> g, int index)
7ffdb0471680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N4,byte> col<short>(BitGrid32<N4,N8,short> g, int index)
7ffdb0471788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N4,byte> col<uint>(BitGrid32<N4,N8,uint> g, int index)
7ffdb0471938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N4,byte> col<int>(BitGrid32<N4,N8,int> g, int index)
7ffdb04719c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N8,byte> col<byte>(BitGrid32<N8,N4,byte> g, int index)
7ffdb04719e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N8,byte> col<sbyte>(BitGrid32<N8,N4,sbyte> g, int index)
7ffdb04719f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N8,byte> col<ushort>(BitGrid32<N8,N4,ushort> g, int index)
7ffdb0471a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N8,byte> col<short>(BitGrid32<N8,N4,short> g, int index)
7ffdb0471d70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N8,byte> col<uint>(BitGrid32<N8,N4,uint> g, int index)
7ffdb0472388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N8,byte> col<int>(BitGrid32<N8,N4,int> g, int index)
7ffdb0472640h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N16,ushort> col<byte>(BitGrid32<N16,N2,byte> g, int index)
7ffdb0472658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N16,ushort> col<sbyte>(BitGrid32<N16,N2,sbyte> g, int index)
7ffdb0472670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N16,ushort> col<ushort>(BitGrid32<N16,N2,ushort> g, int index)
7ffdb0472688h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N16,ushort> col<short>(BitGrid32<N16,N2,short> g, int index)
7ffdb04726d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N16,ushort> col<uint>(BitGrid32<N16,N2,uint> g, int index)
7ffdb0472718h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N16,ushort> col<int>(BitGrid32<N16,N2,int> g, int index)
7ffdb04727a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 col<byte>(BitGrid64<N1,N64,byte> g, int index)
7ffdb0472808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 col<ushort>(BitGrid64<N1,N64,ushort> g, int index)
7ffdb0472850h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 col<uint>(BitGrid64<N1,N64,uint> g, int index)
7ffdb0472880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# Bit32 col<ulong>(BitGrid64<N1,N64,ulong> g, int index)
7ffdb04728c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N2,byte> col<byte>(BitGrid64<N2,N32,byte> g, int index)
7ffdb0472910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N2,byte> col<ushort>(BitGrid64<N2,N32,ushort> g, int index)
7ffdb0472988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N2,byte> col<uint>(BitGrid64<N2,N32,uint> g, int index)
7ffdb0472a18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N2,byte> col<ulong>(BitGrid64<N2,N32,ulong> g, int index)
7ffdb0472aa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N4,byte> col<byte>(BitGrid64<N4,N16,byte> g, int index)
7ffdb0472b38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N4,byte> col<ushort>(BitGrid64<N4,N16,ushort> g, int index)
7ffdb0472b68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N4,byte> col<uint>(BitGrid64<N4,N16,uint> g, int index)
7ffdb0472be0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N4,byte> col<ulong>(BitGrid64<N4,N16,ulong> g, int index)
7ffdb0472da8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N8,byte> col<byte>(BitGrid64<N8,N8,byte> g, int index)
7ffdb0473048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N8,byte> col<ushort>(BitGrid64<N8,N8,ushort> g, int index)
7ffdb0473228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N8,byte> col<uint>(BitGrid64<N8,N8,uint> g, int index)
7ffdb0473318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N8,byte> col<ulong>(BitGrid64<N8,N8,ulong> g, int index)
7ffdb04737f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N16,ushort> col<byte>(BitGrid64<N16,N4,byte> g, int index)
7ffdb0473a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N16,ushort> col<ushort>(BitGrid64<N16,N4,ushort> g, int index)
7ffdb0473e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N16,ushort> col<uint>(BitGrid64<N16,N4,uint> g, int index)
7ffdb0473f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N32,uint> col<byte>(BitGrid64<N32,N2,byte> g, int index)
7ffdb0478240h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N32,uint> col<ushort>(BitGrid64<N32,N2,ushort> g, int index)
7ffdb0478420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N32,uint> col<uint>(BitGrid64<N32,N2,uint> g, int index)
7ffdb0478450h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N32,uint> col<ulong>(BitGrid64<N32,N2,ulong> g, int index)
7ffdb04784e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N64,ulong> col<byte>(BitGrid64<N64,N1,byte> g, int index)
7ffdb04785e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N64,ulong> col<ushort>(BitGrid64<N64,N1,ushort> g, int index)
7ffdb0478978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N64,ulong> col<uint>(BitGrid64<N64,N1,uint> g, int index)
7ffdb0478990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N64,ulong> col<ulong>(BitGrid64<N64,N1,ulong> g, int index)
7ffdb0478a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N16,ushort> col<byte>(in BitGrid128<N16,N8,byte> g, int index)
7ffdb04794a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N16,ushort> col<ushort>(in BitGrid128<N16,N8,ushort> g, int index)
7ffdb047a2c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N16,ushort> col<uint>(in BitGrid128<N16,N8,uint> g, int index)
7ffdb047a478h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N16,ushort> col<ulong>(in BitGrid128<N16,N8,ulong> g, int index)
7ffdb047a610h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N32,uint> col<byte>(in BitGrid256<N32,N8,byte> g, int index)
7ffdb047a778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N32,uint> col<ushort>(in BitGrid256<N32,N8,ushort> g, int index)
7ffdb047add8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N32,uint> col<uint>(in BitGrid256<N32,N8,uint> g, int index)
7ffdb047ba08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<N32,uint> col<ulong>(in BitGrid256<N32,N8,ulong> g, int index)
7ffdb0530318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid<byte> create<byte>(GridDim<ushort> dim, byte src)
7ffdb0530a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid<ushort> create<ushort>(GridDim<ushort> dim, ushort src)
7ffdb0530ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid<uint> create<uint>(GridDim<ushort> dim, uint src)
7ffdb0530b58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid<ulong> create<ulong>(GridDim<ushort> dim, ulong src)
7ffdb0530c00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<byte> define<byte>(N16 w, ushort data)
7ffdb0530ca8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<sbyte> define<sbyte>(N16 w, ushort data)
7ffdb0530cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<ushort> define<ushort>(N16 w, ushort data)
7ffdb0530d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<short> define<short>(N16 w, ushort data)
7ffdb0530d50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<byte> define<byte>(N32 w, uint data)
7ffdb0530d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<sbyte> define<sbyte>(N32 w, uint data)
7ffdb0530d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<ushort> define<ushort>(N32 w, uint data)
7ffdb0530dc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<short> define<short>(N32 w, uint data)
7ffdb0530de0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<uint> define<uint>(N32 w, uint data)
7ffdb0530ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<int> define<int>(N32 w, uint data)
7ffdb0530f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<byte> define<byte>(N64 w, ulong data)
7ffdb05310b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ushort> define<ushort>(N64 w, ulong data)
7ffdb0531170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<uint> define<uint>(N64 w, ulong data)
7ffdb0531200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ulong> define<ulong>(N64 w, ulong data)
7ffdb0531218h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GridSpec gridspec<byte>(ushort rows, ushort cols)
7ffdb05312a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GridSpec gridspec<ushort>(ushort rows, ushort cols)
7ffdb0531470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GridSpec gridspec<uint>(ushort rows, ushort cols)
7ffdb0531680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GridSpec gridspec<ulong>(ushort rows, ushort cols)
7ffdb0531758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<byte> impl<byte>(BitGrid16<byte> gx, BitGrid16<byte> gy)
7ffdb0531818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<sbyte> impl<sbyte>(BitGrid16<sbyte> gx, BitGrid16<sbyte> gy)
7ffdb0531920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<ushort> impl<ushort>(BitGrid16<ushort> gx, BitGrid16<ushort> gy)
7ffdb05319b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<short> impl<short>(BitGrid16<short> gx, BitGrid16<short> gy)
7ffdb0531a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<byte> impl<byte>(BitGrid32<byte> gx, BitGrid32<byte> gy)
7ffdb0531ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<sbyte> impl<sbyte>(BitGrid32<sbyte> gx, BitGrid32<sbyte> gy)
7ffdb0531ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<ushort> impl<ushort>(BitGrid32<ushort> gx, BitGrid32<ushort> gy)
7ffdb0531cb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<short> impl<short>(BitGrid32<short> gx, BitGrid32<short> gy)
7ffdb0531da0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<uint> impl<uint>(BitGrid32<uint> gx, BitGrid32<uint> gy)
7ffdb0531e30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<int> impl<int>(BitGrid32<int> gx, BitGrid32<int> gy)
7ffdb0531e60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<byte> impl<byte>(BitGrid64<byte> gx, BitGrid64<byte> gy)
7ffdb0531e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ushort> impl<ushort>(BitGrid64<ushort> gx, BitGrid64<ushort> gy)
7ffdb0531f50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<uint> impl<uint>(BitGrid64<uint> gx, BitGrid64<uint> gy)
7ffdb05320a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ulong> impl<ulong>(BitGrid64<ulong> gx, BitGrid64<ulong> gy)
7ffdb0532190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> impl<byte>(in BitSpanBlocks256<byte> a, in BitSpanBlocks256<byte> b, in BitSpanBlocks256<byte> dst)
7ffdb05323e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> impl<ushort>(in BitSpanBlocks256<ushort> a, in BitSpanBlocks256<ushort> b, in BitSpanBlocks256<ushort> dst)
7ffdb0533078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> impl<uint>(in BitSpanBlocks256<uint> a, in BitSpanBlocks256<uint> b, in BitSpanBlocks256<uint> dst)
7ffdb05336c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> impl<ulong>(in BitSpanBlocks256<ulong> a, in BitSpanBlocks256<ulong> b, in BitSpanBlocks256<ulong> dst)
7ffdb0533a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<byte> init<byte>(N16 w, byte data)
7ffdb0533be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<sbyte> init<sbyte>(N16 w, sbyte data)
7ffdb0533d98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<ushort> init<ushort>(N16 w, ushort data)
7ffdb0533ee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<short> init<short>(N16 w, short data)
7ffdb0533fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<byte> init<byte>(N32 w, byte data)
7ffdb0538888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<sbyte> init<sbyte>(N32 w, sbyte data)
7ffdb0538960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<ushort> init<ushort>(N32 w, ushort data)
7ffdb05389d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<short> init<short>(N32 w, short data)
7ffdb0538a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<uint> init<uint>(N32 w, uint data)
7ffdb0539608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<int> init<int>(N32 w, int data)
7ffdb0539860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<byte> init<byte>(N64 w, byte data)
7ffdb053a3b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ushort> init<ushort>(N64 w, ushort data)
7ffdb053a658h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<uint> init<uint>(N64 w, uint data)
7ffdb053a6e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ulong> init<ulong>(N64 w, ulong data)
7ffdb053a7a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N1,N16,byte> init<byte>(N16 w, N1 m, N16 n, byte d)
7ffdb053a910h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N1,N16,sbyte> init<sbyte>(N16 w, N1 m, N16 n, sbyte d)
7ffdb053a988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N1,N16,ushort> init<ushort>(N16 w, N1 m, N16 n, ushort d)
7ffdb053aa00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N1,N16,short> init<short>(N16 w, N1 m, N16 n, short d)
7ffdb053aa30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N16,N1,byte> init<byte>(N16 w, N16 m, N1 n, byte d)
7ffdb053aa78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N16,N1,sbyte> init<sbyte>(N16 w, N16 m, N1 n, sbyte d)
7ffdb053aac0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N16,N1,ushort> init<ushort>(N16 w, N16 m, N1 n, ushort d)
7ffdb053ab08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N16,N1,short> init<short>(N16 w, N16 m, N1 n, short d)
7ffdb053ab38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N2,N8,byte> init<byte>(N16 w, N2 m, N8 n, byte d)
7ffdb053ab68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N2,N8,sbyte> init<sbyte>(N16 w, N2 m, N8 n, sbyte d)
7ffdb053abc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N2,N8,ushort> init<ushort>(N16 w, N2 m, N8 n, ushort d)
7ffdb053ac58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N2,N8,short> init<short>(N16 w, N2 m, N8 n, short d)
7ffdb053acb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N8,N2,byte> init<byte>(N16 w, N8 m, N2 n, byte d)
7ffdb053ad30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N8,N2,sbyte> init<sbyte>(N16 w, N8 m, N2 n, sbyte d)
7ffdb053add8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N8,N2,ushort> init<ushort>(N16 w, N8 m, N2 n, ushort d)
7ffdb053ae20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N8,N2,short> init<short>(N16 w, N8 m, N2 n, short d)
7ffdb053ae68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,byte> init<byte>(N16 w, N4 m, N4 n, byte d)
7ffdb053b030h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,sbyte> init<sbyte>(N16 w, N4 m, N4 n, sbyte d)
7ffdb053b168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,ushort> init<ushort>(N16 w, N4 m, N4 n, ushort d)
7ffdb053b258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,short> init<short>(N16 w, N4 m, N4 n, short d)
7ffdb053b330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N1,N32,byte> init<byte>(N32 w, N1 m, N32 n, byte d)
7ffdb053b438h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N1,N32,sbyte> init<sbyte>(N32 w, N1 m, N32 n, sbyte d)
7ffdb053b540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N1,N32,ushort> init<ushort>(N32 w, N1 m, N32 n, ushort d)
7ffdb053b678h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N1,N32,short> init<short>(N32 w, N1 m, N32 n, short d)
7ffdb053b6f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N1,N32,uint> init<uint>(N32 w, N1 m, N32 n, uint d)
7ffdb053b768h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N1,N32,int> init<int>(N32 w, N1 m, N32 n, int d)
7ffdb053b7b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N32,N1,byte> init<byte>(N32 w, N32 m, N1 n, byte d)
7ffdb053b810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N32,N1,sbyte> init<sbyte>(N32 w, N32 m, N1 n, sbyte d)
7ffdb053b978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N32,N1,ushort> init<ushort>(N32 w, N32 m, N1 n, ushort d)
7ffdb053bb88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N32,N1,short> init<short>(N32 w, N32 m, N1 n, short d)
7ffdb053bbb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N32,N1,uint> init<uint>(N32 w, N32 m, N1 n, uint d)
7ffdb053bc00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N32,N1,int> init<int>(N32 w, N32 m, N1 n, int d)
7ffdb053bd20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N16,N2,byte> init<byte>(N32 w, N16 m, N2 n, byte d)
7ffdb053bd80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N16,N2,sbyte> init<sbyte>(N32 w, N16 m, N2 n, sbyte d)
7ffdb053bdc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N16,N2,ushort> init<ushort>(N32 w, N16 m, N2 n, ushort d)
7ffdb053beb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N16,N2,short> init<short>(N32 w, N16 m, N2 n, short d)
7ffdb0570000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N16,N2,uint> init<uint>(N32 w, N16 m, N2 n, uint d)
7ffdb0570120h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N16,N2,int> init<int>(N32 w, N16 m, N2 n, int d)
7ffdb05701e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N2,N16,byte> init<byte>(N32 w, N2 m, N16 n, byte d)
7ffdb05702d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N2,N16,sbyte> init<sbyte>(N32 w, N2 m, N16 n, sbyte d)
7ffdb0570378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N2,N16,ushort> init<ushort>(N32 w, N2 m, N16 n, ushort d)
7ffdb0570408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N2,N16,short> init<short>(N32 w, N2 m, N16 n, short d)
7ffdb05704c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N2,N16,uint> init<uint>(N32 w, N2 m, N16 n, uint d)
7ffdb0570630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N2,N16,int> init<int>(N32 w, N2 m, N16 n, int d)
7ffdb0570738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N8,N4,byte> init<byte>(N32 w, N8 m, N4 n, byte d)
7ffdb0570798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N8,N4,sbyte> init<sbyte>(N32 w, N8 m, N4 n, sbyte d)
7ffdb0570840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N8,N4,ushort> init<ushort>(N32 w, N8 m, N4 n, ushort d)
7ffdb0570cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N8,N4,short> init<short>(N32 w, N8 m, N4 n, short d)
7ffdb0570ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N8,N4,uint> init<uint>(N32 w, N8 m, N4 n, uint d)
7ffdb0578330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N8,N4,int> init<int>(N32 w, N8 m, N4 n, int d)
7ffdb05788d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N4,N8,byte> init<byte>(N32 w, N4 m, N8 n, byte d)
7ffdb05789c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N4,N8,sbyte> init<sbyte>(N32 w, N4 m, N8 n, sbyte d)
7ffdb0578b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N4,N8,ushort> init<ushort>(N32 w, N4 m, N8 n, ushort d)
7ffdb0578bd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N4,N8,short> init<short>(N32 w, N4 m, N8 n, short d)
7ffdb0578c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N4,N8,uint> init<uint>(N32 w, N4 m, N8 n, uint d)
7ffdb0578d68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N4,N8,int> init<int>(N32 w, N4 m, N8 n, int d)
7ffdb0578db0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,byte> init<byte>(N64 w, N1 m, N64 n, byte d)
7ffdb0578e40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,ushort> init<ushort>(N64 w, N1 m, N64 n, ushort d)
7ffdb0578f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,uint> init<uint>(N64 w, N1 m, N64 n, uint d)
7ffdb0578fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,ulong> init<ulong>(N64 w, N1 m, N64 n, ulong d)
7ffdb0578fd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,byte> init<byte>(N64 w, N64 m, N1 n, byte d)
7ffdb0579020h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,ushort> init<ushort>(N64 w, N64 m, N1 n, ushort d)
7ffdb0579068h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,uint> init<uint>(N64 w, N64 m, N1 n, uint d)
7ffdb0579170h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,ulong> init<ulong>(N64 w, N64 m, N1 n, ulong d)
7ffdb0579200h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,byte> init<byte>(N64 w, N2 m, N32 n, byte d)
7ffdb05792c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,ushort> init<ushort>(N64 w, N2 m, N32 n, ushort d)
7ffdb0579380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,uint> init<uint>(N64 w, N2 m, N32 n, uint d)
7ffdb0579470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,ulong> init<ulong>(N64 w, N2 m, N32 n, ulong d)
7ffdb0579500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,byte> init<byte>(N64 w, N32 m, N2 n, byte d)
7ffdb05795d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,ushort> init<ushort>(N64 w, N32 m, N2 n, ushort d)
7ffdb0579728h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,uint> init<uint>(N64 w, N32 m, N2 n, uint d)
7ffdb0579878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,ulong> init<ulong>(N64 w, N32 m, N2 n, ulong d)
7ffdb0579a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,byte> init<byte>(N64 w, N4 m, N16 n, byte d)
7ffdb0579ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,ushort> init<ushort>(N64 w, N4 m, N16 n, ushort d)
7ffdb0579b90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,uint> init<uint>(N64 w, N4 m, N16 n, uint d)
7ffdb0579c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,ulong> init<ulong>(N64 w, N4 m, N16 n, ulong d)
7ffdb0579d70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,byte> init<byte>(N64 w, N16 m, N4 n, byte d)
7ffdb0579e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,ushort> init<ushort>(N64 w, N16 m, N4 n, ushort d)
7ffdb0579fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,uint> init<uint>(N64 w, N16 m, N4 n, uint d)
7ffdb057a358h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,ulong> init<ulong>(N64 w, N16 m, N4 n, ulong d)
7ffdb057a4d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,byte> init<byte>(N64 w, N8 m, N8 n, byte d)
7ffdb057a520h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,ushort> init<ushort>(N64 w, N8 m, N8 n, ushort d)
7ffdb057a598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,uint> init<uint>(N64 w, N8 m, N8 n, uint d)
7ffdb057a700h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,ulong> init<ulong>(N64 w, N8 m, N8 n, ulong d)
7ffdb057a748h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N1,N128,byte> init<byte>(N128 w, N1 m, N128 n, byte d)
7ffdb057a820h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N1,N128,ushort> init<ushort>(N128 w, N1 m, N128 n, ushort d)
7ffdb057ab08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N1,N128,uint> init<uint>(N128 w, N1 m, N128 n, uint d)
7ffdb057ac10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N1,N128,ulong> init<ulong>(N128 w, N1 m, N128 n, ulong d)
7ffdb057ac88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N128,N1,byte> init<byte>(N128 w, N128 m, N1 n, byte d)
7ffdb057ad78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N128,N1,ushort> init<ushort>(N128 w, N128 m, N1 n, ushort d)
7ffdb057ae98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N128,N1,uint> init<uint>(N128 w, N128 m, N1 n, uint d)
7ffdb057afd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N128,N1,ulong> init<ulong>(N128 w, N128 m, N1 n, ulong d)
7ffdb057b180h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N2,N64,byte> init<byte>(N128 w, N2 m, N64 n, byte d)
7ffdb057b390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N2,N64,ushort> init<ushort>(N128 w, N2 m, N64 n, ushort d)
7ffdb057b420h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N2,N64,uint> init<uint>(N128 w, N2 m, N64 n, uint d)
7ffdb057b4c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N2,N64,ulong> init<ulong>(N128 w, N2 m, N64 n, ulong d)
7ffdb057b5d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N64,N2,byte> init<byte>(N128 w, N64 m, N2 n, byte d)
7ffdb057b6a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N64,N2,ushort> init<ushort>(N128 w, N64 m, N2 n, ushort d)
7ffdb057b7c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N64,N2,uint> init<uint>(N128 w, N64 m, N2 n, uint d)
7ffdb057b8e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N64,N2,ulong> init<ulong>(N128 w, N64 m, N2 n, ulong d)
7ffdb057b9a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N4,N32,byte> init<byte>(N128 w, N4 m, N32 n, byte d)
7ffdb057baf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N4,N32,ushort> init<ushort>(N128 w, N4 m, N32 n, ushort d)
7ffdb057bb58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N4,N32,uint> init<uint>(N128 w, N4 m, N32 n, uint d)
7ffdb057bbb8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N4,N32,ulong> init<ulong>(N128 w, N4 m, N32 n, ulong d)
7ffdb057bd50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N32,N4,byte> init<byte>(N128 w, N32 m, N4 n, byte d)
7ffdb05a08d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N32,N4,ushort> init<ushort>(N128 w, N32 m, N4 n, ushort d)
7ffdb05a09d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N32,N4,uint> init<uint>(N128 w, N32 m, N4 n, uint d)
7ffdb05a0a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N32,N4,ulong> init<ulong>(N128 w, N32 m, N4 n, ulong d)
7ffdb05a0ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N8,N16,byte> init<byte>(N128 w, N8 m, N16 n, byte d)
7ffdb05a0be8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N8,N16,ushort> init<ushort>(N128 w, N8 m, N16 n, ushort d)
7ffdb05a0c90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N8,N16,uint> init<uint>(N128 w, N8 m, N16 n, uint d)
7ffdb05a0cd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N8,N16,ulong> init<ulong>(N128 w, N8 m, N16 n, ulong d)
7ffdb05a0d20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N16,N8,byte> init<byte>(N128 w, N16 m, N8 n, byte d)
7ffdb05a0d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N16,N8,ushort> init<ushort>(N128 w, N16 m, N8 n, ushort d)
7ffdb05a0e88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N16,N8,uint> init<uint>(N128 w, N16 m, N8 n, uint d)
7ffdb05a0f00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N16,N8,ulong> init<ulong>(N128 w, N16 m, N8 n, ulong d)
7ffdb05a10e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N1,N256,byte> init<byte>(N256 w, N1 m, N256 n, byte d)
7ffdb05a1128h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N1,N256,ushort> init<ushort>(N256 w, N1 m, N256 n, ushort d)
7ffdb05a12d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N1,N256,uint> init<uint>(N256 w, N1 m, N256 n, uint d)
7ffdb05a14b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N1,N256,ulong> init<ulong>(N256 w, N1 m, N256 n, ulong d)
7ffdb05a15d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N256,N1,byte> init<byte>(N256 w, N256 m, N1 n, byte d)
7ffdb05a16f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N256,N1,ushort> init<ushort>(N256 w, N256 m, N1 n, ushort d)
7ffdb05a17e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N256,N1,uint> init<uint>(N256 w, N256 m, N1 n, uint d)
7ffdb05a18d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N256,N1,ulong> init<ulong>(N256 w, N256 m, N1 n, ulong d)
7ffdb05a19c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N128,N2,byte> init<byte>(N256 w, N128 m, N2 n, byte d)
7ffdb05a1ff8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N128,N2,ushort> init<ushort>(N256 w, N128 m, N2 n, ushort d)
7ffdb05a20d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N128,N2,uint> init<uint>(N256 w, N128 m, N2 n, uint d)
7ffdb05a21c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N128,N2,ulong> init<ulong>(N256 w, N128 m, N2 n, ulong d)
7ffdb05a2298h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N4,N64,byte> init<byte>(N256 w, N4 m, N64 n, byte d)
7ffdb05a2508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N4,N64,ushort> init<ushort>(N256 w, N4 m, N64 n, ushort d)
7ffdb05a2bc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N4,N64,uint> init<uint>(N256 w, N4 m, N64 n, uint d)
7ffdb05a2e20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N4,N64,ulong> init<ulong>(N256 w, N4 m, N64 n, ulong d)
7ffdb05a2ef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N64,N4,byte> init<byte>(N256 w, N64 m, N4 n, byte d)
7ffdb05a2f40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N64,N4,ushort> init<ushort>(N256 w, N64 m, N4 n, ushort d)
7ffdb05a3390h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N64,N4,uint> init<uint>(N256 w, N64 m, N4 n, uint d)
7ffdb05a8738h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N64,N4,ulong> init<ulong>(N256 w, N64 m, N4 n, ulong d)
7ffdb05a8870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N8,N32,byte> init<byte>(N256 w, N8 m, N32 n, byte d)
7ffdb05a88d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N8,N32,ushort> init<ushort>(N256 w, N8 m, N32 n, ushort d)
7ffdb05a8978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N8,N32,uint> init<uint>(N256 w, N8 m, N32 n, uint d)
7ffdb05a8a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N8,N32,ulong> init<ulong>(N256 w, N8 m, N32 n, ulong d)
7ffdb05a8c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N32,N8,byte> init<byte>(N256 w, N32 m, N8 n, byte d)
7ffdb05a90c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N32,N8,ushort> init<ushort>(N256 w, N32 m, N8 n, ushort d)
7ffdb05a9248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N32,N8,uint> init<uint>(N256 w, N32 m, N8 n, uint d)
7ffdb05a92d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N32,N8,ulong> init<ulong>(N256 w, N32 m, N8 n, ulong d)
7ffdb05a9320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,byte> init<byte>(N256 w, N16 m, N16 n, byte d)
7ffdb05a9578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,ushort> init<ushort>(N256 w, N16 m, N16 n, ushort d)
7ffdb05a9830h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,uint> init<uint>(N256 w, N16 m, N16 n, uint d)
7ffdb05a9860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,ulong> init<ulong>(N256 w, N16 m, N16 n, ulong d)
7ffdb05a9890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> init<byte>(uint m, uint n, byte d)
7ffdb05a98c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void broadcast<byte>(byte data, SpanBlock256<byte> dst)
7ffdb05a9a10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> init<ushort>(uint m, uint n, ushort d)
7ffdb05a9ab8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void broadcast<ushort>(ushort data, SpanBlock256<ushort> dst)
7ffdb05a9ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> init<uint>(uint m, uint n, uint d)
7ffdb05ab3f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void broadcast<uint>(uint data, SpanBlock256<uint> dst)
7ffdb05ab918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> init<ulong>(uint m, uint n, ulong d)
7ffdb05e0ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void broadcast<ulong>(ulong data, SpanBlock256<ulong> dst)
7ffdb05e1008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void broadcast<sbyte>(sbyte data, SpanBlock256<sbyte> dst)
7ffdb05e8ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void broadcast<short>(short data, SpanBlock256<short> dst)
7ffdb05e9710h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void broadcast<int>(int data, SpanBlock256<int> dst)
7ffdb05e9b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void broadcast<long>(long data, SpanBlock256<long> dst)
7ffdb05e9fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void broadcast<float>(float data, SpanBlock256<float> dst)
7ffdb05ea388h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# void broadcast<double>(double data, SpanBlock256<double> dst)
7ffdb05ea760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N1,N16,byte> load<byte>(in SpanBlock16<byte> src, N1 m, N16 n)
7ffdb05eab50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N1,N16,ushort> load<ushort>(in SpanBlock16<ushort> src, N1 m, N16 n)
7ffdb05ebee8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N1,N16,uint> load<uint>(in SpanBlock16<uint> src, N1 m, N16 n)
7ffdb0600018h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N1,N16,ulong> load<ulong>(in SpanBlock16<ulong> src, N1 m, N16 n)
7ffdb0600978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N16,N1,byte> load<byte>(in SpanBlock16<byte> src, N16 m, N1 n)
7ffdb0600f48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N16,N1,ushort> load<ushort>(in SpanBlock16<ushort> src, N16 m, N1 n)
7ffdb0601008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N16,N1,uint> load<uint>(in SpanBlock16<uint> src, N16 m, N1 n)
7ffdb06010e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N16,N1,ulong> load<ulong>(in SpanBlock16<ulong> src, N16 m, N1 n)
7ffdb0601380h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N8,N2,byte> load<byte>(in SpanBlock16<byte> src, N2 m, N8 n)
7ffdb06015f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N8,N2,ushort> load<ushort>(in SpanBlock16<ushort> src, N2 m, N8 n)
7ffdb0601668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N8,N2,uint> load<uint>(in SpanBlock16<uint> src, N2 m, N8 n)
7ffdb0601758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N8,N2,ulong> load<ulong>(in SpanBlock16<ulong> src, N2 m, N8 n)
7ffdb0601a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N8,N2,byte> load<byte>(in SpanBlock16<byte> src, N8 m, N2 n)
7ffdb0601d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N8,N2,ushort> load<ushort>(in SpanBlock16<ushort> src, N8 m, N2 n)
7ffdb0601e18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N8,N2,uint> load<uint>(in SpanBlock16<uint> src, N8 m, N2 n)
7ffdb0601ec0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N8,N2,ulong> load<ulong>(in SpanBlock16<ulong> src, N8 m, N2 n)
7ffdb0601fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,byte> load<byte>(in SpanBlock16<byte> src, N4 m, N4 n)
7ffdb0602070h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,ushort> load<ushort>(in SpanBlock16<ushort> src, N4 m, N4 n)
7ffdb0602148h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,uint> load<uint>(in SpanBlock16<uint> src, N4 m, N4 n)
7ffdb06021f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<N4,N4,ulong> load<ulong>(in SpanBlock16<ulong> src, N4 m, N4 n)
7ffdb06024a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N1,N32,byte> load<byte>(in SpanBlock32<byte> src, N1 m, N32 n)
7ffdb0602760h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N1,N32,ushort> load<ushort>(in SpanBlock32<ushort> src, N1 m, N32 n)
7ffdb0603af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N1,N32,uint> load<uint>(in SpanBlock32<uint> src, N1 m, N32 n)
7ffdb0603fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N1,N32,ulong> load<ulong>(in SpanBlock32<ulong> src, N1 m, N32 n)
7ffdb0608078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N32,N1,byte> load<byte>(in SpanBlock32<byte> src, N32 m, N1 n)
7ffdb06086f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N32,N1,ushort> load<ushort>(in SpanBlock32<ushort> src, N32 m, N1 n)
7ffdb0608ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N32,N1,uint> load<uint>(in SpanBlock32<uint> src, N32 m, N1 n)
7ffdb0608f30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N32,N1,ulong> load<ulong>(in SpanBlock32<ulong> src, N32 m, N1 n)
7ffdb06095f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N2,N16,byte> load<byte>(in SpanBlock32<byte> src, N2 m, N16 n)
7ffdb0609cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N2,N16,ushort> load<ushort>(in SpanBlock32<ushort> src, N2 m, N16 n)
7ffdb0609d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N2,N16,uint> load<uint>(in SpanBlock32<uint> src, N2 m, N16 n)
7ffdb0609db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N2,N16,ulong> load<ulong>(in SpanBlock32<ulong> src, N2 m, N16 n)
7ffdb0609e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N16,N2,byte> load<byte>(in SpanBlock32<byte> src, N16 m, N2 n)
7ffdb060a190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N16,N2,ushort> load<ushort>(in SpanBlock32<ushort> src, N16 m, N2 n)
7ffdb060a208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N16,N2,uint> load<uint>(in SpanBlock32<uint> src, N16 m, N2 n)
7ffdb060a2e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N16,N2,ulong> load<ulong>(in SpanBlock32<ulong> src, N16 m, N2 n)
7ffdb060a3e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N4,N8,byte> load<byte>(in SpanBlock32<byte> src, N4 m, N8 n)
7ffdb060a6d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N4,N8,ushort> load<ushort>(in SpanBlock32<ushort> src, N4 m, N8 n)
7ffdb060a730h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N4,N8,uint> load<uint>(in SpanBlock32<uint> src, N4 m, N8 n)
7ffdb060a790h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N4,N8,ulong> load<ulong>(in SpanBlock32<ulong> src, N4 m, N8 n)
7ffdb060a868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N8,N4,byte> load<byte>(in SpanBlock32<byte> src, N8 m, N4 n)
7ffdb060ab68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N8,N4,ushort> load<ushort>(in SpanBlock32<ushort> src, N8 m, N4 n)
7ffdb060ac40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N8,N4,uint> load<uint>(in SpanBlock32<uint> src, N8 m, N4 n)
7ffdb060ad18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<N8,N4,ulong> load<ulong>(in SpanBlock32<ulong> src, N8 m, N4 n)
7ffdb060ad78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,byte> load<byte>(in SpanBlock64<byte> src, N1 m, N64 n)
7ffdb060b078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,ushort> load<ushort>(in SpanBlock64<ushort> src, N1 m, N64 n)
7ffdb060b4e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,uint> load<uint>(in SpanBlock64<uint> src, N1 m, N64 n)
7ffdb060b5a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,ulong> load<ulong>(in SpanBlock64<ulong> src, N1 m, N64 n)
7ffdb060ba98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,byte> load<byte>(in SpanBlock64<byte> src, N64 m, N1 n)
7ffdb060bae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,ushort> load<ushort>(in SpanBlock64<ushort> src, N64 m, N1 n)
7ffdb060baf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,uint> load<uint>(in SpanBlock64<uint> src, N64 m, N1 n)
7ffdb060bb10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,ulong> load<ulong>(in SpanBlock64<ulong> src, N64 m, N1 n)
7ffdb060bb28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,byte> load<byte>(in SpanBlock64<byte> src, N2 m, N32 n)
7ffdb060bb40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,ushort> load<ushort>(in SpanBlock64<ushort> src, N2 m, N32 n)
7ffdb060bba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,uint> load<uint>(in SpanBlock64<uint> src, N2 m, N32 n)
7ffdb060bc18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,ulong> load<ulong>(in SpanBlock64<ulong> src, N2 m, N32 n)
7ffdb060bd38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,byte> load<byte>(in SpanBlock64<byte> src, N32 m, N2 n)
7ffdb060bdb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,ushort> load<ushort>(in SpanBlock64<ushort> src, N32 m, N2 n)
7ffdb060bdf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,uint> load<uint>(in SpanBlock64<uint> src, N32 m, N2 n)
7ffdb060be58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,ulong> load<ulong>(in SpanBlock64<ulong> src, N32 m, N2 n)
7ffdb060be70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,byte> load<byte>(in SpanBlock64<byte> src, N4 m, N16 n)
7ffdb060bf00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,ushort> load<ushort>(in SpanBlock64<ushort> src, N4 m, N16 n)
7ffdb0640d80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,uint> load<uint>(in SpanBlock64<uint> src, N4 m, N16 n)
7ffdb0640e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,ulong> load<ulong>(in SpanBlock64<ulong> src, N4 m, N16 n)
7ffdb0640ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,byte> load<byte>(in SpanBlock64<byte> src, N16 m, N4 n)
7ffdb0640f60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,ushort> load<ushort>(in SpanBlock64<ushort> src, N16 m, N4 n)
7ffdb0640ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,uint> load<uint>(in SpanBlock64<uint> src, N16 m, N4 n)
7ffdb0641098h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,ulong> load<ulong>(in SpanBlock64<ulong> src, N16 m, N4 n)
7ffdb0641110h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,byte> load<byte>(in SpanBlock64<byte> src, N8 m, N8 n)
7ffdb06411b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,ushort> load<ushort>(in SpanBlock64<ushort> src, N8 m, N8 n)
7ffdb0641248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,uint> load<uint>(in SpanBlock64<uint> src, N8 m, N8 n)
7ffdb06413b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,ulong> load<ulong>(in SpanBlock64<ulong> src, N8 m, N8 n)
7ffdb06413e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N1,N128,byte> load<byte>(Vector128<byte> src, N1 m, N128 n)
7ffdb06413f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N1,N128,ushort> load<ushort>(Vector128<ushort> src, N1 m, N128 n)
7ffdb0641428h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N1,N128,uint> load<uint>(Vector128<uint> src, N1 m, N128 n)
7ffdb0641470h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N1,N128,ulong> load<ulong>(Vector128<ulong> src, N1 m, N128 n)
7ffdb0641500h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N128,N1,byte> load<byte>(Vector128<byte> src, N128 m, N1 n)
7ffdb0641518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N128,N1,ushort> load<ushort>(Vector128<ushort> src, N128 m, N1 n)
7ffdb0641548h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N128,N1,uint> load<uint>(Vector128<uint> src, N128 m, N1 n)
7ffdb0641560h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N128,N1,ulong> load<ulong>(Vector128<ulong> src, N128 m, N1 n)
7ffdb0641578h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N2,N64,byte> load<byte>(Vector128<byte> src, N2 m, N64 n)
7ffdb0641590h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N2,N64,ushort> load<ushort>(Vector128<ushort> src, N2 m, N64 n)
7ffdb06415c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N2,N64,uint> load<uint>(Vector128<uint> src, N2 m, N64 n)
7ffdb06415d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N2,N64,ulong> load<ulong>(Vector128<ulong> src, N2 m, N64 n)
7ffdb0641608h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N64,N2,byte> load<byte>(Vector128<byte> src, N64 m, N2 n)
7ffdb0641620h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N64,N2,ushort> load<ushort>(Vector128<ushort> src, N64 m, N2 n)
7ffdb0641638h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N64,N2,uint> load<uint>(Vector128<uint> src, N64 m, N2 n)
7ffdb0641668h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N64,N2,ulong> load<ulong>(Vector128<ulong> src, N64 m, N2 n)
7ffdb0641680h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N4,N32,byte> load<byte>(Vector128<byte> src, N4 m, N32 n)
7ffdb06416b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N4,N32,ushort> load<ushort>(Vector128<ushort> src, N4 m, N32 n)
7ffdb06416c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N4,N32,uint> load<uint>(Vector128<uint> src, N4 m, N32 n)
7ffdb06416e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N4,N32,ulong> load<ulong>(Vector128<ulong> src, N4 m, N32 n)
7ffdb06416f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N32,N4,byte> load<byte>(Vector128<byte> src, N32 m, N4 n)
7ffdb0641758h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N32,N4,ushort> load<ushort>(Vector128<ushort> src, N32 m, N4 n)
7ffdb0641770h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N32,N4,uint> load<uint>(Vector128<uint> src, N32 m, N4 n)
7ffdb0641788h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N32,N4,ulong> load<ulong>(Vector128<ulong> src, N32 m, N4 n)
7ffdb06417b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N8,N16,byte> load<byte>(Vector128<byte> src, N8 m, N16 n)
7ffdb06417d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N8,N16,ushort> load<ushort>(Vector128<ushort> src, N8 m, N16 n)
7ffdb06417e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N8,N16,uint> load<uint>(Vector128<uint> src, N8 m, N16 n)
7ffdb0641800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N8,N16,ulong> load<ulong>(Vector128<ulong> src, N8 m, N16 n)
7ffdb0641818h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N16,N8,byte> load<byte>(Vector128<byte> src, N16 m, N8 n)
7ffdb0641830h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N16,N8,ushort> load<ushort>(Vector128<ushort> src, N16 m, N8 n)
7ffdb0641860h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N16,N8,uint> load<uint>(Vector128<uint> src, N16 m, N8 n)
7ffdb0641878h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid128<N16,N8,ulong> load<ulong>(Vector128<ulong> src, N16 m, N8 n)
7ffdb0641890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N1,N256,byte> load<byte>(Vector256<byte> src, N1 m, N256 n)
7ffdb06418c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N1,N256,ushort> load<ushort>(Vector256<ushort> src, N1 m, N256 n)
7ffdb06418d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N1,N256,uint> load<uint>(Vector256<uint> src, N1 m, N256 n)
7ffdb0641908h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N1,N256,ulong> load<ulong>(Vector256<ulong> src, N1 m, N256 n)
7ffdb0641920h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N256,N1,byte> load<byte>(Vector256<byte> src, N256 m, N1 n)
7ffdb0641938h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N256,N1,ushort> load<ushort>(Vector256<ushort> src, N256 m, N1 n)
7ffdb0641950h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N256,N1,uint> load<uint>(Vector256<uint> src, N256 m, N1 n)
7ffdb0641980h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N256,N1,ulong> load<ulong>(Vector256<ulong> src, N256 m, N1 n)
7ffdb0641998h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N2,N128,byte> load<byte>(Vector256<byte> src, N2 m, N128 n)
7ffdb06419c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N2,N128,ushort> load<ushort>(Vector256<ushort> src, N2 m, N128 n)
7ffdb0641c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N2,N128,uint> load<uint>(Vector256<uint> src, N2 m, N128 n)
7ffdb0641ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N2,N128,ulong> load<ulong>(Vector256<ulong> src, N2 m, N128 n)
7ffdb0642118h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N128,N2,byte> load<byte>(Vector256<byte> src, N128 m, N2 n)
7ffdb06423a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N128,N2,ushort> load<ushort>(Vector256<ushort> src, N128 m, N2 n)
7ffdb06423b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N128,N2,uint> load<uint>(Vector256<uint> src, N128 m, N2 n)
7ffdb06423e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N128,N2,ulong> load<ulong>(Vector256<ulong> src, N128 m, N2 n)
7ffdb0642400h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N4,N64,byte> load<byte>(Vector256<byte> src, N4 m, N64 n)
7ffdb0642418h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N4,N64,ushort> load<ushort>(Vector256<ushort> src, N4 m, N64 n)
7ffdb0642430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N4,N64,uint> load<uint>(Vector256<uint> src, N4 m, N64 n)
7ffdb0642448h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N4,N64,ulong> load<ulong>(Vector256<ulong> src, N4 m, N64 n)
7ffdb06424c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N64,N4,byte> load<byte>(Vector256<byte> src, N64 m, N4 n)
7ffdb06424d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N64,N4,ushort> load<ushort>(Vector256<ushort> src, N64 m, N4 n)
7ffdb06424f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N64,N4,uint> load<uint>(Vector256<uint> src, N64 m, N4 n)
7ffdb0642508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N64,N4,ulong> load<ulong>(Vector256<ulong> src, N64 m, N4 n)
7ffdb0642538h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N8,N32,byte> load<byte>(Vector256<byte> src, N8 m, N32 n)
7ffdb0642550h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N8,N32,ushort> load<ushort>(Vector256<ushort> src, N8 m, N32 n)
7ffdb0642568h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N8,N32,uint> load<uint>(Vector256<uint> src, N8 m, N32 n)
7ffdb06425f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N8,N32,ulong> load<ulong>(Vector256<ulong> src, N8 m, N32 n)
7ffdb0642670h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N32,N8,byte> load<byte>(Vector256<byte> src, N32 m, N8 n)
7ffdb0642688h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N32,N8,ushort> load<ushort>(Vector256<ushort> src, N32 m, N8 n)
7ffdb06426b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N32,N8,uint> load<uint>(Vector256<uint> src, N32 m, N8 n)
7ffdb06426d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N32,N8,ulong> load<ulong>(Vector256<ulong> src, N32 m, N8 n)
7ffdb06426e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,byte> load<byte>(Vector256<byte> src, N16 m, N16 n)
7ffdb0642778h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,uint> load<uint>(Vector256<uint> src, N16 m, N16 n)
7ffdb0642808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid256<N16,N16,ulong> load<ulong>(Vector256<ulong> src, N16 m, N16 n)
7ffdb0642850h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> load<byte>(SpanBlock256<byte> src, ushort rows, ushort cols)
7ffdb0642928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> load<ushort>(SpanBlock256<ushort> src, ushort rows, ushort cols)
7ffdb0642958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> load<uint>(SpanBlock256<uint> src, ushort rows, ushort cols)
7ffdb0642970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> load<ulong>(SpanBlock256<ulong> src, ushort rows, ushort cols)
7ffdb0642988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,byte> loadhi<byte>(Vector128<byte> src, N1 m, N64 n)
7ffdb06429a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,ushort> loadhi<ushort>(Vector128<ushort> src, N1 m, N64 n)
7ffdb0642a18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,uint> loadhi<uint>(Vector128<uint> src, N1 m, N64 n)
7ffdb0642a30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,ulong> loadhi<ulong>(Vector128<ulong> src, N1 m, N64 n)
7ffdb0642ad8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,byte> loadhi<byte>(Vector128<byte> src, N64 m, N1 n)
7ffdb0642af0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,ushort> loadhi<ushort>(Vector128<ushort> src, N64 m, N1 n)
7ffdb0642b38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,uint> loadhi<uint>(Vector128<uint> src, N64 m, N1 n)
7ffdb0642b68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,ulong> loadhi<ulong>(Vector128<ulong> src, N64 m, N1 n)
7ffdb0642be0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,byte> loadhi<byte>(Vector128<byte> src, N2 m, N32 n)
7ffdb0642c10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,ushort> loadhi<ushort>(Vector128<ushort> src, N2 m, N32 n)
7ffdb0642c40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,uint> loadhi<uint>(Vector128<uint> src, N2 m, N32 n)
7ffdb0642c70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,ulong> loadhi<ulong>(Vector128<ulong> src, N2 m, N32 n)
7ffdb0642d00h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,byte> loadhi<byte>(Vector128<byte> src, N32 m, N2 n)
7ffdb0642d30h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,ushort> loadhi<ushort>(Vector128<ushort> src, N32 m, N2 n)
7ffdb0642d60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,uint> loadhi<uint>(Vector128<uint> src, N32 m, N2 n)
7ffdb0642d90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,ulong> loadhi<ulong>(Vector128<ulong> src, N32 m, N2 n)
7ffdb0642e20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,byte> loadhi<byte>(Vector128<byte> src, N4 m, N16 n)
7ffdb0642e50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,ushort> loadhi<ushort>(Vector128<ushort> src, N4 m, N16 n)
7ffdb0642f28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,uint> loadhi<uint>(Vector128<uint> src, N4 m, N16 n)
7ffdb0642f58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,ulong> loadhi<ulong>(Vector128<ulong> src, N4 m, N16 n)
7ffdb0643078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,byte> loadhi<byte>(Vector128<byte> src, N16 m, N4 n)
7ffdb06430a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,ushort> loadhi<ushort>(Vector128<ushort> src, N16 m, N4 n)
7ffdb0643168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,uint> loadhi<uint>(Vector128<uint> src, N16 m, N4 n)
7ffdb0643198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,ulong> loadhi<ulong>(Vector128<ulong> src, N16 m, N4 n)
7ffdb0643258h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,byte> loadhi<byte>(Vector128<byte> src, N8 m, N8 n)
7ffdb0643270h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,ushort> loadhi<ushort>(Vector128<ushort> src, N8 m, N8 n)
7ffdb0643378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,uint> loadhi<uint>(Vector128<uint> src, N8 m, N8 n)
7ffdb0643408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,ulong> loadhi<ulong>(Vector128<ulong> src, N8 m, N8 n)
7ffdb06434b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,byte> loadlo<byte>(Vector128<byte> src, N1 m, N64 n)
7ffdb06434e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,ushort> loadlo<ushort>(Vector128<ushort> src, N1 m, N64 n)
7ffdb0643510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,uint> loadlo<uint>(Vector128<uint> src, N1 m, N64 n)
7ffdb0643618h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N1,N64,ulong> loadlo<ulong>(Vector128<ulong> src, N1 m, N64 n)
7ffdb06436d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,byte> loadlo<byte>(Vector128<byte> src, N64 m, N1 n)
7ffdb0643720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,ushort> loadlo<ushort>(Vector128<ushort> src, N64 m, N1 n)
7ffdb0643750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,uint> loadlo<uint>(Vector128<uint> src, N64 m, N1 n)
7ffdb0643780h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N64,N1,ulong> loadlo<ulong>(Vector128<ulong> src, N64 m, N1 n)
7ffdb0643798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,byte> loadlo<byte>(Vector128<byte> src, N2 m, N32 n)
7ffdb06437c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,ushort> loadlo<ushort>(Vector128<ushort> src, N2 m, N32 n)
7ffdb06437f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,uint> loadlo<uint>(Vector128<uint> src, N2 m, N32 n)
7ffdb0643828h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N2,N32,ulong> loadlo<ulong>(Vector128<ulong> src, N2 m, N32 n)
7ffdb0643840h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,byte> loadlo<byte>(Vector128<byte> src, N32 m, N2 n)
7ffdb0643870h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,ushort> loadlo<ushort>(Vector128<ushort> src, N32 m, N2 n)
7ffdb06438b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,uint> loadlo<uint>(Vector128<uint> src, N32 m, N2 n)
7ffdb06438d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N32,N2,ulong> loadlo<ulong>(Vector128<ulong> src, N32 m, N2 n)
7ffdb06438e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,byte> loadlo<byte>(Vector128<byte> src, N4 m, N16 n)
7ffdb0643918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,ushort> loadlo<ushort>(Vector128<ushort> src, N4 m, N16 n)
7ffdb0643960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,uint> loadlo<uint>(Vector128<uint> src, N4 m, N16 n)
7ffdb0643978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N4,N16,ulong> loadlo<ulong>(Vector128<ulong> src, N4 m, N16 n)
7ffdb0643990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,byte> loadlo<byte>(Vector128<byte> src, N16 m, N4 n)
7ffdb06439d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,ushort> loadlo<ushort>(Vector128<ushort> src, N16 m, N4 n)
7ffdb0643a08h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,uint> loadlo<uint>(Vector128<uint> src, N16 m, N4 n)
7ffdb0643a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N16,N4,ulong> loadlo<ulong>(Vector128<ulong> src, N16 m, N4 n)
7ffdb0643a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,byte> loadlo<byte>(Vector128<byte> src, N8 m, N8 n)
7ffdb0643a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,ushort> loadlo<ushort>(Vector128<ushort> src, N8 m, N8 n)
7ffdb0643a98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,uint> loadlo<uint>(Vector128<uint> src, N8 m, N8 n)
7ffdb0643ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,ulong> loadlo<ulong>(Vector128<ulong> src, N8 m, N8 n)
7ffdb0643ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GridMetrics metrics<byte>(ushort rows, ushort cols)
7ffdb0643b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GridMetrics metrics<ushort>(ushort rows, ushort cols)
7ffdb0643c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GridMetrics metrics<uint>(ushort rows, ushort cols)
7ffdb0643cc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# GridMetrics metrics<ulong>(ushort rows, ushort cols)
7ffdb0643e10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<byte> nand<byte>(BitGrid16<byte> x, BitGrid16<byte> y)
7ffdb06489a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<sbyte> nand<sbyte>(BitGrid16<sbyte> x, BitGrid16<sbyte> y)
7ffdb0648b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<ushort> nand<ushort>(BitGrid16<ushort> x, BitGrid16<ushort> y)
7ffdb0648c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<short> nand<short>(BitGrid16<short> x, BitGrid16<short> y)
7ffdb0649440h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<byte> nand<byte>(BitGrid32<byte> x, BitGrid32<byte> y)
7ffdb0649458h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<sbyte> nand<sbyte>(BitGrid32<sbyte> x, BitGrid32<sbyte> y)
7ffdb0649488h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<ushort> nand<ushort>(BitGrid32<ushort> x, BitGrid32<ushort> y)
7ffdb0649518h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<short> nand<short>(BitGrid32<short> x, BitGrid32<short> y)
7ffdb0649740h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<uint> nand<uint>(BitGrid32<uint> x, BitGrid32<uint> y)
7ffdb0649e78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<int> nand<int>(BitGrid32<int> x, BitGrid32<int> y)
7ffdb0649ea8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<byte> nand<byte>(BitGrid64<byte> x, BitGrid64<byte> y)
7ffdb064a0e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ushort> nand<ushort>(BitGrid64<ushort> x, BitGrid64<ushort> y)
7ffdb064a880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<uint> nand<uint>(BitGrid64<uint> x, BitGrid64<uint> y)
7ffdb064a928h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ulong> nand<ulong>(BitGrid64<ulong> x, BitGrid64<ulong> y)
7ffdb064a970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> nand<byte>(in BitSpanBlocks256<byte> x, in BitSpanBlocks256<byte> y, in BitSpanBlocks256<byte> gz)
7ffdb064a9b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> nand<ushort>(in BitSpanBlocks256<ushort> x, in BitSpanBlocks256<ushort> y, in BitSpanBlocks256<ushort> gz)
7ffdb06703a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> nand<uint>(in BitSpanBlocks256<uint> x, in BitSpanBlocks256<uint> y, in BitSpanBlocks256<uint> gz)
7ffdb06715f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> nand<ulong>(in BitSpanBlocks256<ulong> x, in BitSpanBlocks256<ulong> y, in BitSpanBlocks256<ulong> gz)
7ffdb0672b98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<byte> negate<byte>(BitGrid16<byte> x)
7ffdb06737f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<sbyte> negate<sbyte>(BitGrid16<sbyte> x)
7ffdb0673858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<ushort> negate<ushort>(BitGrid16<ushort> x)
7ffdb0673888h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<short> negate<short>(BitGrid16<short> x)
7ffdb06738a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<byte> negate<byte>(BitGrid32<byte> x)
7ffdb06738d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<sbyte> negate<sbyte>(BitGrid32<sbyte> x)
7ffdb0673918h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<ushort> negate<ushort>(BitGrid32<ushort> x)
7ffdb0673930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<short> negate<short>(BitGrid32<short> x)
7ffdb0673960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<uint> negate<uint>(BitGrid32<uint> x)
7ffdb0673978h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<int> negate<int>(BitGrid32<int> x)
7ffdb06739a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<byte> negate<byte>(BitGrid64<byte> x)
7ffdb06739f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ushort> negate<ushort>(BitGrid64<ushort> x)
7ffdb0673a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<uint> negate<uint>(BitGrid64<uint> x)
7ffdb0673a80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ulong> negate<ulong>(BitGrid64<ulong> x)
7ffdb0673ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> negate<byte>(BitSpanBlocks256<byte> x, BitSpanBlocks256<byte> gz)
7ffdb0673af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> negate<ushort>(BitSpanBlocks256<ushort> x, BitSpanBlocks256<ushort> gz)
7ffdb0673c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> negate<uint>(BitSpanBlocks256<uint> x, BitSpanBlocks256<uint> gz)
7ffdb0673d38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> negate<ulong>(BitSpanBlocks256<ulong> x, BitSpanBlocks256<ulong> gz)
7ffdb0673f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<byte> nonimpl<byte>(BitGrid16<byte> gx, BitGrid16<byte> gy)
7ffdb0678198h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<sbyte> nonimpl<sbyte>(BitGrid16<sbyte> gx, BitGrid16<sbyte> gy)
7ffdb0678228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<ushort> nonimpl<ushort>(BitGrid16<ushort> gx, BitGrid16<ushort> gy)
7ffdb06782a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<short> nonimpl<short>(BitGrid16<short> gx, BitGrid16<short> gy)
7ffdb06782e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<byte> nonimpl<byte>(BitGrid32<byte> gx, BitGrid32<byte> gy)
7ffdb0678348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<sbyte> nonimpl<sbyte>(BitGrid32<sbyte> gx, BitGrid32<sbyte> gy)
7ffdb06783c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<ushort> nonimpl<ushort>(BitGrid32<ushort> gx, BitGrid32<ushort> gy)
7ffdb0678408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<short> nonimpl<short>(BitGrid32<short> gx, BitGrid32<short> gy)
7ffdb0678468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<uint> nonimpl<uint>(BitGrid32<uint> gx, BitGrid32<uint> gy)
7ffdb06784c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<int> nonimpl<int>(BitGrid32<int> gx, BitGrid32<int> gy)
7ffdb06784f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<byte> nonimpl<byte>(BitGrid64<byte> gx, BitGrid64<byte> gy)
7ffdb0678630h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ushort> nonimpl<ushort>(BitGrid64<ushort> gx, BitGrid64<ushort> gy)
7ffdb0678690h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<uint> nonimpl<uint>(BitGrid64<uint> gx, BitGrid64<uint> gy)
7ffdb06786a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ulong> nonimpl<ulong>(BitGrid64<ulong> gx, BitGrid64<ulong> gy)
7ffdb06786c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> nonimpl<byte>(in BitSpanBlocks256<byte> a, in BitSpanBlocks256<byte> b, in BitSpanBlocks256<byte> dst)
7ffdb06786d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> nonimpl<ushort>(in BitSpanBlocks256<ushort> a, in BitSpanBlocks256<ushort> b, in BitSpanBlocks256<ushort> dst)
7ffdb06787b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> nonimpl<uint>(in BitSpanBlocks256<uint> a, in BitSpanBlocks256<uint> b, in BitSpanBlocks256<uint> dst)
7ffdb06789a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> nonimpl<ulong>(in BitSpanBlocks256<ulong> a, in BitSpanBlocks256<ulong> b, in BitSpanBlocks256<ulong> dst)
7ffdb0678ab0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<byte> nor<byte>(BitGrid16<byte> gx, BitGrid16<byte> gy)
7ffdb0679a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<sbyte> nor<sbyte>(BitGrid16<sbyte> gx, BitGrid16<sbyte> gy)
7ffdb0679a88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<ushort> nor<ushort>(BitGrid16<ushort> gx, BitGrid16<ushort> gy)
7ffdb0679ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<short> nor<short>(BitGrid16<short> gx, BitGrid16<short> gy)
7ffdb067a1a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<byte> nor<byte>(BitGrid32<byte> gx, BitGrid32<byte> gy)
7ffdb067a7c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<sbyte> nor<sbyte>(BitGrid32<sbyte> gx, BitGrid32<sbyte> gy)
7ffdb067a7f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<ushort> nor<ushort>(BitGrid32<ushort> gx, BitGrid32<ushort> gy)
7ffdb067a808h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<short> nor<short>(BitGrid32<short> gx, BitGrid32<short> gy)
7ffdb067a868h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<uint> nor<uint>(BitGrid32<uint> gx, BitGrid32<uint> gy)
7ffdb067a880h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<int> nor<int>(BitGrid32<int> gx, BitGrid32<int> gy)
7ffdb067a898h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<byte> nor<byte>(BitGrid64<byte> gx, BitGrid64<byte> gy)
7ffdb067a8b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ushort> nor<ushort>(BitGrid64<ushort> gx, BitGrid64<ushort> gy)
7ffdb067a8e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<uint> nor<uint>(BitGrid64<uint> gx, BitGrid64<uint> gy)
7ffdb067a970h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ulong> nor<ulong>(BitGrid64<ulong> gx, BitGrid64<ulong> gy)
7ffdb067a9a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> nor<byte>(in BitSpanBlocks256<byte> gx, in BitSpanBlocks256<byte> gy, in BitSpanBlocks256<byte> gz)
7ffdb067a9d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> nor<ushort>(in BitSpanBlocks256<ushort> gx, in BitSpanBlocks256<ushort> gy, in BitSpanBlocks256<ushort> gz)
7ffdb067aef8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> nor<uint>(in BitSpanBlocks256<uint> gx, in BitSpanBlocks256<uint> gy, in BitSpanBlocks256<uint> gz)
7ffdb067b960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> nor<ulong>(in BitSpanBlocks256<ulong> gx, in BitSpanBlocks256<ulong> gy, in BitSpanBlocks256<ulong> gz)
7ffdb06b1890h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<byte> not<byte>(BitGrid16<byte> gx)
7ffdb06b19b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<sbyte> not<sbyte>(BitGrid16<sbyte> gx)
7ffdb06b1a28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<ushort> not<ushort>(BitGrid16<ushort> gx)
7ffdb06b1a40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<short> not<short>(BitGrid16<short> gx)
7ffdb06b1a58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<byte> not<byte>(BitGrid32<byte> gx)
7ffdb06b1a70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<sbyte> not<sbyte>(BitGrid32<sbyte> gx)
7ffdb06b1aa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<ushort> not<ushort>(BitGrid32<ushort> gx)
7ffdb06b1ad0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<short> not<short>(BitGrid32<short> gx)
7ffdb06b1b18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<uint> not<uint>(BitGrid32<uint> gx)
7ffdb06b1b48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<int> not<int>(BitGrid32<int> gx)
7ffdb06b1b60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<byte> not<byte>(BitGrid64<byte> gx)
7ffdb06b1b78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ushort> not<ushort>(BitGrid64<ushort> gx)
7ffdb06b1ba8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<uint> not<uint>(BitGrid64<uint> gx)
7ffdb06b1bc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ulong> not<ulong>(BitGrid64<ulong> gx)
7ffdb06b1bd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<byte> ones<byte>(W16 w)
7ffdb06b1bf0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<sbyte> ones<sbyte>(W16 w)
7ffdb06b1c38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<ushort> ones<ushort>(W16 w)
7ffdb06b1c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<short> ones<short>(W16 w)
7ffdb06b1c80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<byte> ones<byte>(W32 w)
7ffdb06b1c98h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<sbyte> ones<sbyte>(W32 w)
7ffdb06b1cc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<ushort> ones<ushort>(W32 w)
7ffdb06b1ce0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<short> ones<short>(W32 w)
7ffdb06b1cf8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<uint> ones<uint>(W32 w)
7ffdb06b1d28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<int> ones<int>(W32 w)
7ffdb06b1d40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<byte> ones<byte>(N64 n)
7ffdb06b1d58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ushort> ones<ushort>(N64 n)
7ffdb06b1d88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<uint> ones<uint>(N64 n)
7ffdb06b1db8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ulong> ones<ulong>(N64 n)
7ffdb06b1dd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> ones<byte>(in BitSpanBlocks256<byte> dst)
7ffdb06b1de8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> ones<ushort>(in BitSpanBlocks256<ushort> dst)
7ffdb06b1e90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> ones<uint>(in BitSpanBlocks256<uint> dst)
7ffdb06b1ed8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> ones<ulong>(in BitSpanBlocks256<ulong> dst)
7ffdb06b1f20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<byte> or<byte>(BitGrid16<byte> gx, BitGrid16<byte> gy)
7ffdb06b1f38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<sbyte> or<sbyte>(BitGrid16<sbyte> gx, BitGrid16<sbyte> gy)
7ffdb06b1f80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<ushort> or<ushort>(BitGrid16<ushort> gx, BitGrid16<ushort> gy)
7ffdb06b1fb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<short> or<short>(BitGrid16<short> gx, BitGrid16<short> gy)
7ffdb06b1fc8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<byte> or<byte>(BitGrid32<byte> gx, BitGrid32<byte> gy)
7ffdb06b1fe0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<sbyte> or<sbyte>(BitGrid32<sbyte> gx, BitGrid32<sbyte> gy)
7ffdb06b2088h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<ushort> or<ushort>(BitGrid32<ushort> gx, BitGrid32<ushort> gy)
7ffdb06b20a0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<short> or<short>(BitGrid32<short> gx, BitGrid32<short> gy)
7ffdb06b20b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<uint> or<uint>(BitGrid32<uint> gx, BitGrid32<uint> gy)
7ffdb06b20e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<int> or<int>(BitGrid32<int> gx, BitGrid32<int> gy)
7ffdb06b2100h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<byte> or<byte>(BitGrid64<byte> gx, BitGrid64<byte> gy)
7ffdb06b2190h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ushort> or<ushort>(BitGrid64<ushort> gx, BitGrid64<ushort> gy)
7ffdb06b21c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<uint> or<uint>(BitGrid64<uint> gx, BitGrid64<uint> gy)
7ffdb06b21f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ulong> or<ulong>(BitGrid64<ulong> gx, BitGrid64<ulong> gy)
7ffdb06b2208h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> or<byte>(in BitSpanBlocks256<byte> gx, in BitSpanBlocks256<byte> gy, in BitSpanBlocks256<byte> gz)
7ffdb06b2220h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> or<ushort>(in BitSpanBlocks256<ushort> gx, in BitSpanBlocks256<ushort> gy, in BitSpanBlocks256<ushort> gz)
7ffdb06b2430h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> or<uint>(in BitSpanBlocks256<uint> gx, in BitSpanBlocks256<uint> gy, in BitSpanBlocks256<uint> gz)
7ffdb06b2508h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> or<ulong>(in BitSpanBlocks256<ulong> gx, in BitSpanBlocks256<ulong> gy, in BitSpanBlocks256<ulong> gz)
7ffdb06b2598h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<byte> parse<byte>(BitString bs, W16 w)
7ffdb06b2688h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<sbyte> parse<sbyte>(BitString bs, W16 w)
7ffdb06b2ce8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<ushort> parse<ushort>(BitString bs, W16 w)
7ffdb06b3720h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<short> parse<short>(BitString bs, W16 w)
7ffdb06b3798h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<byte> parse<byte>(BitString bs, N32 n, int rows, int cols, byte t)
7ffdb06b3810h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<sbyte> parse<sbyte>(BitString bs, N32 n, int rows, int cols, sbyte t)
7ffdb06b38d0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<ushort> parse<ushort>(BitString bs, N32 n, int rows, int cols, ushort t)
7ffdb06b3900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<short> parse<short>(BitString bs, N32 n, int rows, int cols, short t)
7ffdb06b3960h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<uint> parse<uint>(BitString bs, N32 n, int rows, int cols, uint t)
7ffdb06b8378h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<int> parse<int>(BitString bs, N32 n, int rows, int cols, int t)
7ffdb06b8480h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<byte> parse<byte>(BitString bs, N64 n, int rows, int cols, byte t)
7ffdb06b85b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ushort> parse<ushort>(BitString bs, N64 n, int rows, int cols, ushort t)
7ffdb06b8750h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<uint> parse<uint>(BitString bs, N64 n, int rows, int cols, uint t)
7ffdb06b8990h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ulong> parse<ulong>(BitString bs, N64 n, int rows, int cols, ulong t)
7ffdb06b8a68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit readbit<byte>(in byte src, int bitpos)
7ffdb06b8c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref byte readcell<byte>(in byte src, int bitpos)
7ffdb06b8c78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit readbit<ushort>(in ushort src, int bitpos)
7ffdb06b8e28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ushort readcell<ushort>(in ushort src, int bitpos)
7ffdb06b8e58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit readbit<uint>(in uint src, int bitpos)
7ffdb06b8ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref uint readcell<uint>(in uint src, int bitpos)
7ffdb06b8ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit readbit<ulong>(in ulong src, int bitpos)
7ffdb06b8ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ref ulong readcell<ulong>(in ulong src, int bitpos)
7ffdb06b9008h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit readbit<byte>(in byte src, uint bitpos)
7ffdb06b9038h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit readbit<ushort>(in ushort src, uint bitpos)
7ffdb06b90b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit readbit<uint>(in uint src, uint bitpos)
7ffdb06b9248h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit readbit<ulong>(in ulong src, uint bitpos)
7ffdb06b9320h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit readbit<byte>(int width, in byte src, int row, int col)
7ffdb06b96f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit readbit<ushort>(int width, in ushort src, int row, int col)
7ffdb06b9800h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit readbit<uint>(int width, in uint src, int row, int col)
7ffdb06b9848h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# bit readbit<ulong>(int width, in ulong src, int row, int col)
7ffdb06b9c50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> replicate<byte>(BitSpanBlocks256<byte> src)
7ffdb06b9c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> replicate<ushort>(BitSpanBlocks256<ushort> src)
7ffdb06babb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> replicate<uint>(BitSpanBlocks256<uint> src)
7ffdb06bac28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> replicate<ulong>(BitSpanBlocks256<ulong> src)
7ffdb06baca0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<byte> rotl<byte>(BitGrid16<byte> g, byte shift)
7ffdb06bad18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<sbyte> rotl<sbyte>(BitGrid16<sbyte> g, byte shift)
7ffdb06bad48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<ushort> rotl<ushort>(BitGrid16<ushort> g, byte shift)
7ffdb06bad60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<short> rotl<short>(BitGrid16<short> g, byte shift)
7ffdb06bada8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<byte> rotl<byte>(BitGrid32<byte> g, byte shift)
7ffdb06badd8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<sbyte> rotl<sbyte>(BitGrid32<sbyte> g, byte shift)
7ffdb06bae20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<ushort> rotl<ushort>(BitGrid32<ushort> g, byte shift)
7ffdb06bae50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<short> rotl<short>(BitGrid32<short> g, byte shift)
7ffdb06bae80h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<uint> rotl<uint>(BitGrid32<uint> g, byte shift)
7ffdb06baeb0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<int> rotl<int>(BitGrid32<int> g, byte shift)
7ffdb06baee0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<byte> rotl<byte>(BitGrid64<byte> g, byte shift)
7ffdb06baf10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ushort> rotl<ushort>(BitGrid64<ushort> g, byte shift)
7ffdb06baf70h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<uint> rotl<uint>(BitGrid64<uint> g, byte shift)
7ffdb06bafa0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ulong> rotl<ulong>(BitGrid64<ulong> g, byte shift)
7ffdb06bafd0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<byte> rotr<byte>(BitGrid16<byte> g, byte offset)
7ffdb06bb000h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<sbyte> rotr<sbyte>(BitGrid16<sbyte> g, byte offset)
7ffdb06bb048h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<ushort> rotr<ushort>(BitGrid16<ushort> g, byte offset)
7ffdb06bb078h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<short> rotr<short>(BitGrid16<short> g, byte offset)
7ffdb06bb0a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<byte> rotr<byte>(BitGrid32<byte> g, byte offset)
7ffdb06bb0d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<sbyte> rotr<sbyte>(BitGrid32<sbyte> g, byte offset)
7ffdb06bb168h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<ushort> rotr<ushort>(BitGrid32<ushort> g, byte offset)
7ffdb06bb1c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<short> rotr<short>(BitGrid32<short> g, byte offset)
7ffdb06bb228h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<uint> rotr<uint>(BitGrid32<uint> g, byte offset)
7ffdb06bb288h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<int> rotr<int>(BitGrid32<int> g, byte offset)
7ffdb06bb318h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<byte> rotr<byte>(BitGrid64<byte> g, byte offset)
7ffdb06bb348h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ushort> rotr<ushort>(BitGrid64<ushort> g, byte offset)
7ffdb06bb3f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<uint> rotr<uint>(BitGrid64<uint> g, byte offset)
7ffdb06bb408h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ulong> rotr<ulong>(BitGrid64<ulong> g, byte offset)
7ffdb06bb468h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<byte> slice<byte>(BitGrid32<byte> g, byte index, byte length)
7ffdb06bb498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<sbyte> slice<sbyte>(BitGrid32<sbyte> g, byte index, byte length)
7ffdb06bb948h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<ushort> slice<ushort>(BitGrid32<ushort> g, byte index, byte length)
7ffdb06bbe58h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<short> slice<short>(BitGrid32<short> g, byte index, byte length)
7ffdb07006d8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<uint> slice<uint>(BitGrid32<uint> g, byte index, byte length)
7ffdb07010e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<int> slice<int>(BitGrid32<int> g, byte index, byte length)
7ffdb0702370h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<byte> slice<byte>(BitGrid64<byte> g, byte index, byte length)
7ffdb0703330h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<ushort> slice<ushort>(BitGrid64<ushort> g, byte index, byte length)
7ffdb0708c60h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<uint> slice<uint>(BitGrid64<uint> g, byte index, byte length)
7ffdb0708f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ScalarBits<ulong> slice<ulong>(BitGrid64<ulong> g, byte index, byte length)
7ffdb0708fa8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# byte tablesize<byte>(byte rows, byte cols)
7ffdb07094b8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ushort tablesize<ushort>(ushort rows, ushort cols)
7ffdb07099b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# uint tablesize<uint>(uint rows, uint cols)
7ffdb0709c68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# ulong tablesize<ulong>(ulong rows, ulong cols)
7ffdb070a3e8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<N8,N8,byte> transpose<byte>(BitGrid64<N8,N8,byte> g)
7ffdb070bc18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<byte> xnor<byte>(BitGrid16<byte> gx, BitGrid16<byte> gy)
7ffdb0720ea0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<sbyte> xnor<sbyte>(BitGrid16<sbyte> gx, BitGrid16<sbyte> gy)
7ffdb0720ed0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<ushort> xnor<ushort>(BitGrid16<ushort> gx, BitGrid16<ushort> gy)
7ffdb0720f78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<short> xnor<short>(BitGrid16<short> gx, BitGrid16<short> gy)
7ffdb0720f90h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<byte> xnor<byte>(BitGrid32<byte> gx, BitGrid32<byte> gy)
7ffdb0720fc0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<sbyte> xnor<sbyte>(BitGrid32<sbyte> gx, BitGrid32<sbyte> gy)
7ffdb0720ff0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<ushort> xnor<ushort>(BitGrid32<ushort> gx, BitGrid32<ushort> gy)
7ffdb0721278h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<short> xnor<short>(BitGrid32<short> gx, BitGrid32<short> gy)
7ffdb07212a8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<uint> xnor<uint>(BitGrid32<uint> gx, BitGrid32<uint> gy)
7ffdb0721ae8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<int> xnor<int>(BitGrid32<int> gx, BitGrid32<int> gy)
7ffdb0722238h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<byte> xnor<byte>(BitGrid64<byte> gx, BitGrid64<byte> gy)
7ffdb07227c0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ushort> xnor<ushort>(BitGrid64<ushort> gx, BitGrid64<ushort> gy)
7ffdb0722958h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<uint> xnor<uint>(BitGrid64<uint> gx, BitGrid64<uint> gy)
7ffdb0722988h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ulong> xnor<ulong>(BitGrid64<ulong> gx, BitGrid64<ulong> gy)
7ffdb0722b20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> xnor<byte>(in BitSpanBlocks256<byte> gx, in BitSpanBlocks256<byte> gy, in BitSpanBlocks256<byte> gz)
7ffdb0722b68h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> xnor<ushort>(in BitSpanBlocks256<ushort> gx, in BitSpanBlocks256<ushort> gy, in BitSpanBlocks256<ushort> gz)
7ffdb0722d78h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> xnor<uint>(in BitSpanBlocks256<uint> gx, in BitSpanBlocks256<uint> gy, in BitSpanBlocks256<uint> gz)
7ffdb07231e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> xnor<ulong>(in BitSpanBlocks256<ulong> gx, in BitSpanBlocks256<ulong> gy, in BitSpanBlocks256<ulong> gz)
7ffdb0723858h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<byte> xor<byte>(BitGrid16<byte> gx, BitGrid16<byte> gy)
7ffdb0723900h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<sbyte> xor<sbyte>(BitGrid16<sbyte> gx, BitGrid16<sbyte> gy)
7ffdb0723930h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<ushort> xor<ushort>(BitGrid16<ushort> gx, BitGrid16<ushort> gy)
7ffdb0723a20h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid16<short> xor<short>(BitGrid16<short> gx, BitGrid16<short> gy)
7ffdb0723a38h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<byte> xor<byte>(BitGrid32<byte> gx, BitGrid32<byte> gy)
7ffdb0723a50h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<sbyte> xor<sbyte>(BitGrid32<sbyte> gx, BitGrid32<sbyte> gy)
7ffdb0723ac8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<ushort> xor<ushort>(BitGrid32<ushort> gx, BitGrid32<ushort> gy)
7ffdb0723ae0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<short> xor<short>(BitGrid32<short> gx, BitGrid32<short> gy)
7ffdb0723af8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<uint> xor<uint>(BitGrid32<uint> gx, BitGrid32<uint> gy)
7ffdb0723b10h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid32<int> xor<int>(BitGrid32<int> gx, BitGrid32<int> gy)
7ffdb0723b28h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<byte> xor<byte>(BitGrid64<byte> gx, BitGrid64<byte> gy)
7ffdb0723b40h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ushort> xor<ushort>(BitGrid64<ushort> gx, BitGrid64<ushort> gy)
7ffdb0723b88h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<uint> xor<uint>(BitGrid64<uint> gx, BitGrid64<uint> gy)
7ffdb0723ba0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitGrid64<ulong> xor<ulong>(BitGrid64<ulong> gx, BitGrid64<ulong> gy)
7ffdb0723c18h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<byte> xor<byte>(in BitSpanBlocks256<byte> gx, in BitSpanBlocks256<byte> gy, in BitSpanBlocks256<byte> gz)
7ffdb0723c48h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ushort> xor<ushort>(in BitSpanBlocks256<ushort> gx, in BitSpanBlocks256<ushort> gy, in BitSpanBlocks256<ushort> gz)
7ffdb0728060h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<uint> xor<uint>(in BitSpanBlocks256<uint> gx, in BitSpanBlocks256<uint> gy, in BitSpanBlocks256<uint> gz)
7ffdb07280f0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpanBlocks256<ulong> xor<ulong>(in BitSpanBlocks256<ulong> gx, in BitSpanBlocks256<ulong> gy, in BitSpanBlocks256<ulong> gz)
7ffdb07281b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan ToBitSpan(Span<bit> src)
7ffdae033498h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan ToBitSpan(ReadOnlySpan<bit> src)
7ffdae0334b0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan ToBitSpan(ReadOnlySpan<byte> src)
7ffdae0334c8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan ToBitSpan(ReadOnlySpan<ushort> src)
7ffdae0334e0h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan ToBitSpan(ReadOnlySpan<uint> src)
7ffdae0334f8h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan ToBitSpan(ReadOnlySpan<ulong> src)
7ffdae033510h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan ToBitSpan(Span<byte> src)
7ffdae033528h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan ToBitSpan(Span<ushort> src)
7ffdae033540h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan ToBitSpan(Span<uint> src)
7ffdae033558h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
# BitSpan ToBitSpan(Span<ulong> src)
7ffdae033570h 6 jmp qword ptr [rip+3ffah] # ff 25 fa 3f 00 00
