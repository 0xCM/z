// namespace Z0
// {
//     [ApiHost]
//     public readonly partial struct DataStores
//     {
//         const NumericKind Closure = UnsignedInts;
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1<T> alloc1<T>(int count)
//             where T : unmanaged
//                 => new S1<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1
//         {
//             public const int Size = 1;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1.Size + 4, Pack=1)]
//         public struct S1<T>
//         {
//             public readonly uint Count;

//             S1 Data;

//             [MethodImpl(Inline)]
//             public S1(int count, S1 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1(uint count, S1 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count2<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S2.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S2<T> alloc2<T>(int count)
//             where T : unmanaged
//                 => new S2<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S2
//         {
//             public const int Size = 2;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S2.Size + 4, Pack=1)]
//         public struct S2<T>
//         {
//             public readonly uint Count;

//             S2 Data;

//             [MethodImpl(Inline)]
//             public S2(int count, S2 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S2(uint count, S2 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count3<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S3.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S3<T> alloc3<T>(int count)
//             where T : unmanaged
//                 => new S3<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S3
//         {
//             public const int Size = 3;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S3.Size + 4, Pack=1)]
//         public struct S3<T>
//         {
//             public readonly uint Count;

//             S3 Data;

//             [MethodImpl(Inline)]
//             public S3(int count, S3 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S3(uint count, S3 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count4<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S4.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S4<T> alloc4<T>(int count)
//             where T : unmanaged
//                 => new S4<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S4
//         {
//             public const int Size = 4;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S4.Size + 4, Pack=1)]
//         public struct S4<T>
//         {
//             public readonly uint Count;

//             S4 Data;

//             [MethodImpl(Inline)]
//             public S4(int count, S4 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S4(uint count, S4 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count5<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S5.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S5<T> alloc5<T>(int count)
//             where T : unmanaged
//                 => new S5<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S5
//         {
//             public const int Size = 5;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S5.Size + 4, Pack=1)]
//         public struct S5<T>
//         {
//             public readonly uint Count;

//             S5 Data;

//             [MethodImpl(Inline)]
//             public S5(int count, S5 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S5(uint count, S5 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count6<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S6.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S6<T> alloc6<T>(int count)
//             where T : unmanaged
//                 => new S6<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S6
//         {
//             public const int Size = 6;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S6.Size + 4, Pack=1)]
//         public struct S6<T>
//         {
//             public readonly uint Count;

//             S6 Data;

//             [MethodImpl(Inline)]
//             public S6(int count, S6 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S6(uint count, S6 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count7<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S7.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S7<T> alloc7<T>(int count)
//             where T : unmanaged
//                 => new S7<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S7
//         {
//             public const int Size = 7;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S7.Size + 4, Pack=1)]
//         public struct S7<T>
//         {
//             public readonly uint Count;

//             S7 Data;

//             [MethodImpl(Inline)]
//             public S7(int count, S7 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S7(uint count, S7 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count8<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S8.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S8<T> alloc8<T>(int count)
//             where T : unmanaged
//                 => new S8<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S8
//         {
//             public const int Size = 8;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S8.Size + 4, Pack=1)]
//         public struct S8<T>
//         {
//             public readonly uint Count;

//             S8 Data;

//             [MethodImpl(Inline)]
//             public S8(int count, S8 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S8(uint count, S8 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count9<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S9.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S9<T> alloc9<T>(int count)
//             where T : unmanaged
//                 => new S9<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S9
//         {
//             public const int Size = 9;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S9.Size + 4, Pack=1)]
//         public struct S9<T>
//         {
//             public readonly uint Count;

//             S9 Data;

//             [MethodImpl(Inline)]
//             public S9(int count, S9 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S9(uint count, S9 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count10<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S10.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S10<T> alloc10<T>(int count)
//             where T : unmanaged
//                 => new S10<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S10
//         {
//             public const int Size = 10;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S10.Size + 4, Pack=1)]
//         public struct S10<T>
//         {
//             public readonly uint Count;

//             S10 Data;

//             [MethodImpl(Inline)]
//             public S10(int count, S10 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S10(uint count, S10 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count11<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S11.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S11<T> alloc11<T>(int count)
//             where T : unmanaged
//                 => new S11<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S11
//         {
//             public const int Size = 11;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S11.Size + 4, Pack=1)]
//         public struct S11<T>
//         {
//             public readonly uint Count;

//             S11 Data;

//             [MethodImpl(Inline)]
//             public S11(int count, S11 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S11(uint count, S11 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count12<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S12.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S12<T> alloc12<T>(int count)
//             where T : unmanaged
//                 => new S12<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S12
//         {
//             public const int Size = 12;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S12.Size + 4, Pack=1)]
//         public struct S12<T>
//         {
//             public readonly uint Count;

//             S12 Data;

//             [MethodImpl(Inline)]
//             public S12(int count, S12 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S12(uint count, S12 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count13<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S13.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S13<T> alloc13<T>(int count)
//             where T : unmanaged
//                 => new S13<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S13
//         {
//             public const int Size = 13;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S13.Size + 4, Pack=1)]
//         public struct S13<T>
//         {
//             public readonly uint Count;

//             S13 Data;

//             [MethodImpl(Inline)]
//             public S13(int count, S13 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S13(uint count, S13 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count14<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S14.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S14<T> alloc14<T>(int count)
//             where T : unmanaged
//                 => new S14<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S14
//         {
//             public const int Size = 14;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S14.Size + 4, Pack=1)]
//         public struct S14<T>
//         {
//             public readonly uint Count;

//             S14 Data;

//             [MethodImpl(Inline)]
//             public S14(int count, S14 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S14(uint count, S14 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count15<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S15.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S15<T> alloc15<T>(int count)
//             where T : unmanaged
//                 => new S15<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S15
//         {
//             public const int Size = 15;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S15.Size + 4, Pack=1)]
//         public struct S15<T>
//         {
//             public readonly uint Count;

//             S15 Data;

//             [MethodImpl(Inline)]
//             public S15(int count, S15 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S15(uint count, S15 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count16<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S16.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S16<T> alloc16<T>(int count)
//             where T : unmanaged
//                 => new S16<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S16
//         {
//             public const int Size = 16;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S16.Size + 4, Pack=1)]
//         public struct S16<T>
//         {
//             public readonly uint Count;

//             S16 Data;

//             [MethodImpl(Inline)]
//             public S16(int count, S16 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S16(uint count, S16 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count17<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S17.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S17<T> alloc17<T>(int count)
//             where T : unmanaged
//                 => new S17<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S17
//         {
//             public const int Size = 17;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S17.Size + 4, Pack=1)]
//         public struct S17<T>
//         {
//             public readonly uint Count;

//             S17 Data;

//             [MethodImpl(Inline)]
//             public S17(int count, S17 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S17(uint count, S17 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count18<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S18.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S18<T> alloc18<T>(int count)
//             where T : unmanaged
//                 => new S18<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S18
//         {
//             public const int Size = 18;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S18.Size + 4, Pack=1)]
//         public struct S18<T>
//         {
//             public readonly uint Count;

//             S18 Data;

//             [MethodImpl(Inline)]
//             public S18(int count, S18 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S18(uint count, S18 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count19<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S19.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S19<T> alloc19<T>(int count)
//             where T : unmanaged
//                 => new S19<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S19
//         {
//             public const int Size = 19;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S19.Size + 4, Pack=1)]
//         public struct S19<T>
//         {
//             public readonly uint Count;

//             S19 Data;

//             [MethodImpl(Inline)]
//             public S19(int count, S19 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S19(uint count, S19 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count20<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S20.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S20<T> alloc20<T>(int count)
//             where T : unmanaged
//                 => new S20<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S20
//         {
//             public const int Size = 20;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S20.Size + 4, Pack=1)]
//         public struct S20<T>
//         {
//             public readonly uint Count;

//             S20 Data;

//             [MethodImpl(Inline)]
//             public S20(int count, S20 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S20(uint count, S20 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count21<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S21.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S21<T> alloc21<T>(int count)
//             where T : unmanaged
//                 => new S21<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S21
//         {
//             public const int Size = 21;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S21.Size + 4, Pack=1)]
//         public struct S21<T>
//         {
//             public readonly uint Count;

//             S21 Data;

//             [MethodImpl(Inline)]
//             public S21(int count, S21 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S21(uint count, S21 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count22<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S22.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S22<T> alloc22<T>(int count)
//             where T : unmanaged
//                 => new S22<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S22
//         {
//             public const int Size = 22;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S22.Size + 4, Pack=1)]
//         public struct S22<T>
//         {
//             public readonly uint Count;

//             S22 Data;

//             [MethodImpl(Inline)]
//             public S22(int count, S22 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S22(uint count, S22 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count23<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S23.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S23<T> alloc23<T>(int count)
//             where T : unmanaged
//                 => new S23<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S23
//         {
//             public const int Size = 23;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S23.Size + 4, Pack=1)]
//         public struct S23<T>
//         {
//             public readonly uint Count;

//             S23 Data;

//             [MethodImpl(Inline)]
//             public S23(int count, S23 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S23(uint count, S23 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count24<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S24.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S24<T> alloc24<T>(int count)
//             where T : unmanaged
//                 => new S24<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S24
//         {
//             public const int Size = 24;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S24.Size + 4, Pack=1)]
//         public struct S24<T>
//         {
//             public readonly uint Count;

//             S24 Data;

//             [MethodImpl(Inline)]
//             public S24(int count, S24 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S24(uint count, S24 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count25<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S25.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S25<T> alloc25<T>(int count)
//             where T : unmanaged
//                 => new S25<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S25
//         {
//             public const int Size = 25;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S25.Size + 4, Pack=1)]
//         public struct S25<T>
//         {
//             public readonly uint Count;

//             S25 Data;

//             [MethodImpl(Inline)]
//             public S25(int count, S25 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S25(uint count, S25 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count26<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S26.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S26<T> alloc26<T>(int count)
//             where T : unmanaged
//                 => new S26<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S26
//         {
//             public const int Size = 26;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S26.Size + 4, Pack=1)]
//         public struct S26<T>
//         {
//             public readonly uint Count;

//             S26 Data;

//             [MethodImpl(Inline)]
//             public S26(int count, S26 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S26(uint count, S26 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count27<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S27.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S27<T> alloc27<T>(int count)
//             where T : unmanaged
//                 => new S27<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S27
//         {
//             public const int Size = 27;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S27.Size + 4, Pack=1)]
//         public struct S27<T>
//         {
//             public readonly uint Count;

//             S27 Data;

//             [MethodImpl(Inline)]
//             public S27(int count, S27 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S27(uint count, S27 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count28<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S28.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S28<T> alloc28<T>(int count)
//             where T : unmanaged
//                 => new S28<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S28
//         {
//             public const int Size = 28;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S28.Size + 4, Pack=1)]
//         public struct S28<T>
//         {
//             public readonly uint Count;

//             S28 Data;

//             [MethodImpl(Inline)]
//             public S28(int count, S28 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S28(uint count, S28 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count29<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S29.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S29<T> alloc29<T>(int count)
//             where T : unmanaged
//                 => new S29<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S29
//         {
//             public const int Size = 29;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S29.Size + 4, Pack=1)]
//         public struct S29<T>
//         {
//             public readonly uint Count;

//             S29 Data;

//             [MethodImpl(Inline)]
//             public S29(int count, S29 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S29(uint count, S29 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count30<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S30.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S30<T> alloc30<T>(int count)
//             where T : unmanaged
//                 => new S30<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S30
//         {
//             public const int Size = 30;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S30.Size + 4, Pack=1)]
//         public struct S30<T>
//         {
//             public readonly uint Count;

//             S30 Data;

//             [MethodImpl(Inline)]
//             public S30(int count, S30 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S30(uint count, S30 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count31<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S31.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S31<T> alloc31<T>(int count)
//             where T : unmanaged
//                 => new S31<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S31
//         {
//             public const int Size = 31;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S31.Size + 4, Pack=1)]
//         public struct S31<T>
//         {
//             public readonly uint Count;

//             S31 Data;

//             [MethodImpl(Inline)]
//             public S31(int count, S31 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S31(uint count, S31 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count32<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S32.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S32<T> alloc32<T>(int count)
//             where T : unmanaged
//                 => new S32<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S32
//         {
//             public const int Size = 32;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S32.Size + 4, Pack=1)]
//         public struct S32<T>
//         {
//             public readonly uint Count;

//             S32 Data;

//             [MethodImpl(Inline)]
//             public S32(int count, S32 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S32(uint count, S32 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count33<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S33.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S33<T> alloc33<T>(int count)
//             where T : unmanaged
//                 => new S33<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S33
//         {
//             public const int Size = 33;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S33.Size + 4, Pack=1)]
//         public struct S33<T>
//         {
//             public readonly uint Count;

//             S33 Data;

//             [MethodImpl(Inline)]
//             public S33(int count, S33 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S33(uint count, S33 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count34<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S34.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S34<T> alloc34<T>(int count)
//             where T : unmanaged
//                 => new S34<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S34
//         {
//             public const int Size = 34;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S34.Size + 4, Pack=1)]
//         public struct S34<T>
//         {
//             public readonly uint Count;

//             S34 Data;

//             [MethodImpl(Inline)]
//             public S34(int count, S34 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S34(uint count, S34 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count35<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S35.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S35<T> alloc35<T>(int count)
//             where T : unmanaged
//                 => new S35<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S35
//         {
//             public const int Size = 35;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S35.Size + 4, Pack=1)]
//         public struct S35<T>
//         {
//             public readonly uint Count;

//             S35 Data;

//             [MethodImpl(Inline)]
//             public S35(int count, S35 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S35(uint count, S35 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count36<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S36.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S36<T> alloc36<T>(int count)
//             where T : unmanaged
//                 => new S36<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S36
//         {
//             public const int Size = 36;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S36.Size + 4, Pack=1)]
//         public struct S36<T>
//         {
//             public readonly uint Count;

//             S36 Data;

//             [MethodImpl(Inline)]
//             public S36(int count, S36 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S36(uint count, S36 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count37<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S37.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S37<T> alloc37<T>(int count)
//             where T : unmanaged
//                 => new S37<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S37
//         {
//             public const int Size = 37;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S37.Size + 4, Pack=1)]
//         public struct S37<T>
//         {
//             public readonly uint Count;

//             S37 Data;

//             [MethodImpl(Inline)]
//             public S37(int count, S37 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S37(uint count, S37 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count38<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S38.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S38<T> alloc38<T>(int count)
//             where T : unmanaged
//                 => new S38<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S38
//         {
//             public const int Size = 38;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S38.Size + 4, Pack=1)]
//         public struct S38<T>
//         {
//             public readonly uint Count;

//             S38 Data;

//             [MethodImpl(Inline)]
//             public S38(int count, S38 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S38(uint count, S38 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count39<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S39.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S39<T> alloc39<T>(int count)
//             where T : unmanaged
//                 => new S39<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S39
//         {
//             public const int Size = 39;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S39.Size + 4, Pack=1)]
//         public struct S39<T>
//         {
//             public readonly uint Count;

//             S39 Data;

//             [MethodImpl(Inline)]
//             public S39(int count, S39 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S39(uint count, S39 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count40<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S40.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S40<T> alloc40<T>(int count)
//             where T : unmanaged
//                 => new S40<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S40
//         {
//             public const int Size = 40;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S40.Size + 4, Pack=1)]
//         public struct S40<T>
//         {
//             public readonly uint Count;

//             S40 Data;

//             [MethodImpl(Inline)]
//             public S40(int count, S40 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S40(uint count, S40 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count41<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S41.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S41<T> alloc41<T>(int count)
//             where T : unmanaged
//                 => new S41<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S41
//         {
//             public const int Size = 41;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S41.Size + 4, Pack=1)]
//         public struct S41<T>
//         {
//             public readonly uint Count;

//             S41 Data;

//             [MethodImpl(Inline)]
//             public S41(int count, S41 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S41(uint count, S41 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count42<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S42.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S42<T> alloc42<T>(int count)
//             where T : unmanaged
//                 => new S42<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S42
//         {
//             public const int Size = 42;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S42.Size + 4, Pack=1)]
//         public struct S42<T>
//         {
//             public readonly uint Count;

//             S42 Data;

//             [MethodImpl(Inline)]
//             public S42(int count, S42 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S42(uint count, S42 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count43<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S43.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S43<T> alloc43<T>(int count)
//             where T : unmanaged
//                 => new S43<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S43
//         {
//             public const int Size = 43;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S43.Size + 4, Pack=1)]
//         public struct S43<T>
//         {
//             public readonly uint Count;

//             S43 Data;

//             [MethodImpl(Inline)]
//             public S43(int count, S43 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S43(uint count, S43 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count44<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S44.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S44<T> alloc44<T>(int count)
//             where T : unmanaged
//                 => new S44<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S44
//         {
//             public const int Size = 44;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S44.Size + 4, Pack=1)]
//         public struct S44<T>
//         {
//             public readonly uint Count;

//             S44 Data;

//             [MethodImpl(Inline)]
//             public S44(int count, S44 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S44(uint count, S44 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count45<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S45.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S45<T> alloc45<T>(int count)
//             where T : unmanaged
//                 => new S45<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S45
//         {
//             public const int Size = 45;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S45.Size + 4, Pack=1)]
//         public struct S45<T>
//         {
//             public readonly uint Count;

//             S45 Data;

//             [MethodImpl(Inline)]
//             public S45(int count, S45 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S45(uint count, S45 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count46<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S46.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S46<T> alloc46<T>(int count)
//             where T : unmanaged
//                 => new S46<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S46
//         {
//             public const int Size = 46;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S46.Size + 4, Pack=1)]
//         public struct S46<T>
//         {
//             public readonly uint Count;

//             S46 Data;

//             [MethodImpl(Inline)]
//             public S46(int count, S46 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S46(uint count, S46 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count47<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S47.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S47<T> alloc47<T>(int count)
//             where T : unmanaged
//                 => new S47<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S47
//         {
//             public const int Size = 47;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S47.Size + 4, Pack=1)]
//         public struct S47<T>
//         {
//             public readonly uint Count;

//             S47 Data;

//             [MethodImpl(Inline)]
//             public S47(int count, S47 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S47(uint count, S47 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count48<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S48.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S48<T> alloc48<T>(int count)
//             where T : unmanaged
//                 => new S48<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S48
//         {
//             public const int Size = 48;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S48.Size + 4, Pack=1)]
//         public struct S48<T>
//         {
//             public readonly uint Count;

//             S48 Data;

//             [MethodImpl(Inline)]
//             public S48(int count, S48 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S48(uint count, S48 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count49<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S49.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S49<T> alloc49<T>(int count)
//             where T : unmanaged
//                 => new S49<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S49
//         {
//             public const int Size = 49;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S49.Size + 4, Pack=1)]
//         public struct S49<T>
//         {
//             public readonly uint Count;

//             S49 Data;

//             [MethodImpl(Inline)]
//             public S49(int count, S49 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S49(uint count, S49 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count50<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S50.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S50<T> alloc50<T>(int count)
//             where T : unmanaged
//                 => new S50<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S50
//         {
//             public const int Size = 50;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S50.Size + 4, Pack=1)]
//         public struct S50<T>
//         {
//             public readonly uint Count;

//             S50 Data;

//             [MethodImpl(Inline)]
//             public S50(int count, S50 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S50(uint count, S50 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count51<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S51.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S51<T> alloc51<T>(int count)
//             where T : unmanaged
//                 => new S51<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S51
//         {
//             public const int Size = 51;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S51.Size + 4, Pack=1)]
//         public struct S51<T>
//         {
//             public readonly uint Count;

//             S51 Data;

//             [MethodImpl(Inline)]
//             public S51(int count, S51 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S51(uint count, S51 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count52<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S52.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S52<T> alloc52<T>(int count)
//             where T : unmanaged
//                 => new S52<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S52
//         {
//             public const int Size = 52;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S52.Size + 4, Pack=1)]
//         public struct S52<T>
//         {
//             public readonly uint Count;

//             S52 Data;

//             [MethodImpl(Inline)]
//             public S52(int count, S52 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S52(uint count, S52 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count53<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S53.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S53<T> alloc53<T>(int count)
//             where T : unmanaged
//                 => new S53<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S53
//         {
//             public const int Size = 53;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S53.Size + 4, Pack=1)]
//         public struct S53<T>
//         {
//             public readonly uint Count;

//             S53 Data;

//             [MethodImpl(Inline)]
//             public S53(int count, S53 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S53(uint count, S53 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count54<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S54.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S54<T> alloc54<T>(int count)
//             where T : unmanaged
//                 => new S54<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S54
//         {
//             public const int Size = 54;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S54.Size + 4, Pack=1)]
//         public struct S54<T>
//         {
//             public readonly uint Count;

//             S54 Data;

//             [MethodImpl(Inline)]
//             public S54(int count, S54 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S54(uint count, S54 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count55<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S55.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S55<T> alloc55<T>(int count)
//             where T : unmanaged
//                 => new S55<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S55
//         {
//             public const int Size = 55;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S55.Size + 4, Pack=1)]
//         public struct S55<T>
//         {
//             public readonly uint Count;

//             S55 Data;

//             [MethodImpl(Inline)]
//             public S55(int count, S55 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S55(uint count, S55 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count56<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S56.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S56<T> alloc56<T>(int count)
//             where T : unmanaged
//                 => new S56<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S56
//         {
//             public const int Size = 56;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S56.Size + 4, Pack=1)]
//         public struct S56<T>
//         {
//             public readonly uint Count;

//             S56 Data;

//             [MethodImpl(Inline)]
//             public S56(int count, S56 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S56(uint count, S56 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count57<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S57.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S57<T> alloc57<T>(int count)
//             where T : unmanaged
//                 => new S57<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S57
//         {
//             public const int Size = 57;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S57.Size + 4, Pack=1)]
//         public struct S57<T>
//         {
//             public readonly uint Count;

//             S57 Data;

//             [MethodImpl(Inline)]
//             public S57(int count, S57 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S57(uint count, S57 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count58<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S58.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S58<T> alloc58<T>(int count)
//             where T : unmanaged
//                 => new S58<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S58
//         {
//             public const int Size = 58;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S58.Size + 4, Pack=1)]
//         public struct S58<T>
//         {
//             public readonly uint Count;

//             S58 Data;

//             [MethodImpl(Inline)]
//             public S58(int count, S58 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S58(uint count, S58 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count59<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S59.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S59<T> alloc59<T>(int count)
//             where T : unmanaged
//                 => new S59<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S59
//         {
//             public const int Size = 59;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S59.Size + 4, Pack=1)]
//         public struct S59<T>
//         {
//             public readonly uint Count;

//             S59 Data;

//             [MethodImpl(Inline)]
//             public S59(int count, S59 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S59(uint count, S59 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count60<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S60.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S60<T> alloc60<T>(int count)
//             where T : unmanaged
//                 => new S60<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S60
//         {
//             public const int Size = 60;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S60.Size + 4, Pack=1)]
//         public struct S60<T>
//         {
//             public readonly uint Count;

//             S60 Data;

//             [MethodImpl(Inline)]
//             public S60(int count, S60 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S60(uint count, S60 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count61<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S61.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S61<T> alloc61<T>(int count)
//             where T : unmanaged
//                 => new S61<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S61
//         {
//             public const int Size = 61;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S61.Size + 4, Pack=1)]
//         public struct S61<T>
//         {
//             public readonly uint Count;

//             S61 Data;

//             [MethodImpl(Inline)]
//             public S61(int count, S61 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S61(uint count, S61 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count62<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S62.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S62<T> alloc62<T>(int count)
//             where T : unmanaged
//                 => new S62<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S62
//         {
//             public const int Size = 62;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S62.Size + 4, Pack=1)]
//         public struct S62<T>
//         {
//             public readonly uint Count;

//             S62 Data;

//             [MethodImpl(Inline)]
//             public S62(int count, S62 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S62(uint count, S62 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count63<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S63.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S63<T> alloc63<T>(int count)
//             where T : unmanaged
//                 => new S63<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S63
//         {
//             public const int Size = 63;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S63.Size + 4, Pack=1)]
//         public struct S63<T>
//         {
//             public readonly uint Count;

//             S63 Data;

//             [MethodImpl(Inline)]
//             public S63(int count, S63 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S63(uint count, S63 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count64<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S64.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S64<T> alloc64<T>(int count)
//             where T : unmanaged
//                 => new S64<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S64
//         {
//             public const int Size = 64;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S64.Size + 4, Pack=1)]
//         public struct S64<T>
//         {
//             public readonly uint Count;

//             S64 Data;

//             [MethodImpl(Inline)]
//             public S64(int count, S64 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S64(uint count, S64 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count65<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S65.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S65<T> alloc65<T>(int count)
//             where T : unmanaged
//                 => new S65<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S65
//         {
//             public const int Size = 65;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S65.Size + 4, Pack=1)]
//         public struct S65<T>
//         {
//             public readonly uint Count;

//             S65 Data;

//             [MethodImpl(Inline)]
//             public S65(int count, S65 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S65(uint count, S65 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count66<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S66.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S66<T> alloc66<T>(int count)
//             where T : unmanaged
//                 => new S66<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S66
//         {
//             public const int Size = 66;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S66.Size + 4, Pack=1)]
//         public struct S66<T>
//         {
//             public readonly uint Count;

//             S66 Data;

//             [MethodImpl(Inline)]
//             public S66(int count, S66 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S66(uint count, S66 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count67<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S67.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S67<T> alloc67<T>(int count)
//             where T : unmanaged
//                 => new S67<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S67
//         {
//             public const int Size = 67;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S67.Size + 4, Pack=1)]
//         public struct S67<T>
//         {
//             public readonly uint Count;

//             S67 Data;

//             [MethodImpl(Inline)]
//             public S67(int count, S67 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S67(uint count, S67 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count68<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S68.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S68<T> alloc68<T>(int count)
//             where T : unmanaged
//                 => new S68<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S68
//         {
//             public const int Size = 68;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S68.Size + 4, Pack=1)]
//         public struct S68<T>
//         {
//             public readonly uint Count;

//             S68 Data;

//             [MethodImpl(Inline)]
//             public S68(int count, S68 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S68(uint count, S68 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count69<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S69.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S69<T> alloc69<T>(int count)
//             where T : unmanaged
//                 => new S69<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S69
//         {
//             public const int Size = 69;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S69.Size + 4, Pack=1)]
//         public struct S69<T>
//         {
//             public readonly uint Count;

//             S69 Data;

//             [MethodImpl(Inline)]
//             public S69(int count, S69 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S69(uint count, S69 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count70<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S70.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S70<T> alloc70<T>(int count)
//             where T : unmanaged
//                 => new S70<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S70
//         {
//             public const int Size = 70;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S70.Size + 4, Pack=1)]
//         public struct S70<T>
//         {
//             public readonly uint Count;

//             S70 Data;

//             [MethodImpl(Inline)]
//             public S70(int count, S70 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S70(uint count, S70 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count71<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S71.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S71<T> alloc71<T>(int count)
//             where T : unmanaged
//                 => new S71<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S71
//         {
//             public const int Size = 71;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S71.Size + 4, Pack=1)]
//         public struct S71<T>
//         {
//             public readonly uint Count;

//             S71 Data;

//             [MethodImpl(Inline)]
//             public S71(int count, S71 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S71(uint count, S71 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count72<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S72.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S72<T> alloc72<T>(int count)
//             where T : unmanaged
//                 => new S72<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S72
//         {
//             public const int Size = 72;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S72.Size + 4, Pack=1)]
//         public struct S72<T>
//         {
//             public readonly uint Count;

//             S72 Data;

//             [MethodImpl(Inline)]
//             public S72(int count, S72 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S72(uint count, S72 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count73<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S73.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S73<T> alloc73<T>(int count)
//             where T : unmanaged
//                 => new S73<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S73
//         {
//             public const int Size = 73;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S73.Size + 4, Pack=1)]
//         public struct S73<T>
//         {
//             public readonly uint Count;

//             S73 Data;

//             [MethodImpl(Inline)]
//             public S73(int count, S73 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S73(uint count, S73 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count74<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S74.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S74<T> alloc74<T>(int count)
//             where T : unmanaged
//                 => new S74<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S74
//         {
//             public const int Size = 74;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S74.Size + 4, Pack=1)]
//         public struct S74<T>
//         {
//             public readonly uint Count;

//             S74 Data;

//             [MethodImpl(Inline)]
//             public S74(int count, S74 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S74(uint count, S74 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count75<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S75.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S75<T> alloc75<T>(int count)
//             where T : unmanaged
//                 => new S75<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S75
//         {
//             public const int Size = 75;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S75.Size + 4, Pack=1)]
//         public struct S75<T>
//         {
//             public readonly uint Count;

//             S75 Data;

//             [MethodImpl(Inline)]
//             public S75(int count, S75 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S75(uint count, S75 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count76<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S76.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S76<T> alloc76<T>(int count)
//             where T : unmanaged
//                 => new S76<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S76
//         {
//             public const int Size = 76;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S76.Size + 4, Pack=1)]
//         public struct S76<T>
//         {
//             public readonly uint Count;

//             S76 Data;

//             [MethodImpl(Inline)]
//             public S76(int count, S76 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S76(uint count, S76 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count77<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S77.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S77<T> alloc77<T>(int count)
//             where T : unmanaged
//                 => new S77<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S77
//         {
//             public const int Size = 77;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S77.Size + 4, Pack=1)]
//         public struct S77<T>
//         {
//             public readonly uint Count;

//             S77 Data;

//             [MethodImpl(Inline)]
//             public S77(int count, S77 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S77(uint count, S77 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count78<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S78.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S78<T> alloc78<T>(int count)
//             where T : unmanaged
//                 => new S78<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S78
//         {
//             public const int Size = 78;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S78.Size + 4, Pack=1)]
//         public struct S78<T>
//         {
//             public readonly uint Count;

//             S78 Data;

//             [MethodImpl(Inline)]
//             public S78(int count, S78 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S78(uint count, S78 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count79<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S79.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S79<T> alloc79<T>(int count)
//             where T : unmanaged
//                 => new S79<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S79
//         {
//             public const int Size = 79;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S79.Size + 4, Pack=1)]
//         public struct S79<T>
//         {
//             public readonly uint Count;

//             S79 Data;

//             [MethodImpl(Inline)]
//             public S79(int count, S79 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S79(uint count, S79 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count80<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S80.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S80<T> alloc80<T>(int count)
//             where T : unmanaged
//                 => new S80<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S80
//         {
//             public const int Size = 80;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S80.Size + 4, Pack=1)]
//         public struct S80<T>
//         {
//             public readonly uint Count;

//             S80 Data;

//             [MethodImpl(Inline)]
//             public S80(int count, S80 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S80(uint count, S80 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count81<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S81.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S81<T> alloc81<T>(int count)
//             where T : unmanaged
//                 => new S81<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S81
//         {
//             public const int Size = 81;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S81.Size + 4, Pack=1)]
//         public struct S81<T>
//         {
//             public readonly uint Count;

//             S81 Data;

//             [MethodImpl(Inline)]
//             public S81(int count, S81 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S81(uint count, S81 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count82<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S82.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S82<T> alloc82<T>(int count)
//             where T : unmanaged
//                 => new S82<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S82
//         {
//             public const int Size = 82;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S82.Size + 4, Pack=1)]
//         public struct S82<T>
//         {
//             public readonly uint Count;

//             S82 Data;

//             [MethodImpl(Inline)]
//             public S82(int count, S82 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S82(uint count, S82 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count83<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S83.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S83<T> alloc83<T>(int count)
//             where T : unmanaged
//                 => new S83<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S83
//         {
//             public const int Size = 83;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S83.Size + 4, Pack=1)]
//         public struct S83<T>
//         {
//             public readonly uint Count;

//             S83 Data;

//             [MethodImpl(Inline)]
//             public S83(int count, S83 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S83(uint count, S83 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count84<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S84.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S84<T> alloc84<T>(int count)
//             where T : unmanaged
//                 => new S84<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S84
//         {
//             public const int Size = 84;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S84.Size + 4, Pack=1)]
//         public struct S84<T>
//         {
//             public readonly uint Count;

//             S84 Data;

//             [MethodImpl(Inline)]
//             public S84(int count, S84 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S84(uint count, S84 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count85<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S85.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S85<T> alloc85<T>(int count)
//             where T : unmanaged
//                 => new S85<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S85
//         {
//             public const int Size = 85;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S85.Size + 4, Pack=1)]
//         public struct S85<T>
//         {
//             public readonly uint Count;

//             S85 Data;

//             [MethodImpl(Inline)]
//             public S85(int count, S85 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S85(uint count, S85 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count86<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S86.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S86<T> alloc86<T>(int count)
//             where T : unmanaged
//                 => new S86<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S86
//         {
//             public const int Size = 86;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S86.Size + 4, Pack=1)]
//         public struct S86<T>
//         {
//             public readonly uint Count;

//             S86 Data;

//             [MethodImpl(Inline)]
//             public S86(int count, S86 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S86(uint count, S86 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count87<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S87.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S87<T> alloc87<T>(int count)
//             where T : unmanaged
//                 => new S87<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S87
//         {
//             public const int Size = 87;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S87.Size + 4, Pack=1)]
//         public struct S87<T>
//         {
//             public readonly uint Count;

//             S87 Data;

//             [MethodImpl(Inline)]
//             public S87(int count, S87 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S87(uint count, S87 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count88<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S88.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S88<T> alloc88<T>(int count)
//             where T : unmanaged
//                 => new S88<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S88
//         {
//             public const int Size = 88;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S88.Size + 4, Pack=1)]
//         public struct S88<T>
//         {
//             public readonly uint Count;

//             S88 Data;

//             [MethodImpl(Inline)]
//             public S88(int count, S88 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S88(uint count, S88 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count89<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S89.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S89<T> alloc89<T>(int count)
//             where T : unmanaged
//                 => new S89<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S89
//         {
//             public const int Size = 89;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S89.Size + 4, Pack=1)]
//         public struct S89<T>
//         {
//             public readonly uint Count;

//             S89 Data;

//             [MethodImpl(Inline)]
//             public S89(int count, S89 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S89(uint count, S89 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count90<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S90.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S90<T> alloc90<T>(int count)
//             where T : unmanaged
//                 => new S90<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S90
//         {
//             public const int Size = 90;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S90.Size + 4, Pack=1)]
//         public struct S90<T>
//         {
//             public readonly uint Count;

//             S90 Data;

//             [MethodImpl(Inline)]
//             public S90(int count, S90 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S90(uint count, S90 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count91<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S91.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S91<T> alloc91<T>(int count)
//             where T : unmanaged
//                 => new S91<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S91
//         {
//             public const int Size = 91;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S91.Size + 4, Pack=1)]
//         public struct S91<T>
//         {
//             public readonly uint Count;

//             S91 Data;

//             [MethodImpl(Inline)]
//             public S91(int count, S91 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S91(uint count, S91 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count92<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S92.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S92<T> alloc92<T>(int count)
//             where T : unmanaged
//                 => new S92<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S92
//         {
//             public const int Size = 92;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S92.Size + 4, Pack=1)]
//         public struct S92<T>
//         {
//             public readonly uint Count;

//             S92 Data;

//             [MethodImpl(Inline)]
//             public S92(int count, S92 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S92(uint count, S92 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count93<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S93.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S93<T> alloc93<T>(int count)
//             where T : unmanaged
//                 => new S93<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S93
//         {
//             public const int Size = 93;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S93.Size + 4, Pack=1)]
//         public struct S93<T>
//         {
//             public readonly uint Count;

//             S93 Data;

//             [MethodImpl(Inline)]
//             public S93(int count, S93 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S93(uint count, S93 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count94<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S94.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S94<T> alloc94<T>(int count)
//             where T : unmanaged
//                 => new S94<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S94
//         {
//             public const int Size = 94;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S94.Size + 4, Pack=1)]
//         public struct S94<T>
//         {
//             public readonly uint Count;

//             S94 Data;

//             [MethodImpl(Inline)]
//             public S94(int count, S94 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S94(uint count, S94 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count95<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S95.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S95<T> alloc95<T>(int count)
//             where T : unmanaged
//                 => new S95<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S95
//         {
//             public const int Size = 95;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S95.Size + 4, Pack=1)]
//         public struct S95<T>
//         {
//             public readonly uint Count;

//             S95 Data;

//             [MethodImpl(Inline)]
//             public S95(int count, S95 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S95(uint count, S95 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count96<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S96.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S96<T> alloc96<T>(int count)
//             where T : unmanaged
//                 => new S96<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S96
//         {
//             public const int Size = 96;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S96.Size + 4, Pack=1)]
//         public struct S96<T>
//         {
//             public readonly uint Count;

//             S96 Data;

//             [MethodImpl(Inline)]
//             public S96(int count, S96 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S96(uint count, S96 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count97<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S97.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S97<T> alloc97<T>(int count)
//             where T : unmanaged
//                 => new S97<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S97
//         {
//             public const int Size = 97;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S97.Size + 4, Pack=1)]
//         public struct S97<T>
//         {
//             public readonly uint Count;

//             S97 Data;

//             [MethodImpl(Inline)]
//             public S97(int count, S97 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S97(uint count, S97 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count98<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S98.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S98<T> alloc98<T>(int count)
//             where T : unmanaged
//                 => new S98<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S98
//         {
//             public const int Size = 98;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S98.Size + 4, Pack=1)]
//         public struct S98<T>
//         {
//             public readonly uint Count;

//             S98 Data;

//             [MethodImpl(Inline)]
//             public S98(int count, S98 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S98(uint count, S98 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count99<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S99.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S99<T> alloc99<T>(int count)
//             where T : unmanaged
//                 => new S99<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S99
//         {
//             public const int Size = 99;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S99.Size + 4, Pack=1)]
//         public struct S99<T>
//         {
//             public readonly uint Count;

//             S99 Data;

//             [MethodImpl(Inline)]
//             public S99(int count, S99 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S99(uint count, S99 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count100<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S100.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S100<T> alloc100<T>(int count)
//             where T : unmanaged
//                 => new S100<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S100
//         {
//             public const int Size = 100;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S100.Size + 4, Pack=1)]
//         public struct S100<T>
//         {
//             public readonly uint Count;

//             S100 Data;

//             [MethodImpl(Inline)]
//             public S100(int count, S100 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S100(uint count, S100 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count101<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S101.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S101<T> alloc101<T>(int count)
//             where T : unmanaged
//                 => new S101<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S101
//         {
//             public const int Size = 101;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S101.Size + 4, Pack=1)]
//         public struct S101<T>
//         {
//             public readonly uint Count;

//             S101 Data;

//             [MethodImpl(Inline)]
//             public S101(int count, S101 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S101(uint count, S101 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count102<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S102.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S102<T> alloc102<T>(int count)
//             where T : unmanaged
//                 => new S102<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S102
//         {
//             public const int Size = 102;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S102.Size + 4, Pack=1)]
//         public struct S102<T>
//         {
//             public readonly uint Count;

//             S102 Data;

//             [MethodImpl(Inline)]
//             public S102(int count, S102 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S102(uint count, S102 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count103<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S103.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S103<T> alloc103<T>(int count)
//             where T : unmanaged
//                 => new S103<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S103
//         {
//             public const int Size = 103;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S103.Size + 4, Pack=1)]
//         public struct S103<T>
//         {
//             public readonly uint Count;

//             S103 Data;

//             [MethodImpl(Inline)]
//             public S103(int count, S103 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S103(uint count, S103 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count104<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S104.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S104<T> alloc104<T>(int count)
//             where T : unmanaged
//                 => new S104<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S104
//         {
//             public const int Size = 104;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S104.Size + 4, Pack=1)]
//         public struct S104<T>
//         {
//             public readonly uint Count;

//             S104 Data;

//             [MethodImpl(Inline)]
//             public S104(int count, S104 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S104(uint count, S104 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count105<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S105.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S105<T> alloc105<T>(int count)
//             where T : unmanaged
//                 => new S105<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S105
//         {
//             public const int Size = 105;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S105.Size + 4, Pack=1)]
//         public struct S105<T>
//         {
//             public readonly uint Count;

//             S105 Data;

//             [MethodImpl(Inline)]
//             public S105(int count, S105 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S105(uint count, S105 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count106<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S106.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S106<T> alloc106<T>(int count)
//             where T : unmanaged
//                 => new S106<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S106
//         {
//             public const int Size = 106;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S106.Size + 4, Pack=1)]
//         public struct S106<T>
//         {
//             public readonly uint Count;

//             S106 Data;

//             [MethodImpl(Inline)]
//             public S106(int count, S106 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S106(uint count, S106 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count107<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S107.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S107<T> alloc107<T>(int count)
//             where T : unmanaged
//                 => new S107<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S107
//         {
//             public const int Size = 107;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S107.Size + 4, Pack=1)]
//         public struct S107<T>
//         {
//             public readonly uint Count;

//             S107 Data;

//             [MethodImpl(Inline)]
//             public S107(int count, S107 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S107(uint count, S107 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count108<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S108.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S108<T> alloc108<T>(int count)
//             where T : unmanaged
//                 => new S108<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S108
//         {
//             public const int Size = 108;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S108.Size + 4, Pack=1)]
//         public struct S108<T>
//         {
//             public readonly uint Count;

//             S108 Data;

//             [MethodImpl(Inline)]
//             public S108(int count, S108 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S108(uint count, S108 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count109<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S109.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S109<T> alloc109<T>(int count)
//             where T : unmanaged
//                 => new S109<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S109
//         {
//             public const int Size = 109;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S109.Size + 4, Pack=1)]
//         public struct S109<T>
//         {
//             public readonly uint Count;

//             S109 Data;

//             [MethodImpl(Inline)]
//             public S109(int count, S109 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S109(uint count, S109 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count110<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S110.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S110<T> alloc110<T>(int count)
//             where T : unmanaged
//                 => new S110<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S110
//         {
//             public const int Size = 110;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S110.Size + 4, Pack=1)]
//         public struct S110<T>
//         {
//             public readonly uint Count;

//             S110 Data;

//             [MethodImpl(Inline)]
//             public S110(int count, S110 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S110(uint count, S110 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count111<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S111.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S111<T> alloc111<T>(int count)
//             where T : unmanaged
//                 => new S111<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S111
//         {
//             public const int Size = 111;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S111.Size + 4, Pack=1)]
//         public struct S111<T>
//         {
//             public readonly uint Count;

//             S111 Data;

//             [MethodImpl(Inline)]
//             public S111(int count, S111 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S111(uint count, S111 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count112<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S112.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S112<T> alloc112<T>(int count)
//             where T : unmanaged
//                 => new S112<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S112
//         {
//             public const int Size = 112;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S112.Size + 4, Pack=1)]
//         public struct S112<T>
//         {
//             public readonly uint Count;

//             S112 Data;

//             [MethodImpl(Inline)]
//             public S112(int count, S112 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S112(uint count, S112 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count113<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S113.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S113<T> alloc113<T>(int count)
//             where T : unmanaged
//                 => new S113<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S113
//         {
//             public const int Size = 113;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S113.Size + 4, Pack=1)]
//         public struct S113<T>
//         {
//             public readonly uint Count;

//             S113 Data;

//             [MethodImpl(Inline)]
//             public S113(int count, S113 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S113(uint count, S113 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count114<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S114.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S114<T> alloc114<T>(int count)
//             where T : unmanaged
//                 => new S114<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S114
//         {
//             public const int Size = 114;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S114.Size + 4, Pack=1)]
//         public struct S114<T>
//         {
//             public readonly uint Count;

//             S114 Data;

//             [MethodImpl(Inline)]
//             public S114(int count, S114 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S114(uint count, S114 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count115<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S115.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S115<T> alloc115<T>(int count)
//             where T : unmanaged
//                 => new S115<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S115
//         {
//             public const int Size = 115;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S115.Size + 4, Pack=1)]
//         public struct S115<T>
//         {
//             public readonly uint Count;

//             S115 Data;

//             [MethodImpl(Inline)]
//             public S115(int count, S115 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S115(uint count, S115 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count116<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S116.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S116<T> alloc116<T>(int count)
//             where T : unmanaged
//                 => new S116<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S116
//         {
//             public const int Size = 116;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S116.Size + 4, Pack=1)]
//         public struct S116<T>
//         {
//             public readonly uint Count;

//             S116 Data;

//             [MethodImpl(Inline)]
//             public S116(int count, S116 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S116(uint count, S116 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count117<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S117.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S117<T> alloc117<T>(int count)
//             where T : unmanaged
//                 => new S117<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S117
//         {
//             public const int Size = 117;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S117.Size + 4, Pack=1)]
//         public struct S117<T>
//         {
//             public readonly uint Count;

//             S117 Data;

//             [MethodImpl(Inline)]
//             public S117(int count, S117 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S117(uint count, S117 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count118<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S118.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S118<T> alloc118<T>(int count)
//             where T : unmanaged
//                 => new S118<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S118
//         {
//             public const int Size = 118;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S118.Size + 4, Pack=1)]
//         public struct S118<T>
//         {
//             public readonly uint Count;

//             S118 Data;

//             [MethodImpl(Inline)]
//             public S118(int count, S118 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S118(uint count, S118 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count119<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S119.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S119<T> alloc119<T>(int count)
//             where T : unmanaged
//                 => new S119<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S119
//         {
//             public const int Size = 119;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S119.Size + 4, Pack=1)]
//         public struct S119<T>
//         {
//             public readonly uint Count;

//             S119 Data;

//             [MethodImpl(Inline)]
//             public S119(int count, S119 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S119(uint count, S119 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count120<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S120.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S120<T> alloc120<T>(int count)
//             where T : unmanaged
//                 => new S120<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S120
//         {
//             public const int Size = 120;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S120.Size + 4, Pack=1)]
//         public struct S120<T>
//         {
//             public readonly uint Count;

//             S120 Data;

//             [MethodImpl(Inline)]
//             public S120(int count, S120 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S120(uint count, S120 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count121<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S121.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S121<T> alloc121<T>(int count)
//             where T : unmanaged
//                 => new S121<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S121
//         {
//             public const int Size = 121;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S121.Size + 4, Pack=1)]
//         public struct S121<T>
//         {
//             public readonly uint Count;

//             S121 Data;

//             [MethodImpl(Inline)]
//             public S121(int count, S121 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S121(uint count, S121 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count122<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S122.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S122<T> alloc122<T>(int count)
//             where T : unmanaged
//                 => new S122<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S122
//         {
//             public const int Size = 122;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S122.Size + 4, Pack=1)]
//         public struct S122<T>
//         {
//             public readonly uint Count;

//             S122 Data;

//             [MethodImpl(Inline)]
//             public S122(int count, S122 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S122(uint count, S122 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count123<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S123.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S123<T> alloc123<T>(int count)
//             where T : unmanaged
//                 => new S123<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S123
//         {
//             public const int Size = 123;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S123.Size + 4, Pack=1)]
//         public struct S123<T>
//         {
//             public readonly uint Count;

//             S123 Data;

//             [MethodImpl(Inline)]
//             public S123(int count, S123 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S123(uint count, S123 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count124<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S124.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S124<T> alloc124<T>(int count)
//             where T : unmanaged
//                 => new S124<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S124
//         {
//             public const int Size = 124;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S124.Size + 4, Pack=1)]
//         public struct S124<T>
//         {
//             public readonly uint Count;

//             S124 Data;

//             [MethodImpl(Inline)]
//             public S124(int count, S124 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S124(uint count, S124 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count125<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S125.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S125<T> alloc125<T>(int count)
//             where T : unmanaged
//                 => new S125<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S125
//         {
//             public const int Size = 125;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S125.Size + 4, Pack=1)]
//         public struct S125<T>
//         {
//             public readonly uint Count;

//             S125 Data;

//             [MethodImpl(Inline)]
//             public S125(int count, S125 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S125(uint count, S125 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count126<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S126.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S126<T> alloc126<T>(int count)
//             where T : unmanaged
//                 => new S126<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S126
//         {
//             public const int Size = 126;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S126.Size + 4, Pack=1)]
//         public struct S126<T>
//         {
//             public readonly uint Count;

//             S126 Data;

//             [MethodImpl(Inline)]
//             public S126(int count, S126 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S126(uint count, S126 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count127<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S127.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S127<T> alloc127<T>(int count)
//             where T : unmanaged
//                 => new S127<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S127
//         {
//             public const int Size = 127;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S127.Size + 4, Pack=1)]
//         public struct S127<T>
//         {
//             public readonly uint Count;

//             S127 Data;

//             [MethodImpl(Inline)]
//             public S127(int count, S127 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S127(uint count, S127 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count128<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S128.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S128<T> alloc128<T>(int count)
//             where T : unmanaged
//                 => new S128<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S128
//         {
//             public const int Size = 128;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S128.Size + 4, Pack=1)]
//         public struct S128<T>
//         {
//             public readonly uint Count;

//             S128 Data;

//             [MethodImpl(Inline)]
//             public S128(int count, S128 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S128(uint count, S128 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count129<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S129.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S129<T> alloc129<T>(int count)
//             where T : unmanaged
//                 => new S129<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S129
//         {
//             public const int Size = 129;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S129.Size + 4, Pack=1)]
//         public struct S129<T>
//         {
//             public readonly uint Count;

//             S129 Data;

//             [MethodImpl(Inline)]
//             public S129(int count, S129 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S129(uint count, S129 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count130<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S130.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S130<T> alloc130<T>(int count)
//             where T : unmanaged
//                 => new S130<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S130
//         {
//             public const int Size = 130;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S130.Size + 4, Pack=1)]
//         public struct S130<T>
//         {
//             public readonly uint Count;

//             S130 Data;

//             [MethodImpl(Inline)]
//             public S130(int count, S130 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S130(uint count, S130 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count131<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S131.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S131<T> alloc131<T>(int count)
//             where T : unmanaged
//                 => new S131<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S131
//         {
//             public const int Size = 131;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S131.Size + 4, Pack=1)]
//         public struct S131<T>
//         {
//             public readonly uint Count;

//             S131 Data;

//             [MethodImpl(Inline)]
//             public S131(int count, S131 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S131(uint count, S131 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count132<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S132.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S132<T> alloc132<T>(int count)
//             where T : unmanaged
//                 => new S132<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S132
//         {
//             public const int Size = 132;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S132.Size + 4, Pack=1)]
//         public struct S132<T>
//         {
//             public readonly uint Count;

//             S132 Data;

//             [MethodImpl(Inline)]
//             public S132(int count, S132 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S132(uint count, S132 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count133<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S133.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S133<T> alloc133<T>(int count)
//             where T : unmanaged
//                 => new S133<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S133
//         {
//             public const int Size = 133;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S133.Size + 4, Pack=1)]
//         public struct S133<T>
//         {
//             public readonly uint Count;

//             S133 Data;

//             [MethodImpl(Inline)]
//             public S133(int count, S133 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S133(uint count, S133 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count134<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S134.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S134<T> alloc134<T>(int count)
//             where T : unmanaged
//                 => new S134<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S134
//         {
//             public const int Size = 134;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S134.Size + 4, Pack=1)]
//         public struct S134<T>
//         {
//             public readonly uint Count;

//             S134 Data;

//             [MethodImpl(Inline)]
//             public S134(int count, S134 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S134(uint count, S134 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count135<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S135.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S135<T> alloc135<T>(int count)
//             where T : unmanaged
//                 => new S135<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S135
//         {
//             public const int Size = 135;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S135.Size + 4, Pack=1)]
//         public struct S135<T>
//         {
//             public readonly uint Count;

//             S135 Data;

//             [MethodImpl(Inline)]
//             public S135(int count, S135 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S135(uint count, S135 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count136<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S136.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S136<T> alloc136<T>(int count)
//             where T : unmanaged
//                 => new S136<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S136
//         {
//             public const int Size = 136;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S136.Size + 4, Pack=1)]
//         public struct S136<T>
//         {
//             public readonly uint Count;

//             S136 Data;

//             [MethodImpl(Inline)]
//             public S136(int count, S136 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S136(uint count, S136 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count137<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S137.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S137<T> alloc137<T>(int count)
//             where T : unmanaged
//                 => new S137<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S137
//         {
//             public const int Size = 137;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S137.Size + 4, Pack=1)]
//         public struct S137<T>
//         {
//             public readonly uint Count;

//             S137 Data;

//             [MethodImpl(Inline)]
//             public S137(int count, S137 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S137(uint count, S137 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count138<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S138.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S138<T> alloc138<T>(int count)
//             where T : unmanaged
//                 => new S138<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S138
//         {
//             public const int Size = 138;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S138.Size + 4, Pack=1)]
//         public struct S138<T>
//         {
//             public readonly uint Count;

//             S138 Data;

//             [MethodImpl(Inline)]
//             public S138(int count, S138 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S138(uint count, S138 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count139<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S139.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S139<T> alloc139<T>(int count)
//             where T : unmanaged
//                 => new S139<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S139
//         {
//             public const int Size = 139;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S139.Size + 4, Pack=1)]
//         public struct S139<T>
//         {
//             public readonly uint Count;

//             S139 Data;

//             [MethodImpl(Inline)]
//             public S139(int count, S139 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S139(uint count, S139 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count140<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S140.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S140<T> alloc140<T>(int count)
//             where T : unmanaged
//                 => new S140<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S140
//         {
//             public const int Size = 140;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S140.Size + 4, Pack=1)]
//         public struct S140<T>
//         {
//             public readonly uint Count;

//             S140 Data;

//             [MethodImpl(Inline)]
//             public S140(int count, S140 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S140(uint count, S140 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count141<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S141.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S141<T> alloc141<T>(int count)
//             where T : unmanaged
//                 => new S141<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S141
//         {
//             public const int Size = 141;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S141.Size + 4, Pack=1)]
//         public struct S141<T>
//         {
//             public readonly uint Count;

//             S141 Data;

//             [MethodImpl(Inline)]
//             public S141(int count, S141 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S141(uint count, S141 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count142<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S142.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S142<T> alloc142<T>(int count)
//             where T : unmanaged
//                 => new S142<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S142
//         {
//             public const int Size = 142;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S142.Size + 4, Pack=1)]
//         public struct S142<T>
//         {
//             public readonly uint Count;

//             S142 Data;

//             [MethodImpl(Inline)]
//             public S142(int count, S142 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S142(uint count, S142 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count143<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S143.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S143<T> alloc143<T>(int count)
//             where T : unmanaged
//                 => new S143<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S143
//         {
//             public const int Size = 143;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S143.Size + 4, Pack=1)]
//         public struct S143<T>
//         {
//             public readonly uint Count;

//             S143 Data;

//             [MethodImpl(Inline)]
//             public S143(int count, S143 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S143(uint count, S143 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count144<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S144.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S144<T> alloc144<T>(int count)
//             where T : unmanaged
//                 => new S144<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S144
//         {
//             public const int Size = 144;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S144.Size + 4, Pack=1)]
//         public struct S144<T>
//         {
//             public readonly uint Count;

//             S144 Data;

//             [MethodImpl(Inline)]
//             public S144(int count, S144 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S144(uint count, S144 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count145<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S145.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S145<T> alloc145<T>(int count)
//             where T : unmanaged
//                 => new S145<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S145
//         {
//             public const int Size = 145;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S145.Size + 4, Pack=1)]
//         public struct S145<T>
//         {
//             public readonly uint Count;

//             S145 Data;

//             [MethodImpl(Inline)]
//             public S145(int count, S145 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S145(uint count, S145 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count146<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S146.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S146<T> alloc146<T>(int count)
//             where T : unmanaged
//                 => new S146<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S146
//         {
//             public const int Size = 146;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S146.Size + 4, Pack=1)]
//         public struct S146<T>
//         {
//             public readonly uint Count;

//             S146 Data;

//             [MethodImpl(Inline)]
//             public S146(int count, S146 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S146(uint count, S146 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count147<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S147.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S147<T> alloc147<T>(int count)
//             where T : unmanaged
//                 => new S147<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S147
//         {
//             public const int Size = 147;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S147.Size + 4, Pack=1)]
//         public struct S147<T>
//         {
//             public readonly uint Count;

//             S147 Data;

//             [MethodImpl(Inline)]
//             public S147(int count, S147 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S147(uint count, S147 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count148<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S148.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S148<T> alloc148<T>(int count)
//             where T : unmanaged
//                 => new S148<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S148
//         {
//             public const int Size = 148;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S148.Size + 4, Pack=1)]
//         public struct S148<T>
//         {
//             public readonly uint Count;

//             S148 Data;

//             [MethodImpl(Inline)]
//             public S148(int count, S148 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S148(uint count, S148 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count149<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S149.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S149<T> alloc149<T>(int count)
//             where T : unmanaged
//                 => new S149<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S149
//         {
//             public const int Size = 149;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S149.Size + 4, Pack=1)]
//         public struct S149<T>
//         {
//             public readonly uint Count;

//             S149 Data;

//             [MethodImpl(Inline)]
//             public S149(int count, S149 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S149(uint count, S149 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count150<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S150.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S150<T> alloc150<T>(int count)
//             where T : unmanaged
//                 => new S150<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S150
//         {
//             public const int Size = 150;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S150.Size + 4, Pack=1)]
//         public struct S150<T>
//         {
//             public readonly uint Count;

//             S150 Data;

//             [MethodImpl(Inline)]
//             public S150(int count, S150 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S150(uint count, S150 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count151<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S151.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S151<T> alloc151<T>(int count)
//             where T : unmanaged
//                 => new S151<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S151
//         {
//             public const int Size = 151;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S151.Size + 4, Pack=1)]
//         public struct S151<T>
//         {
//             public readonly uint Count;

//             S151 Data;

//             [MethodImpl(Inline)]
//             public S151(int count, S151 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S151(uint count, S151 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count152<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S152.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S152<T> alloc152<T>(int count)
//             where T : unmanaged
//                 => new S152<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S152
//         {
//             public const int Size = 152;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S152.Size + 4, Pack=1)]
//         public struct S152<T>
//         {
//             public readonly uint Count;

//             S152 Data;

//             [MethodImpl(Inline)]
//             public S152(int count, S152 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S152(uint count, S152 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count153<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S153.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S153<T> alloc153<T>(int count)
//             where T : unmanaged
//                 => new S153<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S153
//         {
//             public const int Size = 153;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S153.Size + 4, Pack=1)]
//         public struct S153<T>
//         {
//             public readonly uint Count;

//             S153 Data;

//             [MethodImpl(Inline)]
//             public S153(int count, S153 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S153(uint count, S153 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count154<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S154.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S154<T> alloc154<T>(int count)
//             where T : unmanaged
//                 => new S154<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S154
//         {
//             public const int Size = 154;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S154.Size + 4, Pack=1)]
//         public struct S154<T>
//         {
//             public readonly uint Count;

//             S154 Data;

//             [MethodImpl(Inline)]
//             public S154(int count, S154 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S154(uint count, S154 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count155<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S155.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S155<T> alloc155<T>(int count)
//             where T : unmanaged
//                 => new S155<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S155
//         {
//             public const int Size = 155;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S155.Size + 4, Pack=1)]
//         public struct S155<T>
//         {
//             public readonly uint Count;

//             S155 Data;

//             [MethodImpl(Inline)]
//             public S155(int count, S155 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S155(uint count, S155 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count156<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S156.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S156<T> alloc156<T>(int count)
//             where T : unmanaged
//                 => new S156<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S156
//         {
//             public const int Size = 156;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S156.Size + 4, Pack=1)]
//         public struct S156<T>
//         {
//             public readonly uint Count;

//             S156 Data;

//             [MethodImpl(Inline)]
//             public S156(int count, S156 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S156(uint count, S156 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count157<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S157.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S157<T> alloc157<T>(int count)
//             where T : unmanaged
//                 => new S157<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S157
//         {
//             public const int Size = 157;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S157.Size + 4, Pack=1)]
//         public struct S157<T>
//         {
//             public readonly uint Count;

//             S157 Data;

//             [MethodImpl(Inline)]
//             public S157(int count, S157 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S157(uint count, S157 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count158<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S158.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S158<T> alloc158<T>(int count)
//             where T : unmanaged
//                 => new S158<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S158
//         {
//             public const int Size = 158;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S158.Size + 4, Pack=1)]
//         public struct S158<T>
//         {
//             public readonly uint Count;

//             S158 Data;

//             [MethodImpl(Inline)]
//             public S158(int count, S158 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S158(uint count, S158 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count159<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S159.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S159<T> alloc159<T>(int count)
//             where T : unmanaged
//                 => new S159<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S159
//         {
//             public const int Size = 159;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S159.Size + 4, Pack=1)]
//         public struct S159<T>
//         {
//             public readonly uint Count;

//             S159 Data;

//             [MethodImpl(Inline)]
//             public S159(int count, S159 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S159(uint count, S159 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count160<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S160.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S160<T> alloc160<T>(int count)
//             where T : unmanaged
//                 => new S160<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S160
//         {
//             public const int Size = 160;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S160.Size + 4, Pack=1)]
//         public struct S160<T>
//         {
//             public readonly uint Count;

//             S160 Data;

//             [MethodImpl(Inline)]
//             public S160(int count, S160 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S160(uint count, S160 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count161<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S161.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S161<T> alloc161<T>(int count)
//             where T : unmanaged
//                 => new S161<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S161
//         {
//             public const int Size = 161;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S161.Size + 4, Pack=1)]
//         public struct S161<T>
//         {
//             public readonly uint Count;

//             S161 Data;

//             [MethodImpl(Inline)]
//             public S161(int count, S161 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S161(uint count, S161 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count162<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S162.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S162<T> alloc162<T>(int count)
//             where T : unmanaged
//                 => new S162<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S162
//         {
//             public const int Size = 162;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S162.Size + 4, Pack=1)]
//         public struct S162<T>
//         {
//             public readonly uint Count;

//             S162 Data;

//             [MethodImpl(Inline)]
//             public S162(int count, S162 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S162(uint count, S162 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count163<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S163.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S163<T> alloc163<T>(int count)
//             where T : unmanaged
//                 => new S163<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S163
//         {
//             public const int Size = 163;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S163.Size + 4, Pack=1)]
//         public struct S163<T>
//         {
//             public readonly uint Count;

//             S163 Data;

//             [MethodImpl(Inline)]
//             public S163(int count, S163 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S163(uint count, S163 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count164<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S164.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S164<T> alloc164<T>(int count)
//             where T : unmanaged
//                 => new S164<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S164
//         {
//             public const int Size = 164;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S164.Size + 4, Pack=1)]
//         public struct S164<T>
//         {
//             public readonly uint Count;

//             S164 Data;

//             [MethodImpl(Inline)]
//             public S164(int count, S164 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S164(uint count, S164 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count165<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S165.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S165<T> alloc165<T>(int count)
//             where T : unmanaged
//                 => new S165<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S165
//         {
//             public const int Size = 165;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S165.Size + 4, Pack=1)]
//         public struct S165<T>
//         {
//             public readonly uint Count;

//             S165 Data;

//             [MethodImpl(Inline)]
//             public S165(int count, S165 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S165(uint count, S165 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count166<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S166.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S166<T> alloc166<T>(int count)
//             where T : unmanaged
//                 => new S166<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S166
//         {
//             public const int Size = 166;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S166.Size + 4, Pack=1)]
//         public struct S166<T>
//         {
//             public readonly uint Count;

//             S166 Data;

//             [MethodImpl(Inline)]
//             public S166(int count, S166 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S166(uint count, S166 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count167<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S167.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S167<T> alloc167<T>(int count)
//             where T : unmanaged
//                 => new S167<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S167
//         {
//             public const int Size = 167;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S167.Size + 4, Pack=1)]
//         public struct S167<T>
//         {
//             public readonly uint Count;

//             S167 Data;

//             [MethodImpl(Inline)]
//             public S167(int count, S167 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S167(uint count, S167 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count168<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S168.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S168<T> alloc168<T>(int count)
//             where T : unmanaged
//                 => new S168<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S168
//         {
//             public const int Size = 168;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S168.Size + 4, Pack=1)]
//         public struct S168<T>
//         {
//             public readonly uint Count;

//             S168 Data;

//             [MethodImpl(Inline)]
//             public S168(int count, S168 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S168(uint count, S168 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count169<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S169.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S169<T> alloc169<T>(int count)
//             where T : unmanaged
//                 => new S169<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S169
//         {
//             public const int Size = 169;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S169.Size + 4, Pack=1)]
//         public struct S169<T>
//         {
//             public readonly uint Count;

//             S169 Data;

//             [MethodImpl(Inline)]
//             public S169(int count, S169 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S169(uint count, S169 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count170<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S170.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S170<T> alloc170<T>(int count)
//             where T : unmanaged
//                 => new S170<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S170
//         {
//             public const int Size = 170;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S170.Size + 4, Pack=1)]
//         public struct S170<T>
//         {
//             public readonly uint Count;

//             S170 Data;

//             [MethodImpl(Inline)]
//             public S170(int count, S170 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S170(uint count, S170 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count171<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S171.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S171<T> alloc171<T>(int count)
//             where T : unmanaged
//                 => new S171<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S171
//         {
//             public const int Size = 171;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S171.Size + 4, Pack=1)]
//         public struct S171<T>
//         {
//             public readonly uint Count;

//             S171 Data;

//             [MethodImpl(Inline)]
//             public S171(int count, S171 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S171(uint count, S171 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count172<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S172.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S172<T> alloc172<T>(int count)
//             where T : unmanaged
//                 => new S172<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S172
//         {
//             public const int Size = 172;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S172.Size + 4, Pack=1)]
//         public struct S172<T>
//         {
//             public readonly uint Count;

//             S172 Data;

//             [MethodImpl(Inline)]
//             public S172(int count, S172 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S172(uint count, S172 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count173<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S173.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S173<T> alloc173<T>(int count)
//             where T : unmanaged
//                 => new S173<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S173
//         {
//             public const int Size = 173;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S173.Size + 4, Pack=1)]
//         public struct S173<T>
//         {
//             public readonly uint Count;

//             S173 Data;

//             [MethodImpl(Inline)]
//             public S173(int count, S173 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S173(uint count, S173 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count174<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S174.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S174<T> alloc174<T>(int count)
//             where T : unmanaged
//                 => new S174<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S174
//         {
//             public const int Size = 174;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S174.Size + 4, Pack=1)]
//         public struct S174<T>
//         {
//             public readonly uint Count;

//             S174 Data;

//             [MethodImpl(Inline)]
//             public S174(int count, S174 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S174(uint count, S174 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count175<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S175.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S175<T> alloc175<T>(int count)
//             where T : unmanaged
//                 => new S175<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S175
//         {
//             public const int Size = 175;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S175.Size + 4, Pack=1)]
//         public struct S175<T>
//         {
//             public readonly uint Count;

//             S175 Data;

//             [MethodImpl(Inline)]
//             public S175(int count, S175 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S175(uint count, S175 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count176<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S176.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S176<T> alloc176<T>(int count)
//             where T : unmanaged
//                 => new S176<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S176
//         {
//             public const int Size = 176;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S176.Size + 4, Pack=1)]
//         public struct S176<T>
//         {
//             public readonly uint Count;

//             S176 Data;

//             [MethodImpl(Inline)]
//             public S176(int count, S176 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S176(uint count, S176 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count177<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S177.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S177<T> alloc177<T>(int count)
//             where T : unmanaged
//                 => new S177<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S177
//         {
//             public const int Size = 177;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S177.Size + 4, Pack=1)]
//         public struct S177<T>
//         {
//             public readonly uint Count;

//             S177 Data;

//             [MethodImpl(Inline)]
//             public S177(int count, S177 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S177(uint count, S177 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count178<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S178.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S178<T> alloc178<T>(int count)
//             where T : unmanaged
//                 => new S178<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S178
//         {
//             public const int Size = 178;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S178.Size + 4, Pack=1)]
//         public struct S178<T>
//         {
//             public readonly uint Count;

//             S178 Data;

//             [MethodImpl(Inline)]
//             public S178(int count, S178 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S178(uint count, S178 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count179<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S179.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S179<T> alloc179<T>(int count)
//             where T : unmanaged
//                 => new S179<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S179
//         {
//             public const int Size = 179;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S179.Size + 4, Pack=1)]
//         public struct S179<T>
//         {
//             public readonly uint Count;

//             S179 Data;

//             [MethodImpl(Inline)]
//             public S179(int count, S179 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S179(uint count, S179 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count180<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S180.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S180<T> alloc180<T>(int count)
//             where T : unmanaged
//                 => new S180<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S180
//         {
//             public const int Size = 180;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S180.Size + 4, Pack=1)]
//         public struct S180<T>
//         {
//             public readonly uint Count;

//             S180 Data;

//             [MethodImpl(Inline)]
//             public S180(int count, S180 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S180(uint count, S180 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count181<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S181.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S181<T> alloc181<T>(int count)
//             where T : unmanaged
//                 => new S181<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S181
//         {
//             public const int Size = 181;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S181.Size + 4, Pack=1)]
//         public struct S181<T>
//         {
//             public readonly uint Count;

//             S181 Data;

//             [MethodImpl(Inline)]
//             public S181(int count, S181 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S181(uint count, S181 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count182<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S182.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S182<T> alloc182<T>(int count)
//             where T : unmanaged
//                 => new S182<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S182
//         {
//             public const int Size = 182;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S182.Size + 4, Pack=1)]
//         public struct S182<T>
//         {
//             public readonly uint Count;

//             S182 Data;

//             [MethodImpl(Inline)]
//             public S182(int count, S182 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S182(uint count, S182 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count183<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S183.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S183<T> alloc183<T>(int count)
//             where T : unmanaged
//                 => new S183<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S183
//         {
//             public const int Size = 183;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S183.Size + 4, Pack=1)]
//         public struct S183<T>
//         {
//             public readonly uint Count;

//             S183 Data;

//             [MethodImpl(Inline)]
//             public S183(int count, S183 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S183(uint count, S183 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count184<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S184.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S184<T> alloc184<T>(int count)
//             where T : unmanaged
//                 => new S184<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S184
//         {
//             public const int Size = 184;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S184.Size + 4, Pack=1)]
//         public struct S184<T>
//         {
//             public readonly uint Count;

//             S184 Data;

//             [MethodImpl(Inline)]
//             public S184(int count, S184 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S184(uint count, S184 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count185<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S185.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S185<T> alloc185<T>(int count)
//             where T : unmanaged
//                 => new S185<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S185
//         {
//             public const int Size = 185;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S185.Size + 4, Pack=1)]
//         public struct S185<T>
//         {
//             public readonly uint Count;

//             S185 Data;

//             [MethodImpl(Inline)]
//             public S185(int count, S185 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S185(uint count, S185 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count186<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S186.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S186<T> alloc186<T>(int count)
//             where T : unmanaged
//                 => new S186<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S186
//         {
//             public const int Size = 186;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S186.Size + 4, Pack=1)]
//         public struct S186<T>
//         {
//             public readonly uint Count;

//             S186 Data;

//             [MethodImpl(Inline)]
//             public S186(int count, S186 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S186(uint count, S186 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count187<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S187.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S187<T> alloc187<T>(int count)
//             where T : unmanaged
//                 => new S187<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S187
//         {
//             public const int Size = 187;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S187.Size + 4, Pack=1)]
//         public struct S187<T>
//         {
//             public readonly uint Count;

//             S187 Data;

//             [MethodImpl(Inline)]
//             public S187(int count, S187 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S187(uint count, S187 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count188<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S188.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S188<T> alloc188<T>(int count)
//             where T : unmanaged
//                 => new S188<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S188
//         {
//             public const int Size = 188;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S188.Size + 4, Pack=1)]
//         public struct S188<T>
//         {
//             public readonly uint Count;

//             S188 Data;

//             [MethodImpl(Inline)]
//             public S188(int count, S188 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S188(uint count, S188 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count189<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S189.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S189<T> alloc189<T>(int count)
//             where T : unmanaged
//                 => new S189<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S189
//         {
//             public const int Size = 189;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S189.Size + 4, Pack=1)]
//         public struct S189<T>
//         {
//             public readonly uint Count;

//             S189 Data;

//             [MethodImpl(Inline)]
//             public S189(int count, S189 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S189(uint count, S189 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count190<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S190.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S190<T> alloc190<T>(int count)
//             where T : unmanaged
//                 => new S190<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S190
//         {
//             public const int Size = 190;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S190.Size + 4, Pack=1)]
//         public struct S190<T>
//         {
//             public readonly uint Count;

//             S190 Data;

//             [MethodImpl(Inline)]
//             public S190(int count, S190 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S190(uint count, S190 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count191<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S191.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S191<T> alloc191<T>(int count)
//             where T : unmanaged
//                 => new S191<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S191
//         {
//             public const int Size = 191;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S191.Size + 4, Pack=1)]
//         public struct S191<T>
//         {
//             public readonly uint Count;

//             S191 Data;

//             [MethodImpl(Inline)]
//             public S191(int count, S191 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S191(uint count, S191 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count192<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S192.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S192<T> alloc192<T>(int count)
//             where T : unmanaged
//                 => new S192<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S192
//         {
//             public const int Size = 192;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S192.Size + 4, Pack=1)]
//         public struct S192<T>
//         {
//             public readonly uint Count;

//             S192 Data;

//             [MethodImpl(Inline)]
//             public S192(int count, S192 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S192(uint count, S192 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count193<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S193.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S193<T> alloc193<T>(int count)
//             where T : unmanaged
//                 => new S193<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S193
//         {
//             public const int Size = 193;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S193.Size + 4, Pack=1)]
//         public struct S193<T>
//         {
//             public readonly uint Count;

//             S193 Data;

//             [MethodImpl(Inline)]
//             public S193(int count, S193 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S193(uint count, S193 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count194<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S194.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S194<T> alloc194<T>(int count)
//             where T : unmanaged
//                 => new S194<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S194
//         {
//             public const int Size = 194;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S194.Size + 4, Pack=1)]
//         public struct S194<T>
//         {
//             public readonly uint Count;

//             S194 Data;

//             [MethodImpl(Inline)]
//             public S194(int count, S194 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S194(uint count, S194 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count195<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S195.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S195<T> alloc195<T>(int count)
//             where T : unmanaged
//                 => new S195<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S195
//         {
//             public const int Size = 195;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S195.Size + 4, Pack=1)]
//         public struct S195<T>
//         {
//             public readonly uint Count;

//             S195 Data;

//             [MethodImpl(Inline)]
//             public S195(int count, S195 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S195(uint count, S195 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count196<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S196.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S196<T> alloc196<T>(int count)
//             where T : unmanaged
//                 => new S196<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S196
//         {
//             public const int Size = 196;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S196.Size + 4, Pack=1)]
//         public struct S196<T>
//         {
//             public readonly uint Count;

//             S196 Data;

//             [MethodImpl(Inline)]
//             public S196(int count, S196 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S196(uint count, S196 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count197<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S197.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S197<T> alloc197<T>(int count)
//             where T : unmanaged
//                 => new S197<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S197
//         {
//             public const int Size = 197;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S197.Size + 4, Pack=1)]
//         public struct S197<T>
//         {
//             public readonly uint Count;

//             S197 Data;

//             [MethodImpl(Inline)]
//             public S197(int count, S197 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S197(uint count, S197 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count198<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S198.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S198<T> alloc198<T>(int count)
//             where T : unmanaged
//                 => new S198<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S198
//         {
//             public const int Size = 198;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S198.Size + 4, Pack=1)]
//         public struct S198<T>
//         {
//             public readonly uint Count;

//             S198 Data;

//             [MethodImpl(Inline)]
//             public S198(int count, S198 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S198(uint count, S198 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count199<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S199.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S199<T> alloc199<T>(int count)
//             where T : unmanaged
//                 => new S199<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S199
//         {
//             public const int Size = 199;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S199.Size + 4, Pack=1)]
//         public struct S199<T>
//         {
//             public readonly uint Count;

//             S199 Data;

//             [MethodImpl(Inline)]
//             public S199(int count, S199 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S199(uint count, S199 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count200<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S200.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S200<T> alloc200<T>(int count)
//             where T : unmanaged
//                 => new S200<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S200
//         {
//             public const int Size = 200;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S200.Size + 4, Pack=1)]
//         public struct S200<T>
//         {
//             public readonly uint Count;

//             S200 Data;

//             [MethodImpl(Inline)]
//             public S200(int count, S200 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S200(uint count, S200 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count201<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S201.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S201<T> alloc201<T>(int count)
//             where T : unmanaged
//                 => new S201<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S201
//         {
//             public const int Size = 201;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S201.Size + 4, Pack=1)]
//         public struct S201<T>
//         {
//             public readonly uint Count;

//             S201 Data;

//             [MethodImpl(Inline)]
//             public S201(int count, S201 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S201(uint count, S201 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count202<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S202.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S202<T> alloc202<T>(int count)
//             where T : unmanaged
//                 => new S202<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S202
//         {
//             public const int Size = 202;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S202.Size + 4, Pack=1)]
//         public struct S202<T>
//         {
//             public readonly uint Count;

//             S202 Data;

//             [MethodImpl(Inline)]
//             public S202(int count, S202 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S202(uint count, S202 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count203<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S203.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S203<T> alloc203<T>(int count)
//             where T : unmanaged
//                 => new S203<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S203
//         {
//             public const int Size = 203;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S203.Size + 4, Pack=1)]
//         public struct S203<T>
//         {
//             public readonly uint Count;

//             S203 Data;

//             [MethodImpl(Inline)]
//             public S203(int count, S203 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S203(uint count, S203 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count204<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S204.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S204<T> alloc204<T>(int count)
//             where T : unmanaged
//                 => new S204<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S204
//         {
//             public const int Size = 204;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S204.Size + 4, Pack=1)]
//         public struct S204<T>
//         {
//             public readonly uint Count;

//             S204 Data;

//             [MethodImpl(Inline)]
//             public S204(int count, S204 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S204(uint count, S204 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count205<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S205.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S205<T> alloc205<T>(int count)
//             where T : unmanaged
//                 => new S205<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S205
//         {
//             public const int Size = 205;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S205.Size + 4, Pack=1)]
//         public struct S205<T>
//         {
//             public readonly uint Count;

//             S205 Data;

//             [MethodImpl(Inline)]
//             public S205(int count, S205 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S205(uint count, S205 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count206<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S206.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S206<T> alloc206<T>(int count)
//             where T : unmanaged
//                 => new S206<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S206
//         {
//             public const int Size = 206;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S206.Size + 4, Pack=1)]
//         public struct S206<T>
//         {
//             public readonly uint Count;

//             S206 Data;

//             [MethodImpl(Inline)]
//             public S206(int count, S206 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S206(uint count, S206 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count207<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S207.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S207<T> alloc207<T>(int count)
//             where T : unmanaged
//                 => new S207<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S207
//         {
//             public const int Size = 207;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S207.Size + 4, Pack=1)]
//         public struct S207<T>
//         {
//             public readonly uint Count;

//             S207 Data;

//             [MethodImpl(Inline)]
//             public S207(int count, S207 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S207(uint count, S207 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count208<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S208.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S208<T> alloc208<T>(int count)
//             where T : unmanaged
//                 => new S208<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S208
//         {
//             public const int Size = 208;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S208.Size + 4, Pack=1)]
//         public struct S208<T>
//         {
//             public readonly uint Count;

//             S208 Data;

//             [MethodImpl(Inline)]
//             public S208(int count, S208 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S208(uint count, S208 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count209<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S209.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S209<T> alloc209<T>(int count)
//             where T : unmanaged
//                 => new S209<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S209
//         {
//             public const int Size = 209;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S209.Size + 4, Pack=1)]
//         public struct S209<T>
//         {
//             public readonly uint Count;

//             S209 Data;

//             [MethodImpl(Inline)]
//             public S209(int count, S209 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S209(uint count, S209 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count210<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S210.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S210<T> alloc210<T>(int count)
//             where T : unmanaged
//                 => new S210<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S210
//         {
//             public const int Size = 210;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S210.Size + 4, Pack=1)]
//         public struct S210<T>
//         {
//             public readonly uint Count;

//             S210 Data;

//             [MethodImpl(Inline)]
//             public S210(int count, S210 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S210(uint count, S210 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count211<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S211.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S211<T> alloc211<T>(int count)
//             where T : unmanaged
//                 => new S211<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S211
//         {
//             public const int Size = 211;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S211.Size + 4, Pack=1)]
//         public struct S211<T>
//         {
//             public readonly uint Count;

//             S211 Data;

//             [MethodImpl(Inline)]
//             public S211(int count, S211 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S211(uint count, S211 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count212<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S212.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S212<T> alloc212<T>(int count)
//             where T : unmanaged
//                 => new S212<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S212
//         {
//             public const int Size = 212;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S212.Size + 4, Pack=1)]
//         public struct S212<T>
//         {
//             public readonly uint Count;

//             S212 Data;

//             [MethodImpl(Inline)]
//             public S212(int count, S212 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S212(uint count, S212 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count213<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S213.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S213<T> alloc213<T>(int count)
//             where T : unmanaged
//                 => new S213<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S213
//         {
//             public const int Size = 213;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S213.Size + 4, Pack=1)]
//         public struct S213<T>
//         {
//             public readonly uint Count;

//             S213 Data;

//             [MethodImpl(Inline)]
//             public S213(int count, S213 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S213(uint count, S213 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count214<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S214.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S214<T> alloc214<T>(int count)
//             where T : unmanaged
//                 => new S214<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S214
//         {
//             public const int Size = 214;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S214.Size + 4, Pack=1)]
//         public struct S214<T>
//         {
//             public readonly uint Count;

//             S214 Data;

//             [MethodImpl(Inline)]
//             public S214(int count, S214 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S214(uint count, S214 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count215<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S215.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S215<T> alloc215<T>(int count)
//             where T : unmanaged
//                 => new S215<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S215
//         {
//             public const int Size = 215;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S215.Size + 4, Pack=1)]
//         public struct S215<T>
//         {
//             public readonly uint Count;

//             S215 Data;

//             [MethodImpl(Inline)]
//             public S215(int count, S215 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S215(uint count, S215 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count216<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S216.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S216<T> alloc216<T>(int count)
//             where T : unmanaged
//                 => new S216<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S216
//         {
//             public const int Size = 216;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S216.Size + 4, Pack=1)]
//         public struct S216<T>
//         {
//             public readonly uint Count;

//             S216 Data;

//             [MethodImpl(Inline)]
//             public S216(int count, S216 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S216(uint count, S216 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count217<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S217.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S217<T> alloc217<T>(int count)
//             where T : unmanaged
//                 => new S217<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S217
//         {
//             public const int Size = 217;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S217.Size + 4, Pack=1)]
//         public struct S217<T>
//         {
//             public readonly uint Count;

//             S217 Data;

//             [MethodImpl(Inline)]
//             public S217(int count, S217 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S217(uint count, S217 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count218<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S218.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S218<T> alloc218<T>(int count)
//             where T : unmanaged
//                 => new S218<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S218
//         {
//             public const int Size = 218;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S218.Size + 4, Pack=1)]
//         public struct S218<T>
//         {
//             public readonly uint Count;

//             S218 Data;

//             [MethodImpl(Inline)]
//             public S218(int count, S218 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S218(uint count, S218 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count219<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S219.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S219<T> alloc219<T>(int count)
//             where T : unmanaged
//                 => new S219<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S219
//         {
//             public const int Size = 219;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S219.Size + 4, Pack=1)]
//         public struct S219<T>
//         {
//             public readonly uint Count;

//             S219 Data;

//             [MethodImpl(Inline)]
//             public S219(int count, S219 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S219(uint count, S219 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count220<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S220.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S220<T> alloc220<T>(int count)
//             where T : unmanaged
//                 => new S220<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S220
//         {
//             public const int Size = 220;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S220.Size + 4, Pack=1)]
//         public struct S220<T>
//         {
//             public readonly uint Count;

//             S220 Data;

//             [MethodImpl(Inline)]
//             public S220(int count, S220 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S220(uint count, S220 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count221<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S221.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S221<T> alloc221<T>(int count)
//             where T : unmanaged
//                 => new S221<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S221
//         {
//             public const int Size = 221;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S221.Size + 4, Pack=1)]
//         public struct S221<T>
//         {
//             public readonly uint Count;

//             S221 Data;

//             [MethodImpl(Inline)]
//             public S221(int count, S221 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S221(uint count, S221 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count222<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S222.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S222<T> alloc222<T>(int count)
//             where T : unmanaged
//                 => new S222<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S222
//         {
//             public const int Size = 222;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S222.Size + 4, Pack=1)]
//         public struct S222<T>
//         {
//             public readonly uint Count;

//             S222 Data;

//             [MethodImpl(Inline)]
//             public S222(int count, S222 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S222(uint count, S222 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count223<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S223.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S223<T> alloc223<T>(int count)
//             where T : unmanaged
//                 => new S223<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S223
//         {
//             public const int Size = 223;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S223.Size + 4, Pack=1)]
//         public struct S223<T>
//         {
//             public readonly uint Count;

//             S223 Data;

//             [MethodImpl(Inline)]
//             public S223(int count, S223 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S223(uint count, S223 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count224<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S224.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S224<T> alloc224<T>(int count)
//             where T : unmanaged
//                 => new S224<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S224
//         {
//             public const int Size = 224;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S224.Size + 4, Pack=1)]
//         public struct S224<T>
//         {
//             public readonly uint Count;

//             S224 Data;

//             [MethodImpl(Inline)]
//             public S224(int count, S224 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S224(uint count, S224 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count225<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S225.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S225<T> alloc225<T>(int count)
//             where T : unmanaged
//                 => new S225<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S225
//         {
//             public const int Size = 225;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S225.Size + 4, Pack=1)]
//         public struct S225<T>
//         {
//             public readonly uint Count;

//             S225 Data;

//             [MethodImpl(Inline)]
//             public S225(int count, S225 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S225(uint count, S225 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count226<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S226.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S226<T> alloc226<T>(int count)
//             where T : unmanaged
//                 => new S226<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S226
//         {
//             public const int Size = 226;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S226.Size + 4, Pack=1)]
//         public struct S226<T>
//         {
//             public readonly uint Count;

//             S226 Data;

//             [MethodImpl(Inline)]
//             public S226(int count, S226 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S226(uint count, S226 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count227<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S227.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S227<T> alloc227<T>(int count)
//             where T : unmanaged
//                 => new S227<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S227
//         {
//             public const int Size = 227;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S227.Size + 4, Pack=1)]
//         public struct S227<T>
//         {
//             public readonly uint Count;

//             S227 Data;

//             [MethodImpl(Inline)]
//             public S227(int count, S227 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S227(uint count, S227 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count228<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S228.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S228<T> alloc228<T>(int count)
//             where T : unmanaged
//                 => new S228<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S228
//         {
//             public const int Size = 228;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S228.Size + 4, Pack=1)]
//         public struct S228<T>
//         {
//             public readonly uint Count;

//             S228 Data;

//             [MethodImpl(Inline)]
//             public S228(int count, S228 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S228(uint count, S228 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count229<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S229.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S229<T> alloc229<T>(int count)
//             where T : unmanaged
//                 => new S229<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S229
//         {
//             public const int Size = 229;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S229.Size + 4, Pack=1)]
//         public struct S229<T>
//         {
//             public readonly uint Count;

//             S229 Data;

//             [MethodImpl(Inline)]
//             public S229(int count, S229 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S229(uint count, S229 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count230<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S230.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S230<T> alloc230<T>(int count)
//             where T : unmanaged
//                 => new S230<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S230
//         {
//             public const int Size = 230;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S230.Size + 4, Pack=1)]
//         public struct S230<T>
//         {
//             public readonly uint Count;

//             S230 Data;

//             [MethodImpl(Inline)]
//             public S230(int count, S230 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S230(uint count, S230 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count231<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S231.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S231<T> alloc231<T>(int count)
//             where T : unmanaged
//                 => new S231<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S231
//         {
//             public const int Size = 231;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S231.Size + 4, Pack=1)]
//         public struct S231<T>
//         {
//             public readonly uint Count;

//             S231 Data;

//             [MethodImpl(Inline)]
//             public S231(int count, S231 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S231(uint count, S231 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count232<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S232.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S232<T> alloc232<T>(int count)
//             where T : unmanaged
//                 => new S232<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S232
//         {
//             public const int Size = 232;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S232.Size + 4, Pack=1)]
//         public struct S232<T>
//         {
//             public readonly uint Count;

//             S232 Data;

//             [MethodImpl(Inline)]
//             public S232(int count, S232 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S232(uint count, S232 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count233<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S233.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S233<T> alloc233<T>(int count)
//             where T : unmanaged
//                 => new S233<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S233
//         {
//             public const int Size = 233;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S233.Size + 4, Pack=1)]
//         public struct S233<T>
//         {
//             public readonly uint Count;

//             S233 Data;

//             [MethodImpl(Inline)]
//             public S233(int count, S233 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S233(uint count, S233 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count234<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S234.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S234<T> alloc234<T>(int count)
//             where T : unmanaged
//                 => new S234<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S234
//         {
//             public const int Size = 234;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S234.Size + 4, Pack=1)]
//         public struct S234<T>
//         {
//             public readonly uint Count;

//             S234 Data;

//             [MethodImpl(Inline)]
//             public S234(int count, S234 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S234(uint count, S234 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count235<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S235.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S235<T> alloc235<T>(int count)
//             where T : unmanaged
//                 => new S235<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S235
//         {
//             public const int Size = 235;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S235.Size + 4, Pack=1)]
//         public struct S235<T>
//         {
//             public readonly uint Count;

//             S235 Data;

//             [MethodImpl(Inline)]
//             public S235(int count, S235 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S235(uint count, S235 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count236<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S236.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S236<T> alloc236<T>(int count)
//             where T : unmanaged
//                 => new S236<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S236
//         {
//             public const int Size = 236;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S236.Size + 4, Pack=1)]
//         public struct S236<T>
//         {
//             public readonly uint Count;

//             S236 Data;

//             [MethodImpl(Inline)]
//             public S236(int count, S236 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S236(uint count, S236 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count237<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S237.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S237<T> alloc237<T>(int count)
//             where T : unmanaged
//                 => new S237<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S237
//         {
//             public const int Size = 237;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S237.Size + 4, Pack=1)]
//         public struct S237<T>
//         {
//             public readonly uint Count;

//             S237 Data;

//             [MethodImpl(Inline)]
//             public S237(int count, S237 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S237(uint count, S237 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count238<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S238.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S238<T> alloc238<T>(int count)
//             where T : unmanaged
//                 => new S238<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S238
//         {
//             public const int Size = 238;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S238.Size + 4, Pack=1)]
//         public struct S238<T>
//         {
//             public readonly uint Count;

//             S238 Data;

//             [MethodImpl(Inline)]
//             public S238(int count, S238 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S238(uint count, S238 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count239<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S239.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S239<T> alloc239<T>(int count)
//             where T : unmanaged
//                 => new S239<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S239
//         {
//             public const int Size = 239;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S239.Size + 4, Pack=1)]
//         public struct S239<T>
//         {
//             public readonly uint Count;

//             S239 Data;

//             [MethodImpl(Inline)]
//             public S239(int count, S239 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S239(uint count, S239 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count240<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S240.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S240<T> alloc240<T>(int count)
//             where T : unmanaged
//                 => new S240<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S240
//         {
//             public const int Size = 240;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S240.Size + 4, Pack=1)]
//         public struct S240<T>
//         {
//             public readonly uint Count;

//             S240 Data;

//             [MethodImpl(Inline)]
//             public S240(int count, S240 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S240(uint count, S240 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count241<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S241.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S241<T> alloc241<T>(int count)
//             where T : unmanaged
//                 => new S241<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S241
//         {
//             public const int Size = 241;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S241.Size + 4, Pack=1)]
//         public struct S241<T>
//         {
//             public readonly uint Count;

//             S241 Data;

//             [MethodImpl(Inline)]
//             public S241(int count, S241 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S241(uint count, S241 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count242<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S242.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S242<T> alloc242<T>(int count)
//             where T : unmanaged
//                 => new S242<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S242
//         {
//             public const int Size = 242;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S242.Size + 4, Pack=1)]
//         public struct S242<T>
//         {
//             public readonly uint Count;

//             S242 Data;

//             [MethodImpl(Inline)]
//             public S242(int count, S242 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S242(uint count, S242 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count243<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S243.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S243<T> alloc243<T>(int count)
//             where T : unmanaged
//                 => new S243<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S243
//         {
//             public const int Size = 243;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S243.Size + 4, Pack=1)]
//         public struct S243<T>
//         {
//             public readonly uint Count;

//             S243 Data;

//             [MethodImpl(Inline)]
//             public S243(int count, S243 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S243(uint count, S243 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count244<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S244.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S244<T> alloc244<T>(int count)
//             where T : unmanaged
//                 => new S244<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S244
//         {
//             public const int Size = 244;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S244.Size + 4, Pack=1)]
//         public struct S244<T>
//         {
//             public readonly uint Count;

//             S244 Data;

//             [MethodImpl(Inline)]
//             public S244(int count, S244 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S244(uint count, S244 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count245<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S245.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S245<T> alloc245<T>(int count)
//             where T : unmanaged
//                 => new S245<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S245
//         {
//             public const int Size = 245;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S245.Size + 4, Pack=1)]
//         public struct S245<T>
//         {
//             public readonly uint Count;

//             S245 Data;

//             [MethodImpl(Inline)]
//             public S245(int count, S245 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S245(uint count, S245 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count246<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S246.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S246<T> alloc246<T>(int count)
//             where T : unmanaged
//                 => new S246<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S246
//         {
//             public const int Size = 246;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S246.Size + 4, Pack=1)]
//         public struct S246<T>
//         {
//             public readonly uint Count;

//             S246 Data;

//             [MethodImpl(Inline)]
//             public S246(int count, S246 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S246(uint count, S246 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count247<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S247.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S247<T> alloc247<T>(int count)
//             where T : unmanaged
//                 => new S247<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S247
//         {
//             public const int Size = 247;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S247.Size + 4, Pack=1)]
//         public struct S247<T>
//         {
//             public readonly uint Count;

//             S247 Data;

//             [MethodImpl(Inline)]
//             public S247(int count, S247 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S247(uint count, S247 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count248<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S248.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S248<T> alloc248<T>(int count)
//             where T : unmanaged
//                 => new S248<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S248
//         {
//             public const int Size = 248;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S248.Size + 4, Pack=1)]
//         public struct S248<T>
//         {
//             public readonly uint Count;

//             S248 Data;

//             [MethodImpl(Inline)]
//             public S248(int count, S248 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S248(uint count, S248 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count249<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S249.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S249<T> alloc249<T>(int count)
//             where T : unmanaged
//                 => new S249<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S249
//         {
//             public const int Size = 249;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S249.Size + 4, Pack=1)]
//         public struct S249<T>
//         {
//             public readonly uint Count;

//             S249 Data;

//             [MethodImpl(Inline)]
//             public S249(int count, S249 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S249(uint count, S249 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count250<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S250.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S250<T> alloc250<T>(int count)
//             where T : unmanaged
//                 => new S250<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S250
//         {
//             public const int Size = 250;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S250.Size + 4, Pack=1)]
//         public struct S250<T>
//         {
//             public readonly uint Count;

//             S250 Data;

//             [MethodImpl(Inline)]
//             public S250(int count, S250 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S250(uint count, S250 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count251<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S251.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S251<T> alloc251<T>(int count)
//             where T : unmanaged
//                 => new S251<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S251
//         {
//             public const int Size = 251;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S251.Size + 4, Pack=1)]
//         public struct S251<T>
//         {
//             public readonly uint Count;

//             S251 Data;

//             [MethodImpl(Inline)]
//             public S251(int count, S251 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S251(uint count, S251 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count252<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S252.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S252<T> alloc252<T>(int count)
//             where T : unmanaged
//                 => new S252<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S252
//         {
//             public const int Size = 252;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S252.Size + 4, Pack=1)]
//         public struct S252<T>
//         {
//             public readonly uint Count;

//             S252 Data;

//             [MethodImpl(Inline)]
//             public S252(int count, S252 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S252(uint count, S252 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count253<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S253.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S253<T> alloc253<T>(int count)
//             where T : unmanaged
//                 => new S253<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S253
//         {
//             public const int Size = 253;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S253.Size + 4, Pack=1)]
//         public struct S253<T>
//         {
//             public readonly uint Count;

//             S253 Data;

//             [MethodImpl(Inline)]
//             public S253(int count, S253 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S253(uint count, S253 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count254<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S254.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S254<T> alloc254<T>(int count)
//             where T : unmanaged
//                 => new S254<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S254
//         {
//             public const int Size = 254;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S254.Size + 4, Pack=1)]
//         public struct S254<T>
//         {
//             public readonly uint Count;

//             S254 Data;

//             [MethodImpl(Inline)]
//             public S254(int count, S254 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S254(uint count, S254 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count255<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S255.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S255<T> alloc255<T>(int count)
//             where T : unmanaged
//                 => new S255<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S255
//         {
//             public const int Size = 255;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S255.Size + 4, Pack=1)]
//         public struct S255<T>
//         {
//             public readonly uint Count;

//             S255 Data;

//             [MethodImpl(Inline)]
//             public S255(int count, S255 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S255(uint count, S255 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count256<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S256.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S256<T> alloc256<T>(int count)
//             where T : unmanaged
//                 => new S256<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S256
//         {
//             public const int Size = 256;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S256.Size + 4, Pack=1)]
//         public struct S256<T>
//         {
//             public readonly uint Count;

//             S256 Data;

//             [MethodImpl(Inline)]
//             public S256(int count, S256 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S256(uint count, S256 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count257<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S257.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S257<T> alloc257<T>(int count)
//             where T : unmanaged
//                 => new S257<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S257
//         {
//             public const int Size = 257;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S257.Size + 4, Pack=1)]
//         public struct S257<T>
//         {
//             public readonly uint Count;

//             S257 Data;

//             [MethodImpl(Inline)]
//             public S257(int count, S257 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S257(uint count, S257 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count258<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S258.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S258<T> alloc258<T>(int count)
//             where T : unmanaged
//                 => new S258<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S258
//         {
//             public const int Size = 258;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S258.Size + 4, Pack=1)]
//         public struct S258<T>
//         {
//             public readonly uint Count;

//             S258 Data;

//             [MethodImpl(Inline)]
//             public S258(int count, S258 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S258(uint count, S258 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count259<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S259.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S259<T> alloc259<T>(int count)
//             where T : unmanaged
//                 => new S259<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S259
//         {
//             public const int Size = 259;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S259.Size + 4, Pack=1)]
//         public struct S259<T>
//         {
//             public readonly uint Count;

//             S259 Data;

//             [MethodImpl(Inline)]
//             public S259(int count, S259 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S259(uint count, S259 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count260<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S260.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S260<T> alloc260<T>(int count)
//             where T : unmanaged
//                 => new S260<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S260
//         {
//             public const int Size = 260;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S260.Size + 4, Pack=1)]
//         public struct S260<T>
//         {
//             public readonly uint Count;

//             S260 Data;

//             [MethodImpl(Inline)]
//             public S260(int count, S260 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S260(uint count, S260 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count261<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S261.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S261<T> alloc261<T>(int count)
//             where T : unmanaged
//                 => new S261<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S261
//         {
//             public const int Size = 261;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S261.Size + 4, Pack=1)]
//         public struct S261<T>
//         {
//             public readonly uint Count;

//             S261 Data;

//             [MethodImpl(Inline)]
//             public S261(int count, S261 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S261(uint count, S261 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count262<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S262.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S262<T> alloc262<T>(int count)
//             where T : unmanaged
//                 => new S262<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S262
//         {
//             public const int Size = 262;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S262.Size + 4, Pack=1)]
//         public struct S262<T>
//         {
//             public readonly uint Count;

//             S262 Data;

//             [MethodImpl(Inline)]
//             public S262(int count, S262 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S262(uint count, S262 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count263<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S263.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S263<T> alloc263<T>(int count)
//             where T : unmanaged
//                 => new S263<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S263
//         {
//             public const int Size = 263;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S263.Size + 4, Pack=1)]
//         public struct S263<T>
//         {
//             public readonly uint Count;

//             S263 Data;

//             [MethodImpl(Inline)]
//             public S263(int count, S263 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S263(uint count, S263 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count264<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S264.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S264<T> alloc264<T>(int count)
//             where T : unmanaged
//                 => new S264<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S264
//         {
//             public const int Size = 264;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S264.Size + 4, Pack=1)]
//         public struct S264<T>
//         {
//             public readonly uint Count;

//             S264 Data;

//             [MethodImpl(Inline)]
//             public S264(int count, S264 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S264(uint count, S264 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count265<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S265.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S265<T> alloc265<T>(int count)
//             where T : unmanaged
//                 => new S265<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S265
//         {
//             public const int Size = 265;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S265.Size + 4, Pack=1)]
//         public struct S265<T>
//         {
//             public readonly uint Count;

//             S265 Data;

//             [MethodImpl(Inline)]
//             public S265(int count, S265 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S265(uint count, S265 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count266<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S266.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S266<T> alloc266<T>(int count)
//             where T : unmanaged
//                 => new S266<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S266
//         {
//             public const int Size = 266;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S266.Size + 4, Pack=1)]
//         public struct S266<T>
//         {
//             public readonly uint Count;

//             S266 Data;

//             [MethodImpl(Inline)]
//             public S266(int count, S266 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S266(uint count, S266 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count267<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S267.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S267<T> alloc267<T>(int count)
//             where T : unmanaged
//                 => new S267<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S267
//         {
//             public const int Size = 267;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S267.Size + 4, Pack=1)]
//         public struct S267<T>
//         {
//             public readonly uint Count;

//             S267 Data;

//             [MethodImpl(Inline)]
//             public S267(int count, S267 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S267(uint count, S267 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count268<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S268.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S268<T> alloc268<T>(int count)
//             where T : unmanaged
//                 => new S268<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S268
//         {
//             public const int Size = 268;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S268.Size + 4, Pack=1)]
//         public struct S268<T>
//         {
//             public readonly uint Count;

//             S268 Data;

//             [MethodImpl(Inline)]
//             public S268(int count, S268 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S268(uint count, S268 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count269<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S269.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S269<T> alloc269<T>(int count)
//             where T : unmanaged
//                 => new S269<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S269
//         {
//             public const int Size = 269;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S269.Size + 4, Pack=1)]
//         public struct S269<T>
//         {
//             public readonly uint Count;

//             S269 Data;

//             [MethodImpl(Inline)]
//             public S269(int count, S269 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S269(uint count, S269 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count270<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S270.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S270<T> alloc270<T>(int count)
//             where T : unmanaged
//                 => new S270<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S270
//         {
//             public const int Size = 270;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S270.Size + 4, Pack=1)]
//         public struct S270<T>
//         {
//             public readonly uint Count;

//             S270 Data;

//             [MethodImpl(Inline)]
//             public S270(int count, S270 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S270(uint count, S270 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count271<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S271.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S271<T> alloc271<T>(int count)
//             where T : unmanaged
//                 => new S271<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S271
//         {
//             public const int Size = 271;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S271.Size + 4, Pack=1)]
//         public struct S271<T>
//         {
//             public readonly uint Count;

//             S271 Data;

//             [MethodImpl(Inline)]
//             public S271(int count, S271 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S271(uint count, S271 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count272<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S272.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S272<T> alloc272<T>(int count)
//             where T : unmanaged
//                 => new S272<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S272
//         {
//             public const int Size = 272;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S272.Size + 4, Pack=1)]
//         public struct S272<T>
//         {
//             public readonly uint Count;

//             S272 Data;

//             [MethodImpl(Inline)]
//             public S272(int count, S272 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S272(uint count, S272 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count273<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S273.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S273<T> alloc273<T>(int count)
//             where T : unmanaged
//                 => new S273<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S273
//         {
//             public const int Size = 273;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S273.Size + 4, Pack=1)]
//         public struct S273<T>
//         {
//             public readonly uint Count;

//             S273 Data;

//             [MethodImpl(Inline)]
//             public S273(int count, S273 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S273(uint count, S273 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count274<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S274.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S274<T> alloc274<T>(int count)
//             where T : unmanaged
//                 => new S274<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S274
//         {
//             public const int Size = 274;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S274.Size + 4, Pack=1)]
//         public struct S274<T>
//         {
//             public readonly uint Count;

//             S274 Data;

//             [MethodImpl(Inline)]
//             public S274(int count, S274 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S274(uint count, S274 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count275<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S275.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S275<T> alloc275<T>(int count)
//             where T : unmanaged
//                 => new S275<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S275
//         {
//             public const int Size = 275;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S275.Size + 4, Pack=1)]
//         public struct S275<T>
//         {
//             public readonly uint Count;

//             S275 Data;

//             [MethodImpl(Inline)]
//             public S275(int count, S275 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S275(uint count, S275 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count276<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S276.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S276<T> alloc276<T>(int count)
//             where T : unmanaged
//                 => new S276<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S276
//         {
//             public const int Size = 276;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S276.Size + 4, Pack=1)]
//         public struct S276<T>
//         {
//             public readonly uint Count;

//             S276 Data;

//             [MethodImpl(Inline)]
//             public S276(int count, S276 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S276(uint count, S276 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count277<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S277.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S277<T> alloc277<T>(int count)
//             where T : unmanaged
//                 => new S277<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S277
//         {
//             public const int Size = 277;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S277.Size + 4, Pack=1)]
//         public struct S277<T>
//         {
//             public readonly uint Count;

//             S277 Data;

//             [MethodImpl(Inline)]
//             public S277(int count, S277 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S277(uint count, S277 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count278<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S278.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S278<T> alloc278<T>(int count)
//             where T : unmanaged
//                 => new S278<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S278
//         {
//             public const int Size = 278;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S278.Size + 4, Pack=1)]
//         public struct S278<T>
//         {
//             public readonly uint Count;

//             S278 Data;

//             [MethodImpl(Inline)]
//             public S278(int count, S278 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S278(uint count, S278 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count279<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S279.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S279<T> alloc279<T>(int count)
//             where T : unmanaged
//                 => new S279<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S279
//         {
//             public const int Size = 279;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S279.Size + 4, Pack=1)]
//         public struct S279<T>
//         {
//             public readonly uint Count;

//             S279 Data;

//             [MethodImpl(Inline)]
//             public S279(int count, S279 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S279(uint count, S279 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count280<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S280.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S280<T> alloc280<T>(int count)
//             where T : unmanaged
//                 => new S280<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S280
//         {
//             public const int Size = 280;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S280.Size + 4, Pack=1)]
//         public struct S280<T>
//         {
//             public readonly uint Count;

//             S280 Data;

//             [MethodImpl(Inline)]
//             public S280(int count, S280 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S280(uint count, S280 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count281<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S281.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S281<T> alloc281<T>(int count)
//             where T : unmanaged
//                 => new S281<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S281
//         {
//             public const int Size = 281;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S281.Size + 4, Pack=1)]
//         public struct S281<T>
//         {
//             public readonly uint Count;

//             S281 Data;

//             [MethodImpl(Inline)]
//             public S281(int count, S281 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S281(uint count, S281 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count282<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S282.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S282<T> alloc282<T>(int count)
//             where T : unmanaged
//                 => new S282<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S282
//         {
//             public const int Size = 282;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S282.Size + 4, Pack=1)]
//         public struct S282<T>
//         {
//             public readonly uint Count;

//             S282 Data;

//             [MethodImpl(Inline)]
//             public S282(int count, S282 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S282(uint count, S282 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count283<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S283.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S283<T> alloc283<T>(int count)
//             where T : unmanaged
//                 => new S283<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S283
//         {
//             public const int Size = 283;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S283.Size + 4, Pack=1)]
//         public struct S283<T>
//         {
//             public readonly uint Count;

//             S283 Data;

//             [MethodImpl(Inline)]
//             public S283(int count, S283 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S283(uint count, S283 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count284<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S284.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S284<T> alloc284<T>(int count)
//             where T : unmanaged
//                 => new S284<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S284
//         {
//             public const int Size = 284;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S284.Size + 4, Pack=1)]
//         public struct S284<T>
//         {
//             public readonly uint Count;

//             S284 Data;

//             [MethodImpl(Inline)]
//             public S284(int count, S284 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S284(uint count, S284 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count285<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S285.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S285<T> alloc285<T>(int count)
//             where T : unmanaged
//                 => new S285<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S285
//         {
//             public const int Size = 285;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S285.Size + 4, Pack=1)]
//         public struct S285<T>
//         {
//             public readonly uint Count;

//             S285 Data;

//             [MethodImpl(Inline)]
//             public S285(int count, S285 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S285(uint count, S285 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count286<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S286.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S286<T> alloc286<T>(int count)
//             where T : unmanaged
//                 => new S286<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S286
//         {
//             public const int Size = 286;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S286.Size + 4, Pack=1)]
//         public struct S286<T>
//         {
//             public readonly uint Count;

//             S286 Data;

//             [MethodImpl(Inline)]
//             public S286(int count, S286 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S286(uint count, S286 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count287<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S287.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S287<T> alloc287<T>(int count)
//             where T : unmanaged
//                 => new S287<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S287
//         {
//             public const int Size = 287;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S287.Size + 4, Pack=1)]
//         public struct S287<T>
//         {
//             public readonly uint Count;

//             S287 Data;

//             [MethodImpl(Inline)]
//             public S287(int count, S287 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S287(uint count, S287 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count288<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S288.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S288<T> alloc288<T>(int count)
//             where T : unmanaged
//                 => new S288<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S288
//         {
//             public const int Size = 288;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S288.Size + 4, Pack=1)]
//         public struct S288<T>
//         {
//             public readonly uint Count;

//             S288 Data;

//             [MethodImpl(Inline)]
//             public S288(int count, S288 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S288(uint count, S288 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count289<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S289.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S289<T> alloc289<T>(int count)
//             where T : unmanaged
//                 => new S289<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S289
//         {
//             public const int Size = 289;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S289.Size + 4, Pack=1)]
//         public struct S289<T>
//         {
//             public readonly uint Count;

//             S289 Data;

//             [MethodImpl(Inline)]
//             public S289(int count, S289 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S289(uint count, S289 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count290<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S290.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S290<T> alloc290<T>(int count)
//             where T : unmanaged
//                 => new S290<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S290
//         {
//             public const int Size = 290;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S290.Size + 4, Pack=1)]
//         public struct S290<T>
//         {
//             public readonly uint Count;

//             S290 Data;

//             [MethodImpl(Inline)]
//             public S290(int count, S290 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S290(uint count, S290 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count291<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S291.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S291<T> alloc291<T>(int count)
//             where T : unmanaged
//                 => new S291<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S291
//         {
//             public const int Size = 291;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S291.Size + 4, Pack=1)]
//         public struct S291<T>
//         {
//             public readonly uint Count;

//             S291 Data;

//             [MethodImpl(Inline)]
//             public S291(int count, S291 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S291(uint count, S291 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count292<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S292.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S292<T> alloc292<T>(int count)
//             where T : unmanaged
//                 => new S292<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S292
//         {
//             public const int Size = 292;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S292.Size + 4, Pack=1)]
//         public struct S292<T>
//         {
//             public readonly uint Count;

//             S292 Data;

//             [MethodImpl(Inline)]
//             public S292(int count, S292 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S292(uint count, S292 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count293<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S293.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S293<T> alloc293<T>(int count)
//             where T : unmanaged
//                 => new S293<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S293
//         {
//             public const int Size = 293;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S293.Size + 4, Pack=1)]
//         public struct S293<T>
//         {
//             public readonly uint Count;

//             S293 Data;

//             [MethodImpl(Inline)]
//             public S293(int count, S293 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S293(uint count, S293 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count294<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S294.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S294<T> alloc294<T>(int count)
//             where T : unmanaged
//                 => new S294<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S294
//         {
//             public const int Size = 294;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S294.Size + 4, Pack=1)]
//         public struct S294<T>
//         {
//             public readonly uint Count;

//             S294 Data;

//             [MethodImpl(Inline)]
//             public S294(int count, S294 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S294(uint count, S294 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count295<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S295.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S295<T> alloc295<T>(int count)
//             where T : unmanaged
//                 => new S295<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S295
//         {
//             public const int Size = 295;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S295.Size + 4, Pack=1)]
//         public struct S295<T>
//         {
//             public readonly uint Count;

//             S295 Data;

//             [MethodImpl(Inline)]
//             public S295(int count, S295 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S295(uint count, S295 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count296<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S296.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S296<T> alloc296<T>(int count)
//             where T : unmanaged
//                 => new S296<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S296
//         {
//             public const int Size = 296;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S296.Size + 4, Pack=1)]
//         public struct S296<T>
//         {
//             public readonly uint Count;

//             S296 Data;

//             [MethodImpl(Inline)]
//             public S296(int count, S296 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S296(uint count, S296 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count297<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S297.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S297<T> alloc297<T>(int count)
//             where T : unmanaged
//                 => new S297<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S297
//         {
//             public const int Size = 297;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S297.Size + 4, Pack=1)]
//         public struct S297<T>
//         {
//             public readonly uint Count;

//             S297 Data;

//             [MethodImpl(Inline)]
//             public S297(int count, S297 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S297(uint count, S297 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count298<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S298.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S298<T> alloc298<T>(int count)
//             where T : unmanaged
//                 => new S298<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S298
//         {
//             public const int Size = 298;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S298.Size + 4, Pack=1)]
//         public struct S298<T>
//         {
//             public readonly uint Count;

//             S298 Data;

//             [MethodImpl(Inline)]
//             public S298(int count, S298 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S298(uint count, S298 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count299<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S299.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S299<T> alloc299<T>(int count)
//             where T : unmanaged
//                 => new S299<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S299
//         {
//             public const int Size = 299;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S299.Size + 4, Pack=1)]
//         public struct S299<T>
//         {
//             public readonly uint Count;

//             S299 Data;

//             [MethodImpl(Inline)]
//             public S299(int count, S299 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S299(uint count, S299 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count300<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S300.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S300<T> alloc300<T>(int count)
//             where T : unmanaged
//                 => new S300<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S300
//         {
//             public const int Size = 300;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S300.Size + 4, Pack=1)]
//         public struct S300<T>
//         {
//             public readonly uint Count;

//             S300 Data;

//             [MethodImpl(Inline)]
//             public S300(int count, S300 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S300(uint count, S300 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count301<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S301.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S301<T> alloc301<T>(int count)
//             where T : unmanaged
//                 => new S301<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S301
//         {
//             public const int Size = 301;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S301.Size + 4, Pack=1)]
//         public struct S301<T>
//         {
//             public readonly uint Count;

//             S301 Data;

//             [MethodImpl(Inline)]
//             public S301(int count, S301 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S301(uint count, S301 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count302<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S302.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S302<T> alloc302<T>(int count)
//             where T : unmanaged
//                 => new S302<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S302
//         {
//             public const int Size = 302;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S302.Size + 4, Pack=1)]
//         public struct S302<T>
//         {
//             public readonly uint Count;

//             S302 Data;

//             [MethodImpl(Inline)]
//             public S302(int count, S302 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S302(uint count, S302 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count303<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S303.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S303<T> alloc303<T>(int count)
//             where T : unmanaged
//                 => new S303<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S303
//         {
//             public const int Size = 303;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S303.Size + 4, Pack=1)]
//         public struct S303<T>
//         {
//             public readonly uint Count;

//             S303 Data;

//             [MethodImpl(Inline)]
//             public S303(int count, S303 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S303(uint count, S303 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count304<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S304.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S304<T> alloc304<T>(int count)
//             where T : unmanaged
//                 => new S304<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S304
//         {
//             public const int Size = 304;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S304.Size + 4, Pack=1)]
//         public struct S304<T>
//         {
//             public readonly uint Count;

//             S304 Data;

//             [MethodImpl(Inline)]
//             public S304(int count, S304 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S304(uint count, S304 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count305<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S305.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S305<T> alloc305<T>(int count)
//             where T : unmanaged
//                 => new S305<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S305
//         {
//             public const int Size = 305;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S305.Size + 4, Pack=1)]
//         public struct S305<T>
//         {
//             public readonly uint Count;

//             S305 Data;

//             [MethodImpl(Inline)]
//             public S305(int count, S305 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S305(uint count, S305 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count306<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S306.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S306<T> alloc306<T>(int count)
//             where T : unmanaged
//                 => new S306<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S306
//         {
//             public const int Size = 306;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S306.Size + 4, Pack=1)]
//         public struct S306<T>
//         {
//             public readonly uint Count;

//             S306 Data;

//             [MethodImpl(Inline)]
//             public S306(int count, S306 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S306(uint count, S306 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count307<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S307.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S307<T> alloc307<T>(int count)
//             where T : unmanaged
//                 => new S307<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S307
//         {
//             public const int Size = 307;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S307.Size + 4, Pack=1)]
//         public struct S307<T>
//         {
//             public readonly uint Count;

//             S307 Data;

//             [MethodImpl(Inline)]
//             public S307(int count, S307 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S307(uint count, S307 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count308<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S308.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S308<T> alloc308<T>(int count)
//             where T : unmanaged
//                 => new S308<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S308
//         {
//             public const int Size = 308;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S308.Size + 4, Pack=1)]
//         public struct S308<T>
//         {
//             public readonly uint Count;

//             S308 Data;

//             [MethodImpl(Inline)]
//             public S308(int count, S308 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S308(uint count, S308 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count309<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S309.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S309<T> alloc309<T>(int count)
//             where T : unmanaged
//                 => new S309<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S309
//         {
//             public const int Size = 309;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S309.Size + 4, Pack=1)]
//         public struct S309<T>
//         {
//             public readonly uint Count;

//             S309 Data;

//             [MethodImpl(Inline)]
//             public S309(int count, S309 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S309(uint count, S309 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count310<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S310.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S310<T> alloc310<T>(int count)
//             where T : unmanaged
//                 => new S310<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S310
//         {
//             public const int Size = 310;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S310.Size + 4, Pack=1)]
//         public struct S310<T>
//         {
//             public readonly uint Count;

//             S310 Data;

//             [MethodImpl(Inline)]
//             public S310(int count, S310 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S310(uint count, S310 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count311<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S311.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S311<T> alloc311<T>(int count)
//             where T : unmanaged
//                 => new S311<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S311
//         {
//             public const int Size = 311;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S311.Size + 4, Pack=1)]
//         public struct S311<T>
//         {
//             public readonly uint Count;

//             S311 Data;

//             [MethodImpl(Inline)]
//             public S311(int count, S311 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S311(uint count, S311 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count312<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S312.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S312<T> alloc312<T>(int count)
//             where T : unmanaged
//                 => new S312<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S312
//         {
//             public const int Size = 312;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S312.Size + 4, Pack=1)]
//         public struct S312<T>
//         {
//             public readonly uint Count;

//             S312 Data;

//             [MethodImpl(Inline)]
//             public S312(int count, S312 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S312(uint count, S312 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count313<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S313.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S313<T> alloc313<T>(int count)
//             where T : unmanaged
//                 => new S313<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S313
//         {
//             public const int Size = 313;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S313.Size + 4, Pack=1)]
//         public struct S313<T>
//         {
//             public readonly uint Count;

//             S313 Data;

//             [MethodImpl(Inline)]
//             public S313(int count, S313 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S313(uint count, S313 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count314<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S314.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S314<T> alloc314<T>(int count)
//             where T : unmanaged
//                 => new S314<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S314
//         {
//             public const int Size = 314;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S314.Size + 4, Pack=1)]
//         public struct S314<T>
//         {
//             public readonly uint Count;

//             S314 Data;

//             [MethodImpl(Inline)]
//             public S314(int count, S314 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S314(uint count, S314 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count315<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S315.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S315<T> alloc315<T>(int count)
//             where T : unmanaged
//                 => new S315<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S315
//         {
//             public const int Size = 315;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S315.Size + 4, Pack=1)]
//         public struct S315<T>
//         {
//             public readonly uint Count;

//             S315 Data;

//             [MethodImpl(Inline)]
//             public S315(int count, S315 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S315(uint count, S315 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count316<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S316.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S316<T> alloc316<T>(int count)
//             where T : unmanaged
//                 => new S316<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S316
//         {
//             public const int Size = 316;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S316.Size + 4, Pack=1)]
//         public struct S316<T>
//         {
//             public readonly uint Count;

//             S316 Data;

//             [MethodImpl(Inline)]
//             public S316(int count, S316 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S316(uint count, S316 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count317<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S317.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S317<T> alloc317<T>(int count)
//             where T : unmanaged
//                 => new S317<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S317
//         {
//             public const int Size = 317;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S317.Size + 4, Pack=1)]
//         public struct S317<T>
//         {
//             public readonly uint Count;

//             S317 Data;

//             [MethodImpl(Inline)]
//             public S317(int count, S317 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S317(uint count, S317 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count318<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S318.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S318<T> alloc318<T>(int count)
//             where T : unmanaged
//                 => new S318<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S318
//         {
//             public const int Size = 318;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S318.Size + 4, Pack=1)]
//         public struct S318<T>
//         {
//             public readonly uint Count;

//             S318 Data;

//             [MethodImpl(Inline)]
//             public S318(int count, S318 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S318(uint count, S318 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count319<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S319.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S319<T> alloc319<T>(int count)
//             where T : unmanaged
//                 => new S319<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S319
//         {
//             public const int Size = 319;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S319.Size + 4, Pack=1)]
//         public struct S319<T>
//         {
//             public readonly uint Count;

//             S319 Data;

//             [MethodImpl(Inline)]
//             public S319(int count, S319 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S319(uint count, S319 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count320<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S320.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S320<T> alloc320<T>(int count)
//             where T : unmanaged
//                 => new S320<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S320
//         {
//             public const int Size = 320;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S320.Size + 4, Pack=1)]
//         public struct S320<T>
//         {
//             public readonly uint Count;

//             S320 Data;

//             [MethodImpl(Inline)]
//             public S320(int count, S320 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S320(uint count, S320 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count321<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S321.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S321<T> alloc321<T>(int count)
//             where T : unmanaged
//                 => new S321<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S321
//         {
//             public const int Size = 321;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S321.Size + 4, Pack=1)]
//         public struct S321<T>
//         {
//             public readonly uint Count;

//             S321 Data;

//             [MethodImpl(Inline)]
//             public S321(int count, S321 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S321(uint count, S321 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count322<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S322.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S322<T> alloc322<T>(int count)
//             where T : unmanaged
//                 => new S322<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S322
//         {
//             public const int Size = 322;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S322.Size + 4, Pack=1)]
//         public struct S322<T>
//         {
//             public readonly uint Count;

//             S322 Data;

//             [MethodImpl(Inline)]
//             public S322(int count, S322 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S322(uint count, S322 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count323<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S323.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S323<T> alloc323<T>(int count)
//             where T : unmanaged
//                 => new S323<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S323
//         {
//             public const int Size = 323;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S323.Size + 4, Pack=1)]
//         public struct S323<T>
//         {
//             public readonly uint Count;

//             S323 Data;

//             [MethodImpl(Inline)]
//             public S323(int count, S323 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S323(uint count, S323 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count324<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S324.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S324<T> alloc324<T>(int count)
//             where T : unmanaged
//                 => new S324<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S324
//         {
//             public const int Size = 324;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S324.Size + 4, Pack=1)]
//         public struct S324<T>
//         {
//             public readonly uint Count;

//             S324 Data;

//             [MethodImpl(Inline)]
//             public S324(int count, S324 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S324(uint count, S324 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count325<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S325.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S325<T> alloc325<T>(int count)
//             where T : unmanaged
//                 => new S325<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S325
//         {
//             public const int Size = 325;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S325.Size + 4, Pack=1)]
//         public struct S325<T>
//         {
//             public readonly uint Count;

//             S325 Data;

//             [MethodImpl(Inline)]
//             public S325(int count, S325 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S325(uint count, S325 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count326<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S326.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S326<T> alloc326<T>(int count)
//             where T : unmanaged
//                 => new S326<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S326
//         {
//             public const int Size = 326;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S326.Size + 4, Pack=1)]
//         public struct S326<T>
//         {
//             public readonly uint Count;

//             S326 Data;

//             [MethodImpl(Inline)]
//             public S326(int count, S326 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S326(uint count, S326 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count327<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S327.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S327<T> alloc327<T>(int count)
//             where T : unmanaged
//                 => new S327<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S327
//         {
//             public const int Size = 327;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S327.Size + 4, Pack=1)]
//         public struct S327<T>
//         {
//             public readonly uint Count;

//             S327 Data;

//             [MethodImpl(Inline)]
//             public S327(int count, S327 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S327(uint count, S327 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count328<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S328.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S328<T> alloc328<T>(int count)
//             where T : unmanaged
//                 => new S328<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S328
//         {
//             public const int Size = 328;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S328.Size + 4, Pack=1)]
//         public struct S328<T>
//         {
//             public readonly uint Count;

//             S328 Data;

//             [MethodImpl(Inline)]
//             public S328(int count, S328 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S328(uint count, S328 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count329<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S329.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S329<T> alloc329<T>(int count)
//             where T : unmanaged
//                 => new S329<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S329
//         {
//             public const int Size = 329;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S329.Size + 4, Pack=1)]
//         public struct S329<T>
//         {
//             public readonly uint Count;

//             S329 Data;

//             [MethodImpl(Inline)]
//             public S329(int count, S329 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S329(uint count, S329 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count330<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S330.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S330<T> alloc330<T>(int count)
//             where T : unmanaged
//                 => new S330<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S330
//         {
//             public const int Size = 330;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S330.Size + 4, Pack=1)]
//         public struct S330<T>
//         {
//             public readonly uint Count;

//             S330 Data;

//             [MethodImpl(Inline)]
//             public S330(int count, S330 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S330(uint count, S330 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count331<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S331.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S331<T> alloc331<T>(int count)
//             where T : unmanaged
//                 => new S331<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S331
//         {
//             public const int Size = 331;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S331.Size + 4, Pack=1)]
//         public struct S331<T>
//         {
//             public readonly uint Count;

//             S331 Data;

//             [MethodImpl(Inline)]
//             public S331(int count, S331 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S331(uint count, S331 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count332<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S332.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S332<T> alloc332<T>(int count)
//             where T : unmanaged
//                 => new S332<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S332
//         {
//             public const int Size = 332;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S332.Size + 4, Pack=1)]
//         public struct S332<T>
//         {
//             public readonly uint Count;

//             S332 Data;

//             [MethodImpl(Inline)]
//             public S332(int count, S332 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S332(uint count, S332 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count333<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S333.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S333<T> alloc333<T>(int count)
//             where T : unmanaged
//                 => new S333<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S333
//         {
//             public const int Size = 333;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S333.Size + 4, Pack=1)]
//         public struct S333<T>
//         {
//             public readonly uint Count;

//             S333 Data;

//             [MethodImpl(Inline)]
//             public S333(int count, S333 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S333(uint count, S333 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count334<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S334.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S334<T> alloc334<T>(int count)
//             where T : unmanaged
//                 => new S334<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S334
//         {
//             public const int Size = 334;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S334.Size + 4, Pack=1)]
//         public struct S334<T>
//         {
//             public readonly uint Count;

//             S334 Data;

//             [MethodImpl(Inline)]
//             public S334(int count, S334 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S334(uint count, S334 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count335<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S335.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S335<T> alloc335<T>(int count)
//             where T : unmanaged
//                 => new S335<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S335
//         {
//             public const int Size = 335;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S335.Size + 4, Pack=1)]
//         public struct S335<T>
//         {
//             public readonly uint Count;

//             S335 Data;

//             [MethodImpl(Inline)]
//             public S335(int count, S335 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S335(uint count, S335 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count336<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S336.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S336<T> alloc336<T>(int count)
//             where T : unmanaged
//                 => new S336<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S336
//         {
//             public const int Size = 336;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S336.Size + 4, Pack=1)]
//         public struct S336<T>
//         {
//             public readonly uint Count;

//             S336 Data;

//             [MethodImpl(Inline)]
//             public S336(int count, S336 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S336(uint count, S336 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count337<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S337.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S337<T> alloc337<T>(int count)
//             where T : unmanaged
//                 => new S337<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S337
//         {
//             public const int Size = 337;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S337.Size + 4, Pack=1)]
//         public struct S337<T>
//         {
//             public readonly uint Count;

//             S337 Data;

//             [MethodImpl(Inline)]
//             public S337(int count, S337 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S337(uint count, S337 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count338<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S338.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S338<T> alloc338<T>(int count)
//             where T : unmanaged
//                 => new S338<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S338
//         {
//             public const int Size = 338;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S338.Size + 4, Pack=1)]
//         public struct S338<T>
//         {
//             public readonly uint Count;

//             S338 Data;

//             [MethodImpl(Inline)]
//             public S338(int count, S338 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S338(uint count, S338 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count339<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S339.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S339<T> alloc339<T>(int count)
//             where T : unmanaged
//                 => new S339<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S339
//         {
//             public const int Size = 339;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S339.Size + 4, Pack=1)]
//         public struct S339<T>
//         {
//             public readonly uint Count;

//             S339 Data;

//             [MethodImpl(Inline)]
//             public S339(int count, S339 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S339(uint count, S339 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count340<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S340.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S340<T> alloc340<T>(int count)
//             where T : unmanaged
//                 => new S340<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S340
//         {
//             public const int Size = 340;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S340.Size + 4, Pack=1)]
//         public struct S340<T>
//         {
//             public readonly uint Count;

//             S340 Data;

//             [MethodImpl(Inline)]
//             public S340(int count, S340 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S340(uint count, S340 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count341<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S341.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S341<T> alloc341<T>(int count)
//             where T : unmanaged
//                 => new S341<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S341
//         {
//             public const int Size = 341;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S341.Size + 4, Pack=1)]
//         public struct S341<T>
//         {
//             public readonly uint Count;

//             S341 Data;

//             [MethodImpl(Inline)]
//             public S341(int count, S341 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S341(uint count, S341 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count342<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S342.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S342<T> alloc342<T>(int count)
//             where T : unmanaged
//                 => new S342<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S342
//         {
//             public const int Size = 342;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S342.Size + 4, Pack=1)]
//         public struct S342<T>
//         {
//             public readonly uint Count;

//             S342 Data;

//             [MethodImpl(Inline)]
//             public S342(int count, S342 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S342(uint count, S342 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count343<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S343.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S343<T> alloc343<T>(int count)
//             where T : unmanaged
//                 => new S343<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S343
//         {
//             public const int Size = 343;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S343.Size + 4, Pack=1)]
//         public struct S343<T>
//         {
//             public readonly uint Count;

//             S343 Data;

//             [MethodImpl(Inline)]
//             public S343(int count, S343 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S343(uint count, S343 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count344<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S344.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S344<T> alloc344<T>(int count)
//             where T : unmanaged
//                 => new S344<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S344
//         {
//             public const int Size = 344;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S344.Size + 4, Pack=1)]
//         public struct S344<T>
//         {
//             public readonly uint Count;

//             S344 Data;

//             [MethodImpl(Inline)]
//             public S344(int count, S344 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S344(uint count, S344 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count345<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S345.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S345<T> alloc345<T>(int count)
//             where T : unmanaged
//                 => new S345<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S345
//         {
//             public const int Size = 345;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S345.Size + 4, Pack=1)]
//         public struct S345<T>
//         {
//             public readonly uint Count;

//             S345 Data;

//             [MethodImpl(Inline)]
//             public S345(int count, S345 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S345(uint count, S345 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count346<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S346.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S346<T> alloc346<T>(int count)
//             where T : unmanaged
//                 => new S346<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S346
//         {
//             public const int Size = 346;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S346.Size + 4, Pack=1)]
//         public struct S346<T>
//         {
//             public readonly uint Count;

//             S346 Data;

//             [MethodImpl(Inline)]
//             public S346(int count, S346 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S346(uint count, S346 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count347<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S347.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S347<T> alloc347<T>(int count)
//             where T : unmanaged
//                 => new S347<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S347
//         {
//             public const int Size = 347;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S347.Size + 4, Pack=1)]
//         public struct S347<T>
//         {
//             public readonly uint Count;

//             S347 Data;

//             [MethodImpl(Inline)]
//             public S347(int count, S347 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S347(uint count, S347 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count348<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S348.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S348<T> alloc348<T>(int count)
//             where T : unmanaged
//                 => new S348<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S348
//         {
//             public const int Size = 348;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S348.Size + 4, Pack=1)]
//         public struct S348<T>
//         {
//             public readonly uint Count;

//             S348 Data;

//             [MethodImpl(Inline)]
//             public S348(int count, S348 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S348(uint count, S348 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count349<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S349.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S349<T> alloc349<T>(int count)
//             where T : unmanaged
//                 => new S349<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S349
//         {
//             public const int Size = 349;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S349.Size + 4, Pack=1)]
//         public struct S349<T>
//         {
//             public readonly uint Count;

//             S349 Data;

//             [MethodImpl(Inline)]
//             public S349(int count, S349 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S349(uint count, S349 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count350<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S350.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S350<T> alloc350<T>(int count)
//             where T : unmanaged
//                 => new S350<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S350
//         {
//             public const int Size = 350;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S350.Size + 4, Pack=1)]
//         public struct S350<T>
//         {
//             public readonly uint Count;

//             S350 Data;

//             [MethodImpl(Inline)]
//             public S350(int count, S350 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S350(uint count, S350 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count351<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S351.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S351<T> alloc351<T>(int count)
//             where T : unmanaged
//                 => new S351<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S351
//         {
//             public const int Size = 351;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S351.Size + 4, Pack=1)]
//         public struct S351<T>
//         {
//             public readonly uint Count;

//             S351 Data;

//             [MethodImpl(Inline)]
//             public S351(int count, S351 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S351(uint count, S351 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count352<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S352.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S352<T> alloc352<T>(int count)
//             where T : unmanaged
//                 => new S352<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S352
//         {
//             public const int Size = 352;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S352.Size + 4, Pack=1)]
//         public struct S352<T>
//         {
//             public readonly uint Count;

//             S352 Data;

//             [MethodImpl(Inline)]
//             public S352(int count, S352 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S352(uint count, S352 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count353<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S353.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S353<T> alloc353<T>(int count)
//             where T : unmanaged
//                 => new S353<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S353
//         {
//             public const int Size = 353;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S353.Size + 4, Pack=1)]
//         public struct S353<T>
//         {
//             public readonly uint Count;

//             S353 Data;

//             [MethodImpl(Inline)]
//             public S353(int count, S353 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S353(uint count, S353 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count354<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S354.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S354<T> alloc354<T>(int count)
//             where T : unmanaged
//                 => new S354<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S354
//         {
//             public const int Size = 354;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S354.Size + 4, Pack=1)]
//         public struct S354<T>
//         {
//             public readonly uint Count;

//             S354 Data;

//             [MethodImpl(Inline)]
//             public S354(int count, S354 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S354(uint count, S354 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count355<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S355.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S355<T> alloc355<T>(int count)
//             where T : unmanaged
//                 => new S355<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S355
//         {
//             public const int Size = 355;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S355.Size + 4, Pack=1)]
//         public struct S355<T>
//         {
//             public readonly uint Count;

//             S355 Data;

//             [MethodImpl(Inline)]
//             public S355(int count, S355 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S355(uint count, S355 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count356<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S356.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S356<T> alloc356<T>(int count)
//             where T : unmanaged
//                 => new S356<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S356
//         {
//             public const int Size = 356;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S356.Size + 4, Pack=1)]
//         public struct S356<T>
//         {
//             public readonly uint Count;

//             S356 Data;

//             [MethodImpl(Inline)]
//             public S356(int count, S356 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S356(uint count, S356 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count357<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S357.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S357<T> alloc357<T>(int count)
//             where T : unmanaged
//                 => new S357<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S357
//         {
//             public const int Size = 357;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S357.Size + 4, Pack=1)]
//         public struct S357<T>
//         {
//             public readonly uint Count;

//             S357 Data;

//             [MethodImpl(Inline)]
//             public S357(int count, S357 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S357(uint count, S357 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count358<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S358.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S358<T> alloc358<T>(int count)
//             where T : unmanaged
//                 => new S358<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S358
//         {
//             public const int Size = 358;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S358.Size + 4, Pack=1)]
//         public struct S358<T>
//         {
//             public readonly uint Count;

//             S358 Data;

//             [MethodImpl(Inline)]
//             public S358(int count, S358 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S358(uint count, S358 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count359<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S359.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S359<T> alloc359<T>(int count)
//             where T : unmanaged
//                 => new S359<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S359
//         {
//             public const int Size = 359;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S359.Size + 4, Pack=1)]
//         public struct S359<T>
//         {
//             public readonly uint Count;

//             S359 Data;

//             [MethodImpl(Inline)]
//             public S359(int count, S359 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S359(uint count, S359 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count360<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S360.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S360<T> alloc360<T>(int count)
//             where T : unmanaged
//                 => new S360<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S360
//         {
//             public const int Size = 360;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S360.Size + 4, Pack=1)]
//         public struct S360<T>
//         {
//             public readonly uint Count;

//             S360 Data;

//             [MethodImpl(Inline)]
//             public S360(int count, S360 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S360(uint count, S360 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count361<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S361.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S361<T> alloc361<T>(int count)
//             where T : unmanaged
//                 => new S361<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S361
//         {
//             public const int Size = 361;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S361.Size + 4, Pack=1)]
//         public struct S361<T>
//         {
//             public readonly uint Count;

//             S361 Data;

//             [MethodImpl(Inline)]
//             public S361(int count, S361 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S361(uint count, S361 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count362<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S362.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S362<T> alloc362<T>(int count)
//             where T : unmanaged
//                 => new S362<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S362
//         {
//             public const int Size = 362;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S362.Size + 4, Pack=1)]
//         public struct S362<T>
//         {
//             public readonly uint Count;

//             S362 Data;

//             [MethodImpl(Inline)]
//             public S362(int count, S362 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S362(uint count, S362 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count363<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S363.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S363<T> alloc363<T>(int count)
//             where T : unmanaged
//                 => new S363<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S363
//         {
//             public const int Size = 363;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S363.Size + 4, Pack=1)]
//         public struct S363<T>
//         {
//             public readonly uint Count;

//             S363 Data;

//             [MethodImpl(Inline)]
//             public S363(int count, S363 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S363(uint count, S363 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count364<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S364.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S364<T> alloc364<T>(int count)
//             where T : unmanaged
//                 => new S364<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S364
//         {
//             public const int Size = 364;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S364.Size + 4, Pack=1)]
//         public struct S364<T>
//         {
//             public readonly uint Count;

//             S364 Data;

//             [MethodImpl(Inline)]
//             public S364(int count, S364 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S364(uint count, S364 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count365<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S365.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S365<T> alloc365<T>(int count)
//             where T : unmanaged
//                 => new S365<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S365
//         {
//             public const int Size = 365;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S365.Size + 4, Pack=1)]
//         public struct S365<T>
//         {
//             public readonly uint Count;

//             S365 Data;

//             [MethodImpl(Inline)]
//             public S365(int count, S365 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S365(uint count, S365 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count366<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S366.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S366<T> alloc366<T>(int count)
//             where T : unmanaged
//                 => new S366<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S366
//         {
//             public const int Size = 366;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S366.Size + 4, Pack=1)]
//         public struct S366<T>
//         {
//             public readonly uint Count;

//             S366 Data;

//             [MethodImpl(Inline)]
//             public S366(int count, S366 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S366(uint count, S366 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count367<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S367.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S367<T> alloc367<T>(int count)
//             where T : unmanaged
//                 => new S367<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S367
//         {
//             public const int Size = 367;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S367.Size + 4, Pack=1)]
//         public struct S367<T>
//         {
//             public readonly uint Count;

//             S367 Data;

//             [MethodImpl(Inline)]
//             public S367(int count, S367 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S367(uint count, S367 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count368<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S368.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S368<T> alloc368<T>(int count)
//             where T : unmanaged
//                 => new S368<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S368
//         {
//             public const int Size = 368;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S368.Size + 4, Pack=1)]
//         public struct S368<T>
//         {
//             public readonly uint Count;

//             S368 Data;

//             [MethodImpl(Inline)]
//             public S368(int count, S368 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S368(uint count, S368 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count369<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S369.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S369<T> alloc369<T>(int count)
//             where T : unmanaged
//                 => new S369<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S369
//         {
//             public const int Size = 369;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S369.Size + 4, Pack=1)]
//         public struct S369<T>
//         {
//             public readonly uint Count;

//             S369 Data;

//             [MethodImpl(Inline)]
//             public S369(int count, S369 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S369(uint count, S369 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count370<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S370.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S370<T> alloc370<T>(int count)
//             where T : unmanaged
//                 => new S370<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S370
//         {
//             public const int Size = 370;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S370.Size + 4, Pack=1)]
//         public struct S370<T>
//         {
//             public readonly uint Count;

//             S370 Data;

//             [MethodImpl(Inline)]
//             public S370(int count, S370 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S370(uint count, S370 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count371<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S371.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S371<T> alloc371<T>(int count)
//             where T : unmanaged
//                 => new S371<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S371
//         {
//             public const int Size = 371;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S371.Size + 4, Pack=1)]
//         public struct S371<T>
//         {
//             public readonly uint Count;

//             S371 Data;

//             [MethodImpl(Inline)]
//             public S371(int count, S371 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S371(uint count, S371 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count372<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S372.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S372<T> alloc372<T>(int count)
//             where T : unmanaged
//                 => new S372<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S372
//         {
//             public const int Size = 372;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S372.Size + 4, Pack=1)]
//         public struct S372<T>
//         {
//             public readonly uint Count;

//             S372 Data;

//             [MethodImpl(Inline)]
//             public S372(int count, S372 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S372(uint count, S372 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count373<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S373.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S373<T> alloc373<T>(int count)
//             where T : unmanaged
//                 => new S373<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S373
//         {
//             public const int Size = 373;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S373.Size + 4, Pack=1)]
//         public struct S373<T>
//         {
//             public readonly uint Count;

//             S373 Data;

//             [MethodImpl(Inline)]
//             public S373(int count, S373 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S373(uint count, S373 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count374<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S374.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S374<T> alloc374<T>(int count)
//             where T : unmanaged
//                 => new S374<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S374
//         {
//             public const int Size = 374;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S374.Size + 4, Pack=1)]
//         public struct S374<T>
//         {
//             public readonly uint Count;

//             S374 Data;

//             [MethodImpl(Inline)]
//             public S374(int count, S374 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S374(uint count, S374 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count375<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S375.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S375<T> alloc375<T>(int count)
//             where T : unmanaged
//                 => new S375<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S375
//         {
//             public const int Size = 375;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S375.Size + 4, Pack=1)]
//         public struct S375<T>
//         {
//             public readonly uint Count;

//             S375 Data;

//             [MethodImpl(Inline)]
//             public S375(int count, S375 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S375(uint count, S375 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count376<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S376.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S376<T> alloc376<T>(int count)
//             where T : unmanaged
//                 => new S376<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S376
//         {
//             public const int Size = 376;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S376.Size + 4, Pack=1)]
//         public struct S376<T>
//         {
//             public readonly uint Count;

//             S376 Data;

//             [MethodImpl(Inline)]
//             public S376(int count, S376 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S376(uint count, S376 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count377<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S377.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S377<T> alloc377<T>(int count)
//             where T : unmanaged
//                 => new S377<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S377
//         {
//             public const int Size = 377;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S377.Size + 4, Pack=1)]
//         public struct S377<T>
//         {
//             public readonly uint Count;

//             S377 Data;

//             [MethodImpl(Inline)]
//             public S377(int count, S377 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S377(uint count, S377 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count378<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S378.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S378<T> alloc378<T>(int count)
//             where T : unmanaged
//                 => new S378<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S378
//         {
//             public const int Size = 378;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S378.Size + 4, Pack=1)]
//         public struct S378<T>
//         {
//             public readonly uint Count;

//             S378 Data;

//             [MethodImpl(Inline)]
//             public S378(int count, S378 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S378(uint count, S378 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count379<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S379.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S379<T> alloc379<T>(int count)
//             where T : unmanaged
//                 => new S379<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S379
//         {
//             public const int Size = 379;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S379.Size + 4, Pack=1)]
//         public struct S379<T>
//         {
//             public readonly uint Count;

//             S379 Data;

//             [MethodImpl(Inline)]
//             public S379(int count, S379 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S379(uint count, S379 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count380<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S380.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S380<T> alloc380<T>(int count)
//             where T : unmanaged
//                 => new S380<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S380
//         {
//             public const int Size = 380;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S380.Size + 4, Pack=1)]
//         public struct S380<T>
//         {
//             public readonly uint Count;

//             S380 Data;

//             [MethodImpl(Inline)]
//             public S380(int count, S380 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S380(uint count, S380 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count381<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S381.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S381<T> alloc381<T>(int count)
//             where T : unmanaged
//                 => new S381<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S381
//         {
//             public const int Size = 381;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S381.Size + 4, Pack=1)]
//         public struct S381<T>
//         {
//             public readonly uint Count;

//             S381 Data;

//             [MethodImpl(Inline)]
//             public S381(int count, S381 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S381(uint count, S381 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count382<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S382.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S382<T> alloc382<T>(int count)
//             where T : unmanaged
//                 => new S382<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S382
//         {
//             public const int Size = 382;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S382.Size + 4, Pack=1)]
//         public struct S382<T>
//         {
//             public readonly uint Count;

//             S382 Data;

//             [MethodImpl(Inline)]
//             public S382(int count, S382 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S382(uint count, S382 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count383<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S383.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S383<T> alloc383<T>(int count)
//             where T : unmanaged
//                 => new S383<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S383
//         {
//             public const int Size = 383;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S383.Size + 4, Pack=1)]
//         public struct S383<T>
//         {
//             public readonly uint Count;

//             S383 Data;

//             [MethodImpl(Inline)]
//             public S383(int count, S383 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S383(uint count, S383 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count384<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S384.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S384<T> alloc384<T>(int count)
//             where T : unmanaged
//                 => new S384<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S384
//         {
//             public const int Size = 384;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S384.Size + 4, Pack=1)]
//         public struct S384<T>
//         {
//             public readonly uint Count;

//             S384 Data;

//             [MethodImpl(Inline)]
//             public S384(int count, S384 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S384(uint count, S384 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count385<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S385.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S385<T> alloc385<T>(int count)
//             where T : unmanaged
//                 => new S385<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S385
//         {
//             public const int Size = 385;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S385.Size + 4, Pack=1)]
//         public struct S385<T>
//         {
//             public readonly uint Count;

//             S385 Data;

//             [MethodImpl(Inline)]
//             public S385(int count, S385 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S385(uint count, S385 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count386<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S386.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S386<T> alloc386<T>(int count)
//             where T : unmanaged
//                 => new S386<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S386
//         {
//             public const int Size = 386;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S386.Size + 4, Pack=1)]
//         public struct S386<T>
//         {
//             public readonly uint Count;

//             S386 Data;

//             [MethodImpl(Inline)]
//             public S386(int count, S386 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S386(uint count, S386 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count387<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S387.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S387<T> alloc387<T>(int count)
//             where T : unmanaged
//                 => new S387<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S387
//         {
//             public const int Size = 387;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S387.Size + 4, Pack=1)]
//         public struct S387<T>
//         {
//             public readonly uint Count;

//             S387 Data;

//             [MethodImpl(Inline)]
//             public S387(int count, S387 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S387(uint count, S387 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count388<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S388.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S388<T> alloc388<T>(int count)
//             where T : unmanaged
//                 => new S388<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S388
//         {
//             public const int Size = 388;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S388.Size + 4, Pack=1)]
//         public struct S388<T>
//         {
//             public readonly uint Count;

//             S388 Data;

//             [MethodImpl(Inline)]
//             public S388(int count, S388 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S388(uint count, S388 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count389<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S389.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S389<T> alloc389<T>(int count)
//             where T : unmanaged
//                 => new S389<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S389
//         {
//             public const int Size = 389;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S389.Size + 4, Pack=1)]
//         public struct S389<T>
//         {
//             public readonly uint Count;

//             S389 Data;

//             [MethodImpl(Inline)]
//             public S389(int count, S389 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S389(uint count, S389 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count390<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S390.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S390<T> alloc390<T>(int count)
//             where T : unmanaged
//                 => new S390<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S390
//         {
//             public const int Size = 390;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S390.Size + 4, Pack=1)]
//         public struct S390<T>
//         {
//             public readonly uint Count;

//             S390 Data;

//             [MethodImpl(Inline)]
//             public S390(int count, S390 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S390(uint count, S390 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count391<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S391.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S391<T> alloc391<T>(int count)
//             where T : unmanaged
//                 => new S391<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S391
//         {
//             public const int Size = 391;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S391.Size + 4, Pack=1)]
//         public struct S391<T>
//         {
//             public readonly uint Count;

//             S391 Data;

//             [MethodImpl(Inline)]
//             public S391(int count, S391 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S391(uint count, S391 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count392<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S392.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S392<T> alloc392<T>(int count)
//             where T : unmanaged
//                 => new S392<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S392
//         {
//             public const int Size = 392;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S392.Size + 4, Pack=1)]
//         public struct S392<T>
//         {
//             public readonly uint Count;

//             S392 Data;

//             [MethodImpl(Inline)]
//             public S392(int count, S392 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S392(uint count, S392 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count393<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S393.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S393<T> alloc393<T>(int count)
//             where T : unmanaged
//                 => new S393<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S393
//         {
//             public const int Size = 393;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S393.Size + 4, Pack=1)]
//         public struct S393<T>
//         {
//             public readonly uint Count;

//             S393 Data;

//             [MethodImpl(Inline)]
//             public S393(int count, S393 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S393(uint count, S393 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count394<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S394.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S394<T> alloc394<T>(int count)
//             where T : unmanaged
//                 => new S394<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S394
//         {
//             public const int Size = 394;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S394.Size + 4, Pack=1)]
//         public struct S394<T>
//         {
//             public readonly uint Count;

//             S394 Data;

//             [MethodImpl(Inline)]
//             public S394(int count, S394 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S394(uint count, S394 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count395<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S395.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S395<T> alloc395<T>(int count)
//             where T : unmanaged
//                 => new S395<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S395
//         {
//             public const int Size = 395;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S395.Size + 4, Pack=1)]
//         public struct S395<T>
//         {
//             public readonly uint Count;

//             S395 Data;

//             [MethodImpl(Inline)]
//             public S395(int count, S395 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S395(uint count, S395 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count396<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S396.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S396<T> alloc396<T>(int count)
//             where T : unmanaged
//                 => new S396<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S396
//         {
//             public const int Size = 396;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S396.Size + 4, Pack=1)]
//         public struct S396<T>
//         {
//             public readonly uint Count;

//             S396 Data;

//             [MethodImpl(Inline)]
//             public S396(int count, S396 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S396(uint count, S396 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count397<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S397.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S397<T> alloc397<T>(int count)
//             where T : unmanaged
//                 => new S397<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S397
//         {
//             public const int Size = 397;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S397.Size + 4, Pack=1)]
//         public struct S397<T>
//         {
//             public readonly uint Count;

//             S397 Data;

//             [MethodImpl(Inline)]
//             public S397(int count, S397 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S397(uint count, S397 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count398<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S398.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S398<T> alloc398<T>(int count)
//             where T : unmanaged
//                 => new S398<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S398
//         {
//             public const int Size = 398;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S398.Size + 4, Pack=1)]
//         public struct S398<T>
//         {
//             public readonly uint Count;

//             S398 Data;

//             [MethodImpl(Inline)]
//             public S398(int count, S398 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S398(uint count, S398 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count399<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S399.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S399<T> alloc399<T>(int count)
//             where T : unmanaged
//                 => new S399<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S399
//         {
//             public const int Size = 399;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S399.Size + 4, Pack=1)]
//         public struct S399<T>
//         {
//             public readonly uint Count;

//             S399 Data;

//             [MethodImpl(Inline)]
//             public S399(int count, S399 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S399(uint count, S399 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count400<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S400.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S400<T> alloc400<T>(int count)
//             where T : unmanaged
//                 => new S400<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S400
//         {
//             public const int Size = 400;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S400.Size + 4, Pack=1)]
//         public struct S400<T>
//         {
//             public readonly uint Count;

//             S400 Data;

//             [MethodImpl(Inline)]
//             public S400(int count, S400 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S400(uint count, S400 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count401<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S401.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S401<T> alloc401<T>(int count)
//             where T : unmanaged
//                 => new S401<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S401
//         {
//             public const int Size = 401;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S401.Size + 4, Pack=1)]
//         public struct S401<T>
//         {
//             public readonly uint Count;

//             S401 Data;

//             [MethodImpl(Inline)]
//             public S401(int count, S401 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S401(uint count, S401 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count402<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S402.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S402<T> alloc402<T>(int count)
//             where T : unmanaged
//                 => new S402<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S402
//         {
//             public const int Size = 402;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S402.Size + 4, Pack=1)]
//         public struct S402<T>
//         {
//             public readonly uint Count;

//             S402 Data;

//             [MethodImpl(Inline)]
//             public S402(int count, S402 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S402(uint count, S402 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count403<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S403.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S403<T> alloc403<T>(int count)
//             where T : unmanaged
//                 => new S403<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S403
//         {
//             public const int Size = 403;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S403.Size + 4, Pack=1)]
//         public struct S403<T>
//         {
//             public readonly uint Count;

//             S403 Data;

//             [MethodImpl(Inline)]
//             public S403(int count, S403 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S403(uint count, S403 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count404<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S404.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S404<T> alloc404<T>(int count)
//             where T : unmanaged
//                 => new S404<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S404
//         {
//             public const int Size = 404;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S404.Size + 4, Pack=1)]
//         public struct S404<T>
//         {
//             public readonly uint Count;

//             S404 Data;

//             [MethodImpl(Inline)]
//             public S404(int count, S404 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S404(uint count, S404 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count405<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S405.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S405<T> alloc405<T>(int count)
//             where T : unmanaged
//                 => new S405<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S405
//         {
//             public const int Size = 405;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S405.Size + 4, Pack=1)]
//         public struct S405<T>
//         {
//             public readonly uint Count;

//             S405 Data;

//             [MethodImpl(Inline)]
//             public S405(int count, S405 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S405(uint count, S405 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count406<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S406.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S406<T> alloc406<T>(int count)
//             where T : unmanaged
//                 => new S406<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S406
//         {
//             public const int Size = 406;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S406.Size + 4, Pack=1)]
//         public struct S406<T>
//         {
//             public readonly uint Count;

//             S406 Data;

//             [MethodImpl(Inline)]
//             public S406(int count, S406 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S406(uint count, S406 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count407<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S407.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S407<T> alloc407<T>(int count)
//             where T : unmanaged
//                 => new S407<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S407
//         {
//             public const int Size = 407;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S407.Size + 4, Pack=1)]
//         public struct S407<T>
//         {
//             public readonly uint Count;

//             S407 Data;

//             [MethodImpl(Inline)]
//             public S407(int count, S407 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S407(uint count, S407 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count408<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S408.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S408<T> alloc408<T>(int count)
//             where T : unmanaged
//                 => new S408<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S408
//         {
//             public const int Size = 408;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S408.Size + 4, Pack=1)]
//         public struct S408<T>
//         {
//             public readonly uint Count;

//             S408 Data;

//             [MethodImpl(Inline)]
//             public S408(int count, S408 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S408(uint count, S408 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count409<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S409.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S409<T> alloc409<T>(int count)
//             where T : unmanaged
//                 => new S409<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S409
//         {
//             public const int Size = 409;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S409.Size + 4, Pack=1)]
//         public struct S409<T>
//         {
//             public readonly uint Count;

//             S409 Data;

//             [MethodImpl(Inline)]
//             public S409(int count, S409 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S409(uint count, S409 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count410<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S410.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S410<T> alloc410<T>(int count)
//             where T : unmanaged
//                 => new S410<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S410
//         {
//             public const int Size = 410;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S410.Size + 4, Pack=1)]
//         public struct S410<T>
//         {
//             public readonly uint Count;

//             S410 Data;

//             [MethodImpl(Inline)]
//             public S410(int count, S410 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S410(uint count, S410 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count411<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S411.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S411<T> alloc411<T>(int count)
//             where T : unmanaged
//                 => new S411<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S411
//         {
//             public const int Size = 411;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S411.Size + 4, Pack=1)]
//         public struct S411<T>
//         {
//             public readonly uint Count;

//             S411 Data;

//             [MethodImpl(Inline)]
//             public S411(int count, S411 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S411(uint count, S411 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count412<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S412.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S412<T> alloc412<T>(int count)
//             where T : unmanaged
//                 => new S412<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S412
//         {
//             public const int Size = 412;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S412.Size + 4, Pack=1)]
//         public struct S412<T>
//         {
//             public readonly uint Count;

//             S412 Data;

//             [MethodImpl(Inline)]
//             public S412(int count, S412 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S412(uint count, S412 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count413<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S413.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S413<T> alloc413<T>(int count)
//             where T : unmanaged
//                 => new S413<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S413
//         {
//             public const int Size = 413;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S413.Size + 4, Pack=1)]
//         public struct S413<T>
//         {
//             public readonly uint Count;

//             S413 Data;

//             [MethodImpl(Inline)]
//             public S413(int count, S413 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S413(uint count, S413 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count414<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S414.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S414<T> alloc414<T>(int count)
//             where T : unmanaged
//                 => new S414<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S414
//         {
//             public const int Size = 414;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S414.Size + 4, Pack=1)]
//         public struct S414<T>
//         {
//             public readonly uint Count;

//             S414 Data;

//             [MethodImpl(Inline)]
//             public S414(int count, S414 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S414(uint count, S414 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count415<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S415.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S415<T> alloc415<T>(int count)
//             where T : unmanaged
//                 => new S415<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S415
//         {
//             public const int Size = 415;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S415.Size + 4, Pack=1)]
//         public struct S415<T>
//         {
//             public readonly uint Count;

//             S415 Data;

//             [MethodImpl(Inline)]
//             public S415(int count, S415 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S415(uint count, S415 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count416<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S416.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S416<T> alloc416<T>(int count)
//             where T : unmanaged
//                 => new S416<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S416
//         {
//             public const int Size = 416;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S416.Size + 4, Pack=1)]
//         public struct S416<T>
//         {
//             public readonly uint Count;

//             S416 Data;

//             [MethodImpl(Inline)]
//             public S416(int count, S416 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S416(uint count, S416 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count417<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S417.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S417<T> alloc417<T>(int count)
//             where T : unmanaged
//                 => new S417<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S417
//         {
//             public const int Size = 417;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S417.Size + 4, Pack=1)]
//         public struct S417<T>
//         {
//             public readonly uint Count;

//             S417 Data;

//             [MethodImpl(Inline)]
//             public S417(int count, S417 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S417(uint count, S417 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count418<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S418.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S418<T> alloc418<T>(int count)
//             where T : unmanaged
//                 => new S418<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S418
//         {
//             public const int Size = 418;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S418.Size + 4, Pack=1)]
//         public struct S418<T>
//         {
//             public readonly uint Count;

//             S418 Data;

//             [MethodImpl(Inline)]
//             public S418(int count, S418 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S418(uint count, S418 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count419<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S419.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S419<T> alloc419<T>(int count)
//             where T : unmanaged
//                 => new S419<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S419
//         {
//             public const int Size = 419;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S419.Size + 4, Pack=1)]
//         public struct S419<T>
//         {
//             public readonly uint Count;

//             S419 Data;

//             [MethodImpl(Inline)]
//             public S419(int count, S419 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S419(uint count, S419 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count420<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S420.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S420<T> alloc420<T>(int count)
//             where T : unmanaged
//                 => new S420<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S420
//         {
//             public const int Size = 420;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S420.Size + 4, Pack=1)]
//         public struct S420<T>
//         {
//             public readonly uint Count;

//             S420 Data;

//             [MethodImpl(Inline)]
//             public S420(int count, S420 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S420(uint count, S420 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count421<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S421.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S421<T> alloc421<T>(int count)
//             where T : unmanaged
//                 => new S421<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S421
//         {
//             public const int Size = 421;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S421.Size + 4, Pack=1)]
//         public struct S421<T>
//         {
//             public readonly uint Count;

//             S421 Data;

//             [MethodImpl(Inline)]
//             public S421(int count, S421 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S421(uint count, S421 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count422<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S422.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S422<T> alloc422<T>(int count)
//             where T : unmanaged
//                 => new S422<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S422
//         {
//             public const int Size = 422;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S422.Size + 4, Pack=1)]
//         public struct S422<T>
//         {
//             public readonly uint Count;

//             S422 Data;

//             [MethodImpl(Inline)]
//             public S422(int count, S422 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S422(uint count, S422 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count423<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S423.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S423<T> alloc423<T>(int count)
//             where T : unmanaged
//                 => new S423<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S423
//         {
//             public const int Size = 423;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S423.Size + 4, Pack=1)]
//         public struct S423<T>
//         {
//             public readonly uint Count;

//             S423 Data;

//             [MethodImpl(Inline)]
//             public S423(int count, S423 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S423(uint count, S423 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count424<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S424.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S424<T> alloc424<T>(int count)
//             where T : unmanaged
//                 => new S424<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S424
//         {
//             public const int Size = 424;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S424.Size + 4, Pack=1)]
//         public struct S424<T>
//         {
//             public readonly uint Count;

//             S424 Data;

//             [MethodImpl(Inline)]
//             public S424(int count, S424 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S424(uint count, S424 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count425<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S425.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S425<T> alloc425<T>(int count)
//             where T : unmanaged
//                 => new S425<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S425
//         {
//             public const int Size = 425;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S425.Size + 4, Pack=1)]
//         public struct S425<T>
//         {
//             public readonly uint Count;

//             S425 Data;

//             [MethodImpl(Inline)]
//             public S425(int count, S425 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S425(uint count, S425 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count426<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S426.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S426<T> alloc426<T>(int count)
//             where T : unmanaged
//                 => new S426<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S426
//         {
//             public const int Size = 426;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S426.Size + 4, Pack=1)]
//         public struct S426<T>
//         {
//             public readonly uint Count;

//             S426 Data;

//             [MethodImpl(Inline)]
//             public S426(int count, S426 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S426(uint count, S426 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count427<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S427.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S427<T> alloc427<T>(int count)
//             where T : unmanaged
//                 => new S427<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S427
//         {
//             public const int Size = 427;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S427.Size + 4, Pack=1)]
//         public struct S427<T>
//         {
//             public readonly uint Count;

//             S427 Data;

//             [MethodImpl(Inline)]
//             public S427(int count, S427 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S427(uint count, S427 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count428<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S428.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S428<T> alloc428<T>(int count)
//             where T : unmanaged
//                 => new S428<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S428
//         {
//             public const int Size = 428;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S428.Size + 4, Pack=1)]
//         public struct S428<T>
//         {
//             public readonly uint Count;

//             S428 Data;

//             [MethodImpl(Inline)]
//             public S428(int count, S428 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S428(uint count, S428 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count429<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S429.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S429<T> alloc429<T>(int count)
//             where T : unmanaged
//                 => new S429<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S429
//         {
//             public const int Size = 429;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S429.Size + 4, Pack=1)]
//         public struct S429<T>
//         {
//             public readonly uint Count;

//             S429 Data;

//             [MethodImpl(Inline)]
//             public S429(int count, S429 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S429(uint count, S429 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count430<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S430.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S430<T> alloc430<T>(int count)
//             where T : unmanaged
//                 => new S430<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S430
//         {
//             public const int Size = 430;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S430.Size + 4, Pack=1)]
//         public struct S430<T>
//         {
//             public readonly uint Count;

//             S430 Data;

//             [MethodImpl(Inline)]
//             public S430(int count, S430 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S430(uint count, S430 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count431<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S431.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S431<T> alloc431<T>(int count)
//             where T : unmanaged
//                 => new S431<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S431
//         {
//             public const int Size = 431;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S431.Size + 4, Pack=1)]
//         public struct S431<T>
//         {
//             public readonly uint Count;

//             S431 Data;

//             [MethodImpl(Inline)]
//             public S431(int count, S431 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S431(uint count, S431 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count432<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S432.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S432<T> alloc432<T>(int count)
//             where T : unmanaged
//                 => new S432<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S432
//         {
//             public const int Size = 432;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S432.Size + 4, Pack=1)]
//         public struct S432<T>
//         {
//             public readonly uint Count;

//             S432 Data;

//             [MethodImpl(Inline)]
//             public S432(int count, S432 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S432(uint count, S432 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count433<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S433.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S433<T> alloc433<T>(int count)
//             where T : unmanaged
//                 => new S433<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S433
//         {
//             public const int Size = 433;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S433.Size + 4, Pack=1)]
//         public struct S433<T>
//         {
//             public readonly uint Count;

//             S433 Data;

//             [MethodImpl(Inline)]
//             public S433(int count, S433 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S433(uint count, S433 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count434<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S434.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S434<T> alloc434<T>(int count)
//             where T : unmanaged
//                 => new S434<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S434
//         {
//             public const int Size = 434;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S434.Size + 4, Pack=1)]
//         public struct S434<T>
//         {
//             public readonly uint Count;

//             S434 Data;

//             [MethodImpl(Inline)]
//             public S434(int count, S434 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S434(uint count, S434 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count435<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S435.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S435<T> alloc435<T>(int count)
//             where T : unmanaged
//                 => new S435<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S435
//         {
//             public const int Size = 435;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S435.Size + 4, Pack=1)]
//         public struct S435<T>
//         {
//             public readonly uint Count;

//             S435 Data;

//             [MethodImpl(Inline)]
//             public S435(int count, S435 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S435(uint count, S435 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count436<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S436.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S436<T> alloc436<T>(int count)
//             where T : unmanaged
//                 => new S436<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S436
//         {
//             public const int Size = 436;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S436.Size + 4, Pack=1)]
//         public struct S436<T>
//         {
//             public readonly uint Count;

//             S436 Data;

//             [MethodImpl(Inline)]
//             public S436(int count, S436 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S436(uint count, S436 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count437<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S437.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S437<T> alloc437<T>(int count)
//             where T : unmanaged
//                 => new S437<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S437
//         {
//             public const int Size = 437;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S437.Size + 4, Pack=1)]
//         public struct S437<T>
//         {
//             public readonly uint Count;

//             S437 Data;

//             [MethodImpl(Inline)]
//             public S437(int count, S437 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S437(uint count, S437 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count438<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S438.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S438<T> alloc438<T>(int count)
//             where T : unmanaged
//                 => new S438<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S438
//         {
//             public const int Size = 438;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S438.Size + 4, Pack=1)]
//         public struct S438<T>
//         {
//             public readonly uint Count;

//             S438 Data;

//             [MethodImpl(Inline)]
//             public S438(int count, S438 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S438(uint count, S438 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count439<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S439.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S439<T> alloc439<T>(int count)
//             where T : unmanaged
//                 => new S439<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S439
//         {
//             public const int Size = 439;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S439.Size + 4, Pack=1)]
//         public struct S439<T>
//         {
//             public readonly uint Count;

//             S439 Data;

//             [MethodImpl(Inline)]
//             public S439(int count, S439 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S439(uint count, S439 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count440<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S440.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S440<T> alloc440<T>(int count)
//             where T : unmanaged
//                 => new S440<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S440
//         {
//             public const int Size = 440;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S440.Size + 4, Pack=1)]
//         public struct S440<T>
//         {
//             public readonly uint Count;

//             S440 Data;

//             [MethodImpl(Inline)]
//             public S440(int count, S440 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S440(uint count, S440 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count441<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S441.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S441<T> alloc441<T>(int count)
//             where T : unmanaged
//                 => new S441<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S441
//         {
//             public const int Size = 441;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S441.Size + 4, Pack=1)]
//         public struct S441<T>
//         {
//             public readonly uint Count;

//             S441 Data;

//             [MethodImpl(Inline)]
//             public S441(int count, S441 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S441(uint count, S441 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count442<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S442.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S442<T> alloc442<T>(int count)
//             where T : unmanaged
//                 => new S442<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S442
//         {
//             public const int Size = 442;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S442.Size + 4, Pack=1)]
//         public struct S442<T>
//         {
//             public readonly uint Count;

//             S442 Data;

//             [MethodImpl(Inline)]
//             public S442(int count, S442 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S442(uint count, S442 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count443<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S443.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S443<T> alloc443<T>(int count)
//             where T : unmanaged
//                 => new S443<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S443
//         {
//             public const int Size = 443;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S443.Size + 4, Pack=1)]
//         public struct S443<T>
//         {
//             public readonly uint Count;

//             S443 Data;

//             [MethodImpl(Inline)]
//             public S443(int count, S443 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S443(uint count, S443 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count444<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S444.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S444<T> alloc444<T>(int count)
//             where T : unmanaged
//                 => new S444<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S444
//         {
//             public const int Size = 444;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S444.Size + 4, Pack=1)]
//         public struct S444<T>
//         {
//             public readonly uint Count;

//             S444 Data;

//             [MethodImpl(Inline)]
//             public S444(int count, S444 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S444(uint count, S444 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count445<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S445.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S445<T> alloc445<T>(int count)
//             where T : unmanaged
//                 => new S445<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S445
//         {
//             public const int Size = 445;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S445.Size + 4, Pack=1)]
//         public struct S445<T>
//         {
//             public readonly uint Count;

//             S445 Data;

//             [MethodImpl(Inline)]
//             public S445(int count, S445 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S445(uint count, S445 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count446<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S446.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S446<T> alloc446<T>(int count)
//             where T : unmanaged
//                 => new S446<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S446
//         {
//             public const int Size = 446;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S446.Size + 4, Pack=1)]
//         public struct S446<T>
//         {
//             public readonly uint Count;

//             S446 Data;

//             [MethodImpl(Inline)]
//             public S446(int count, S446 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S446(uint count, S446 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count447<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S447.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S447<T> alloc447<T>(int count)
//             where T : unmanaged
//                 => new S447<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S447
//         {
//             public const int Size = 447;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S447.Size + 4, Pack=1)]
//         public struct S447<T>
//         {
//             public readonly uint Count;

//             S447 Data;

//             [MethodImpl(Inline)]
//             public S447(int count, S447 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S447(uint count, S447 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count448<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S448.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S448<T> alloc448<T>(int count)
//             where T : unmanaged
//                 => new S448<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S448
//         {
//             public const int Size = 448;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S448.Size + 4, Pack=1)]
//         public struct S448<T>
//         {
//             public readonly uint Count;

//             S448 Data;

//             [MethodImpl(Inline)]
//             public S448(int count, S448 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S448(uint count, S448 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count449<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S449.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S449<T> alloc449<T>(int count)
//             where T : unmanaged
//                 => new S449<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S449
//         {
//             public const int Size = 449;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S449.Size + 4, Pack=1)]
//         public struct S449<T>
//         {
//             public readonly uint Count;

//             S449 Data;

//             [MethodImpl(Inline)]
//             public S449(int count, S449 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S449(uint count, S449 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count450<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S450.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S450<T> alloc450<T>(int count)
//             where T : unmanaged
//                 => new S450<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S450
//         {
//             public const int Size = 450;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S450.Size + 4, Pack=1)]
//         public struct S450<T>
//         {
//             public readonly uint Count;

//             S450 Data;

//             [MethodImpl(Inline)]
//             public S450(int count, S450 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S450(uint count, S450 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count451<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S451.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S451<T> alloc451<T>(int count)
//             where T : unmanaged
//                 => new S451<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S451
//         {
//             public const int Size = 451;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S451.Size + 4, Pack=1)]
//         public struct S451<T>
//         {
//             public readonly uint Count;

//             S451 Data;

//             [MethodImpl(Inline)]
//             public S451(int count, S451 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S451(uint count, S451 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count452<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S452.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S452<T> alloc452<T>(int count)
//             where T : unmanaged
//                 => new S452<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S452
//         {
//             public const int Size = 452;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S452.Size + 4, Pack=1)]
//         public struct S452<T>
//         {
//             public readonly uint Count;

//             S452 Data;

//             [MethodImpl(Inline)]
//             public S452(int count, S452 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S452(uint count, S452 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count453<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S453.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S453<T> alloc453<T>(int count)
//             where T : unmanaged
//                 => new S453<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S453
//         {
//             public const int Size = 453;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S453.Size + 4, Pack=1)]
//         public struct S453<T>
//         {
//             public readonly uint Count;

//             S453 Data;

//             [MethodImpl(Inline)]
//             public S453(int count, S453 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S453(uint count, S453 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count454<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S454.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S454<T> alloc454<T>(int count)
//             where T : unmanaged
//                 => new S454<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S454
//         {
//             public const int Size = 454;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S454.Size + 4, Pack=1)]
//         public struct S454<T>
//         {
//             public readonly uint Count;

//             S454 Data;

//             [MethodImpl(Inline)]
//             public S454(int count, S454 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S454(uint count, S454 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count455<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S455.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S455<T> alloc455<T>(int count)
//             where T : unmanaged
//                 => new S455<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S455
//         {
//             public const int Size = 455;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S455.Size + 4, Pack=1)]
//         public struct S455<T>
//         {
//             public readonly uint Count;

//             S455 Data;

//             [MethodImpl(Inline)]
//             public S455(int count, S455 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S455(uint count, S455 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count456<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S456.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S456<T> alloc456<T>(int count)
//             where T : unmanaged
//                 => new S456<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S456
//         {
//             public const int Size = 456;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S456.Size + 4, Pack=1)]
//         public struct S456<T>
//         {
//             public readonly uint Count;

//             S456 Data;

//             [MethodImpl(Inline)]
//             public S456(int count, S456 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S456(uint count, S456 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count457<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S457.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S457<T> alloc457<T>(int count)
//             where T : unmanaged
//                 => new S457<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S457
//         {
//             public const int Size = 457;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S457.Size + 4, Pack=1)]
//         public struct S457<T>
//         {
//             public readonly uint Count;

//             S457 Data;

//             [MethodImpl(Inline)]
//             public S457(int count, S457 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S457(uint count, S457 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count458<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S458.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S458<T> alloc458<T>(int count)
//             where T : unmanaged
//                 => new S458<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S458
//         {
//             public const int Size = 458;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S458.Size + 4, Pack=1)]
//         public struct S458<T>
//         {
//             public readonly uint Count;

//             S458 Data;

//             [MethodImpl(Inline)]
//             public S458(int count, S458 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S458(uint count, S458 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count459<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S459.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S459<T> alloc459<T>(int count)
//             where T : unmanaged
//                 => new S459<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S459
//         {
//             public const int Size = 459;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S459.Size + 4, Pack=1)]
//         public struct S459<T>
//         {
//             public readonly uint Count;

//             S459 Data;

//             [MethodImpl(Inline)]
//             public S459(int count, S459 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S459(uint count, S459 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count460<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S460.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S460<T> alloc460<T>(int count)
//             where T : unmanaged
//                 => new S460<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S460
//         {
//             public const int Size = 460;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S460.Size + 4, Pack=1)]
//         public struct S460<T>
//         {
//             public readonly uint Count;

//             S460 Data;

//             [MethodImpl(Inline)]
//             public S460(int count, S460 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S460(uint count, S460 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count461<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S461.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S461<T> alloc461<T>(int count)
//             where T : unmanaged
//                 => new S461<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S461
//         {
//             public const int Size = 461;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S461.Size + 4, Pack=1)]
//         public struct S461<T>
//         {
//             public readonly uint Count;

//             S461 Data;

//             [MethodImpl(Inline)]
//             public S461(int count, S461 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S461(uint count, S461 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count462<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S462.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S462<T> alloc462<T>(int count)
//             where T : unmanaged
//                 => new S462<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S462
//         {
//             public const int Size = 462;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S462.Size + 4, Pack=1)]
//         public struct S462<T>
//         {
//             public readonly uint Count;

//             S462 Data;

//             [MethodImpl(Inline)]
//             public S462(int count, S462 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S462(uint count, S462 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count463<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S463.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S463<T> alloc463<T>(int count)
//             where T : unmanaged
//                 => new S463<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S463
//         {
//             public const int Size = 463;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S463.Size + 4, Pack=1)]
//         public struct S463<T>
//         {
//             public readonly uint Count;

//             S463 Data;

//             [MethodImpl(Inline)]
//             public S463(int count, S463 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S463(uint count, S463 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count464<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S464.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S464<T> alloc464<T>(int count)
//             where T : unmanaged
//                 => new S464<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S464
//         {
//             public const int Size = 464;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S464.Size + 4, Pack=1)]
//         public struct S464<T>
//         {
//             public readonly uint Count;

//             S464 Data;

//             [MethodImpl(Inline)]
//             public S464(int count, S464 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S464(uint count, S464 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count465<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S465.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S465<T> alloc465<T>(int count)
//             where T : unmanaged
//                 => new S465<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S465
//         {
//             public const int Size = 465;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S465.Size + 4, Pack=1)]
//         public struct S465<T>
//         {
//             public readonly uint Count;

//             S465 Data;

//             [MethodImpl(Inline)]
//             public S465(int count, S465 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S465(uint count, S465 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count466<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S466.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S466<T> alloc466<T>(int count)
//             where T : unmanaged
//                 => new S466<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S466
//         {
//             public const int Size = 466;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S466.Size + 4, Pack=1)]
//         public struct S466<T>
//         {
//             public readonly uint Count;

//             S466 Data;

//             [MethodImpl(Inline)]
//             public S466(int count, S466 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S466(uint count, S466 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count467<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S467.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S467<T> alloc467<T>(int count)
//             where T : unmanaged
//                 => new S467<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S467
//         {
//             public const int Size = 467;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S467.Size + 4, Pack=1)]
//         public struct S467<T>
//         {
//             public readonly uint Count;

//             S467 Data;

//             [MethodImpl(Inline)]
//             public S467(int count, S467 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S467(uint count, S467 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count468<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S468.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S468<T> alloc468<T>(int count)
//             where T : unmanaged
//                 => new S468<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S468
//         {
//             public const int Size = 468;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S468.Size + 4, Pack=1)]
//         public struct S468<T>
//         {
//             public readonly uint Count;

//             S468 Data;

//             [MethodImpl(Inline)]
//             public S468(int count, S468 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S468(uint count, S468 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count469<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S469.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S469<T> alloc469<T>(int count)
//             where T : unmanaged
//                 => new S469<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S469
//         {
//             public const int Size = 469;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S469.Size + 4, Pack=1)]
//         public struct S469<T>
//         {
//             public readonly uint Count;

//             S469 Data;

//             [MethodImpl(Inline)]
//             public S469(int count, S469 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S469(uint count, S469 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count470<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S470.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S470<T> alloc470<T>(int count)
//             where T : unmanaged
//                 => new S470<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S470
//         {
//             public const int Size = 470;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S470.Size + 4, Pack=1)]
//         public struct S470<T>
//         {
//             public readonly uint Count;

//             S470 Data;

//             [MethodImpl(Inline)]
//             public S470(int count, S470 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S470(uint count, S470 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count471<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S471.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S471<T> alloc471<T>(int count)
//             where T : unmanaged
//                 => new S471<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S471
//         {
//             public const int Size = 471;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S471.Size + 4, Pack=1)]
//         public struct S471<T>
//         {
//             public readonly uint Count;

//             S471 Data;

//             [MethodImpl(Inline)]
//             public S471(int count, S471 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S471(uint count, S471 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count472<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S472.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S472<T> alloc472<T>(int count)
//             where T : unmanaged
//                 => new S472<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S472
//         {
//             public const int Size = 472;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S472.Size + 4, Pack=1)]
//         public struct S472<T>
//         {
//             public readonly uint Count;

//             S472 Data;

//             [MethodImpl(Inline)]
//             public S472(int count, S472 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S472(uint count, S472 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count473<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S473.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S473<T> alloc473<T>(int count)
//             where T : unmanaged
//                 => new S473<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S473
//         {
//             public const int Size = 473;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S473.Size + 4, Pack=1)]
//         public struct S473<T>
//         {
//             public readonly uint Count;

//             S473 Data;

//             [MethodImpl(Inline)]
//             public S473(int count, S473 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S473(uint count, S473 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count474<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S474.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S474<T> alloc474<T>(int count)
//             where T : unmanaged
//                 => new S474<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S474
//         {
//             public const int Size = 474;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S474.Size + 4, Pack=1)]
//         public struct S474<T>
//         {
//             public readonly uint Count;

//             S474 Data;

//             [MethodImpl(Inline)]
//             public S474(int count, S474 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S474(uint count, S474 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count475<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S475.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S475<T> alloc475<T>(int count)
//             where T : unmanaged
//                 => new S475<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S475
//         {
//             public const int Size = 475;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S475.Size + 4, Pack=1)]
//         public struct S475<T>
//         {
//             public readonly uint Count;

//             S475 Data;

//             [MethodImpl(Inline)]
//             public S475(int count, S475 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S475(uint count, S475 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count476<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S476.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S476<T> alloc476<T>(int count)
//             where T : unmanaged
//                 => new S476<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S476
//         {
//             public const int Size = 476;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S476.Size + 4, Pack=1)]
//         public struct S476<T>
//         {
//             public readonly uint Count;

//             S476 Data;

//             [MethodImpl(Inline)]
//             public S476(int count, S476 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S476(uint count, S476 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count477<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S477.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S477<T> alloc477<T>(int count)
//             where T : unmanaged
//                 => new S477<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S477
//         {
//             public const int Size = 477;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S477.Size + 4, Pack=1)]
//         public struct S477<T>
//         {
//             public readonly uint Count;

//             S477 Data;

//             [MethodImpl(Inline)]
//             public S477(int count, S477 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S477(uint count, S477 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count478<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S478.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S478<T> alloc478<T>(int count)
//             where T : unmanaged
//                 => new S478<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S478
//         {
//             public const int Size = 478;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S478.Size + 4, Pack=1)]
//         public struct S478<T>
//         {
//             public readonly uint Count;

//             S478 Data;

//             [MethodImpl(Inline)]
//             public S478(int count, S478 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S478(uint count, S478 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count479<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S479.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S479<T> alloc479<T>(int count)
//             where T : unmanaged
//                 => new S479<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S479
//         {
//             public const int Size = 479;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S479.Size + 4, Pack=1)]
//         public struct S479<T>
//         {
//             public readonly uint Count;

//             S479 Data;

//             [MethodImpl(Inline)]
//             public S479(int count, S479 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S479(uint count, S479 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count480<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S480.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S480<T> alloc480<T>(int count)
//             where T : unmanaged
//                 => new S480<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S480
//         {
//             public const int Size = 480;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S480.Size + 4, Pack=1)]
//         public struct S480<T>
//         {
//             public readonly uint Count;

//             S480 Data;

//             [MethodImpl(Inline)]
//             public S480(int count, S480 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S480(uint count, S480 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count481<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S481.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S481<T> alloc481<T>(int count)
//             where T : unmanaged
//                 => new S481<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S481
//         {
//             public const int Size = 481;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S481.Size + 4, Pack=1)]
//         public struct S481<T>
//         {
//             public readonly uint Count;

//             S481 Data;

//             [MethodImpl(Inline)]
//             public S481(int count, S481 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S481(uint count, S481 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count482<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S482.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S482<T> alloc482<T>(int count)
//             where T : unmanaged
//                 => new S482<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S482
//         {
//             public const int Size = 482;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S482.Size + 4, Pack=1)]
//         public struct S482<T>
//         {
//             public readonly uint Count;

//             S482 Data;

//             [MethodImpl(Inline)]
//             public S482(int count, S482 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S482(uint count, S482 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count483<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S483.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S483<T> alloc483<T>(int count)
//             where T : unmanaged
//                 => new S483<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S483
//         {
//             public const int Size = 483;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S483.Size + 4, Pack=1)]
//         public struct S483<T>
//         {
//             public readonly uint Count;

//             S483 Data;

//             [MethodImpl(Inline)]
//             public S483(int count, S483 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S483(uint count, S483 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count484<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S484.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S484<T> alloc484<T>(int count)
//             where T : unmanaged
//                 => new S484<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S484
//         {
//             public const int Size = 484;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S484.Size + 4, Pack=1)]
//         public struct S484<T>
//         {
//             public readonly uint Count;

//             S484 Data;

//             [MethodImpl(Inline)]
//             public S484(int count, S484 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S484(uint count, S484 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count485<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S485.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S485<T> alloc485<T>(int count)
//             where T : unmanaged
//                 => new S485<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S485
//         {
//             public const int Size = 485;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S485.Size + 4, Pack=1)]
//         public struct S485<T>
//         {
//             public readonly uint Count;

//             S485 Data;

//             [MethodImpl(Inline)]
//             public S485(int count, S485 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S485(uint count, S485 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count486<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S486.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S486<T> alloc486<T>(int count)
//             where T : unmanaged
//                 => new S486<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S486
//         {
//             public const int Size = 486;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S486.Size + 4, Pack=1)]
//         public struct S486<T>
//         {
//             public readonly uint Count;

//             S486 Data;

//             [MethodImpl(Inline)]
//             public S486(int count, S486 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S486(uint count, S486 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count487<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S487.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S487<T> alloc487<T>(int count)
//             where T : unmanaged
//                 => new S487<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S487
//         {
//             public const int Size = 487;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S487.Size + 4, Pack=1)]
//         public struct S487<T>
//         {
//             public readonly uint Count;

//             S487 Data;

//             [MethodImpl(Inline)]
//             public S487(int count, S487 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S487(uint count, S487 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count488<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S488.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S488<T> alloc488<T>(int count)
//             where T : unmanaged
//                 => new S488<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S488
//         {
//             public const int Size = 488;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S488.Size + 4, Pack=1)]
//         public struct S488<T>
//         {
//             public readonly uint Count;

//             S488 Data;

//             [MethodImpl(Inline)]
//             public S488(int count, S488 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S488(uint count, S488 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count489<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S489.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S489<T> alloc489<T>(int count)
//             where T : unmanaged
//                 => new S489<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S489
//         {
//             public const int Size = 489;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S489.Size + 4, Pack=1)]
//         public struct S489<T>
//         {
//             public readonly uint Count;

//             S489 Data;

//             [MethodImpl(Inline)]
//             public S489(int count, S489 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S489(uint count, S489 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count490<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S490.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S490<T> alloc490<T>(int count)
//             where T : unmanaged
//                 => new S490<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S490
//         {
//             public const int Size = 490;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S490.Size + 4, Pack=1)]
//         public struct S490<T>
//         {
//             public readonly uint Count;

//             S490 Data;

//             [MethodImpl(Inline)]
//             public S490(int count, S490 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S490(uint count, S490 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count491<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S491.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S491<T> alloc491<T>(int count)
//             where T : unmanaged
//                 => new S491<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S491
//         {
//             public const int Size = 491;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S491.Size + 4, Pack=1)]
//         public struct S491<T>
//         {
//             public readonly uint Count;

//             S491 Data;

//             [MethodImpl(Inline)]
//             public S491(int count, S491 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S491(uint count, S491 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count492<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S492.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S492<T> alloc492<T>(int count)
//             where T : unmanaged
//                 => new S492<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S492
//         {
//             public const int Size = 492;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S492.Size + 4, Pack=1)]
//         public struct S492<T>
//         {
//             public readonly uint Count;

//             S492 Data;

//             [MethodImpl(Inline)]
//             public S492(int count, S492 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S492(uint count, S492 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count493<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S493.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S493<T> alloc493<T>(int count)
//             where T : unmanaged
//                 => new S493<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S493
//         {
//             public const int Size = 493;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S493.Size + 4, Pack=1)]
//         public struct S493<T>
//         {
//             public readonly uint Count;

//             S493 Data;

//             [MethodImpl(Inline)]
//             public S493(int count, S493 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S493(uint count, S493 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count494<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S494.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S494<T> alloc494<T>(int count)
//             where T : unmanaged
//                 => new S494<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S494
//         {
//             public const int Size = 494;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S494.Size + 4, Pack=1)]
//         public struct S494<T>
//         {
//             public readonly uint Count;

//             S494 Data;

//             [MethodImpl(Inline)]
//             public S494(int count, S494 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S494(uint count, S494 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count495<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S495.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S495<T> alloc495<T>(int count)
//             where T : unmanaged
//                 => new S495<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S495
//         {
//             public const int Size = 495;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S495.Size + 4, Pack=1)]
//         public struct S495<T>
//         {
//             public readonly uint Count;

//             S495 Data;

//             [MethodImpl(Inline)]
//             public S495(int count, S495 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S495(uint count, S495 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count496<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S496.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S496<T> alloc496<T>(int count)
//             where T : unmanaged
//                 => new S496<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S496
//         {
//             public const int Size = 496;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S496.Size + 4, Pack=1)]
//         public struct S496<T>
//         {
//             public readonly uint Count;

//             S496 Data;

//             [MethodImpl(Inline)]
//             public S496(int count, S496 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S496(uint count, S496 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count497<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S497.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S497<T> alloc497<T>(int count)
//             where T : unmanaged
//                 => new S497<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S497
//         {
//             public const int Size = 497;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S497.Size + 4, Pack=1)]
//         public struct S497<T>
//         {
//             public readonly uint Count;

//             S497 Data;

//             [MethodImpl(Inline)]
//             public S497(int count, S497 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S497(uint count, S497 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count498<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S498.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S498<T> alloc498<T>(int count)
//             where T : unmanaged
//                 => new S498<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S498
//         {
//             public const int Size = 498;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S498.Size + 4, Pack=1)]
//         public struct S498<T>
//         {
//             public readonly uint Count;

//             S498 Data;

//             [MethodImpl(Inline)]
//             public S498(int count, S498 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S498(uint count, S498 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count499<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S499.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S499<T> alloc499<T>(int count)
//             where T : unmanaged
//                 => new S499<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S499
//         {
//             public const int Size = 499;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S499.Size + 4, Pack=1)]
//         public struct S499<T>
//         {
//             public readonly uint Count;

//             S499 Data;

//             [MethodImpl(Inline)]
//             public S499(int count, S499 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S499(uint count, S499 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count500<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S500.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S500<T> alloc500<T>(int count)
//             where T : unmanaged
//                 => new S500<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S500
//         {
//             public const int Size = 500;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S500.Size + 4, Pack=1)]
//         public struct S500<T>
//         {
//             public readonly uint Count;

//             S500 Data;

//             [MethodImpl(Inline)]
//             public S500(int count, S500 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S500(uint count, S500 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count501<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S501.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S501<T> alloc501<T>(int count)
//             where T : unmanaged
//                 => new S501<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S501
//         {
//             public const int Size = 501;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S501.Size + 4, Pack=1)]
//         public struct S501<T>
//         {
//             public readonly uint Count;

//             S501 Data;

//             [MethodImpl(Inline)]
//             public S501(int count, S501 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S501(uint count, S501 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count502<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S502.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S502<T> alloc502<T>(int count)
//             where T : unmanaged
//                 => new S502<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S502
//         {
//             public const int Size = 502;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S502.Size + 4, Pack=1)]
//         public struct S502<T>
//         {
//             public readonly uint Count;

//             S502 Data;

//             [MethodImpl(Inline)]
//             public S502(int count, S502 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S502(uint count, S502 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count503<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S503.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S503<T> alloc503<T>(int count)
//             where T : unmanaged
//                 => new S503<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S503
//         {
//             public const int Size = 503;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S503.Size + 4, Pack=1)]
//         public struct S503<T>
//         {
//             public readonly uint Count;

//             S503 Data;

//             [MethodImpl(Inline)]
//             public S503(int count, S503 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S503(uint count, S503 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count504<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S504.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S504<T> alloc504<T>(int count)
//             where T : unmanaged
//                 => new S504<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S504
//         {
//             public const int Size = 504;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S504.Size + 4, Pack=1)]
//         public struct S504<T>
//         {
//             public readonly uint Count;

//             S504 Data;

//             [MethodImpl(Inline)]
//             public S504(int count, S504 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S504(uint count, S504 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count505<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S505.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S505<T> alloc505<T>(int count)
//             where T : unmanaged
//                 => new S505<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S505
//         {
//             public const int Size = 505;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S505.Size + 4, Pack=1)]
//         public struct S505<T>
//         {
//             public readonly uint Count;

//             S505 Data;

//             [MethodImpl(Inline)]
//             public S505(int count, S505 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S505(uint count, S505 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count506<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S506.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S506<T> alloc506<T>(int count)
//             where T : unmanaged
//                 => new S506<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S506
//         {
//             public const int Size = 506;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S506.Size + 4, Pack=1)]
//         public struct S506<T>
//         {
//             public readonly uint Count;

//             S506 Data;

//             [MethodImpl(Inline)]
//             public S506(int count, S506 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S506(uint count, S506 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count507<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S507.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S507<T> alloc507<T>(int count)
//             where T : unmanaged
//                 => new S507<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S507
//         {
//             public const int Size = 507;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S507.Size + 4, Pack=1)]
//         public struct S507<T>
//         {
//             public readonly uint Count;

//             S507 Data;

//             [MethodImpl(Inline)]
//             public S507(int count, S507 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S507(uint count, S507 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count508<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S508.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S508<T> alloc508<T>(int count)
//             where T : unmanaged
//                 => new S508<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S508
//         {
//             public const int Size = 508;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S508.Size + 4, Pack=1)]
//         public struct S508<T>
//         {
//             public readonly uint Count;

//             S508 Data;

//             [MethodImpl(Inline)]
//             public S508(int count, S508 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S508(uint count, S508 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count509<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S509.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S509<T> alloc509<T>(int count)
//             where T : unmanaged
//                 => new S509<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S509
//         {
//             public const int Size = 509;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S509.Size + 4, Pack=1)]
//         public struct S509<T>
//         {
//             public readonly uint Count;

//             S509 Data;

//             [MethodImpl(Inline)]
//             public S509(int count, S509 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S509(uint count, S509 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count510<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S510.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S510<T> alloc510<T>(int count)
//             where T : unmanaged
//                 => new S510<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S510
//         {
//             public const int Size = 510;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S510.Size + 4, Pack=1)]
//         public struct S510<T>
//         {
//             public readonly uint Count;

//             S510 Data;

//             [MethodImpl(Inline)]
//             public S510(int count, S510 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S510(uint count, S510 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count511<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S511.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S511<T> alloc511<T>(int count)
//             where T : unmanaged
//                 => new S511<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S511
//         {
//             public const int Size = 511;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S511.Size + 4, Pack=1)]
//         public struct S511<T>
//         {
//             public readonly uint Count;

//             S511 Data;

//             [MethodImpl(Inline)]
//             public S511(int count, S511 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S511(uint count, S511 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count512<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S512.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S512<T> alloc512<T>(int count)
//             where T : unmanaged
//                 => new S512<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S512
//         {
//             public const int Size = 512;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S512.Size + 4, Pack=1)]
//         public struct S512<T>
//         {
//             public readonly uint Count;

//             S512 Data;

//             [MethodImpl(Inline)]
//             public S512(int count, S512 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S512(uint count, S512 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count513<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S513.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S513<T> alloc513<T>(int count)
//             where T : unmanaged
//                 => new S513<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S513
//         {
//             public const int Size = 513;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S513.Size + 4, Pack=1)]
//         public struct S513<T>
//         {
//             public readonly uint Count;

//             S513 Data;

//             [MethodImpl(Inline)]
//             public S513(int count, S513 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S513(uint count, S513 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count514<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S514.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S514<T> alloc514<T>(int count)
//             where T : unmanaged
//                 => new S514<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S514
//         {
//             public const int Size = 514;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S514.Size + 4, Pack=1)]
//         public struct S514<T>
//         {
//             public readonly uint Count;

//             S514 Data;

//             [MethodImpl(Inline)]
//             public S514(int count, S514 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S514(uint count, S514 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count515<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S515.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S515<T> alloc515<T>(int count)
//             where T : unmanaged
//                 => new S515<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S515
//         {
//             public const int Size = 515;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S515.Size + 4, Pack=1)]
//         public struct S515<T>
//         {
//             public readonly uint Count;

//             S515 Data;

//             [MethodImpl(Inline)]
//             public S515(int count, S515 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S515(uint count, S515 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count516<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S516.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S516<T> alloc516<T>(int count)
//             where T : unmanaged
//                 => new S516<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S516
//         {
//             public const int Size = 516;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S516.Size + 4, Pack=1)]
//         public struct S516<T>
//         {
//             public readonly uint Count;

//             S516 Data;

//             [MethodImpl(Inline)]
//             public S516(int count, S516 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S516(uint count, S516 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count517<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S517.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S517<T> alloc517<T>(int count)
//             where T : unmanaged
//                 => new S517<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S517
//         {
//             public const int Size = 517;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S517.Size + 4, Pack=1)]
//         public struct S517<T>
//         {
//             public readonly uint Count;

//             S517 Data;

//             [MethodImpl(Inline)]
//             public S517(int count, S517 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S517(uint count, S517 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count518<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S518.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S518<T> alloc518<T>(int count)
//             where T : unmanaged
//                 => new S518<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S518
//         {
//             public const int Size = 518;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S518.Size + 4, Pack=1)]
//         public struct S518<T>
//         {
//             public readonly uint Count;

//             S518 Data;

//             [MethodImpl(Inline)]
//             public S518(int count, S518 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S518(uint count, S518 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count519<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S519.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S519<T> alloc519<T>(int count)
//             where T : unmanaged
//                 => new S519<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S519
//         {
//             public const int Size = 519;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S519.Size + 4, Pack=1)]
//         public struct S519<T>
//         {
//             public readonly uint Count;

//             S519 Data;

//             [MethodImpl(Inline)]
//             public S519(int count, S519 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S519(uint count, S519 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count520<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S520.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S520<T> alloc520<T>(int count)
//             where T : unmanaged
//                 => new S520<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S520
//         {
//             public const int Size = 520;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S520.Size + 4, Pack=1)]
//         public struct S520<T>
//         {
//             public readonly uint Count;

//             S520 Data;

//             [MethodImpl(Inline)]
//             public S520(int count, S520 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S520(uint count, S520 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count521<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S521.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S521<T> alloc521<T>(int count)
//             where T : unmanaged
//                 => new S521<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S521
//         {
//             public const int Size = 521;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S521.Size + 4, Pack=1)]
//         public struct S521<T>
//         {
//             public readonly uint Count;

//             S521 Data;

//             [MethodImpl(Inline)]
//             public S521(int count, S521 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S521(uint count, S521 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count522<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S522.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S522<T> alloc522<T>(int count)
//             where T : unmanaged
//                 => new S522<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S522
//         {
//             public const int Size = 522;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S522.Size + 4, Pack=1)]
//         public struct S522<T>
//         {
//             public readonly uint Count;

//             S522 Data;

//             [MethodImpl(Inline)]
//             public S522(int count, S522 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S522(uint count, S522 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count523<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S523.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S523<T> alloc523<T>(int count)
//             where T : unmanaged
//                 => new S523<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S523
//         {
//             public const int Size = 523;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S523.Size + 4, Pack=1)]
//         public struct S523<T>
//         {
//             public readonly uint Count;

//             S523 Data;

//             [MethodImpl(Inline)]
//             public S523(int count, S523 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S523(uint count, S523 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count524<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S524.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S524<T> alloc524<T>(int count)
//             where T : unmanaged
//                 => new S524<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S524
//         {
//             public const int Size = 524;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S524.Size + 4, Pack=1)]
//         public struct S524<T>
//         {
//             public readonly uint Count;

//             S524 Data;

//             [MethodImpl(Inline)]
//             public S524(int count, S524 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S524(uint count, S524 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count525<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S525.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S525<T> alloc525<T>(int count)
//             where T : unmanaged
//                 => new S525<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S525
//         {
//             public const int Size = 525;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S525.Size + 4, Pack=1)]
//         public struct S525<T>
//         {
//             public readonly uint Count;

//             S525 Data;

//             [MethodImpl(Inline)]
//             public S525(int count, S525 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S525(uint count, S525 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count526<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S526.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S526<T> alloc526<T>(int count)
//             where T : unmanaged
//                 => new S526<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S526
//         {
//             public const int Size = 526;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S526.Size + 4, Pack=1)]
//         public struct S526<T>
//         {
//             public readonly uint Count;

//             S526 Data;

//             [MethodImpl(Inline)]
//             public S526(int count, S526 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S526(uint count, S526 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count527<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S527.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S527<T> alloc527<T>(int count)
//             where T : unmanaged
//                 => new S527<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S527
//         {
//             public const int Size = 527;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S527.Size + 4, Pack=1)]
//         public struct S527<T>
//         {
//             public readonly uint Count;

//             S527 Data;

//             [MethodImpl(Inline)]
//             public S527(int count, S527 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S527(uint count, S527 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count528<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S528.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S528<T> alloc528<T>(int count)
//             where T : unmanaged
//                 => new S528<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S528
//         {
//             public const int Size = 528;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S528.Size + 4, Pack=1)]
//         public struct S528<T>
//         {
//             public readonly uint Count;

//             S528 Data;

//             [MethodImpl(Inline)]
//             public S528(int count, S528 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S528(uint count, S528 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count529<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S529.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S529<T> alloc529<T>(int count)
//             where T : unmanaged
//                 => new S529<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S529
//         {
//             public const int Size = 529;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S529.Size + 4, Pack=1)]
//         public struct S529<T>
//         {
//             public readonly uint Count;

//             S529 Data;

//             [MethodImpl(Inline)]
//             public S529(int count, S529 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S529(uint count, S529 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count530<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S530.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S530<T> alloc530<T>(int count)
//             where T : unmanaged
//                 => new S530<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S530
//         {
//             public const int Size = 530;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S530.Size + 4, Pack=1)]
//         public struct S530<T>
//         {
//             public readonly uint Count;

//             S530 Data;

//             [MethodImpl(Inline)]
//             public S530(int count, S530 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S530(uint count, S530 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count531<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S531.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S531<T> alloc531<T>(int count)
//             where T : unmanaged
//                 => new S531<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S531
//         {
//             public const int Size = 531;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S531.Size + 4, Pack=1)]
//         public struct S531<T>
//         {
//             public readonly uint Count;

//             S531 Data;

//             [MethodImpl(Inline)]
//             public S531(int count, S531 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S531(uint count, S531 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count532<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S532.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S532<T> alloc532<T>(int count)
//             where T : unmanaged
//                 => new S532<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S532
//         {
//             public const int Size = 532;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S532.Size + 4, Pack=1)]
//         public struct S532<T>
//         {
//             public readonly uint Count;

//             S532 Data;

//             [MethodImpl(Inline)]
//             public S532(int count, S532 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S532(uint count, S532 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count533<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S533.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S533<T> alloc533<T>(int count)
//             where T : unmanaged
//                 => new S533<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S533
//         {
//             public const int Size = 533;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S533.Size + 4, Pack=1)]
//         public struct S533<T>
//         {
//             public readonly uint Count;

//             S533 Data;

//             [MethodImpl(Inline)]
//             public S533(int count, S533 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S533(uint count, S533 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count534<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S534.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S534<T> alloc534<T>(int count)
//             where T : unmanaged
//                 => new S534<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S534
//         {
//             public const int Size = 534;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S534.Size + 4, Pack=1)]
//         public struct S534<T>
//         {
//             public readonly uint Count;

//             S534 Data;

//             [MethodImpl(Inline)]
//             public S534(int count, S534 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S534(uint count, S534 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count535<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S535.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S535<T> alloc535<T>(int count)
//             where T : unmanaged
//                 => new S535<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S535
//         {
//             public const int Size = 535;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S535.Size + 4, Pack=1)]
//         public struct S535<T>
//         {
//             public readonly uint Count;

//             S535 Data;

//             [MethodImpl(Inline)]
//             public S535(int count, S535 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S535(uint count, S535 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count536<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S536.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S536<T> alloc536<T>(int count)
//             where T : unmanaged
//                 => new S536<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S536
//         {
//             public const int Size = 536;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S536.Size + 4, Pack=1)]
//         public struct S536<T>
//         {
//             public readonly uint Count;

//             S536 Data;

//             [MethodImpl(Inline)]
//             public S536(int count, S536 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S536(uint count, S536 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count537<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S537.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S537<T> alloc537<T>(int count)
//             where T : unmanaged
//                 => new S537<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S537
//         {
//             public const int Size = 537;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S537.Size + 4, Pack=1)]
//         public struct S537<T>
//         {
//             public readonly uint Count;

//             S537 Data;

//             [MethodImpl(Inline)]
//             public S537(int count, S537 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S537(uint count, S537 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count538<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S538.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S538<T> alloc538<T>(int count)
//             where T : unmanaged
//                 => new S538<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S538
//         {
//             public const int Size = 538;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S538.Size + 4, Pack=1)]
//         public struct S538<T>
//         {
//             public readonly uint Count;

//             S538 Data;

//             [MethodImpl(Inline)]
//             public S538(int count, S538 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S538(uint count, S538 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count539<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S539.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S539<T> alloc539<T>(int count)
//             where T : unmanaged
//                 => new S539<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S539
//         {
//             public const int Size = 539;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S539.Size + 4, Pack=1)]
//         public struct S539<T>
//         {
//             public readonly uint Count;

//             S539 Data;

//             [MethodImpl(Inline)]
//             public S539(int count, S539 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S539(uint count, S539 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count540<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S540.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S540<T> alloc540<T>(int count)
//             where T : unmanaged
//                 => new S540<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S540
//         {
//             public const int Size = 540;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S540.Size + 4, Pack=1)]
//         public struct S540<T>
//         {
//             public readonly uint Count;

//             S540 Data;

//             [MethodImpl(Inline)]
//             public S540(int count, S540 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S540(uint count, S540 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count541<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S541.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S541<T> alloc541<T>(int count)
//             where T : unmanaged
//                 => new S541<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S541
//         {
//             public const int Size = 541;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S541.Size + 4, Pack=1)]
//         public struct S541<T>
//         {
//             public readonly uint Count;

//             S541 Data;

//             [MethodImpl(Inline)]
//             public S541(int count, S541 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S541(uint count, S541 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count542<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S542.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S542<T> alloc542<T>(int count)
//             where T : unmanaged
//                 => new S542<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S542
//         {
//             public const int Size = 542;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S542.Size + 4, Pack=1)]
//         public struct S542<T>
//         {
//             public readonly uint Count;

//             S542 Data;

//             [MethodImpl(Inline)]
//             public S542(int count, S542 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S542(uint count, S542 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count543<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S543.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S543<T> alloc543<T>(int count)
//             where T : unmanaged
//                 => new S543<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S543
//         {
//             public const int Size = 543;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S543.Size + 4, Pack=1)]
//         public struct S543<T>
//         {
//             public readonly uint Count;

//             S543 Data;

//             [MethodImpl(Inline)]
//             public S543(int count, S543 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S543(uint count, S543 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count544<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S544.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S544<T> alloc544<T>(int count)
//             where T : unmanaged
//                 => new S544<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S544
//         {
//             public const int Size = 544;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S544.Size + 4, Pack=1)]
//         public struct S544<T>
//         {
//             public readonly uint Count;

//             S544 Data;

//             [MethodImpl(Inline)]
//             public S544(int count, S544 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S544(uint count, S544 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count545<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S545.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S545<T> alloc545<T>(int count)
//             where T : unmanaged
//                 => new S545<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S545
//         {
//             public const int Size = 545;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S545.Size + 4, Pack=1)]
//         public struct S545<T>
//         {
//             public readonly uint Count;

//             S545 Data;

//             [MethodImpl(Inline)]
//             public S545(int count, S545 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S545(uint count, S545 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count546<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S546.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S546<T> alloc546<T>(int count)
//             where T : unmanaged
//                 => new S546<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S546
//         {
//             public const int Size = 546;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S546.Size + 4, Pack=1)]
//         public struct S546<T>
//         {
//             public readonly uint Count;

//             S546 Data;

//             [MethodImpl(Inline)]
//             public S546(int count, S546 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S546(uint count, S546 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count547<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S547.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S547<T> alloc547<T>(int count)
//             where T : unmanaged
//                 => new S547<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S547
//         {
//             public const int Size = 547;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S547.Size + 4, Pack=1)]
//         public struct S547<T>
//         {
//             public readonly uint Count;

//             S547 Data;

//             [MethodImpl(Inline)]
//             public S547(int count, S547 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S547(uint count, S547 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count548<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S548.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S548<T> alloc548<T>(int count)
//             where T : unmanaged
//                 => new S548<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S548
//         {
//             public const int Size = 548;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S548.Size + 4, Pack=1)]
//         public struct S548<T>
//         {
//             public readonly uint Count;

//             S548 Data;

//             [MethodImpl(Inline)]
//             public S548(int count, S548 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S548(uint count, S548 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count549<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S549.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S549<T> alloc549<T>(int count)
//             where T : unmanaged
//                 => new S549<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S549
//         {
//             public const int Size = 549;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S549.Size + 4, Pack=1)]
//         public struct S549<T>
//         {
//             public readonly uint Count;

//             S549 Data;

//             [MethodImpl(Inline)]
//             public S549(int count, S549 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S549(uint count, S549 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count550<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S550.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S550<T> alloc550<T>(int count)
//             where T : unmanaged
//                 => new S550<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S550
//         {
//             public const int Size = 550;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S550.Size + 4, Pack=1)]
//         public struct S550<T>
//         {
//             public readonly uint Count;

//             S550 Data;

//             [MethodImpl(Inline)]
//             public S550(int count, S550 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S550(uint count, S550 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count551<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S551.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S551<T> alloc551<T>(int count)
//             where T : unmanaged
//                 => new S551<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S551
//         {
//             public const int Size = 551;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S551.Size + 4, Pack=1)]
//         public struct S551<T>
//         {
//             public readonly uint Count;

//             S551 Data;

//             [MethodImpl(Inline)]
//             public S551(int count, S551 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S551(uint count, S551 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count552<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S552.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S552<T> alloc552<T>(int count)
//             where T : unmanaged
//                 => new S552<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S552
//         {
//             public const int Size = 552;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S552.Size + 4, Pack=1)]
//         public struct S552<T>
//         {
//             public readonly uint Count;

//             S552 Data;

//             [MethodImpl(Inline)]
//             public S552(int count, S552 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S552(uint count, S552 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count553<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S553.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S553<T> alloc553<T>(int count)
//             where T : unmanaged
//                 => new S553<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S553
//         {
//             public const int Size = 553;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S553.Size + 4, Pack=1)]
//         public struct S553<T>
//         {
//             public readonly uint Count;

//             S553 Data;

//             [MethodImpl(Inline)]
//             public S553(int count, S553 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S553(uint count, S553 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count554<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S554.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S554<T> alloc554<T>(int count)
//             where T : unmanaged
//                 => new S554<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S554
//         {
//             public const int Size = 554;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S554.Size + 4, Pack=1)]
//         public struct S554<T>
//         {
//             public readonly uint Count;

//             S554 Data;

//             [MethodImpl(Inline)]
//             public S554(int count, S554 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S554(uint count, S554 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count555<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S555.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S555<T> alloc555<T>(int count)
//             where T : unmanaged
//                 => new S555<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S555
//         {
//             public const int Size = 555;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S555.Size + 4, Pack=1)]
//         public struct S555<T>
//         {
//             public readonly uint Count;

//             S555 Data;

//             [MethodImpl(Inline)]
//             public S555(int count, S555 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S555(uint count, S555 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count556<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S556.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S556<T> alloc556<T>(int count)
//             where T : unmanaged
//                 => new S556<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S556
//         {
//             public const int Size = 556;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S556.Size + 4, Pack=1)]
//         public struct S556<T>
//         {
//             public readonly uint Count;

//             S556 Data;

//             [MethodImpl(Inline)]
//             public S556(int count, S556 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S556(uint count, S556 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count557<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S557.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S557<T> alloc557<T>(int count)
//             where T : unmanaged
//                 => new S557<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S557
//         {
//             public const int Size = 557;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S557.Size + 4, Pack=1)]
//         public struct S557<T>
//         {
//             public readonly uint Count;

//             S557 Data;

//             [MethodImpl(Inline)]
//             public S557(int count, S557 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S557(uint count, S557 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count558<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S558.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S558<T> alloc558<T>(int count)
//             where T : unmanaged
//                 => new S558<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S558
//         {
//             public const int Size = 558;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S558.Size + 4, Pack=1)]
//         public struct S558<T>
//         {
//             public readonly uint Count;

//             S558 Data;

//             [MethodImpl(Inline)]
//             public S558(int count, S558 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S558(uint count, S558 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count559<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S559.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S559<T> alloc559<T>(int count)
//             where T : unmanaged
//                 => new S559<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S559
//         {
//             public const int Size = 559;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S559.Size + 4, Pack=1)]
//         public struct S559<T>
//         {
//             public readonly uint Count;

//             S559 Data;

//             [MethodImpl(Inline)]
//             public S559(int count, S559 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S559(uint count, S559 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count560<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S560.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S560<T> alloc560<T>(int count)
//             where T : unmanaged
//                 => new S560<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S560
//         {
//             public const int Size = 560;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S560.Size + 4, Pack=1)]
//         public struct S560<T>
//         {
//             public readonly uint Count;

//             S560 Data;

//             [MethodImpl(Inline)]
//             public S560(int count, S560 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S560(uint count, S560 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count561<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S561.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S561<T> alloc561<T>(int count)
//             where T : unmanaged
//                 => new S561<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S561
//         {
//             public const int Size = 561;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S561.Size + 4, Pack=1)]
//         public struct S561<T>
//         {
//             public readonly uint Count;

//             S561 Data;

//             [MethodImpl(Inline)]
//             public S561(int count, S561 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S561(uint count, S561 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count562<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S562.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S562<T> alloc562<T>(int count)
//             where T : unmanaged
//                 => new S562<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S562
//         {
//             public const int Size = 562;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S562.Size + 4, Pack=1)]
//         public struct S562<T>
//         {
//             public readonly uint Count;

//             S562 Data;

//             [MethodImpl(Inline)]
//             public S562(int count, S562 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S562(uint count, S562 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count563<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S563.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S563<T> alloc563<T>(int count)
//             where T : unmanaged
//                 => new S563<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S563
//         {
//             public const int Size = 563;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S563.Size + 4, Pack=1)]
//         public struct S563<T>
//         {
//             public readonly uint Count;

//             S563 Data;

//             [MethodImpl(Inline)]
//             public S563(int count, S563 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S563(uint count, S563 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count564<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S564.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S564<T> alloc564<T>(int count)
//             where T : unmanaged
//                 => new S564<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S564
//         {
//             public const int Size = 564;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S564.Size + 4, Pack=1)]
//         public struct S564<T>
//         {
//             public readonly uint Count;

//             S564 Data;

//             [MethodImpl(Inline)]
//             public S564(int count, S564 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S564(uint count, S564 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count565<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S565.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S565<T> alloc565<T>(int count)
//             where T : unmanaged
//                 => new S565<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S565
//         {
//             public const int Size = 565;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S565.Size + 4, Pack=1)]
//         public struct S565<T>
//         {
//             public readonly uint Count;

//             S565 Data;

//             [MethodImpl(Inline)]
//             public S565(int count, S565 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S565(uint count, S565 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count566<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S566.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S566<T> alloc566<T>(int count)
//             where T : unmanaged
//                 => new S566<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S566
//         {
//             public const int Size = 566;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S566.Size + 4, Pack=1)]
//         public struct S566<T>
//         {
//             public readonly uint Count;

//             S566 Data;

//             [MethodImpl(Inline)]
//             public S566(int count, S566 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S566(uint count, S566 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count567<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S567.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S567<T> alloc567<T>(int count)
//             where T : unmanaged
//                 => new S567<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S567
//         {
//             public const int Size = 567;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S567.Size + 4, Pack=1)]
//         public struct S567<T>
//         {
//             public readonly uint Count;

//             S567 Data;

//             [MethodImpl(Inline)]
//             public S567(int count, S567 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S567(uint count, S567 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count568<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S568.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S568<T> alloc568<T>(int count)
//             where T : unmanaged
//                 => new S568<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S568
//         {
//             public const int Size = 568;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S568.Size + 4, Pack=1)]
//         public struct S568<T>
//         {
//             public readonly uint Count;

//             S568 Data;

//             [MethodImpl(Inline)]
//             public S568(int count, S568 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S568(uint count, S568 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count569<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S569.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S569<T> alloc569<T>(int count)
//             where T : unmanaged
//                 => new S569<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S569
//         {
//             public const int Size = 569;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S569.Size + 4, Pack=1)]
//         public struct S569<T>
//         {
//             public readonly uint Count;

//             S569 Data;

//             [MethodImpl(Inline)]
//             public S569(int count, S569 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S569(uint count, S569 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count570<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S570.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S570<T> alloc570<T>(int count)
//             where T : unmanaged
//                 => new S570<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S570
//         {
//             public const int Size = 570;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S570.Size + 4, Pack=1)]
//         public struct S570<T>
//         {
//             public readonly uint Count;

//             S570 Data;

//             [MethodImpl(Inline)]
//             public S570(int count, S570 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S570(uint count, S570 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count571<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S571.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S571<T> alloc571<T>(int count)
//             where T : unmanaged
//                 => new S571<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S571
//         {
//             public const int Size = 571;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S571.Size + 4, Pack=1)]
//         public struct S571<T>
//         {
//             public readonly uint Count;

//             S571 Data;

//             [MethodImpl(Inline)]
//             public S571(int count, S571 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S571(uint count, S571 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count572<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S572.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S572<T> alloc572<T>(int count)
//             where T : unmanaged
//                 => new S572<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S572
//         {
//             public const int Size = 572;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S572.Size + 4, Pack=1)]
//         public struct S572<T>
//         {
//             public readonly uint Count;

//             S572 Data;

//             [MethodImpl(Inline)]
//             public S572(int count, S572 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S572(uint count, S572 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count573<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S573.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S573<T> alloc573<T>(int count)
//             where T : unmanaged
//                 => new S573<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S573
//         {
//             public const int Size = 573;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S573.Size + 4, Pack=1)]
//         public struct S573<T>
//         {
//             public readonly uint Count;

//             S573 Data;

//             [MethodImpl(Inline)]
//             public S573(int count, S573 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S573(uint count, S573 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count574<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S574.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S574<T> alloc574<T>(int count)
//             where T : unmanaged
//                 => new S574<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S574
//         {
//             public const int Size = 574;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S574.Size + 4, Pack=1)]
//         public struct S574<T>
//         {
//             public readonly uint Count;

//             S574 Data;

//             [MethodImpl(Inline)]
//             public S574(int count, S574 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S574(uint count, S574 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count575<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S575.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S575<T> alloc575<T>(int count)
//             where T : unmanaged
//                 => new S575<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S575
//         {
//             public const int Size = 575;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S575.Size + 4, Pack=1)]
//         public struct S575<T>
//         {
//             public readonly uint Count;

//             S575 Data;

//             [MethodImpl(Inline)]
//             public S575(int count, S575 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S575(uint count, S575 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count576<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S576.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S576<T> alloc576<T>(int count)
//             where T : unmanaged
//                 => new S576<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S576
//         {
//             public const int Size = 576;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S576.Size + 4, Pack=1)]
//         public struct S576<T>
//         {
//             public readonly uint Count;

//             S576 Data;

//             [MethodImpl(Inline)]
//             public S576(int count, S576 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S576(uint count, S576 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count577<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S577.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S577<T> alloc577<T>(int count)
//             where T : unmanaged
//                 => new S577<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S577
//         {
//             public const int Size = 577;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S577.Size + 4, Pack=1)]
//         public struct S577<T>
//         {
//             public readonly uint Count;

//             S577 Data;

//             [MethodImpl(Inline)]
//             public S577(int count, S577 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S577(uint count, S577 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count578<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S578.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S578<T> alloc578<T>(int count)
//             where T : unmanaged
//                 => new S578<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S578
//         {
//             public const int Size = 578;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S578.Size + 4, Pack=1)]
//         public struct S578<T>
//         {
//             public readonly uint Count;

//             S578 Data;

//             [MethodImpl(Inline)]
//             public S578(int count, S578 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S578(uint count, S578 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count579<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S579.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S579<T> alloc579<T>(int count)
//             where T : unmanaged
//                 => new S579<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S579
//         {
//             public const int Size = 579;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S579.Size + 4, Pack=1)]
//         public struct S579<T>
//         {
//             public readonly uint Count;

//             S579 Data;

//             [MethodImpl(Inline)]
//             public S579(int count, S579 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S579(uint count, S579 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count580<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S580.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S580<T> alloc580<T>(int count)
//             where T : unmanaged
//                 => new S580<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S580
//         {
//             public const int Size = 580;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S580.Size + 4, Pack=1)]
//         public struct S580<T>
//         {
//             public readonly uint Count;

//             S580 Data;

//             [MethodImpl(Inline)]
//             public S580(int count, S580 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S580(uint count, S580 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count581<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S581.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S581<T> alloc581<T>(int count)
//             where T : unmanaged
//                 => new S581<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S581
//         {
//             public const int Size = 581;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S581.Size + 4, Pack=1)]
//         public struct S581<T>
//         {
//             public readonly uint Count;

//             S581 Data;

//             [MethodImpl(Inline)]
//             public S581(int count, S581 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S581(uint count, S581 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count582<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S582.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S582<T> alloc582<T>(int count)
//             where T : unmanaged
//                 => new S582<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S582
//         {
//             public const int Size = 582;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S582.Size + 4, Pack=1)]
//         public struct S582<T>
//         {
//             public readonly uint Count;

//             S582 Data;

//             [MethodImpl(Inline)]
//             public S582(int count, S582 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S582(uint count, S582 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count583<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S583.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S583<T> alloc583<T>(int count)
//             where T : unmanaged
//                 => new S583<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S583
//         {
//             public const int Size = 583;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S583.Size + 4, Pack=1)]
//         public struct S583<T>
//         {
//             public readonly uint Count;

//             S583 Data;

//             [MethodImpl(Inline)]
//             public S583(int count, S583 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S583(uint count, S583 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count584<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S584.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S584<T> alloc584<T>(int count)
//             where T : unmanaged
//                 => new S584<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S584
//         {
//             public const int Size = 584;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S584.Size + 4, Pack=1)]
//         public struct S584<T>
//         {
//             public readonly uint Count;

//             S584 Data;

//             [MethodImpl(Inline)]
//             public S584(int count, S584 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S584(uint count, S584 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count585<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S585.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S585<T> alloc585<T>(int count)
//             where T : unmanaged
//                 => new S585<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S585
//         {
//             public const int Size = 585;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S585.Size + 4, Pack=1)]
//         public struct S585<T>
//         {
//             public readonly uint Count;

//             S585 Data;

//             [MethodImpl(Inline)]
//             public S585(int count, S585 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S585(uint count, S585 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count586<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S586.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S586<T> alloc586<T>(int count)
//             where T : unmanaged
//                 => new S586<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S586
//         {
//             public const int Size = 586;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S586.Size + 4, Pack=1)]
//         public struct S586<T>
//         {
//             public readonly uint Count;

//             S586 Data;

//             [MethodImpl(Inline)]
//             public S586(int count, S586 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S586(uint count, S586 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count587<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S587.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S587<T> alloc587<T>(int count)
//             where T : unmanaged
//                 => new S587<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S587
//         {
//             public const int Size = 587;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S587.Size + 4, Pack=1)]
//         public struct S587<T>
//         {
//             public readonly uint Count;

//             S587 Data;

//             [MethodImpl(Inline)]
//             public S587(int count, S587 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S587(uint count, S587 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count588<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S588.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S588<T> alloc588<T>(int count)
//             where T : unmanaged
//                 => new S588<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S588
//         {
//             public const int Size = 588;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S588.Size + 4, Pack=1)]
//         public struct S588<T>
//         {
//             public readonly uint Count;

//             S588 Data;

//             [MethodImpl(Inline)]
//             public S588(int count, S588 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S588(uint count, S588 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count589<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S589.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S589<T> alloc589<T>(int count)
//             where T : unmanaged
//                 => new S589<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S589
//         {
//             public const int Size = 589;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S589.Size + 4, Pack=1)]
//         public struct S589<T>
//         {
//             public readonly uint Count;

//             S589 Data;

//             [MethodImpl(Inline)]
//             public S589(int count, S589 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S589(uint count, S589 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count590<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S590.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S590<T> alloc590<T>(int count)
//             where T : unmanaged
//                 => new S590<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S590
//         {
//             public const int Size = 590;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S590.Size + 4, Pack=1)]
//         public struct S590<T>
//         {
//             public readonly uint Count;

//             S590 Data;

//             [MethodImpl(Inline)]
//             public S590(int count, S590 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S590(uint count, S590 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count591<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S591.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S591<T> alloc591<T>(int count)
//             where T : unmanaged
//                 => new S591<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S591
//         {
//             public const int Size = 591;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S591.Size + 4, Pack=1)]
//         public struct S591<T>
//         {
//             public readonly uint Count;

//             S591 Data;

//             [MethodImpl(Inline)]
//             public S591(int count, S591 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S591(uint count, S591 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count592<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S592.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S592<T> alloc592<T>(int count)
//             where T : unmanaged
//                 => new S592<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S592
//         {
//             public const int Size = 592;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S592.Size + 4, Pack=1)]
//         public struct S592<T>
//         {
//             public readonly uint Count;

//             S592 Data;

//             [MethodImpl(Inline)]
//             public S592(int count, S592 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S592(uint count, S592 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count593<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S593.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S593<T> alloc593<T>(int count)
//             where T : unmanaged
//                 => new S593<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S593
//         {
//             public const int Size = 593;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S593.Size + 4, Pack=1)]
//         public struct S593<T>
//         {
//             public readonly uint Count;

//             S593 Data;

//             [MethodImpl(Inline)]
//             public S593(int count, S593 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S593(uint count, S593 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count594<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S594.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S594<T> alloc594<T>(int count)
//             where T : unmanaged
//                 => new S594<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S594
//         {
//             public const int Size = 594;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S594.Size + 4, Pack=1)]
//         public struct S594<T>
//         {
//             public readonly uint Count;

//             S594 Data;

//             [MethodImpl(Inline)]
//             public S594(int count, S594 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S594(uint count, S594 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count595<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S595.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S595<T> alloc595<T>(int count)
//             where T : unmanaged
//                 => new S595<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S595
//         {
//             public const int Size = 595;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S595.Size + 4, Pack=1)]
//         public struct S595<T>
//         {
//             public readonly uint Count;

//             S595 Data;

//             [MethodImpl(Inline)]
//             public S595(int count, S595 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S595(uint count, S595 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count596<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S596.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S596<T> alloc596<T>(int count)
//             where T : unmanaged
//                 => new S596<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S596
//         {
//             public const int Size = 596;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S596.Size + 4, Pack=1)]
//         public struct S596<T>
//         {
//             public readonly uint Count;

//             S596 Data;

//             [MethodImpl(Inline)]
//             public S596(int count, S596 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S596(uint count, S596 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count597<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S597.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S597<T> alloc597<T>(int count)
//             where T : unmanaged
//                 => new S597<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S597
//         {
//             public const int Size = 597;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S597.Size + 4, Pack=1)]
//         public struct S597<T>
//         {
//             public readonly uint Count;

//             S597 Data;

//             [MethodImpl(Inline)]
//             public S597(int count, S597 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S597(uint count, S597 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count598<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S598.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S598<T> alloc598<T>(int count)
//             where T : unmanaged
//                 => new S598<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S598
//         {
//             public const int Size = 598;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S598.Size + 4, Pack=1)]
//         public struct S598<T>
//         {
//             public readonly uint Count;

//             S598 Data;

//             [MethodImpl(Inline)]
//             public S598(int count, S598 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S598(uint count, S598 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count599<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S599.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S599<T> alloc599<T>(int count)
//             where T : unmanaged
//                 => new S599<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S599
//         {
//             public const int Size = 599;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S599.Size + 4, Pack=1)]
//         public struct S599<T>
//         {
//             public readonly uint Count;

//             S599 Data;

//             [MethodImpl(Inline)]
//             public S599(int count, S599 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S599(uint count, S599 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count600<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S600.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S600<T> alloc600<T>(int count)
//             where T : unmanaged
//                 => new S600<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S600
//         {
//             public const int Size = 600;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S600.Size + 4, Pack=1)]
//         public struct S600<T>
//         {
//             public readonly uint Count;

//             S600 Data;

//             [MethodImpl(Inline)]
//             public S600(int count, S600 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S600(uint count, S600 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count601<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S601.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S601<T> alloc601<T>(int count)
//             where T : unmanaged
//                 => new S601<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S601
//         {
//             public const int Size = 601;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S601.Size + 4, Pack=1)]
//         public struct S601<T>
//         {
//             public readonly uint Count;

//             S601 Data;

//             [MethodImpl(Inline)]
//             public S601(int count, S601 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S601(uint count, S601 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count602<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S602.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S602<T> alloc602<T>(int count)
//             where T : unmanaged
//                 => new S602<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S602
//         {
//             public const int Size = 602;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S602.Size + 4, Pack=1)]
//         public struct S602<T>
//         {
//             public readonly uint Count;

//             S602 Data;

//             [MethodImpl(Inline)]
//             public S602(int count, S602 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S602(uint count, S602 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count603<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S603.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S603<T> alloc603<T>(int count)
//             where T : unmanaged
//                 => new S603<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S603
//         {
//             public const int Size = 603;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S603.Size + 4, Pack=1)]
//         public struct S603<T>
//         {
//             public readonly uint Count;

//             S603 Data;

//             [MethodImpl(Inline)]
//             public S603(int count, S603 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S603(uint count, S603 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count604<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S604.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S604<T> alloc604<T>(int count)
//             where T : unmanaged
//                 => new S604<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S604
//         {
//             public const int Size = 604;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S604.Size + 4, Pack=1)]
//         public struct S604<T>
//         {
//             public readonly uint Count;

//             S604 Data;

//             [MethodImpl(Inline)]
//             public S604(int count, S604 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S604(uint count, S604 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count605<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S605.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S605<T> alloc605<T>(int count)
//             where T : unmanaged
//                 => new S605<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S605
//         {
//             public const int Size = 605;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S605.Size + 4, Pack=1)]
//         public struct S605<T>
//         {
//             public readonly uint Count;

//             S605 Data;

//             [MethodImpl(Inline)]
//             public S605(int count, S605 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S605(uint count, S605 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count606<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S606.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S606<T> alloc606<T>(int count)
//             where T : unmanaged
//                 => new S606<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S606
//         {
//             public const int Size = 606;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S606.Size + 4, Pack=1)]
//         public struct S606<T>
//         {
//             public readonly uint Count;

//             S606 Data;

//             [MethodImpl(Inline)]
//             public S606(int count, S606 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S606(uint count, S606 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count607<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S607.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S607<T> alloc607<T>(int count)
//             where T : unmanaged
//                 => new S607<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S607
//         {
//             public const int Size = 607;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S607.Size + 4, Pack=1)]
//         public struct S607<T>
//         {
//             public readonly uint Count;

//             S607 Data;

//             [MethodImpl(Inline)]
//             public S607(int count, S607 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S607(uint count, S607 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count608<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S608.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S608<T> alloc608<T>(int count)
//             where T : unmanaged
//                 => new S608<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S608
//         {
//             public const int Size = 608;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S608.Size + 4, Pack=1)]
//         public struct S608<T>
//         {
//             public readonly uint Count;

//             S608 Data;

//             [MethodImpl(Inline)]
//             public S608(int count, S608 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S608(uint count, S608 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count609<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S609.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S609<T> alloc609<T>(int count)
//             where T : unmanaged
//                 => new S609<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S609
//         {
//             public const int Size = 609;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S609.Size + 4, Pack=1)]
//         public struct S609<T>
//         {
//             public readonly uint Count;

//             S609 Data;

//             [MethodImpl(Inline)]
//             public S609(int count, S609 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S609(uint count, S609 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count610<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S610.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S610<T> alloc610<T>(int count)
//             where T : unmanaged
//                 => new S610<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S610
//         {
//             public const int Size = 610;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S610.Size + 4, Pack=1)]
//         public struct S610<T>
//         {
//             public readonly uint Count;

//             S610 Data;

//             [MethodImpl(Inline)]
//             public S610(int count, S610 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S610(uint count, S610 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count611<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S611.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S611<T> alloc611<T>(int count)
//             where T : unmanaged
//                 => new S611<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S611
//         {
//             public const int Size = 611;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S611.Size + 4, Pack=1)]
//         public struct S611<T>
//         {
//             public readonly uint Count;

//             S611 Data;

//             [MethodImpl(Inline)]
//             public S611(int count, S611 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S611(uint count, S611 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count612<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S612.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S612<T> alloc612<T>(int count)
//             where T : unmanaged
//                 => new S612<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S612
//         {
//             public const int Size = 612;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S612.Size + 4, Pack=1)]
//         public struct S612<T>
//         {
//             public readonly uint Count;

//             S612 Data;

//             [MethodImpl(Inline)]
//             public S612(int count, S612 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S612(uint count, S612 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count613<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S613.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S613<T> alloc613<T>(int count)
//             where T : unmanaged
//                 => new S613<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S613
//         {
//             public const int Size = 613;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S613.Size + 4, Pack=1)]
//         public struct S613<T>
//         {
//             public readonly uint Count;

//             S613 Data;

//             [MethodImpl(Inline)]
//             public S613(int count, S613 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S613(uint count, S613 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count614<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S614.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S614<T> alloc614<T>(int count)
//             where T : unmanaged
//                 => new S614<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S614
//         {
//             public const int Size = 614;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S614.Size + 4, Pack=1)]
//         public struct S614<T>
//         {
//             public readonly uint Count;

//             S614 Data;

//             [MethodImpl(Inline)]
//             public S614(int count, S614 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S614(uint count, S614 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count615<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S615.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S615<T> alloc615<T>(int count)
//             where T : unmanaged
//                 => new S615<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S615
//         {
//             public const int Size = 615;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S615.Size + 4, Pack=1)]
//         public struct S615<T>
//         {
//             public readonly uint Count;

//             S615 Data;

//             [MethodImpl(Inline)]
//             public S615(int count, S615 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S615(uint count, S615 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count616<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S616.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S616<T> alloc616<T>(int count)
//             where T : unmanaged
//                 => new S616<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S616
//         {
//             public const int Size = 616;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S616.Size + 4, Pack=1)]
//         public struct S616<T>
//         {
//             public readonly uint Count;

//             S616 Data;

//             [MethodImpl(Inline)]
//             public S616(int count, S616 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S616(uint count, S616 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count617<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S617.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S617<T> alloc617<T>(int count)
//             where T : unmanaged
//                 => new S617<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S617
//         {
//             public const int Size = 617;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S617.Size + 4, Pack=1)]
//         public struct S617<T>
//         {
//             public readonly uint Count;

//             S617 Data;

//             [MethodImpl(Inline)]
//             public S617(int count, S617 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S617(uint count, S617 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count618<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S618.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S618<T> alloc618<T>(int count)
//             where T : unmanaged
//                 => new S618<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S618
//         {
//             public const int Size = 618;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S618.Size + 4, Pack=1)]
//         public struct S618<T>
//         {
//             public readonly uint Count;

//             S618 Data;

//             [MethodImpl(Inline)]
//             public S618(int count, S618 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S618(uint count, S618 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count619<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S619.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S619<T> alloc619<T>(int count)
//             where T : unmanaged
//                 => new S619<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S619
//         {
//             public const int Size = 619;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S619.Size + 4, Pack=1)]
//         public struct S619<T>
//         {
//             public readonly uint Count;

//             S619 Data;

//             [MethodImpl(Inline)]
//             public S619(int count, S619 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S619(uint count, S619 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count620<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S620.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S620<T> alloc620<T>(int count)
//             where T : unmanaged
//                 => new S620<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S620
//         {
//             public const int Size = 620;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S620.Size + 4, Pack=1)]
//         public struct S620<T>
//         {
//             public readonly uint Count;

//             S620 Data;

//             [MethodImpl(Inline)]
//             public S620(int count, S620 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S620(uint count, S620 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count621<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S621.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S621<T> alloc621<T>(int count)
//             where T : unmanaged
//                 => new S621<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S621
//         {
//             public const int Size = 621;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S621.Size + 4, Pack=1)]
//         public struct S621<T>
//         {
//             public readonly uint Count;

//             S621 Data;

//             [MethodImpl(Inline)]
//             public S621(int count, S621 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S621(uint count, S621 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count622<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S622.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S622<T> alloc622<T>(int count)
//             where T : unmanaged
//                 => new S622<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S622
//         {
//             public const int Size = 622;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S622.Size + 4, Pack=1)]
//         public struct S622<T>
//         {
//             public readonly uint Count;

//             S622 Data;

//             [MethodImpl(Inline)]
//             public S622(int count, S622 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S622(uint count, S622 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count623<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S623.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S623<T> alloc623<T>(int count)
//             where T : unmanaged
//                 => new S623<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S623
//         {
//             public const int Size = 623;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S623.Size + 4, Pack=1)]
//         public struct S623<T>
//         {
//             public readonly uint Count;

//             S623 Data;

//             [MethodImpl(Inline)]
//             public S623(int count, S623 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S623(uint count, S623 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count624<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S624.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S624<T> alloc624<T>(int count)
//             where T : unmanaged
//                 => new S624<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S624
//         {
//             public const int Size = 624;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S624.Size + 4, Pack=1)]
//         public struct S624<T>
//         {
//             public readonly uint Count;

//             S624 Data;

//             [MethodImpl(Inline)]
//             public S624(int count, S624 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S624(uint count, S624 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count625<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S625.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S625<T> alloc625<T>(int count)
//             where T : unmanaged
//                 => new S625<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S625
//         {
//             public const int Size = 625;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S625.Size + 4, Pack=1)]
//         public struct S625<T>
//         {
//             public readonly uint Count;

//             S625 Data;

//             [MethodImpl(Inline)]
//             public S625(int count, S625 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S625(uint count, S625 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count626<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S626.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S626<T> alloc626<T>(int count)
//             where T : unmanaged
//                 => new S626<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S626
//         {
//             public const int Size = 626;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S626.Size + 4, Pack=1)]
//         public struct S626<T>
//         {
//             public readonly uint Count;

//             S626 Data;

//             [MethodImpl(Inline)]
//             public S626(int count, S626 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S626(uint count, S626 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count627<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S627.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S627<T> alloc627<T>(int count)
//             where T : unmanaged
//                 => new S627<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S627
//         {
//             public const int Size = 627;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S627.Size + 4, Pack=1)]
//         public struct S627<T>
//         {
//             public readonly uint Count;

//             S627 Data;

//             [MethodImpl(Inline)]
//             public S627(int count, S627 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S627(uint count, S627 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count628<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S628.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S628<T> alloc628<T>(int count)
//             where T : unmanaged
//                 => new S628<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S628
//         {
//             public const int Size = 628;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S628.Size + 4, Pack=1)]
//         public struct S628<T>
//         {
//             public readonly uint Count;

//             S628 Data;

//             [MethodImpl(Inline)]
//             public S628(int count, S628 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S628(uint count, S628 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count629<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S629.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S629<T> alloc629<T>(int count)
//             where T : unmanaged
//                 => new S629<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S629
//         {
//             public const int Size = 629;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S629.Size + 4, Pack=1)]
//         public struct S629<T>
//         {
//             public readonly uint Count;

//             S629 Data;

//             [MethodImpl(Inline)]
//             public S629(int count, S629 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S629(uint count, S629 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count630<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S630.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S630<T> alloc630<T>(int count)
//             where T : unmanaged
//                 => new S630<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S630
//         {
//             public const int Size = 630;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S630.Size + 4, Pack=1)]
//         public struct S630<T>
//         {
//             public readonly uint Count;

//             S630 Data;

//             [MethodImpl(Inline)]
//             public S630(int count, S630 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S630(uint count, S630 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count631<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S631.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S631<T> alloc631<T>(int count)
//             where T : unmanaged
//                 => new S631<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S631
//         {
//             public const int Size = 631;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S631.Size + 4, Pack=1)]
//         public struct S631<T>
//         {
//             public readonly uint Count;

//             S631 Data;

//             [MethodImpl(Inline)]
//             public S631(int count, S631 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S631(uint count, S631 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count632<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S632.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S632<T> alloc632<T>(int count)
//             where T : unmanaged
//                 => new S632<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S632
//         {
//             public const int Size = 632;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S632.Size + 4, Pack=1)]
//         public struct S632<T>
//         {
//             public readonly uint Count;

//             S632 Data;

//             [MethodImpl(Inline)]
//             public S632(int count, S632 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S632(uint count, S632 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count633<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S633.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S633<T> alloc633<T>(int count)
//             where T : unmanaged
//                 => new S633<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S633
//         {
//             public const int Size = 633;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S633.Size + 4, Pack=1)]
//         public struct S633<T>
//         {
//             public readonly uint Count;

//             S633 Data;

//             [MethodImpl(Inline)]
//             public S633(int count, S633 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S633(uint count, S633 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count634<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S634.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S634<T> alloc634<T>(int count)
//             where T : unmanaged
//                 => new S634<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S634
//         {
//             public const int Size = 634;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S634.Size + 4, Pack=1)]
//         public struct S634<T>
//         {
//             public readonly uint Count;

//             S634 Data;

//             [MethodImpl(Inline)]
//             public S634(int count, S634 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S634(uint count, S634 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count635<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S635.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S635<T> alloc635<T>(int count)
//             where T : unmanaged
//                 => new S635<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S635
//         {
//             public const int Size = 635;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S635.Size + 4, Pack=1)]
//         public struct S635<T>
//         {
//             public readonly uint Count;

//             S635 Data;

//             [MethodImpl(Inline)]
//             public S635(int count, S635 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S635(uint count, S635 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count636<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S636.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S636<T> alloc636<T>(int count)
//             where T : unmanaged
//                 => new S636<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S636
//         {
//             public const int Size = 636;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S636.Size + 4, Pack=1)]
//         public struct S636<T>
//         {
//             public readonly uint Count;

//             S636 Data;

//             [MethodImpl(Inline)]
//             public S636(int count, S636 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S636(uint count, S636 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count637<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S637.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S637<T> alloc637<T>(int count)
//             where T : unmanaged
//                 => new S637<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S637
//         {
//             public const int Size = 637;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S637.Size + 4, Pack=1)]
//         public struct S637<T>
//         {
//             public readonly uint Count;

//             S637 Data;

//             [MethodImpl(Inline)]
//             public S637(int count, S637 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S637(uint count, S637 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count638<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S638.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S638<T> alloc638<T>(int count)
//             where T : unmanaged
//                 => new S638<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S638
//         {
//             public const int Size = 638;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S638.Size + 4, Pack=1)]
//         public struct S638<T>
//         {
//             public readonly uint Count;

//             S638 Data;

//             [MethodImpl(Inline)]
//             public S638(int count, S638 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S638(uint count, S638 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count639<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S639.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S639<T> alloc639<T>(int count)
//             where T : unmanaged
//                 => new S639<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S639
//         {
//             public const int Size = 639;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S639.Size + 4, Pack=1)]
//         public struct S639<T>
//         {
//             public readonly uint Count;

//             S639 Data;

//             [MethodImpl(Inline)]
//             public S639(int count, S639 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S639(uint count, S639 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count640<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S640.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S640<T> alloc640<T>(int count)
//             where T : unmanaged
//                 => new S640<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S640
//         {
//             public const int Size = 640;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S640.Size + 4, Pack=1)]
//         public struct S640<T>
//         {
//             public readonly uint Count;

//             S640 Data;

//             [MethodImpl(Inline)]
//             public S640(int count, S640 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S640(uint count, S640 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count641<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S641.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S641<T> alloc641<T>(int count)
//             where T : unmanaged
//                 => new S641<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S641
//         {
//             public const int Size = 641;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S641.Size + 4, Pack=1)]
//         public struct S641<T>
//         {
//             public readonly uint Count;

//             S641 Data;

//             [MethodImpl(Inline)]
//             public S641(int count, S641 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S641(uint count, S641 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count642<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S642.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S642<T> alloc642<T>(int count)
//             where T : unmanaged
//                 => new S642<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S642
//         {
//             public const int Size = 642;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S642.Size + 4, Pack=1)]
//         public struct S642<T>
//         {
//             public readonly uint Count;

//             S642 Data;

//             [MethodImpl(Inline)]
//             public S642(int count, S642 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S642(uint count, S642 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count643<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S643.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S643<T> alloc643<T>(int count)
//             where T : unmanaged
//                 => new S643<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S643
//         {
//             public const int Size = 643;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S643.Size + 4, Pack=1)]
//         public struct S643<T>
//         {
//             public readonly uint Count;

//             S643 Data;

//             [MethodImpl(Inline)]
//             public S643(int count, S643 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S643(uint count, S643 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count644<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S644.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S644<T> alloc644<T>(int count)
//             where T : unmanaged
//                 => new S644<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S644
//         {
//             public const int Size = 644;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S644.Size + 4, Pack=1)]
//         public struct S644<T>
//         {
//             public readonly uint Count;

//             S644 Data;

//             [MethodImpl(Inline)]
//             public S644(int count, S644 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S644(uint count, S644 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count645<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S645.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S645<T> alloc645<T>(int count)
//             where T : unmanaged
//                 => new S645<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S645
//         {
//             public const int Size = 645;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S645.Size + 4, Pack=1)]
//         public struct S645<T>
//         {
//             public readonly uint Count;

//             S645 Data;

//             [MethodImpl(Inline)]
//             public S645(int count, S645 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S645(uint count, S645 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count646<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S646.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S646<T> alloc646<T>(int count)
//             where T : unmanaged
//                 => new S646<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S646
//         {
//             public const int Size = 646;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S646.Size + 4, Pack=1)]
//         public struct S646<T>
//         {
//             public readonly uint Count;

//             S646 Data;

//             [MethodImpl(Inline)]
//             public S646(int count, S646 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S646(uint count, S646 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count647<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S647.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S647<T> alloc647<T>(int count)
//             where T : unmanaged
//                 => new S647<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S647
//         {
//             public const int Size = 647;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S647.Size + 4, Pack=1)]
//         public struct S647<T>
//         {
//             public readonly uint Count;

//             S647 Data;

//             [MethodImpl(Inline)]
//             public S647(int count, S647 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S647(uint count, S647 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count648<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S648.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S648<T> alloc648<T>(int count)
//             where T : unmanaged
//                 => new S648<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S648
//         {
//             public const int Size = 648;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S648.Size + 4, Pack=1)]
//         public struct S648<T>
//         {
//             public readonly uint Count;

//             S648 Data;

//             [MethodImpl(Inline)]
//             public S648(int count, S648 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S648(uint count, S648 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count649<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S649.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S649<T> alloc649<T>(int count)
//             where T : unmanaged
//                 => new S649<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S649
//         {
//             public const int Size = 649;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S649.Size + 4, Pack=1)]
//         public struct S649<T>
//         {
//             public readonly uint Count;

//             S649 Data;

//             [MethodImpl(Inline)]
//             public S649(int count, S649 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S649(uint count, S649 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count650<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S650.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S650<T> alloc650<T>(int count)
//             where T : unmanaged
//                 => new S650<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S650
//         {
//             public const int Size = 650;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S650.Size + 4, Pack=1)]
//         public struct S650<T>
//         {
//             public readonly uint Count;

//             S650 Data;

//             [MethodImpl(Inline)]
//             public S650(int count, S650 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S650(uint count, S650 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count651<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S651.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S651<T> alloc651<T>(int count)
//             where T : unmanaged
//                 => new S651<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S651
//         {
//             public const int Size = 651;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S651.Size + 4, Pack=1)]
//         public struct S651<T>
//         {
//             public readonly uint Count;

//             S651 Data;

//             [MethodImpl(Inline)]
//             public S651(int count, S651 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S651(uint count, S651 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count652<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S652.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S652<T> alloc652<T>(int count)
//             where T : unmanaged
//                 => new S652<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S652
//         {
//             public const int Size = 652;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S652.Size + 4, Pack=1)]
//         public struct S652<T>
//         {
//             public readonly uint Count;

//             S652 Data;

//             [MethodImpl(Inline)]
//             public S652(int count, S652 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S652(uint count, S652 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count653<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S653.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S653<T> alloc653<T>(int count)
//             where T : unmanaged
//                 => new S653<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S653
//         {
//             public const int Size = 653;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S653.Size + 4, Pack=1)]
//         public struct S653<T>
//         {
//             public readonly uint Count;

//             S653 Data;

//             [MethodImpl(Inline)]
//             public S653(int count, S653 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S653(uint count, S653 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count654<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S654.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S654<T> alloc654<T>(int count)
//             where T : unmanaged
//                 => new S654<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S654
//         {
//             public const int Size = 654;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S654.Size + 4, Pack=1)]
//         public struct S654<T>
//         {
//             public readonly uint Count;

//             S654 Data;

//             [MethodImpl(Inline)]
//             public S654(int count, S654 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S654(uint count, S654 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count655<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S655.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S655<T> alloc655<T>(int count)
//             where T : unmanaged
//                 => new S655<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S655
//         {
//             public const int Size = 655;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S655.Size + 4, Pack=1)]
//         public struct S655<T>
//         {
//             public readonly uint Count;

//             S655 Data;

//             [MethodImpl(Inline)]
//             public S655(int count, S655 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S655(uint count, S655 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count656<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S656.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S656<T> alloc656<T>(int count)
//             where T : unmanaged
//                 => new S656<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S656
//         {
//             public const int Size = 656;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S656.Size + 4, Pack=1)]
//         public struct S656<T>
//         {
//             public readonly uint Count;

//             S656 Data;

//             [MethodImpl(Inline)]
//             public S656(int count, S656 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S656(uint count, S656 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count657<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S657.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S657<T> alloc657<T>(int count)
//             where T : unmanaged
//                 => new S657<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S657
//         {
//             public const int Size = 657;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S657.Size + 4, Pack=1)]
//         public struct S657<T>
//         {
//             public readonly uint Count;

//             S657 Data;

//             [MethodImpl(Inline)]
//             public S657(int count, S657 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S657(uint count, S657 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count658<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S658.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S658<T> alloc658<T>(int count)
//             where T : unmanaged
//                 => new S658<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S658
//         {
//             public const int Size = 658;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S658.Size + 4, Pack=1)]
//         public struct S658<T>
//         {
//             public readonly uint Count;

//             S658 Data;

//             [MethodImpl(Inline)]
//             public S658(int count, S658 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S658(uint count, S658 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count659<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S659.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S659<T> alloc659<T>(int count)
//             where T : unmanaged
//                 => new S659<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S659
//         {
//             public const int Size = 659;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S659.Size + 4, Pack=1)]
//         public struct S659<T>
//         {
//             public readonly uint Count;

//             S659 Data;

//             [MethodImpl(Inline)]
//             public S659(int count, S659 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S659(uint count, S659 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count660<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S660.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S660<T> alloc660<T>(int count)
//             where T : unmanaged
//                 => new S660<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S660
//         {
//             public const int Size = 660;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S660.Size + 4, Pack=1)]
//         public struct S660<T>
//         {
//             public readonly uint Count;

//             S660 Data;

//             [MethodImpl(Inline)]
//             public S660(int count, S660 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S660(uint count, S660 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count661<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S661.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S661<T> alloc661<T>(int count)
//             where T : unmanaged
//                 => new S661<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S661
//         {
//             public const int Size = 661;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S661.Size + 4, Pack=1)]
//         public struct S661<T>
//         {
//             public readonly uint Count;

//             S661 Data;

//             [MethodImpl(Inline)]
//             public S661(int count, S661 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S661(uint count, S661 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count662<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S662.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S662<T> alloc662<T>(int count)
//             where T : unmanaged
//                 => new S662<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S662
//         {
//             public const int Size = 662;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S662.Size + 4, Pack=1)]
//         public struct S662<T>
//         {
//             public readonly uint Count;

//             S662 Data;

//             [MethodImpl(Inline)]
//             public S662(int count, S662 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S662(uint count, S662 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count663<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S663.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S663<T> alloc663<T>(int count)
//             where T : unmanaged
//                 => new S663<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S663
//         {
//             public const int Size = 663;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S663.Size + 4, Pack=1)]
//         public struct S663<T>
//         {
//             public readonly uint Count;

//             S663 Data;

//             [MethodImpl(Inline)]
//             public S663(int count, S663 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S663(uint count, S663 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count664<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S664.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S664<T> alloc664<T>(int count)
//             where T : unmanaged
//                 => new S664<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S664
//         {
//             public const int Size = 664;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S664.Size + 4, Pack=1)]
//         public struct S664<T>
//         {
//             public readonly uint Count;

//             S664 Data;

//             [MethodImpl(Inline)]
//             public S664(int count, S664 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S664(uint count, S664 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count665<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S665.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S665<T> alloc665<T>(int count)
//             where T : unmanaged
//                 => new S665<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S665
//         {
//             public const int Size = 665;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S665.Size + 4, Pack=1)]
//         public struct S665<T>
//         {
//             public readonly uint Count;

//             S665 Data;

//             [MethodImpl(Inline)]
//             public S665(int count, S665 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S665(uint count, S665 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count666<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S666.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S666<T> alloc666<T>(int count)
//             where T : unmanaged
//                 => new S666<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S666
//         {
//             public const int Size = 666;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S666.Size + 4, Pack=1)]
//         public struct S666<T>
//         {
//             public readonly uint Count;

//             S666 Data;

//             [MethodImpl(Inline)]
//             public S666(int count, S666 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S666(uint count, S666 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count667<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S667.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S667<T> alloc667<T>(int count)
//             where T : unmanaged
//                 => new S667<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S667
//         {
//             public const int Size = 667;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S667.Size + 4, Pack=1)]
//         public struct S667<T>
//         {
//             public readonly uint Count;

//             S667 Data;

//             [MethodImpl(Inline)]
//             public S667(int count, S667 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S667(uint count, S667 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count668<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S668.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S668<T> alloc668<T>(int count)
//             where T : unmanaged
//                 => new S668<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S668
//         {
//             public const int Size = 668;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S668.Size + 4, Pack=1)]
//         public struct S668<T>
//         {
//             public readonly uint Count;

//             S668 Data;

//             [MethodImpl(Inline)]
//             public S668(int count, S668 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S668(uint count, S668 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count669<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S669.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S669<T> alloc669<T>(int count)
//             where T : unmanaged
//                 => new S669<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S669
//         {
//             public const int Size = 669;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S669.Size + 4, Pack=1)]
//         public struct S669<T>
//         {
//             public readonly uint Count;

//             S669 Data;

//             [MethodImpl(Inline)]
//             public S669(int count, S669 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S669(uint count, S669 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count670<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S670.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S670<T> alloc670<T>(int count)
//             where T : unmanaged
//                 => new S670<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S670
//         {
//             public const int Size = 670;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S670.Size + 4, Pack=1)]
//         public struct S670<T>
//         {
//             public readonly uint Count;

//             S670 Data;

//             [MethodImpl(Inline)]
//             public S670(int count, S670 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S670(uint count, S670 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count671<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S671.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S671<T> alloc671<T>(int count)
//             where T : unmanaged
//                 => new S671<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S671
//         {
//             public const int Size = 671;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S671.Size + 4, Pack=1)]
//         public struct S671<T>
//         {
//             public readonly uint Count;

//             S671 Data;

//             [MethodImpl(Inline)]
//             public S671(int count, S671 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S671(uint count, S671 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count672<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S672.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S672<T> alloc672<T>(int count)
//             where T : unmanaged
//                 => new S672<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S672
//         {
//             public const int Size = 672;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S672.Size + 4, Pack=1)]
//         public struct S672<T>
//         {
//             public readonly uint Count;

//             S672 Data;

//             [MethodImpl(Inline)]
//             public S672(int count, S672 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S672(uint count, S672 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count673<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S673.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S673<T> alloc673<T>(int count)
//             where T : unmanaged
//                 => new S673<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S673
//         {
//             public const int Size = 673;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S673.Size + 4, Pack=1)]
//         public struct S673<T>
//         {
//             public readonly uint Count;

//             S673 Data;

//             [MethodImpl(Inline)]
//             public S673(int count, S673 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S673(uint count, S673 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count674<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S674.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S674<T> alloc674<T>(int count)
//             where T : unmanaged
//                 => new S674<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S674
//         {
//             public const int Size = 674;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S674.Size + 4, Pack=1)]
//         public struct S674<T>
//         {
//             public readonly uint Count;

//             S674 Data;

//             [MethodImpl(Inline)]
//             public S674(int count, S674 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S674(uint count, S674 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count675<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S675.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S675<T> alloc675<T>(int count)
//             where T : unmanaged
//                 => new S675<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S675
//         {
//             public const int Size = 675;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S675.Size + 4, Pack=1)]
//         public struct S675<T>
//         {
//             public readonly uint Count;

//             S675 Data;

//             [MethodImpl(Inline)]
//             public S675(int count, S675 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S675(uint count, S675 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count676<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S676.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S676<T> alloc676<T>(int count)
//             where T : unmanaged
//                 => new S676<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S676
//         {
//             public const int Size = 676;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S676.Size + 4, Pack=1)]
//         public struct S676<T>
//         {
//             public readonly uint Count;

//             S676 Data;

//             [MethodImpl(Inline)]
//             public S676(int count, S676 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S676(uint count, S676 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count677<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S677.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S677<T> alloc677<T>(int count)
//             where T : unmanaged
//                 => new S677<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S677
//         {
//             public const int Size = 677;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S677.Size + 4, Pack=1)]
//         public struct S677<T>
//         {
//             public readonly uint Count;

//             S677 Data;

//             [MethodImpl(Inline)]
//             public S677(int count, S677 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S677(uint count, S677 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count678<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S678.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S678<T> alloc678<T>(int count)
//             where T : unmanaged
//                 => new S678<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S678
//         {
//             public const int Size = 678;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S678.Size + 4, Pack=1)]
//         public struct S678<T>
//         {
//             public readonly uint Count;

//             S678 Data;

//             [MethodImpl(Inline)]
//             public S678(int count, S678 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S678(uint count, S678 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count679<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S679.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S679<T> alloc679<T>(int count)
//             where T : unmanaged
//                 => new S679<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S679
//         {
//             public const int Size = 679;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S679.Size + 4, Pack=1)]
//         public struct S679<T>
//         {
//             public readonly uint Count;

//             S679 Data;

//             [MethodImpl(Inline)]
//             public S679(int count, S679 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S679(uint count, S679 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count680<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S680.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S680<T> alloc680<T>(int count)
//             where T : unmanaged
//                 => new S680<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S680
//         {
//             public const int Size = 680;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S680.Size + 4, Pack=1)]
//         public struct S680<T>
//         {
//             public readonly uint Count;

//             S680 Data;

//             [MethodImpl(Inline)]
//             public S680(int count, S680 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S680(uint count, S680 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count681<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S681.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S681<T> alloc681<T>(int count)
//             where T : unmanaged
//                 => new S681<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S681
//         {
//             public const int Size = 681;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S681.Size + 4, Pack=1)]
//         public struct S681<T>
//         {
//             public readonly uint Count;

//             S681 Data;

//             [MethodImpl(Inline)]
//             public S681(int count, S681 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S681(uint count, S681 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count682<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S682.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S682<T> alloc682<T>(int count)
//             where T : unmanaged
//                 => new S682<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S682
//         {
//             public const int Size = 682;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S682.Size + 4, Pack=1)]
//         public struct S682<T>
//         {
//             public readonly uint Count;

//             S682 Data;

//             [MethodImpl(Inline)]
//             public S682(int count, S682 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S682(uint count, S682 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count683<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S683.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S683<T> alloc683<T>(int count)
//             where T : unmanaged
//                 => new S683<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S683
//         {
//             public const int Size = 683;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S683.Size + 4, Pack=1)]
//         public struct S683<T>
//         {
//             public readonly uint Count;

//             S683 Data;

//             [MethodImpl(Inline)]
//             public S683(int count, S683 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S683(uint count, S683 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count684<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S684.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S684<T> alloc684<T>(int count)
//             where T : unmanaged
//                 => new S684<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S684
//         {
//             public const int Size = 684;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S684.Size + 4, Pack=1)]
//         public struct S684<T>
//         {
//             public readonly uint Count;

//             S684 Data;

//             [MethodImpl(Inline)]
//             public S684(int count, S684 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S684(uint count, S684 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count685<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S685.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S685<T> alloc685<T>(int count)
//             where T : unmanaged
//                 => new S685<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S685
//         {
//             public const int Size = 685;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S685.Size + 4, Pack=1)]
//         public struct S685<T>
//         {
//             public readonly uint Count;

//             S685 Data;

//             [MethodImpl(Inline)]
//             public S685(int count, S685 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S685(uint count, S685 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count686<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S686.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S686<T> alloc686<T>(int count)
//             where T : unmanaged
//                 => new S686<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S686
//         {
//             public const int Size = 686;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S686.Size + 4, Pack=1)]
//         public struct S686<T>
//         {
//             public readonly uint Count;

//             S686 Data;

//             [MethodImpl(Inline)]
//             public S686(int count, S686 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S686(uint count, S686 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count687<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S687.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S687<T> alloc687<T>(int count)
//             where T : unmanaged
//                 => new S687<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S687
//         {
//             public const int Size = 687;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S687.Size + 4, Pack=1)]
//         public struct S687<T>
//         {
//             public readonly uint Count;

//             S687 Data;

//             [MethodImpl(Inline)]
//             public S687(int count, S687 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S687(uint count, S687 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count688<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S688.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S688<T> alloc688<T>(int count)
//             where T : unmanaged
//                 => new S688<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S688
//         {
//             public const int Size = 688;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S688.Size + 4, Pack=1)]
//         public struct S688<T>
//         {
//             public readonly uint Count;

//             S688 Data;

//             [MethodImpl(Inline)]
//             public S688(int count, S688 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S688(uint count, S688 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count689<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S689.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S689<T> alloc689<T>(int count)
//             where T : unmanaged
//                 => new S689<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S689
//         {
//             public const int Size = 689;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S689.Size + 4, Pack=1)]
//         public struct S689<T>
//         {
//             public readonly uint Count;

//             S689 Data;

//             [MethodImpl(Inline)]
//             public S689(int count, S689 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S689(uint count, S689 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count690<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S690.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S690<T> alloc690<T>(int count)
//             where T : unmanaged
//                 => new S690<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S690
//         {
//             public const int Size = 690;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S690.Size + 4, Pack=1)]
//         public struct S690<T>
//         {
//             public readonly uint Count;

//             S690 Data;

//             [MethodImpl(Inline)]
//             public S690(int count, S690 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S690(uint count, S690 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count691<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S691.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S691<T> alloc691<T>(int count)
//             where T : unmanaged
//                 => new S691<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S691
//         {
//             public const int Size = 691;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S691.Size + 4, Pack=1)]
//         public struct S691<T>
//         {
//             public readonly uint Count;

//             S691 Data;

//             [MethodImpl(Inline)]
//             public S691(int count, S691 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S691(uint count, S691 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count692<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S692.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S692<T> alloc692<T>(int count)
//             where T : unmanaged
//                 => new S692<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S692
//         {
//             public const int Size = 692;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S692.Size + 4, Pack=1)]
//         public struct S692<T>
//         {
//             public readonly uint Count;

//             S692 Data;

//             [MethodImpl(Inline)]
//             public S692(int count, S692 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S692(uint count, S692 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count693<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S693.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S693<T> alloc693<T>(int count)
//             where T : unmanaged
//                 => new S693<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S693
//         {
//             public const int Size = 693;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S693.Size + 4, Pack=1)]
//         public struct S693<T>
//         {
//             public readonly uint Count;

//             S693 Data;

//             [MethodImpl(Inline)]
//             public S693(int count, S693 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S693(uint count, S693 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count694<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S694.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S694<T> alloc694<T>(int count)
//             where T : unmanaged
//                 => new S694<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S694
//         {
//             public const int Size = 694;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S694.Size + 4, Pack=1)]
//         public struct S694<T>
//         {
//             public readonly uint Count;

//             S694 Data;

//             [MethodImpl(Inline)]
//             public S694(int count, S694 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S694(uint count, S694 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count695<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S695.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S695<T> alloc695<T>(int count)
//             where T : unmanaged
//                 => new S695<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S695
//         {
//             public const int Size = 695;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S695.Size + 4, Pack=1)]
//         public struct S695<T>
//         {
//             public readonly uint Count;

//             S695 Data;

//             [MethodImpl(Inline)]
//             public S695(int count, S695 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S695(uint count, S695 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count696<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S696.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S696<T> alloc696<T>(int count)
//             where T : unmanaged
//                 => new S696<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S696
//         {
//             public const int Size = 696;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S696.Size + 4, Pack=1)]
//         public struct S696<T>
//         {
//             public readonly uint Count;

//             S696 Data;

//             [MethodImpl(Inline)]
//             public S696(int count, S696 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S696(uint count, S696 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count697<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S697.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S697<T> alloc697<T>(int count)
//             where T : unmanaged
//                 => new S697<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S697
//         {
//             public const int Size = 697;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S697.Size + 4, Pack=1)]
//         public struct S697<T>
//         {
//             public readonly uint Count;

//             S697 Data;

//             [MethodImpl(Inline)]
//             public S697(int count, S697 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S697(uint count, S697 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count698<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S698.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S698<T> alloc698<T>(int count)
//             where T : unmanaged
//                 => new S698<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S698
//         {
//             public const int Size = 698;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S698.Size + 4, Pack=1)]
//         public struct S698<T>
//         {
//             public readonly uint Count;

//             S698 Data;

//             [MethodImpl(Inline)]
//             public S698(int count, S698 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S698(uint count, S698 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count699<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S699.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S699<T> alloc699<T>(int count)
//             where T : unmanaged
//                 => new S699<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S699
//         {
//             public const int Size = 699;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S699.Size + 4, Pack=1)]
//         public struct S699<T>
//         {
//             public readonly uint Count;

//             S699 Data;

//             [MethodImpl(Inline)]
//             public S699(int count, S699 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S699(uint count, S699 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count700<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S700.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S700<T> alloc700<T>(int count)
//             where T : unmanaged
//                 => new S700<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S700
//         {
//             public const int Size = 700;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S700.Size + 4, Pack=1)]
//         public struct S700<T>
//         {
//             public readonly uint Count;

//             S700 Data;

//             [MethodImpl(Inline)]
//             public S700(int count, S700 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S700(uint count, S700 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count701<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S701.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S701<T> alloc701<T>(int count)
//             where T : unmanaged
//                 => new S701<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S701
//         {
//             public const int Size = 701;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S701.Size + 4, Pack=1)]
//         public struct S701<T>
//         {
//             public readonly uint Count;

//             S701 Data;

//             [MethodImpl(Inline)]
//             public S701(int count, S701 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S701(uint count, S701 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count702<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S702.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S702<T> alloc702<T>(int count)
//             where T : unmanaged
//                 => new S702<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S702
//         {
//             public const int Size = 702;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S702.Size + 4, Pack=1)]
//         public struct S702<T>
//         {
//             public readonly uint Count;

//             S702 Data;

//             [MethodImpl(Inline)]
//             public S702(int count, S702 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S702(uint count, S702 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count703<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S703.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S703<T> alloc703<T>(int count)
//             where T : unmanaged
//                 => new S703<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S703
//         {
//             public const int Size = 703;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S703.Size + 4, Pack=1)]
//         public struct S703<T>
//         {
//             public readonly uint Count;

//             S703 Data;

//             [MethodImpl(Inline)]
//             public S703(int count, S703 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S703(uint count, S703 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count704<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S704.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S704<T> alloc704<T>(int count)
//             where T : unmanaged
//                 => new S704<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S704
//         {
//             public const int Size = 704;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S704.Size + 4, Pack=1)]
//         public struct S704<T>
//         {
//             public readonly uint Count;

//             S704 Data;

//             [MethodImpl(Inline)]
//             public S704(int count, S704 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S704(uint count, S704 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count705<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S705.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S705<T> alloc705<T>(int count)
//             where T : unmanaged
//                 => new S705<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S705
//         {
//             public const int Size = 705;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S705.Size + 4, Pack=1)]
//         public struct S705<T>
//         {
//             public readonly uint Count;

//             S705 Data;

//             [MethodImpl(Inline)]
//             public S705(int count, S705 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S705(uint count, S705 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count706<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S706.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S706<T> alloc706<T>(int count)
//             where T : unmanaged
//                 => new S706<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S706
//         {
//             public const int Size = 706;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S706.Size + 4, Pack=1)]
//         public struct S706<T>
//         {
//             public readonly uint Count;

//             S706 Data;

//             [MethodImpl(Inline)]
//             public S706(int count, S706 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S706(uint count, S706 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count707<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S707.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S707<T> alloc707<T>(int count)
//             where T : unmanaged
//                 => new S707<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S707
//         {
//             public const int Size = 707;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S707.Size + 4, Pack=1)]
//         public struct S707<T>
//         {
//             public readonly uint Count;

//             S707 Data;

//             [MethodImpl(Inline)]
//             public S707(int count, S707 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S707(uint count, S707 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count708<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S708.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S708<T> alloc708<T>(int count)
//             where T : unmanaged
//                 => new S708<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S708
//         {
//             public const int Size = 708;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S708.Size + 4, Pack=1)]
//         public struct S708<T>
//         {
//             public readonly uint Count;

//             S708 Data;

//             [MethodImpl(Inline)]
//             public S708(int count, S708 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S708(uint count, S708 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count709<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S709.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S709<T> alloc709<T>(int count)
//             where T : unmanaged
//                 => new S709<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S709
//         {
//             public const int Size = 709;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S709.Size + 4, Pack=1)]
//         public struct S709<T>
//         {
//             public readonly uint Count;

//             S709 Data;

//             [MethodImpl(Inline)]
//             public S709(int count, S709 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S709(uint count, S709 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count710<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S710.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S710<T> alloc710<T>(int count)
//             where T : unmanaged
//                 => new S710<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S710
//         {
//             public const int Size = 710;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S710.Size + 4, Pack=1)]
//         public struct S710<T>
//         {
//             public readonly uint Count;

//             S710 Data;

//             [MethodImpl(Inline)]
//             public S710(int count, S710 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S710(uint count, S710 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count711<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S711.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S711<T> alloc711<T>(int count)
//             where T : unmanaged
//                 => new S711<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S711
//         {
//             public const int Size = 711;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S711.Size + 4, Pack=1)]
//         public struct S711<T>
//         {
//             public readonly uint Count;

//             S711 Data;

//             [MethodImpl(Inline)]
//             public S711(int count, S711 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S711(uint count, S711 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count712<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S712.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S712<T> alloc712<T>(int count)
//             where T : unmanaged
//                 => new S712<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S712
//         {
//             public const int Size = 712;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S712.Size + 4, Pack=1)]
//         public struct S712<T>
//         {
//             public readonly uint Count;

//             S712 Data;

//             [MethodImpl(Inline)]
//             public S712(int count, S712 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S712(uint count, S712 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count713<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S713.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S713<T> alloc713<T>(int count)
//             where T : unmanaged
//                 => new S713<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S713
//         {
//             public const int Size = 713;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S713.Size + 4, Pack=1)]
//         public struct S713<T>
//         {
//             public readonly uint Count;

//             S713 Data;

//             [MethodImpl(Inline)]
//             public S713(int count, S713 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S713(uint count, S713 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count714<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S714.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S714<T> alloc714<T>(int count)
//             where T : unmanaged
//                 => new S714<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S714
//         {
//             public const int Size = 714;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S714.Size + 4, Pack=1)]
//         public struct S714<T>
//         {
//             public readonly uint Count;

//             S714 Data;

//             [MethodImpl(Inline)]
//             public S714(int count, S714 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S714(uint count, S714 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count715<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S715.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S715<T> alloc715<T>(int count)
//             where T : unmanaged
//                 => new S715<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S715
//         {
//             public const int Size = 715;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S715.Size + 4, Pack=1)]
//         public struct S715<T>
//         {
//             public readonly uint Count;

//             S715 Data;

//             [MethodImpl(Inline)]
//             public S715(int count, S715 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S715(uint count, S715 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count716<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S716.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S716<T> alloc716<T>(int count)
//             where T : unmanaged
//                 => new S716<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S716
//         {
//             public const int Size = 716;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S716.Size + 4, Pack=1)]
//         public struct S716<T>
//         {
//             public readonly uint Count;

//             S716 Data;

//             [MethodImpl(Inline)]
//             public S716(int count, S716 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S716(uint count, S716 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count717<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S717.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S717<T> alloc717<T>(int count)
//             where T : unmanaged
//                 => new S717<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S717
//         {
//             public const int Size = 717;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S717.Size + 4, Pack=1)]
//         public struct S717<T>
//         {
//             public readonly uint Count;

//             S717 Data;

//             [MethodImpl(Inline)]
//             public S717(int count, S717 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S717(uint count, S717 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count718<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S718.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S718<T> alloc718<T>(int count)
//             where T : unmanaged
//                 => new S718<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S718
//         {
//             public const int Size = 718;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S718.Size + 4, Pack=1)]
//         public struct S718<T>
//         {
//             public readonly uint Count;

//             S718 Data;

//             [MethodImpl(Inline)]
//             public S718(int count, S718 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S718(uint count, S718 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count719<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S719.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S719<T> alloc719<T>(int count)
//             where T : unmanaged
//                 => new S719<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S719
//         {
//             public const int Size = 719;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S719.Size + 4, Pack=1)]
//         public struct S719<T>
//         {
//             public readonly uint Count;

//             S719 Data;

//             [MethodImpl(Inline)]
//             public S719(int count, S719 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S719(uint count, S719 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count720<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S720.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S720<T> alloc720<T>(int count)
//             where T : unmanaged
//                 => new S720<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S720
//         {
//             public const int Size = 720;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S720.Size + 4, Pack=1)]
//         public struct S720<T>
//         {
//             public readonly uint Count;

//             S720 Data;

//             [MethodImpl(Inline)]
//             public S720(int count, S720 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S720(uint count, S720 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count721<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S721.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S721<T> alloc721<T>(int count)
//             where T : unmanaged
//                 => new S721<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S721
//         {
//             public const int Size = 721;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S721.Size + 4, Pack=1)]
//         public struct S721<T>
//         {
//             public readonly uint Count;

//             S721 Data;

//             [MethodImpl(Inline)]
//             public S721(int count, S721 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S721(uint count, S721 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count722<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S722.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S722<T> alloc722<T>(int count)
//             where T : unmanaged
//                 => new S722<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S722
//         {
//             public const int Size = 722;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S722.Size + 4, Pack=1)]
//         public struct S722<T>
//         {
//             public readonly uint Count;

//             S722 Data;

//             [MethodImpl(Inline)]
//             public S722(int count, S722 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S722(uint count, S722 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count723<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S723.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S723<T> alloc723<T>(int count)
//             where T : unmanaged
//                 => new S723<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S723
//         {
//             public const int Size = 723;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S723.Size + 4, Pack=1)]
//         public struct S723<T>
//         {
//             public readonly uint Count;

//             S723 Data;

//             [MethodImpl(Inline)]
//             public S723(int count, S723 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S723(uint count, S723 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count724<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S724.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S724<T> alloc724<T>(int count)
//             where T : unmanaged
//                 => new S724<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S724
//         {
//             public const int Size = 724;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S724.Size + 4, Pack=1)]
//         public struct S724<T>
//         {
//             public readonly uint Count;

//             S724 Data;

//             [MethodImpl(Inline)]
//             public S724(int count, S724 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S724(uint count, S724 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count725<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S725.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S725<T> alloc725<T>(int count)
//             where T : unmanaged
//                 => new S725<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S725
//         {
//             public const int Size = 725;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S725.Size + 4, Pack=1)]
//         public struct S725<T>
//         {
//             public readonly uint Count;

//             S725 Data;

//             [MethodImpl(Inline)]
//             public S725(int count, S725 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S725(uint count, S725 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count726<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S726.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S726<T> alloc726<T>(int count)
//             where T : unmanaged
//                 => new S726<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S726
//         {
//             public const int Size = 726;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S726.Size + 4, Pack=1)]
//         public struct S726<T>
//         {
//             public readonly uint Count;

//             S726 Data;

//             [MethodImpl(Inline)]
//             public S726(int count, S726 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S726(uint count, S726 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count727<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S727.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S727<T> alloc727<T>(int count)
//             where T : unmanaged
//                 => new S727<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S727
//         {
//             public const int Size = 727;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S727.Size + 4, Pack=1)]
//         public struct S727<T>
//         {
//             public readonly uint Count;

//             S727 Data;

//             [MethodImpl(Inline)]
//             public S727(int count, S727 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S727(uint count, S727 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count728<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S728.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S728<T> alloc728<T>(int count)
//             where T : unmanaged
//                 => new S728<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S728
//         {
//             public const int Size = 728;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S728.Size + 4, Pack=1)]
//         public struct S728<T>
//         {
//             public readonly uint Count;

//             S728 Data;

//             [MethodImpl(Inline)]
//             public S728(int count, S728 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S728(uint count, S728 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count729<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S729.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S729<T> alloc729<T>(int count)
//             where T : unmanaged
//                 => new S729<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S729
//         {
//             public const int Size = 729;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S729.Size + 4, Pack=1)]
//         public struct S729<T>
//         {
//             public readonly uint Count;

//             S729 Data;

//             [MethodImpl(Inline)]
//             public S729(int count, S729 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S729(uint count, S729 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count730<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S730.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S730<T> alloc730<T>(int count)
//             where T : unmanaged
//                 => new S730<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S730
//         {
//             public const int Size = 730;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S730.Size + 4, Pack=1)]
//         public struct S730<T>
//         {
//             public readonly uint Count;

//             S730 Data;

//             [MethodImpl(Inline)]
//             public S730(int count, S730 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S730(uint count, S730 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count731<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S731.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S731<T> alloc731<T>(int count)
//             where T : unmanaged
//                 => new S731<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S731
//         {
//             public const int Size = 731;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S731.Size + 4, Pack=1)]
//         public struct S731<T>
//         {
//             public readonly uint Count;

//             S731 Data;

//             [MethodImpl(Inline)]
//             public S731(int count, S731 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S731(uint count, S731 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count732<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S732.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S732<T> alloc732<T>(int count)
//             where T : unmanaged
//                 => new S732<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S732
//         {
//             public const int Size = 732;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S732.Size + 4, Pack=1)]
//         public struct S732<T>
//         {
//             public readonly uint Count;

//             S732 Data;

//             [MethodImpl(Inline)]
//             public S732(int count, S732 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S732(uint count, S732 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count733<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S733.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S733<T> alloc733<T>(int count)
//             where T : unmanaged
//                 => new S733<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S733
//         {
//             public const int Size = 733;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S733.Size + 4, Pack=1)]
//         public struct S733<T>
//         {
//             public readonly uint Count;

//             S733 Data;

//             [MethodImpl(Inline)]
//             public S733(int count, S733 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S733(uint count, S733 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count734<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S734.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S734<T> alloc734<T>(int count)
//             where T : unmanaged
//                 => new S734<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S734
//         {
//             public const int Size = 734;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S734.Size + 4, Pack=1)]
//         public struct S734<T>
//         {
//             public readonly uint Count;

//             S734 Data;

//             [MethodImpl(Inline)]
//             public S734(int count, S734 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S734(uint count, S734 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count735<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S735.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S735<T> alloc735<T>(int count)
//             where T : unmanaged
//                 => new S735<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S735
//         {
//             public const int Size = 735;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S735.Size + 4, Pack=1)]
//         public struct S735<T>
//         {
//             public readonly uint Count;

//             S735 Data;

//             [MethodImpl(Inline)]
//             public S735(int count, S735 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S735(uint count, S735 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count736<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S736.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S736<T> alloc736<T>(int count)
//             where T : unmanaged
//                 => new S736<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S736
//         {
//             public const int Size = 736;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S736.Size + 4, Pack=1)]
//         public struct S736<T>
//         {
//             public readonly uint Count;

//             S736 Data;

//             [MethodImpl(Inline)]
//             public S736(int count, S736 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S736(uint count, S736 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count737<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S737.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S737<T> alloc737<T>(int count)
//             where T : unmanaged
//                 => new S737<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S737
//         {
//             public const int Size = 737;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S737.Size + 4, Pack=1)]
//         public struct S737<T>
//         {
//             public readonly uint Count;

//             S737 Data;

//             [MethodImpl(Inline)]
//             public S737(int count, S737 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S737(uint count, S737 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count738<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S738.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S738<T> alloc738<T>(int count)
//             where T : unmanaged
//                 => new S738<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S738
//         {
//             public const int Size = 738;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S738.Size + 4, Pack=1)]
//         public struct S738<T>
//         {
//             public readonly uint Count;

//             S738 Data;

//             [MethodImpl(Inline)]
//             public S738(int count, S738 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S738(uint count, S738 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count739<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S739.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S739<T> alloc739<T>(int count)
//             where T : unmanaged
//                 => new S739<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S739
//         {
//             public const int Size = 739;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S739.Size + 4, Pack=1)]
//         public struct S739<T>
//         {
//             public readonly uint Count;

//             S739 Data;

//             [MethodImpl(Inline)]
//             public S739(int count, S739 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S739(uint count, S739 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count740<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S740.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S740<T> alloc740<T>(int count)
//             where T : unmanaged
//                 => new S740<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S740
//         {
//             public const int Size = 740;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S740.Size + 4, Pack=1)]
//         public struct S740<T>
//         {
//             public readonly uint Count;

//             S740 Data;

//             [MethodImpl(Inline)]
//             public S740(int count, S740 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S740(uint count, S740 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count741<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S741.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S741<T> alloc741<T>(int count)
//             where T : unmanaged
//                 => new S741<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S741
//         {
//             public const int Size = 741;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S741.Size + 4, Pack=1)]
//         public struct S741<T>
//         {
//             public readonly uint Count;

//             S741 Data;

//             [MethodImpl(Inline)]
//             public S741(int count, S741 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S741(uint count, S741 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count742<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S742.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S742<T> alloc742<T>(int count)
//             where T : unmanaged
//                 => new S742<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S742
//         {
//             public const int Size = 742;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S742.Size + 4, Pack=1)]
//         public struct S742<T>
//         {
//             public readonly uint Count;

//             S742 Data;

//             [MethodImpl(Inline)]
//             public S742(int count, S742 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S742(uint count, S742 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count743<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S743.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S743<T> alloc743<T>(int count)
//             where T : unmanaged
//                 => new S743<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S743
//         {
//             public const int Size = 743;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S743.Size + 4, Pack=1)]
//         public struct S743<T>
//         {
//             public readonly uint Count;

//             S743 Data;

//             [MethodImpl(Inline)]
//             public S743(int count, S743 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S743(uint count, S743 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count744<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S744.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S744<T> alloc744<T>(int count)
//             where T : unmanaged
//                 => new S744<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S744
//         {
//             public const int Size = 744;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S744.Size + 4, Pack=1)]
//         public struct S744<T>
//         {
//             public readonly uint Count;

//             S744 Data;

//             [MethodImpl(Inline)]
//             public S744(int count, S744 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S744(uint count, S744 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count745<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S745.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S745<T> alloc745<T>(int count)
//             where T : unmanaged
//                 => new S745<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S745
//         {
//             public const int Size = 745;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S745.Size + 4, Pack=1)]
//         public struct S745<T>
//         {
//             public readonly uint Count;

//             S745 Data;

//             [MethodImpl(Inline)]
//             public S745(int count, S745 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S745(uint count, S745 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count746<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S746.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S746<T> alloc746<T>(int count)
//             where T : unmanaged
//                 => new S746<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S746
//         {
//             public const int Size = 746;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S746.Size + 4, Pack=1)]
//         public struct S746<T>
//         {
//             public readonly uint Count;

//             S746 Data;

//             [MethodImpl(Inline)]
//             public S746(int count, S746 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S746(uint count, S746 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count747<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S747.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S747<T> alloc747<T>(int count)
//             where T : unmanaged
//                 => new S747<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S747
//         {
//             public const int Size = 747;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S747.Size + 4, Pack=1)]
//         public struct S747<T>
//         {
//             public readonly uint Count;

//             S747 Data;

//             [MethodImpl(Inline)]
//             public S747(int count, S747 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S747(uint count, S747 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count748<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S748.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S748<T> alloc748<T>(int count)
//             where T : unmanaged
//                 => new S748<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S748
//         {
//             public const int Size = 748;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S748.Size + 4, Pack=1)]
//         public struct S748<T>
//         {
//             public readonly uint Count;

//             S748 Data;

//             [MethodImpl(Inline)]
//             public S748(int count, S748 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S748(uint count, S748 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count749<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S749.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S749<T> alloc749<T>(int count)
//             where T : unmanaged
//                 => new S749<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S749
//         {
//             public const int Size = 749;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S749.Size + 4, Pack=1)]
//         public struct S749<T>
//         {
//             public readonly uint Count;

//             S749 Data;

//             [MethodImpl(Inline)]
//             public S749(int count, S749 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S749(uint count, S749 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count750<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S750.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S750<T> alloc750<T>(int count)
//             where T : unmanaged
//                 => new S750<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S750
//         {
//             public const int Size = 750;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S750.Size + 4, Pack=1)]
//         public struct S750<T>
//         {
//             public readonly uint Count;

//             S750 Data;

//             [MethodImpl(Inline)]
//             public S750(int count, S750 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S750(uint count, S750 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count751<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S751.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S751<T> alloc751<T>(int count)
//             where T : unmanaged
//                 => new S751<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S751
//         {
//             public const int Size = 751;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S751.Size + 4, Pack=1)]
//         public struct S751<T>
//         {
//             public readonly uint Count;

//             S751 Data;

//             [MethodImpl(Inline)]
//             public S751(int count, S751 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S751(uint count, S751 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count752<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S752.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S752<T> alloc752<T>(int count)
//             where T : unmanaged
//                 => new S752<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S752
//         {
//             public const int Size = 752;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S752.Size + 4, Pack=1)]
//         public struct S752<T>
//         {
//             public readonly uint Count;

//             S752 Data;

//             [MethodImpl(Inline)]
//             public S752(int count, S752 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S752(uint count, S752 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count753<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S753.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S753<T> alloc753<T>(int count)
//             where T : unmanaged
//                 => new S753<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S753
//         {
//             public const int Size = 753;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S753.Size + 4, Pack=1)]
//         public struct S753<T>
//         {
//             public readonly uint Count;

//             S753 Data;

//             [MethodImpl(Inline)]
//             public S753(int count, S753 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S753(uint count, S753 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count754<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S754.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S754<T> alloc754<T>(int count)
//             where T : unmanaged
//                 => new S754<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S754
//         {
//             public const int Size = 754;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S754.Size + 4, Pack=1)]
//         public struct S754<T>
//         {
//             public readonly uint Count;

//             S754 Data;

//             [MethodImpl(Inline)]
//             public S754(int count, S754 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S754(uint count, S754 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count755<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S755.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S755<T> alloc755<T>(int count)
//             where T : unmanaged
//                 => new S755<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S755
//         {
//             public const int Size = 755;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S755.Size + 4, Pack=1)]
//         public struct S755<T>
//         {
//             public readonly uint Count;

//             S755 Data;

//             [MethodImpl(Inline)]
//             public S755(int count, S755 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S755(uint count, S755 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count756<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S756.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S756<T> alloc756<T>(int count)
//             where T : unmanaged
//                 => new S756<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S756
//         {
//             public const int Size = 756;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S756.Size + 4, Pack=1)]
//         public struct S756<T>
//         {
//             public readonly uint Count;

//             S756 Data;

//             [MethodImpl(Inline)]
//             public S756(int count, S756 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S756(uint count, S756 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count757<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S757.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S757<T> alloc757<T>(int count)
//             where T : unmanaged
//                 => new S757<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S757
//         {
//             public const int Size = 757;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S757.Size + 4, Pack=1)]
//         public struct S757<T>
//         {
//             public readonly uint Count;

//             S757 Data;

//             [MethodImpl(Inline)]
//             public S757(int count, S757 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S757(uint count, S757 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count758<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S758.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S758<T> alloc758<T>(int count)
//             where T : unmanaged
//                 => new S758<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S758
//         {
//             public const int Size = 758;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S758.Size + 4, Pack=1)]
//         public struct S758<T>
//         {
//             public readonly uint Count;

//             S758 Data;

//             [MethodImpl(Inline)]
//             public S758(int count, S758 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S758(uint count, S758 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count759<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S759.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S759<T> alloc759<T>(int count)
//             where T : unmanaged
//                 => new S759<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S759
//         {
//             public const int Size = 759;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S759.Size + 4, Pack=1)]
//         public struct S759<T>
//         {
//             public readonly uint Count;

//             S759 Data;

//             [MethodImpl(Inline)]
//             public S759(int count, S759 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S759(uint count, S759 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count760<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S760.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S760<T> alloc760<T>(int count)
//             where T : unmanaged
//                 => new S760<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S760
//         {
//             public const int Size = 760;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S760.Size + 4, Pack=1)]
//         public struct S760<T>
//         {
//             public readonly uint Count;

//             S760 Data;

//             [MethodImpl(Inline)]
//             public S760(int count, S760 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S760(uint count, S760 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count761<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S761.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S761<T> alloc761<T>(int count)
//             where T : unmanaged
//                 => new S761<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S761
//         {
//             public const int Size = 761;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S761.Size + 4, Pack=1)]
//         public struct S761<T>
//         {
//             public readonly uint Count;

//             S761 Data;

//             [MethodImpl(Inline)]
//             public S761(int count, S761 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S761(uint count, S761 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count762<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S762.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S762<T> alloc762<T>(int count)
//             where T : unmanaged
//                 => new S762<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S762
//         {
//             public const int Size = 762;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S762.Size + 4, Pack=1)]
//         public struct S762<T>
//         {
//             public readonly uint Count;

//             S762 Data;

//             [MethodImpl(Inline)]
//             public S762(int count, S762 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S762(uint count, S762 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count763<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S763.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S763<T> alloc763<T>(int count)
//             where T : unmanaged
//                 => new S763<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S763
//         {
//             public const int Size = 763;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S763.Size + 4, Pack=1)]
//         public struct S763<T>
//         {
//             public readonly uint Count;

//             S763 Data;

//             [MethodImpl(Inline)]
//             public S763(int count, S763 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S763(uint count, S763 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count764<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S764.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S764<T> alloc764<T>(int count)
//             where T : unmanaged
//                 => new S764<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S764
//         {
//             public const int Size = 764;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S764.Size + 4, Pack=1)]
//         public struct S764<T>
//         {
//             public readonly uint Count;

//             S764 Data;

//             [MethodImpl(Inline)]
//             public S764(int count, S764 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S764(uint count, S764 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count765<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S765.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S765<T> alloc765<T>(int count)
//             where T : unmanaged
//                 => new S765<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S765
//         {
//             public const int Size = 765;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S765.Size + 4, Pack=1)]
//         public struct S765<T>
//         {
//             public readonly uint Count;

//             S765 Data;

//             [MethodImpl(Inline)]
//             public S765(int count, S765 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S765(uint count, S765 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count766<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S766.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S766<T> alloc766<T>(int count)
//             where T : unmanaged
//                 => new S766<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S766
//         {
//             public const int Size = 766;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S766.Size + 4, Pack=1)]
//         public struct S766<T>
//         {
//             public readonly uint Count;

//             S766 Data;

//             [MethodImpl(Inline)]
//             public S766(int count, S766 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S766(uint count, S766 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count767<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S767.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S767<T> alloc767<T>(int count)
//             where T : unmanaged
//                 => new S767<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S767
//         {
//             public const int Size = 767;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S767.Size + 4, Pack=1)]
//         public struct S767<T>
//         {
//             public readonly uint Count;

//             S767 Data;

//             [MethodImpl(Inline)]
//             public S767(int count, S767 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S767(uint count, S767 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count768<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S768.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S768<T> alloc768<T>(int count)
//             where T : unmanaged
//                 => new S768<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S768
//         {
//             public const int Size = 768;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S768.Size + 4, Pack=1)]
//         public struct S768<T>
//         {
//             public readonly uint Count;

//             S768 Data;

//             [MethodImpl(Inline)]
//             public S768(int count, S768 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S768(uint count, S768 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count769<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S769.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S769<T> alloc769<T>(int count)
//             where T : unmanaged
//                 => new S769<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S769
//         {
//             public const int Size = 769;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S769.Size + 4, Pack=1)]
//         public struct S769<T>
//         {
//             public readonly uint Count;

//             S769 Data;

//             [MethodImpl(Inline)]
//             public S769(int count, S769 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S769(uint count, S769 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count770<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S770.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S770<T> alloc770<T>(int count)
//             where T : unmanaged
//                 => new S770<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S770
//         {
//             public const int Size = 770;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S770.Size + 4, Pack=1)]
//         public struct S770<T>
//         {
//             public readonly uint Count;

//             S770 Data;

//             [MethodImpl(Inline)]
//             public S770(int count, S770 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S770(uint count, S770 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count771<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S771.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S771<T> alloc771<T>(int count)
//             where T : unmanaged
//                 => new S771<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S771
//         {
//             public const int Size = 771;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S771.Size + 4, Pack=1)]
//         public struct S771<T>
//         {
//             public readonly uint Count;

//             S771 Data;

//             [MethodImpl(Inline)]
//             public S771(int count, S771 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S771(uint count, S771 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count772<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S772.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S772<T> alloc772<T>(int count)
//             where T : unmanaged
//                 => new S772<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S772
//         {
//             public const int Size = 772;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S772.Size + 4, Pack=1)]
//         public struct S772<T>
//         {
//             public readonly uint Count;

//             S772 Data;

//             [MethodImpl(Inline)]
//             public S772(int count, S772 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S772(uint count, S772 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count773<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S773.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S773<T> alloc773<T>(int count)
//             where T : unmanaged
//                 => new S773<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S773
//         {
//             public const int Size = 773;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S773.Size + 4, Pack=1)]
//         public struct S773<T>
//         {
//             public readonly uint Count;

//             S773 Data;

//             [MethodImpl(Inline)]
//             public S773(int count, S773 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S773(uint count, S773 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count774<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S774.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S774<T> alloc774<T>(int count)
//             where T : unmanaged
//                 => new S774<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S774
//         {
//             public const int Size = 774;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S774.Size + 4, Pack=1)]
//         public struct S774<T>
//         {
//             public readonly uint Count;

//             S774 Data;

//             [MethodImpl(Inline)]
//             public S774(int count, S774 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S774(uint count, S774 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count775<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S775.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S775<T> alloc775<T>(int count)
//             where T : unmanaged
//                 => new S775<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S775
//         {
//             public const int Size = 775;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S775.Size + 4, Pack=1)]
//         public struct S775<T>
//         {
//             public readonly uint Count;

//             S775 Data;

//             [MethodImpl(Inline)]
//             public S775(int count, S775 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S775(uint count, S775 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count776<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S776.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S776<T> alloc776<T>(int count)
//             where T : unmanaged
//                 => new S776<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S776
//         {
//             public const int Size = 776;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S776.Size + 4, Pack=1)]
//         public struct S776<T>
//         {
//             public readonly uint Count;

//             S776 Data;

//             [MethodImpl(Inline)]
//             public S776(int count, S776 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S776(uint count, S776 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count777<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S777.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S777<T> alloc777<T>(int count)
//             where T : unmanaged
//                 => new S777<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S777
//         {
//             public const int Size = 777;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S777.Size + 4, Pack=1)]
//         public struct S777<T>
//         {
//             public readonly uint Count;

//             S777 Data;

//             [MethodImpl(Inline)]
//             public S777(int count, S777 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S777(uint count, S777 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count778<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S778.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S778<T> alloc778<T>(int count)
//             where T : unmanaged
//                 => new S778<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S778
//         {
//             public const int Size = 778;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S778.Size + 4, Pack=1)]
//         public struct S778<T>
//         {
//             public readonly uint Count;

//             S778 Data;

//             [MethodImpl(Inline)]
//             public S778(int count, S778 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S778(uint count, S778 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count779<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S779.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S779<T> alloc779<T>(int count)
//             where T : unmanaged
//                 => new S779<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S779
//         {
//             public const int Size = 779;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S779.Size + 4, Pack=1)]
//         public struct S779<T>
//         {
//             public readonly uint Count;

//             S779 Data;

//             [MethodImpl(Inline)]
//             public S779(int count, S779 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S779(uint count, S779 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count780<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S780.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S780<T> alloc780<T>(int count)
//             where T : unmanaged
//                 => new S780<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S780
//         {
//             public const int Size = 780;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S780.Size + 4, Pack=1)]
//         public struct S780<T>
//         {
//             public readonly uint Count;

//             S780 Data;

//             [MethodImpl(Inline)]
//             public S780(int count, S780 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S780(uint count, S780 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count781<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S781.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S781<T> alloc781<T>(int count)
//             where T : unmanaged
//                 => new S781<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S781
//         {
//             public const int Size = 781;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S781.Size + 4, Pack=1)]
//         public struct S781<T>
//         {
//             public readonly uint Count;

//             S781 Data;

//             [MethodImpl(Inline)]
//             public S781(int count, S781 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S781(uint count, S781 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count782<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S782.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S782<T> alloc782<T>(int count)
//             where T : unmanaged
//                 => new S782<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S782
//         {
//             public const int Size = 782;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S782.Size + 4, Pack=1)]
//         public struct S782<T>
//         {
//             public readonly uint Count;

//             S782 Data;

//             [MethodImpl(Inline)]
//             public S782(int count, S782 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S782(uint count, S782 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count783<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S783.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S783<T> alloc783<T>(int count)
//             where T : unmanaged
//                 => new S783<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S783
//         {
//             public const int Size = 783;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S783.Size + 4, Pack=1)]
//         public struct S783<T>
//         {
//             public readonly uint Count;

//             S783 Data;

//             [MethodImpl(Inline)]
//             public S783(int count, S783 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S783(uint count, S783 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count784<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S784.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S784<T> alloc784<T>(int count)
//             where T : unmanaged
//                 => new S784<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S784
//         {
//             public const int Size = 784;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S784.Size + 4, Pack=1)]
//         public struct S784<T>
//         {
//             public readonly uint Count;

//             S784 Data;

//             [MethodImpl(Inline)]
//             public S784(int count, S784 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S784(uint count, S784 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count785<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S785.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S785<T> alloc785<T>(int count)
//             where T : unmanaged
//                 => new S785<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S785
//         {
//             public const int Size = 785;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S785.Size + 4, Pack=1)]
//         public struct S785<T>
//         {
//             public readonly uint Count;

//             S785 Data;

//             [MethodImpl(Inline)]
//             public S785(int count, S785 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S785(uint count, S785 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count786<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S786.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S786<T> alloc786<T>(int count)
//             where T : unmanaged
//                 => new S786<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S786
//         {
//             public const int Size = 786;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S786.Size + 4, Pack=1)]
//         public struct S786<T>
//         {
//             public readonly uint Count;

//             S786 Data;

//             [MethodImpl(Inline)]
//             public S786(int count, S786 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S786(uint count, S786 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count787<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S787.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S787<T> alloc787<T>(int count)
//             where T : unmanaged
//                 => new S787<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S787
//         {
//             public const int Size = 787;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S787.Size + 4, Pack=1)]
//         public struct S787<T>
//         {
//             public readonly uint Count;

//             S787 Data;

//             [MethodImpl(Inline)]
//             public S787(int count, S787 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S787(uint count, S787 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count788<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S788.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S788<T> alloc788<T>(int count)
//             where T : unmanaged
//                 => new S788<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S788
//         {
//             public const int Size = 788;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S788.Size + 4, Pack=1)]
//         public struct S788<T>
//         {
//             public readonly uint Count;

//             S788 Data;

//             [MethodImpl(Inline)]
//             public S788(int count, S788 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S788(uint count, S788 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count789<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S789.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S789<T> alloc789<T>(int count)
//             where T : unmanaged
//                 => new S789<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S789
//         {
//             public const int Size = 789;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S789.Size + 4, Pack=1)]
//         public struct S789<T>
//         {
//             public readonly uint Count;

//             S789 Data;

//             [MethodImpl(Inline)]
//             public S789(int count, S789 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S789(uint count, S789 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count790<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S790.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S790<T> alloc790<T>(int count)
//             where T : unmanaged
//                 => new S790<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S790
//         {
//             public const int Size = 790;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S790.Size + 4, Pack=1)]
//         public struct S790<T>
//         {
//             public readonly uint Count;

//             S790 Data;

//             [MethodImpl(Inline)]
//             public S790(int count, S790 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S790(uint count, S790 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count791<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S791.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S791<T> alloc791<T>(int count)
//             where T : unmanaged
//                 => new S791<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S791
//         {
//             public const int Size = 791;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S791.Size + 4, Pack=1)]
//         public struct S791<T>
//         {
//             public readonly uint Count;

//             S791 Data;

//             [MethodImpl(Inline)]
//             public S791(int count, S791 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S791(uint count, S791 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count792<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S792.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S792<T> alloc792<T>(int count)
//             where T : unmanaged
//                 => new S792<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S792
//         {
//             public const int Size = 792;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S792.Size + 4, Pack=1)]
//         public struct S792<T>
//         {
//             public readonly uint Count;

//             S792 Data;

//             [MethodImpl(Inline)]
//             public S792(int count, S792 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S792(uint count, S792 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count793<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S793.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S793<T> alloc793<T>(int count)
//             where T : unmanaged
//                 => new S793<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S793
//         {
//             public const int Size = 793;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S793.Size + 4, Pack=1)]
//         public struct S793<T>
//         {
//             public readonly uint Count;

//             S793 Data;

//             [MethodImpl(Inline)]
//             public S793(int count, S793 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S793(uint count, S793 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count794<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S794.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S794<T> alloc794<T>(int count)
//             where T : unmanaged
//                 => new S794<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S794
//         {
//             public const int Size = 794;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S794.Size + 4, Pack=1)]
//         public struct S794<T>
//         {
//             public readonly uint Count;

//             S794 Data;

//             [MethodImpl(Inline)]
//             public S794(int count, S794 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S794(uint count, S794 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count795<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S795.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S795<T> alloc795<T>(int count)
//             where T : unmanaged
//                 => new S795<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S795
//         {
//             public const int Size = 795;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S795.Size + 4, Pack=1)]
//         public struct S795<T>
//         {
//             public readonly uint Count;

//             S795 Data;

//             [MethodImpl(Inline)]
//             public S795(int count, S795 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S795(uint count, S795 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count796<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S796.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S796<T> alloc796<T>(int count)
//             where T : unmanaged
//                 => new S796<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S796
//         {
//             public const int Size = 796;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S796.Size + 4, Pack=1)]
//         public struct S796<T>
//         {
//             public readonly uint Count;

//             S796 Data;

//             [MethodImpl(Inline)]
//             public S796(int count, S796 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S796(uint count, S796 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count797<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S797.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S797<T> alloc797<T>(int count)
//             where T : unmanaged
//                 => new S797<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S797
//         {
//             public const int Size = 797;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S797.Size + 4, Pack=1)]
//         public struct S797<T>
//         {
//             public readonly uint Count;

//             S797 Data;

//             [MethodImpl(Inline)]
//             public S797(int count, S797 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S797(uint count, S797 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count798<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S798.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S798<T> alloc798<T>(int count)
//             where T : unmanaged
//                 => new S798<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S798
//         {
//             public const int Size = 798;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S798.Size + 4, Pack=1)]
//         public struct S798<T>
//         {
//             public readonly uint Count;

//             S798 Data;

//             [MethodImpl(Inline)]
//             public S798(int count, S798 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S798(uint count, S798 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count799<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S799.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S799<T> alloc799<T>(int count)
//             where T : unmanaged
//                 => new S799<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S799
//         {
//             public const int Size = 799;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S799.Size + 4, Pack=1)]
//         public struct S799<T>
//         {
//             public readonly uint Count;

//             S799 Data;

//             [MethodImpl(Inline)]
//             public S799(int count, S799 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S799(uint count, S799 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count800<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S800.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S800<T> alloc800<T>(int count)
//             where T : unmanaged
//                 => new S800<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S800
//         {
//             public const int Size = 800;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S800.Size + 4, Pack=1)]
//         public struct S800<T>
//         {
//             public readonly uint Count;

//             S800 Data;

//             [MethodImpl(Inline)]
//             public S800(int count, S800 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S800(uint count, S800 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count801<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S801.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S801<T> alloc801<T>(int count)
//             where T : unmanaged
//                 => new S801<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S801
//         {
//             public const int Size = 801;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S801.Size + 4, Pack=1)]
//         public struct S801<T>
//         {
//             public readonly uint Count;

//             S801 Data;

//             [MethodImpl(Inline)]
//             public S801(int count, S801 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S801(uint count, S801 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count802<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S802.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S802<T> alloc802<T>(int count)
//             where T : unmanaged
//                 => new S802<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S802
//         {
//             public const int Size = 802;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S802.Size + 4, Pack=1)]
//         public struct S802<T>
//         {
//             public readonly uint Count;

//             S802 Data;

//             [MethodImpl(Inline)]
//             public S802(int count, S802 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S802(uint count, S802 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count803<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S803.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S803<T> alloc803<T>(int count)
//             where T : unmanaged
//                 => new S803<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S803
//         {
//             public const int Size = 803;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S803.Size + 4, Pack=1)]
//         public struct S803<T>
//         {
//             public readonly uint Count;

//             S803 Data;

//             [MethodImpl(Inline)]
//             public S803(int count, S803 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S803(uint count, S803 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count804<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S804.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S804<T> alloc804<T>(int count)
//             where T : unmanaged
//                 => new S804<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S804
//         {
//             public const int Size = 804;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S804.Size + 4, Pack=1)]
//         public struct S804<T>
//         {
//             public readonly uint Count;

//             S804 Data;

//             [MethodImpl(Inline)]
//             public S804(int count, S804 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S804(uint count, S804 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count805<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S805.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S805<T> alloc805<T>(int count)
//             where T : unmanaged
//                 => new S805<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S805
//         {
//             public const int Size = 805;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S805.Size + 4, Pack=1)]
//         public struct S805<T>
//         {
//             public readonly uint Count;

//             S805 Data;

//             [MethodImpl(Inline)]
//             public S805(int count, S805 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S805(uint count, S805 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count806<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S806.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S806<T> alloc806<T>(int count)
//             where T : unmanaged
//                 => new S806<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S806
//         {
//             public const int Size = 806;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S806.Size + 4, Pack=1)]
//         public struct S806<T>
//         {
//             public readonly uint Count;

//             S806 Data;

//             [MethodImpl(Inline)]
//             public S806(int count, S806 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S806(uint count, S806 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count807<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S807.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S807<T> alloc807<T>(int count)
//             where T : unmanaged
//                 => new S807<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S807
//         {
//             public const int Size = 807;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S807.Size + 4, Pack=1)]
//         public struct S807<T>
//         {
//             public readonly uint Count;

//             S807 Data;

//             [MethodImpl(Inline)]
//             public S807(int count, S807 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S807(uint count, S807 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count808<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S808.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S808<T> alloc808<T>(int count)
//             where T : unmanaged
//                 => new S808<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S808
//         {
//             public const int Size = 808;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S808.Size + 4, Pack=1)]
//         public struct S808<T>
//         {
//             public readonly uint Count;

//             S808 Data;

//             [MethodImpl(Inline)]
//             public S808(int count, S808 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S808(uint count, S808 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count809<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S809.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S809<T> alloc809<T>(int count)
//             where T : unmanaged
//                 => new S809<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S809
//         {
//             public const int Size = 809;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S809.Size + 4, Pack=1)]
//         public struct S809<T>
//         {
//             public readonly uint Count;

//             S809 Data;

//             [MethodImpl(Inline)]
//             public S809(int count, S809 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S809(uint count, S809 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count810<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S810.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S810<T> alloc810<T>(int count)
//             where T : unmanaged
//                 => new S810<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S810
//         {
//             public const int Size = 810;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S810.Size + 4, Pack=1)]
//         public struct S810<T>
//         {
//             public readonly uint Count;

//             S810 Data;

//             [MethodImpl(Inline)]
//             public S810(int count, S810 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S810(uint count, S810 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count811<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S811.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S811<T> alloc811<T>(int count)
//             where T : unmanaged
//                 => new S811<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S811
//         {
//             public const int Size = 811;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S811.Size + 4, Pack=1)]
//         public struct S811<T>
//         {
//             public readonly uint Count;

//             S811 Data;

//             [MethodImpl(Inline)]
//             public S811(int count, S811 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S811(uint count, S811 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count812<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S812.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S812<T> alloc812<T>(int count)
//             where T : unmanaged
//                 => new S812<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S812
//         {
//             public const int Size = 812;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S812.Size + 4, Pack=1)]
//         public struct S812<T>
//         {
//             public readonly uint Count;

//             S812 Data;

//             [MethodImpl(Inline)]
//             public S812(int count, S812 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S812(uint count, S812 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count813<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S813.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S813<T> alloc813<T>(int count)
//             where T : unmanaged
//                 => new S813<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S813
//         {
//             public const int Size = 813;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S813.Size + 4, Pack=1)]
//         public struct S813<T>
//         {
//             public readonly uint Count;

//             S813 Data;

//             [MethodImpl(Inline)]
//             public S813(int count, S813 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S813(uint count, S813 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count814<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S814.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S814<T> alloc814<T>(int count)
//             where T : unmanaged
//                 => new S814<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S814
//         {
//             public const int Size = 814;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S814.Size + 4, Pack=1)]
//         public struct S814<T>
//         {
//             public readonly uint Count;

//             S814 Data;

//             [MethodImpl(Inline)]
//             public S814(int count, S814 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S814(uint count, S814 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count815<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S815.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S815<T> alloc815<T>(int count)
//             where T : unmanaged
//                 => new S815<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S815
//         {
//             public const int Size = 815;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S815.Size + 4, Pack=1)]
//         public struct S815<T>
//         {
//             public readonly uint Count;

//             S815 Data;

//             [MethodImpl(Inline)]
//             public S815(int count, S815 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S815(uint count, S815 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count816<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S816.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S816<T> alloc816<T>(int count)
//             where T : unmanaged
//                 => new S816<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S816
//         {
//             public const int Size = 816;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S816.Size + 4, Pack=1)]
//         public struct S816<T>
//         {
//             public readonly uint Count;

//             S816 Data;

//             [MethodImpl(Inline)]
//             public S816(int count, S816 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S816(uint count, S816 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count817<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S817.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S817<T> alloc817<T>(int count)
//             where T : unmanaged
//                 => new S817<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S817
//         {
//             public const int Size = 817;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S817.Size + 4, Pack=1)]
//         public struct S817<T>
//         {
//             public readonly uint Count;

//             S817 Data;

//             [MethodImpl(Inline)]
//             public S817(int count, S817 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S817(uint count, S817 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count818<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S818.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S818<T> alloc818<T>(int count)
//             where T : unmanaged
//                 => new S818<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S818
//         {
//             public const int Size = 818;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S818.Size + 4, Pack=1)]
//         public struct S818<T>
//         {
//             public readonly uint Count;

//             S818 Data;

//             [MethodImpl(Inline)]
//             public S818(int count, S818 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S818(uint count, S818 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count819<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S819.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S819<T> alloc819<T>(int count)
//             where T : unmanaged
//                 => new S819<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S819
//         {
//             public const int Size = 819;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S819.Size + 4, Pack=1)]
//         public struct S819<T>
//         {
//             public readonly uint Count;

//             S819 Data;

//             [MethodImpl(Inline)]
//             public S819(int count, S819 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S819(uint count, S819 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count820<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S820.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S820<T> alloc820<T>(int count)
//             where T : unmanaged
//                 => new S820<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S820
//         {
//             public const int Size = 820;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S820.Size + 4, Pack=1)]
//         public struct S820<T>
//         {
//             public readonly uint Count;

//             S820 Data;

//             [MethodImpl(Inline)]
//             public S820(int count, S820 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S820(uint count, S820 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count821<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S821.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S821<T> alloc821<T>(int count)
//             where T : unmanaged
//                 => new S821<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S821
//         {
//             public const int Size = 821;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S821.Size + 4, Pack=1)]
//         public struct S821<T>
//         {
//             public readonly uint Count;

//             S821 Data;

//             [MethodImpl(Inline)]
//             public S821(int count, S821 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S821(uint count, S821 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count822<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S822.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S822<T> alloc822<T>(int count)
//             where T : unmanaged
//                 => new S822<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S822
//         {
//             public const int Size = 822;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S822.Size + 4, Pack=1)]
//         public struct S822<T>
//         {
//             public readonly uint Count;

//             S822 Data;

//             [MethodImpl(Inline)]
//             public S822(int count, S822 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S822(uint count, S822 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count823<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S823.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S823<T> alloc823<T>(int count)
//             where T : unmanaged
//                 => new S823<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S823
//         {
//             public const int Size = 823;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S823.Size + 4, Pack=1)]
//         public struct S823<T>
//         {
//             public readonly uint Count;

//             S823 Data;

//             [MethodImpl(Inline)]
//             public S823(int count, S823 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S823(uint count, S823 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count824<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S824.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S824<T> alloc824<T>(int count)
//             where T : unmanaged
//                 => new S824<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S824
//         {
//             public const int Size = 824;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S824.Size + 4, Pack=1)]
//         public struct S824<T>
//         {
//             public readonly uint Count;

//             S824 Data;

//             [MethodImpl(Inline)]
//             public S824(int count, S824 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S824(uint count, S824 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count825<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S825.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S825<T> alloc825<T>(int count)
//             where T : unmanaged
//                 => new S825<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S825
//         {
//             public const int Size = 825;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S825.Size + 4, Pack=1)]
//         public struct S825<T>
//         {
//             public readonly uint Count;

//             S825 Data;

//             [MethodImpl(Inline)]
//             public S825(int count, S825 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S825(uint count, S825 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count826<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S826.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S826<T> alloc826<T>(int count)
//             where T : unmanaged
//                 => new S826<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S826
//         {
//             public const int Size = 826;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S826.Size + 4, Pack=1)]
//         public struct S826<T>
//         {
//             public readonly uint Count;

//             S826 Data;

//             [MethodImpl(Inline)]
//             public S826(int count, S826 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S826(uint count, S826 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count827<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S827.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S827<T> alloc827<T>(int count)
//             where T : unmanaged
//                 => new S827<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S827
//         {
//             public const int Size = 827;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S827.Size + 4, Pack=1)]
//         public struct S827<T>
//         {
//             public readonly uint Count;

//             S827 Data;

//             [MethodImpl(Inline)]
//             public S827(int count, S827 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S827(uint count, S827 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count828<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S828.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S828<T> alloc828<T>(int count)
//             where T : unmanaged
//                 => new S828<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S828
//         {
//             public const int Size = 828;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S828.Size + 4, Pack=1)]
//         public struct S828<T>
//         {
//             public readonly uint Count;

//             S828 Data;

//             [MethodImpl(Inline)]
//             public S828(int count, S828 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S828(uint count, S828 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count829<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S829.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S829<T> alloc829<T>(int count)
//             where T : unmanaged
//                 => new S829<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S829
//         {
//             public const int Size = 829;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S829.Size + 4, Pack=1)]
//         public struct S829<T>
//         {
//             public readonly uint Count;

//             S829 Data;

//             [MethodImpl(Inline)]
//             public S829(int count, S829 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S829(uint count, S829 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count830<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S830.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S830<T> alloc830<T>(int count)
//             where T : unmanaged
//                 => new S830<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S830
//         {
//             public const int Size = 830;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S830.Size + 4, Pack=1)]
//         public struct S830<T>
//         {
//             public readonly uint Count;

//             S830 Data;

//             [MethodImpl(Inline)]
//             public S830(int count, S830 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S830(uint count, S830 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count831<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S831.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S831<T> alloc831<T>(int count)
//             where T : unmanaged
//                 => new S831<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S831
//         {
//             public const int Size = 831;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S831.Size + 4, Pack=1)]
//         public struct S831<T>
//         {
//             public readonly uint Count;

//             S831 Data;

//             [MethodImpl(Inline)]
//             public S831(int count, S831 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S831(uint count, S831 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count832<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S832.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S832<T> alloc832<T>(int count)
//             where T : unmanaged
//                 => new S832<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S832
//         {
//             public const int Size = 832;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S832.Size + 4, Pack=1)]
//         public struct S832<T>
//         {
//             public readonly uint Count;

//             S832 Data;

//             [MethodImpl(Inline)]
//             public S832(int count, S832 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S832(uint count, S832 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count833<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S833.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S833<T> alloc833<T>(int count)
//             where T : unmanaged
//                 => new S833<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S833
//         {
//             public const int Size = 833;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S833.Size + 4, Pack=1)]
//         public struct S833<T>
//         {
//             public readonly uint Count;

//             S833 Data;

//             [MethodImpl(Inline)]
//             public S833(int count, S833 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S833(uint count, S833 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count834<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S834.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S834<T> alloc834<T>(int count)
//             where T : unmanaged
//                 => new S834<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S834
//         {
//             public const int Size = 834;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S834.Size + 4, Pack=1)]
//         public struct S834<T>
//         {
//             public readonly uint Count;

//             S834 Data;

//             [MethodImpl(Inline)]
//             public S834(int count, S834 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S834(uint count, S834 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count835<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S835.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S835<T> alloc835<T>(int count)
//             where T : unmanaged
//                 => new S835<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S835
//         {
//             public const int Size = 835;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S835.Size + 4, Pack=1)]
//         public struct S835<T>
//         {
//             public readonly uint Count;

//             S835 Data;

//             [MethodImpl(Inline)]
//             public S835(int count, S835 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S835(uint count, S835 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count836<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S836.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S836<T> alloc836<T>(int count)
//             where T : unmanaged
//                 => new S836<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S836
//         {
//             public const int Size = 836;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S836.Size + 4, Pack=1)]
//         public struct S836<T>
//         {
//             public readonly uint Count;

//             S836 Data;

//             [MethodImpl(Inline)]
//             public S836(int count, S836 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S836(uint count, S836 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count837<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S837.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S837<T> alloc837<T>(int count)
//             where T : unmanaged
//                 => new S837<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S837
//         {
//             public const int Size = 837;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S837.Size + 4, Pack=1)]
//         public struct S837<T>
//         {
//             public readonly uint Count;

//             S837 Data;

//             [MethodImpl(Inline)]
//             public S837(int count, S837 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S837(uint count, S837 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count838<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S838.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S838<T> alloc838<T>(int count)
//             where T : unmanaged
//                 => new S838<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S838
//         {
//             public const int Size = 838;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S838.Size + 4, Pack=1)]
//         public struct S838<T>
//         {
//             public readonly uint Count;

//             S838 Data;

//             [MethodImpl(Inline)]
//             public S838(int count, S838 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S838(uint count, S838 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count839<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S839.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S839<T> alloc839<T>(int count)
//             where T : unmanaged
//                 => new S839<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S839
//         {
//             public const int Size = 839;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S839.Size + 4, Pack=1)]
//         public struct S839<T>
//         {
//             public readonly uint Count;

//             S839 Data;

//             [MethodImpl(Inline)]
//             public S839(int count, S839 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S839(uint count, S839 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count840<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S840.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S840<T> alloc840<T>(int count)
//             where T : unmanaged
//                 => new S840<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S840
//         {
//             public const int Size = 840;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S840.Size + 4, Pack=1)]
//         public struct S840<T>
//         {
//             public readonly uint Count;

//             S840 Data;

//             [MethodImpl(Inline)]
//             public S840(int count, S840 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S840(uint count, S840 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count841<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S841.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S841<T> alloc841<T>(int count)
//             where T : unmanaged
//                 => new S841<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S841
//         {
//             public const int Size = 841;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S841.Size + 4, Pack=1)]
//         public struct S841<T>
//         {
//             public readonly uint Count;

//             S841 Data;

//             [MethodImpl(Inline)]
//             public S841(int count, S841 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S841(uint count, S841 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count842<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S842.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S842<T> alloc842<T>(int count)
//             where T : unmanaged
//                 => new S842<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S842
//         {
//             public const int Size = 842;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S842.Size + 4, Pack=1)]
//         public struct S842<T>
//         {
//             public readonly uint Count;

//             S842 Data;

//             [MethodImpl(Inline)]
//             public S842(int count, S842 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S842(uint count, S842 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count843<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S843.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S843<T> alloc843<T>(int count)
//             where T : unmanaged
//                 => new S843<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S843
//         {
//             public const int Size = 843;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S843.Size + 4, Pack=1)]
//         public struct S843<T>
//         {
//             public readonly uint Count;

//             S843 Data;

//             [MethodImpl(Inline)]
//             public S843(int count, S843 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S843(uint count, S843 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count844<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S844.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S844<T> alloc844<T>(int count)
//             where T : unmanaged
//                 => new S844<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S844
//         {
//             public const int Size = 844;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S844.Size + 4, Pack=1)]
//         public struct S844<T>
//         {
//             public readonly uint Count;

//             S844 Data;

//             [MethodImpl(Inline)]
//             public S844(int count, S844 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S844(uint count, S844 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count845<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S845.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S845<T> alloc845<T>(int count)
//             where T : unmanaged
//                 => new S845<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S845
//         {
//             public const int Size = 845;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S845.Size + 4, Pack=1)]
//         public struct S845<T>
//         {
//             public readonly uint Count;

//             S845 Data;

//             [MethodImpl(Inline)]
//             public S845(int count, S845 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S845(uint count, S845 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count846<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S846.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S846<T> alloc846<T>(int count)
//             where T : unmanaged
//                 => new S846<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S846
//         {
//             public const int Size = 846;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S846.Size + 4, Pack=1)]
//         public struct S846<T>
//         {
//             public readonly uint Count;

//             S846 Data;

//             [MethodImpl(Inline)]
//             public S846(int count, S846 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S846(uint count, S846 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count847<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S847.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S847<T> alloc847<T>(int count)
//             where T : unmanaged
//                 => new S847<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S847
//         {
//             public const int Size = 847;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S847.Size + 4, Pack=1)]
//         public struct S847<T>
//         {
//             public readonly uint Count;

//             S847 Data;

//             [MethodImpl(Inline)]
//             public S847(int count, S847 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S847(uint count, S847 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count848<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S848.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S848<T> alloc848<T>(int count)
//             where T : unmanaged
//                 => new S848<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S848
//         {
//             public const int Size = 848;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S848.Size + 4, Pack=1)]
//         public struct S848<T>
//         {
//             public readonly uint Count;

//             S848 Data;

//             [MethodImpl(Inline)]
//             public S848(int count, S848 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S848(uint count, S848 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count849<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S849.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S849<T> alloc849<T>(int count)
//             where T : unmanaged
//                 => new S849<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S849
//         {
//             public const int Size = 849;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S849.Size + 4, Pack=1)]
//         public struct S849<T>
//         {
//             public readonly uint Count;

//             S849 Data;

//             [MethodImpl(Inline)]
//             public S849(int count, S849 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S849(uint count, S849 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count850<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S850.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S850<T> alloc850<T>(int count)
//             where T : unmanaged
//                 => new S850<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S850
//         {
//             public const int Size = 850;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S850.Size + 4, Pack=1)]
//         public struct S850<T>
//         {
//             public readonly uint Count;

//             S850 Data;

//             [MethodImpl(Inline)]
//             public S850(int count, S850 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S850(uint count, S850 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count851<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S851.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S851<T> alloc851<T>(int count)
//             where T : unmanaged
//                 => new S851<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S851
//         {
//             public const int Size = 851;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S851.Size + 4, Pack=1)]
//         public struct S851<T>
//         {
//             public readonly uint Count;

//             S851 Data;

//             [MethodImpl(Inline)]
//             public S851(int count, S851 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S851(uint count, S851 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count852<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S852.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S852<T> alloc852<T>(int count)
//             where T : unmanaged
//                 => new S852<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S852
//         {
//             public const int Size = 852;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S852.Size + 4, Pack=1)]
//         public struct S852<T>
//         {
//             public readonly uint Count;

//             S852 Data;

//             [MethodImpl(Inline)]
//             public S852(int count, S852 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S852(uint count, S852 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count853<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S853.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S853<T> alloc853<T>(int count)
//             where T : unmanaged
//                 => new S853<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S853
//         {
//             public const int Size = 853;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S853.Size + 4, Pack=1)]
//         public struct S853<T>
//         {
//             public readonly uint Count;

//             S853 Data;

//             [MethodImpl(Inline)]
//             public S853(int count, S853 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S853(uint count, S853 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count854<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S854.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S854<T> alloc854<T>(int count)
//             where T : unmanaged
//                 => new S854<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S854
//         {
//             public const int Size = 854;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S854.Size + 4, Pack=1)]
//         public struct S854<T>
//         {
//             public readonly uint Count;

//             S854 Data;

//             [MethodImpl(Inline)]
//             public S854(int count, S854 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S854(uint count, S854 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count855<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S855.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S855<T> alloc855<T>(int count)
//             where T : unmanaged
//                 => new S855<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S855
//         {
//             public const int Size = 855;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S855.Size + 4, Pack=1)]
//         public struct S855<T>
//         {
//             public readonly uint Count;

//             S855 Data;

//             [MethodImpl(Inline)]
//             public S855(int count, S855 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S855(uint count, S855 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count856<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S856.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S856<T> alloc856<T>(int count)
//             where T : unmanaged
//                 => new S856<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S856
//         {
//             public const int Size = 856;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S856.Size + 4, Pack=1)]
//         public struct S856<T>
//         {
//             public readonly uint Count;

//             S856 Data;

//             [MethodImpl(Inline)]
//             public S856(int count, S856 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S856(uint count, S856 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count857<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S857.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S857<T> alloc857<T>(int count)
//             where T : unmanaged
//                 => new S857<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S857
//         {
//             public const int Size = 857;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S857.Size + 4, Pack=1)]
//         public struct S857<T>
//         {
//             public readonly uint Count;

//             S857 Data;

//             [MethodImpl(Inline)]
//             public S857(int count, S857 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S857(uint count, S857 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count858<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S858.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S858<T> alloc858<T>(int count)
//             where T : unmanaged
//                 => new S858<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S858
//         {
//             public const int Size = 858;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S858.Size + 4, Pack=1)]
//         public struct S858<T>
//         {
//             public readonly uint Count;

//             S858 Data;

//             [MethodImpl(Inline)]
//             public S858(int count, S858 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S858(uint count, S858 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count859<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S859.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S859<T> alloc859<T>(int count)
//             where T : unmanaged
//                 => new S859<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S859
//         {
//             public const int Size = 859;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S859.Size + 4, Pack=1)]
//         public struct S859<T>
//         {
//             public readonly uint Count;

//             S859 Data;

//             [MethodImpl(Inline)]
//             public S859(int count, S859 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S859(uint count, S859 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count860<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S860.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S860<T> alloc860<T>(int count)
//             where T : unmanaged
//                 => new S860<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S860
//         {
//             public const int Size = 860;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S860.Size + 4, Pack=1)]
//         public struct S860<T>
//         {
//             public readonly uint Count;

//             S860 Data;

//             [MethodImpl(Inline)]
//             public S860(int count, S860 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S860(uint count, S860 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count861<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S861.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S861<T> alloc861<T>(int count)
//             where T : unmanaged
//                 => new S861<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S861
//         {
//             public const int Size = 861;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S861.Size + 4, Pack=1)]
//         public struct S861<T>
//         {
//             public readonly uint Count;

//             S861 Data;

//             [MethodImpl(Inline)]
//             public S861(int count, S861 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S861(uint count, S861 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count862<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S862.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S862<T> alloc862<T>(int count)
//             where T : unmanaged
//                 => new S862<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S862
//         {
//             public const int Size = 862;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S862.Size + 4, Pack=1)]
//         public struct S862<T>
//         {
//             public readonly uint Count;

//             S862 Data;

//             [MethodImpl(Inline)]
//             public S862(int count, S862 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S862(uint count, S862 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count863<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S863.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S863<T> alloc863<T>(int count)
//             where T : unmanaged
//                 => new S863<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S863
//         {
//             public const int Size = 863;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S863.Size + 4, Pack=1)]
//         public struct S863<T>
//         {
//             public readonly uint Count;

//             S863 Data;

//             [MethodImpl(Inline)]
//             public S863(int count, S863 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S863(uint count, S863 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count864<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S864.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S864<T> alloc864<T>(int count)
//             where T : unmanaged
//                 => new S864<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S864
//         {
//             public const int Size = 864;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S864.Size + 4, Pack=1)]
//         public struct S864<T>
//         {
//             public readonly uint Count;

//             S864 Data;

//             [MethodImpl(Inline)]
//             public S864(int count, S864 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S864(uint count, S864 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count865<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S865.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S865<T> alloc865<T>(int count)
//             where T : unmanaged
//                 => new S865<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S865
//         {
//             public const int Size = 865;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S865.Size + 4, Pack=1)]
//         public struct S865<T>
//         {
//             public readonly uint Count;

//             S865 Data;

//             [MethodImpl(Inline)]
//             public S865(int count, S865 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S865(uint count, S865 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count866<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S866.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S866<T> alloc866<T>(int count)
//             where T : unmanaged
//                 => new S866<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S866
//         {
//             public const int Size = 866;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S866.Size + 4, Pack=1)]
//         public struct S866<T>
//         {
//             public readonly uint Count;

//             S866 Data;

//             [MethodImpl(Inline)]
//             public S866(int count, S866 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S866(uint count, S866 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count867<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S867.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S867<T> alloc867<T>(int count)
//             where T : unmanaged
//                 => new S867<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S867
//         {
//             public const int Size = 867;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S867.Size + 4, Pack=1)]
//         public struct S867<T>
//         {
//             public readonly uint Count;

//             S867 Data;

//             [MethodImpl(Inline)]
//             public S867(int count, S867 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S867(uint count, S867 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count868<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S868.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S868<T> alloc868<T>(int count)
//             where T : unmanaged
//                 => new S868<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S868
//         {
//             public const int Size = 868;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S868.Size + 4, Pack=1)]
//         public struct S868<T>
//         {
//             public readonly uint Count;

//             S868 Data;

//             [MethodImpl(Inline)]
//             public S868(int count, S868 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S868(uint count, S868 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count869<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S869.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S869<T> alloc869<T>(int count)
//             where T : unmanaged
//                 => new S869<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S869
//         {
//             public const int Size = 869;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S869.Size + 4, Pack=1)]
//         public struct S869<T>
//         {
//             public readonly uint Count;

//             S869 Data;

//             [MethodImpl(Inline)]
//             public S869(int count, S869 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S869(uint count, S869 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count870<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S870.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S870<T> alloc870<T>(int count)
//             where T : unmanaged
//                 => new S870<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S870
//         {
//             public const int Size = 870;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S870.Size + 4, Pack=1)]
//         public struct S870<T>
//         {
//             public readonly uint Count;

//             S870 Data;

//             [MethodImpl(Inline)]
//             public S870(int count, S870 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S870(uint count, S870 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count871<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S871.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S871<T> alloc871<T>(int count)
//             where T : unmanaged
//                 => new S871<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S871
//         {
//             public const int Size = 871;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S871.Size + 4, Pack=1)]
//         public struct S871<T>
//         {
//             public readonly uint Count;

//             S871 Data;

//             [MethodImpl(Inline)]
//             public S871(int count, S871 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S871(uint count, S871 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count872<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S872.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S872<T> alloc872<T>(int count)
//             where T : unmanaged
//                 => new S872<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S872
//         {
//             public const int Size = 872;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S872.Size + 4, Pack=1)]
//         public struct S872<T>
//         {
//             public readonly uint Count;

//             S872 Data;

//             [MethodImpl(Inline)]
//             public S872(int count, S872 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S872(uint count, S872 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count873<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S873.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S873<T> alloc873<T>(int count)
//             where T : unmanaged
//                 => new S873<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S873
//         {
//             public const int Size = 873;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S873.Size + 4, Pack=1)]
//         public struct S873<T>
//         {
//             public readonly uint Count;

//             S873 Data;

//             [MethodImpl(Inline)]
//             public S873(int count, S873 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S873(uint count, S873 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count874<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S874.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S874<T> alloc874<T>(int count)
//             where T : unmanaged
//                 => new S874<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S874
//         {
//             public const int Size = 874;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S874.Size + 4, Pack=1)]
//         public struct S874<T>
//         {
//             public readonly uint Count;

//             S874 Data;

//             [MethodImpl(Inline)]
//             public S874(int count, S874 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S874(uint count, S874 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count875<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S875.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S875<T> alloc875<T>(int count)
//             where T : unmanaged
//                 => new S875<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S875
//         {
//             public const int Size = 875;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S875.Size + 4, Pack=1)]
//         public struct S875<T>
//         {
//             public readonly uint Count;

//             S875 Data;

//             [MethodImpl(Inline)]
//             public S875(int count, S875 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S875(uint count, S875 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count876<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S876.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S876<T> alloc876<T>(int count)
//             where T : unmanaged
//                 => new S876<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S876
//         {
//             public const int Size = 876;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S876.Size + 4, Pack=1)]
//         public struct S876<T>
//         {
//             public readonly uint Count;

//             S876 Data;

//             [MethodImpl(Inline)]
//             public S876(int count, S876 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S876(uint count, S876 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count877<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S877.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S877<T> alloc877<T>(int count)
//             where T : unmanaged
//                 => new S877<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S877
//         {
//             public const int Size = 877;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S877.Size + 4, Pack=1)]
//         public struct S877<T>
//         {
//             public readonly uint Count;

//             S877 Data;

//             [MethodImpl(Inline)]
//             public S877(int count, S877 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S877(uint count, S877 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count878<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S878.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S878<T> alloc878<T>(int count)
//             where T : unmanaged
//                 => new S878<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S878
//         {
//             public const int Size = 878;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S878.Size + 4, Pack=1)]
//         public struct S878<T>
//         {
//             public readonly uint Count;

//             S878 Data;

//             [MethodImpl(Inline)]
//             public S878(int count, S878 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S878(uint count, S878 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count879<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S879.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S879<T> alloc879<T>(int count)
//             where T : unmanaged
//                 => new S879<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S879
//         {
//             public const int Size = 879;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S879.Size + 4, Pack=1)]
//         public struct S879<T>
//         {
//             public readonly uint Count;

//             S879 Data;

//             [MethodImpl(Inline)]
//             public S879(int count, S879 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S879(uint count, S879 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count880<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S880.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S880<T> alloc880<T>(int count)
//             where T : unmanaged
//                 => new S880<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S880
//         {
//             public const int Size = 880;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S880.Size + 4, Pack=1)]
//         public struct S880<T>
//         {
//             public readonly uint Count;

//             S880 Data;

//             [MethodImpl(Inline)]
//             public S880(int count, S880 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S880(uint count, S880 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count881<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S881.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S881<T> alloc881<T>(int count)
//             where T : unmanaged
//                 => new S881<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S881
//         {
//             public const int Size = 881;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S881.Size + 4, Pack=1)]
//         public struct S881<T>
//         {
//             public readonly uint Count;

//             S881 Data;

//             [MethodImpl(Inline)]
//             public S881(int count, S881 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S881(uint count, S881 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count882<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S882.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S882<T> alloc882<T>(int count)
//             where T : unmanaged
//                 => new S882<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S882
//         {
//             public const int Size = 882;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S882.Size + 4, Pack=1)]
//         public struct S882<T>
//         {
//             public readonly uint Count;

//             S882 Data;

//             [MethodImpl(Inline)]
//             public S882(int count, S882 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S882(uint count, S882 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count883<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S883.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S883<T> alloc883<T>(int count)
//             where T : unmanaged
//                 => new S883<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S883
//         {
//             public const int Size = 883;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S883.Size + 4, Pack=1)]
//         public struct S883<T>
//         {
//             public readonly uint Count;

//             S883 Data;

//             [MethodImpl(Inline)]
//             public S883(int count, S883 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S883(uint count, S883 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count884<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S884.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S884<T> alloc884<T>(int count)
//             where T : unmanaged
//                 => new S884<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S884
//         {
//             public const int Size = 884;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S884.Size + 4, Pack=1)]
//         public struct S884<T>
//         {
//             public readonly uint Count;

//             S884 Data;

//             [MethodImpl(Inline)]
//             public S884(int count, S884 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S884(uint count, S884 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count885<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S885.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S885<T> alloc885<T>(int count)
//             where T : unmanaged
//                 => new S885<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S885
//         {
//             public const int Size = 885;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S885.Size + 4, Pack=1)]
//         public struct S885<T>
//         {
//             public readonly uint Count;

//             S885 Data;

//             [MethodImpl(Inline)]
//             public S885(int count, S885 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S885(uint count, S885 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count886<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S886.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S886<T> alloc886<T>(int count)
//             where T : unmanaged
//                 => new S886<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S886
//         {
//             public const int Size = 886;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S886.Size + 4, Pack=1)]
//         public struct S886<T>
//         {
//             public readonly uint Count;

//             S886 Data;

//             [MethodImpl(Inline)]
//             public S886(int count, S886 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S886(uint count, S886 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count887<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S887.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S887<T> alloc887<T>(int count)
//             where T : unmanaged
//                 => new S887<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S887
//         {
//             public const int Size = 887;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S887.Size + 4, Pack=1)]
//         public struct S887<T>
//         {
//             public readonly uint Count;

//             S887 Data;

//             [MethodImpl(Inline)]
//             public S887(int count, S887 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S887(uint count, S887 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count888<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S888.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S888<T> alloc888<T>(int count)
//             where T : unmanaged
//                 => new S888<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S888
//         {
//             public const int Size = 888;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S888.Size + 4, Pack=1)]
//         public struct S888<T>
//         {
//             public readonly uint Count;

//             S888 Data;

//             [MethodImpl(Inline)]
//             public S888(int count, S888 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S888(uint count, S888 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count889<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S889.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S889<T> alloc889<T>(int count)
//             where T : unmanaged
//                 => new S889<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S889
//         {
//             public const int Size = 889;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S889.Size + 4, Pack=1)]
//         public struct S889<T>
//         {
//             public readonly uint Count;

//             S889 Data;

//             [MethodImpl(Inline)]
//             public S889(int count, S889 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S889(uint count, S889 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count890<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S890.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S890<T> alloc890<T>(int count)
//             where T : unmanaged
//                 => new S890<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S890
//         {
//             public const int Size = 890;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S890.Size + 4, Pack=1)]
//         public struct S890<T>
//         {
//             public readonly uint Count;

//             S890 Data;

//             [MethodImpl(Inline)]
//             public S890(int count, S890 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S890(uint count, S890 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count891<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S891.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S891<T> alloc891<T>(int count)
//             where T : unmanaged
//                 => new S891<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S891
//         {
//             public const int Size = 891;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S891.Size + 4, Pack=1)]
//         public struct S891<T>
//         {
//             public readonly uint Count;

//             S891 Data;

//             [MethodImpl(Inline)]
//             public S891(int count, S891 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S891(uint count, S891 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count892<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S892.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S892<T> alloc892<T>(int count)
//             where T : unmanaged
//                 => new S892<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S892
//         {
//             public const int Size = 892;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S892.Size + 4, Pack=1)]
//         public struct S892<T>
//         {
//             public readonly uint Count;

//             S892 Data;

//             [MethodImpl(Inline)]
//             public S892(int count, S892 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S892(uint count, S892 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count893<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S893.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S893<T> alloc893<T>(int count)
//             where T : unmanaged
//                 => new S893<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S893
//         {
//             public const int Size = 893;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S893.Size + 4, Pack=1)]
//         public struct S893<T>
//         {
//             public readonly uint Count;

//             S893 Data;

//             [MethodImpl(Inline)]
//             public S893(int count, S893 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S893(uint count, S893 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count894<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S894.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S894<T> alloc894<T>(int count)
//             where T : unmanaged
//                 => new S894<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S894
//         {
//             public const int Size = 894;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S894.Size + 4, Pack=1)]
//         public struct S894<T>
//         {
//             public readonly uint Count;

//             S894 Data;

//             [MethodImpl(Inline)]
//             public S894(int count, S894 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S894(uint count, S894 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count895<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S895.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S895<T> alloc895<T>(int count)
//             where T : unmanaged
//                 => new S895<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S895
//         {
//             public const int Size = 895;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S895.Size + 4, Pack=1)]
//         public struct S895<T>
//         {
//             public readonly uint Count;

//             S895 Data;

//             [MethodImpl(Inline)]
//             public S895(int count, S895 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S895(uint count, S895 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count896<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S896.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S896<T> alloc896<T>(int count)
//             where T : unmanaged
//                 => new S896<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S896
//         {
//             public const int Size = 896;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S896.Size + 4, Pack=1)]
//         public struct S896<T>
//         {
//             public readonly uint Count;

//             S896 Data;

//             [MethodImpl(Inline)]
//             public S896(int count, S896 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S896(uint count, S896 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count897<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S897.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S897<T> alloc897<T>(int count)
//             where T : unmanaged
//                 => new S897<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S897
//         {
//             public const int Size = 897;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S897.Size + 4, Pack=1)]
//         public struct S897<T>
//         {
//             public readonly uint Count;

//             S897 Data;

//             [MethodImpl(Inline)]
//             public S897(int count, S897 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S897(uint count, S897 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count898<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S898.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S898<T> alloc898<T>(int count)
//             where T : unmanaged
//                 => new S898<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S898
//         {
//             public const int Size = 898;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S898.Size + 4, Pack=1)]
//         public struct S898<T>
//         {
//             public readonly uint Count;

//             S898 Data;

//             [MethodImpl(Inline)]
//             public S898(int count, S898 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S898(uint count, S898 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count899<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S899.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S899<T> alloc899<T>(int count)
//             where T : unmanaged
//                 => new S899<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S899
//         {
//             public const int Size = 899;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S899.Size + 4, Pack=1)]
//         public struct S899<T>
//         {
//             public readonly uint Count;

//             S899 Data;

//             [MethodImpl(Inline)]
//             public S899(int count, S899 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S899(uint count, S899 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count900<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S900.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S900<T> alloc900<T>(int count)
//             where T : unmanaged
//                 => new S900<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S900
//         {
//             public const int Size = 900;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S900.Size + 4, Pack=1)]
//         public struct S900<T>
//         {
//             public readonly uint Count;

//             S900 Data;

//             [MethodImpl(Inline)]
//             public S900(int count, S900 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S900(uint count, S900 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count901<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S901.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S901<T> alloc901<T>(int count)
//             where T : unmanaged
//                 => new S901<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S901
//         {
//             public const int Size = 901;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S901.Size + 4, Pack=1)]
//         public struct S901<T>
//         {
//             public readonly uint Count;

//             S901 Data;

//             [MethodImpl(Inline)]
//             public S901(int count, S901 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S901(uint count, S901 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count902<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S902.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S902<T> alloc902<T>(int count)
//             where T : unmanaged
//                 => new S902<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S902
//         {
//             public const int Size = 902;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S902.Size + 4, Pack=1)]
//         public struct S902<T>
//         {
//             public readonly uint Count;

//             S902 Data;

//             [MethodImpl(Inline)]
//             public S902(int count, S902 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S902(uint count, S902 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count903<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S903.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S903<T> alloc903<T>(int count)
//             where T : unmanaged
//                 => new S903<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S903
//         {
//             public const int Size = 903;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S903.Size + 4, Pack=1)]
//         public struct S903<T>
//         {
//             public readonly uint Count;

//             S903 Data;

//             [MethodImpl(Inline)]
//             public S903(int count, S903 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S903(uint count, S903 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count904<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S904.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S904<T> alloc904<T>(int count)
//             where T : unmanaged
//                 => new S904<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S904
//         {
//             public const int Size = 904;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S904.Size + 4, Pack=1)]
//         public struct S904<T>
//         {
//             public readonly uint Count;

//             S904 Data;

//             [MethodImpl(Inline)]
//             public S904(int count, S904 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S904(uint count, S904 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count905<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S905.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S905<T> alloc905<T>(int count)
//             where T : unmanaged
//                 => new S905<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S905
//         {
//             public const int Size = 905;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S905.Size + 4, Pack=1)]
//         public struct S905<T>
//         {
//             public readonly uint Count;

//             S905 Data;

//             [MethodImpl(Inline)]
//             public S905(int count, S905 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S905(uint count, S905 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count906<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S906.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S906<T> alloc906<T>(int count)
//             where T : unmanaged
//                 => new S906<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S906
//         {
//             public const int Size = 906;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S906.Size + 4, Pack=1)]
//         public struct S906<T>
//         {
//             public readonly uint Count;

//             S906 Data;

//             [MethodImpl(Inline)]
//             public S906(int count, S906 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S906(uint count, S906 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count907<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S907.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S907<T> alloc907<T>(int count)
//             where T : unmanaged
//                 => new S907<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S907
//         {
//             public const int Size = 907;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S907.Size + 4, Pack=1)]
//         public struct S907<T>
//         {
//             public readonly uint Count;

//             S907 Data;

//             [MethodImpl(Inline)]
//             public S907(int count, S907 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S907(uint count, S907 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count908<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S908.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S908<T> alloc908<T>(int count)
//             where T : unmanaged
//                 => new S908<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S908
//         {
//             public const int Size = 908;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S908.Size + 4, Pack=1)]
//         public struct S908<T>
//         {
//             public readonly uint Count;

//             S908 Data;

//             [MethodImpl(Inline)]
//             public S908(int count, S908 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S908(uint count, S908 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count909<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S909.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S909<T> alloc909<T>(int count)
//             where T : unmanaged
//                 => new S909<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S909
//         {
//             public const int Size = 909;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S909.Size + 4, Pack=1)]
//         public struct S909<T>
//         {
//             public readonly uint Count;

//             S909 Data;

//             [MethodImpl(Inline)]
//             public S909(int count, S909 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S909(uint count, S909 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count910<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S910.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S910<T> alloc910<T>(int count)
//             where T : unmanaged
//                 => new S910<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S910
//         {
//             public const int Size = 910;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S910.Size + 4, Pack=1)]
//         public struct S910<T>
//         {
//             public readonly uint Count;

//             S910 Data;

//             [MethodImpl(Inline)]
//             public S910(int count, S910 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S910(uint count, S910 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count911<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S911.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S911<T> alloc911<T>(int count)
//             where T : unmanaged
//                 => new S911<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S911
//         {
//             public const int Size = 911;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S911.Size + 4, Pack=1)]
//         public struct S911<T>
//         {
//             public readonly uint Count;

//             S911 Data;

//             [MethodImpl(Inline)]
//             public S911(int count, S911 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S911(uint count, S911 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count912<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S912.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S912<T> alloc912<T>(int count)
//             where T : unmanaged
//                 => new S912<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S912
//         {
//             public const int Size = 912;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S912.Size + 4, Pack=1)]
//         public struct S912<T>
//         {
//             public readonly uint Count;

//             S912 Data;

//             [MethodImpl(Inline)]
//             public S912(int count, S912 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S912(uint count, S912 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count913<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S913.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S913<T> alloc913<T>(int count)
//             where T : unmanaged
//                 => new S913<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S913
//         {
//             public const int Size = 913;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S913.Size + 4, Pack=1)]
//         public struct S913<T>
//         {
//             public readonly uint Count;

//             S913 Data;

//             [MethodImpl(Inline)]
//             public S913(int count, S913 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S913(uint count, S913 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count914<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S914.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S914<T> alloc914<T>(int count)
//             where T : unmanaged
//                 => new S914<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S914
//         {
//             public const int Size = 914;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S914.Size + 4, Pack=1)]
//         public struct S914<T>
//         {
//             public readonly uint Count;

//             S914 Data;

//             [MethodImpl(Inline)]
//             public S914(int count, S914 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S914(uint count, S914 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count915<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S915.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S915<T> alloc915<T>(int count)
//             where T : unmanaged
//                 => new S915<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S915
//         {
//             public const int Size = 915;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S915.Size + 4, Pack=1)]
//         public struct S915<T>
//         {
//             public readonly uint Count;

//             S915 Data;

//             [MethodImpl(Inline)]
//             public S915(int count, S915 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S915(uint count, S915 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count916<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S916.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S916<T> alloc916<T>(int count)
//             where T : unmanaged
//                 => new S916<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S916
//         {
//             public const int Size = 916;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S916.Size + 4, Pack=1)]
//         public struct S916<T>
//         {
//             public readonly uint Count;

//             S916 Data;

//             [MethodImpl(Inline)]
//             public S916(int count, S916 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S916(uint count, S916 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count917<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S917.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S917<T> alloc917<T>(int count)
//             where T : unmanaged
//                 => new S917<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S917
//         {
//             public const int Size = 917;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S917.Size + 4, Pack=1)]
//         public struct S917<T>
//         {
//             public readonly uint Count;

//             S917 Data;

//             [MethodImpl(Inline)]
//             public S917(int count, S917 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S917(uint count, S917 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count918<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S918.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S918<T> alloc918<T>(int count)
//             where T : unmanaged
//                 => new S918<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S918
//         {
//             public const int Size = 918;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S918.Size + 4, Pack=1)]
//         public struct S918<T>
//         {
//             public readonly uint Count;

//             S918 Data;

//             [MethodImpl(Inline)]
//             public S918(int count, S918 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S918(uint count, S918 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count919<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S919.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S919<T> alloc919<T>(int count)
//             where T : unmanaged
//                 => new S919<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S919
//         {
//             public const int Size = 919;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S919.Size + 4, Pack=1)]
//         public struct S919<T>
//         {
//             public readonly uint Count;

//             S919 Data;

//             [MethodImpl(Inline)]
//             public S919(int count, S919 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S919(uint count, S919 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count920<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S920.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S920<T> alloc920<T>(int count)
//             where T : unmanaged
//                 => new S920<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S920
//         {
//             public const int Size = 920;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S920.Size + 4, Pack=1)]
//         public struct S920<T>
//         {
//             public readonly uint Count;

//             S920 Data;

//             [MethodImpl(Inline)]
//             public S920(int count, S920 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S920(uint count, S920 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count921<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S921.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S921<T> alloc921<T>(int count)
//             where T : unmanaged
//                 => new S921<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S921
//         {
//             public const int Size = 921;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S921.Size + 4, Pack=1)]
//         public struct S921<T>
//         {
//             public readonly uint Count;

//             S921 Data;

//             [MethodImpl(Inline)]
//             public S921(int count, S921 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S921(uint count, S921 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count922<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S922.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S922<T> alloc922<T>(int count)
//             where T : unmanaged
//                 => new S922<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S922
//         {
//             public const int Size = 922;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S922.Size + 4, Pack=1)]
//         public struct S922<T>
//         {
//             public readonly uint Count;

//             S922 Data;

//             [MethodImpl(Inline)]
//             public S922(int count, S922 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S922(uint count, S922 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count923<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S923.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S923<T> alloc923<T>(int count)
//             where T : unmanaged
//                 => new S923<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S923
//         {
//             public const int Size = 923;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S923.Size + 4, Pack=1)]
//         public struct S923<T>
//         {
//             public readonly uint Count;

//             S923 Data;

//             [MethodImpl(Inline)]
//             public S923(int count, S923 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S923(uint count, S923 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count924<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S924.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S924<T> alloc924<T>(int count)
//             where T : unmanaged
//                 => new S924<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S924
//         {
//             public const int Size = 924;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S924.Size + 4, Pack=1)]
//         public struct S924<T>
//         {
//             public readonly uint Count;

//             S924 Data;

//             [MethodImpl(Inline)]
//             public S924(int count, S924 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S924(uint count, S924 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count925<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S925.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S925<T> alloc925<T>(int count)
//             where T : unmanaged
//                 => new S925<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S925
//         {
//             public const int Size = 925;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S925.Size + 4, Pack=1)]
//         public struct S925<T>
//         {
//             public readonly uint Count;

//             S925 Data;

//             [MethodImpl(Inline)]
//             public S925(int count, S925 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S925(uint count, S925 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count926<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S926.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S926<T> alloc926<T>(int count)
//             where T : unmanaged
//                 => new S926<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S926
//         {
//             public const int Size = 926;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S926.Size + 4, Pack=1)]
//         public struct S926<T>
//         {
//             public readonly uint Count;

//             S926 Data;

//             [MethodImpl(Inline)]
//             public S926(int count, S926 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S926(uint count, S926 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count927<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S927.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S927<T> alloc927<T>(int count)
//             where T : unmanaged
//                 => new S927<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S927
//         {
//             public const int Size = 927;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S927.Size + 4, Pack=1)]
//         public struct S927<T>
//         {
//             public readonly uint Count;

//             S927 Data;

//             [MethodImpl(Inline)]
//             public S927(int count, S927 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S927(uint count, S927 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count928<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S928.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S928<T> alloc928<T>(int count)
//             where T : unmanaged
//                 => new S928<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S928
//         {
//             public const int Size = 928;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S928.Size + 4, Pack=1)]
//         public struct S928<T>
//         {
//             public readonly uint Count;

//             S928 Data;

//             [MethodImpl(Inline)]
//             public S928(int count, S928 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S928(uint count, S928 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count929<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S929.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S929<T> alloc929<T>(int count)
//             where T : unmanaged
//                 => new S929<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S929
//         {
//             public const int Size = 929;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S929.Size + 4, Pack=1)]
//         public struct S929<T>
//         {
//             public readonly uint Count;

//             S929 Data;

//             [MethodImpl(Inline)]
//             public S929(int count, S929 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S929(uint count, S929 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count930<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S930.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S930<T> alloc930<T>(int count)
//             where T : unmanaged
//                 => new S930<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S930
//         {
//             public const int Size = 930;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S930.Size + 4, Pack=1)]
//         public struct S930<T>
//         {
//             public readonly uint Count;

//             S930 Data;

//             [MethodImpl(Inline)]
//             public S930(int count, S930 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S930(uint count, S930 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count931<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S931.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S931<T> alloc931<T>(int count)
//             where T : unmanaged
//                 => new S931<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S931
//         {
//             public const int Size = 931;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S931.Size + 4, Pack=1)]
//         public struct S931<T>
//         {
//             public readonly uint Count;

//             S931 Data;

//             [MethodImpl(Inline)]
//             public S931(int count, S931 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S931(uint count, S931 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count932<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S932.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S932<T> alloc932<T>(int count)
//             where T : unmanaged
//                 => new S932<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S932
//         {
//             public const int Size = 932;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S932.Size + 4, Pack=1)]
//         public struct S932<T>
//         {
//             public readonly uint Count;

//             S932 Data;

//             [MethodImpl(Inline)]
//             public S932(int count, S932 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S932(uint count, S932 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count933<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S933.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S933<T> alloc933<T>(int count)
//             where T : unmanaged
//                 => new S933<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S933
//         {
//             public const int Size = 933;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S933.Size + 4, Pack=1)]
//         public struct S933<T>
//         {
//             public readonly uint Count;

//             S933 Data;

//             [MethodImpl(Inline)]
//             public S933(int count, S933 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S933(uint count, S933 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count934<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S934.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S934<T> alloc934<T>(int count)
//             where T : unmanaged
//                 => new S934<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S934
//         {
//             public const int Size = 934;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S934.Size + 4, Pack=1)]
//         public struct S934<T>
//         {
//             public readonly uint Count;

//             S934 Data;

//             [MethodImpl(Inline)]
//             public S934(int count, S934 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S934(uint count, S934 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count935<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S935.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S935<T> alloc935<T>(int count)
//             where T : unmanaged
//                 => new S935<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S935
//         {
//             public const int Size = 935;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S935.Size + 4, Pack=1)]
//         public struct S935<T>
//         {
//             public readonly uint Count;

//             S935 Data;

//             [MethodImpl(Inline)]
//             public S935(int count, S935 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S935(uint count, S935 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count936<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S936.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S936<T> alloc936<T>(int count)
//             where T : unmanaged
//                 => new S936<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S936
//         {
//             public const int Size = 936;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S936.Size + 4, Pack=1)]
//         public struct S936<T>
//         {
//             public readonly uint Count;

//             S936 Data;

//             [MethodImpl(Inline)]
//             public S936(int count, S936 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S936(uint count, S936 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count937<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S937.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S937<T> alloc937<T>(int count)
//             where T : unmanaged
//                 => new S937<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S937
//         {
//             public const int Size = 937;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S937.Size + 4, Pack=1)]
//         public struct S937<T>
//         {
//             public readonly uint Count;

//             S937 Data;

//             [MethodImpl(Inline)]
//             public S937(int count, S937 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S937(uint count, S937 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count938<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S938.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S938<T> alloc938<T>(int count)
//             where T : unmanaged
//                 => new S938<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S938
//         {
//             public const int Size = 938;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S938.Size + 4, Pack=1)]
//         public struct S938<T>
//         {
//             public readonly uint Count;

//             S938 Data;

//             [MethodImpl(Inline)]
//             public S938(int count, S938 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S938(uint count, S938 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count939<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S939.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S939<T> alloc939<T>(int count)
//             where T : unmanaged
//                 => new S939<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S939
//         {
//             public const int Size = 939;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S939.Size + 4, Pack=1)]
//         public struct S939<T>
//         {
//             public readonly uint Count;

//             S939 Data;

//             [MethodImpl(Inline)]
//             public S939(int count, S939 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S939(uint count, S939 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count940<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S940.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S940<T> alloc940<T>(int count)
//             where T : unmanaged
//                 => new S940<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S940
//         {
//             public const int Size = 940;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S940.Size + 4, Pack=1)]
//         public struct S940<T>
//         {
//             public readonly uint Count;

//             S940 Data;

//             [MethodImpl(Inline)]
//             public S940(int count, S940 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S940(uint count, S940 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count941<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S941.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S941<T> alloc941<T>(int count)
//             where T : unmanaged
//                 => new S941<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S941
//         {
//             public const int Size = 941;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S941.Size + 4, Pack=1)]
//         public struct S941<T>
//         {
//             public readonly uint Count;

//             S941 Data;

//             [MethodImpl(Inline)]
//             public S941(int count, S941 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S941(uint count, S941 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count942<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S942.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S942<T> alloc942<T>(int count)
//             where T : unmanaged
//                 => new S942<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S942
//         {
//             public const int Size = 942;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S942.Size + 4, Pack=1)]
//         public struct S942<T>
//         {
//             public readonly uint Count;

//             S942 Data;

//             [MethodImpl(Inline)]
//             public S942(int count, S942 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S942(uint count, S942 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count943<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S943.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S943<T> alloc943<T>(int count)
//             where T : unmanaged
//                 => new S943<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S943
//         {
//             public const int Size = 943;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S943.Size + 4, Pack=1)]
//         public struct S943<T>
//         {
//             public readonly uint Count;

//             S943 Data;

//             [MethodImpl(Inline)]
//             public S943(int count, S943 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S943(uint count, S943 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count944<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S944.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S944<T> alloc944<T>(int count)
//             where T : unmanaged
//                 => new S944<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S944
//         {
//             public const int Size = 944;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S944.Size + 4, Pack=1)]
//         public struct S944<T>
//         {
//             public readonly uint Count;

//             S944 Data;

//             [MethodImpl(Inline)]
//             public S944(int count, S944 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S944(uint count, S944 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count945<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S945.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S945<T> alloc945<T>(int count)
//             where T : unmanaged
//                 => new S945<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S945
//         {
//             public const int Size = 945;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S945.Size + 4, Pack=1)]
//         public struct S945<T>
//         {
//             public readonly uint Count;

//             S945 Data;

//             [MethodImpl(Inline)]
//             public S945(int count, S945 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S945(uint count, S945 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count946<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S946.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S946<T> alloc946<T>(int count)
//             where T : unmanaged
//                 => new S946<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S946
//         {
//             public const int Size = 946;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S946.Size + 4, Pack=1)]
//         public struct S946<T>
//         {
//             public readonly uint Count;

//             S946 Data;

//             [MethodImpl(Inline)]
//             public S946(int count, S946 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S946(uint count, S946 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count947<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S947.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S947<T> alloc947<T>(int count)
//             where T : unmanaged
//                 => new S947<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S947
//         {
//             public const int Size = 947;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S947.Size + 4, Pack=1)]
//         public struct S947<T>
//         {
//             public readonly uint Count;

//             S947 Data;

//             [MethodImpl(Inline)]
//             public S947(int count, S947 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S947(uint count, S947 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count948<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S948.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S948<T> alloc948<T>(int count)
//             where T : unmanaged
//                 => new S948<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S948
//         {
//             public const int Size = 948;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S948.Size + 4, Pack=1)]
//         public struct S948<T>
//         {
//             public readonly uint Count;

//             S948 Data;

//             [MethodImpl(Inline)]
//             public S948(int count, S948 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S948(uint count, S948 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count949<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S949.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S949<T> alloc949<T>(int count)
//             where T : unmanaged
//                 => new S949<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S949
//         {
//             public const int Size = 949;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S949.Size + 4, Pack=1)]
//         public struct S949<T>
//         {
//             public readonly uint Count;

//             S949 Data;

//             [MethodImpl(Inline)]
//             public S949(int count, S949 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S949(uint count, S949 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count950<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S950.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S950<T> alloc950<T>(int count)
//             where T : unmanaged
//                 => new S950<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S950
//         {
//             public const int Size = 950;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S950.Size + 4, Pack=1)]
//         public struct S950<T>
//         {
//             public readonly uint Count;

//             S950 Data;

//             [MethodImpl(Inline)]
//             public S950(int count, S950 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S950(uint count, S950 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count951<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S951.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S951<T> alloc951<T>(int count)
//             where T : unmanaged
//                 => new S951<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S951
//         {
//             public const int Size = 951;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S951.Size + 4, Pack=1)]
//         public struct S951<T>
//         {
//             public readonly uint Count;

//             S951 Data;

//             [MethodImpl(Inline)]
//             public S951(int count, S951 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S951(uint count, S951 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count952<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S952.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S952<T> alloc952<T>(int count)
//             where T : unmanaged
//                 => new S952<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S952
//         {
//             public const int Size = 952;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S952.Size + 4, Pack=1)]
//         public struct S952<T>
//         {
//             public readonly uint Count;

//             S952 Data;

//             [MethodImpl(Inline)]
//             public S952(int count, S952 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S952(uint count, S952 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count953<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S953.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S953<T> alloc953<T>(int count)
//             where T : unmanaged
//                 => new S953<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S953
//         {
//             public const int Size = 953;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S953.Size + 4, Pack=1)]
//         public struct S953<T>
//         {
//             public readonly uint Count;

//             S953 Data;

//             [MethodImpl(Inline)]
//             public S953(int count, S953 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S953(uint count, S953 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count954<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S954.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S954<T> alloc954<T>(int count)
//             where T : unmanaged
//                 => new S954<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S954
//         {
//             public const int Size = 954;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S954.Size + 4, Pack=1)]
//         public struct S954<T>
//         {
//             public readonly uint Count;

//             S954 Data;

//             [MethodImpl(Inline)]
//             public S954(int count, S954 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S954(uint count, S954 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count955<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S955.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S955<T> alloc955<T>(int count)
//             where T : unmanaged
//                 => new S955<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S955
//         {
//             public const int Size = 955;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S955.Size + 4, Pack=1)]
//         public struct S955<T>
//         {
//             public readonly uint Count;

//             S955 Data;

//             [MethodImpl(Inline)]
//             public S955(int count, S955 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S955(uint count, S955 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count956<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S956.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S956<T> alloc956<T>(int count)
//             where T : unmanaged
//                 => new S956<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S956
//         {
//             public const int Size = 956;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S956.Size + 4, Pack=1)]
//         public struct S956<T>
//         {
//             public readonly uint Count;

//             S956 Data;

//             [MethodImpl(Inline)]
//             public S956(int count, S956 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S956(uint count, S956 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count957<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S957.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S957<T> alloc957<T>(int count)
//             where T : unmanaged
//                 => new S957<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S957
//         {
//             public const int Size = 957;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S957.Size + 4, Pack=1)]
//         public struct S957<T>
//         {
//             public readonly uint Count;

//             S957 Data;

//             [MethodImpl(Inline)]
//             public S957(int count, S957 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S957(uint count, S957 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count958<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S958.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S958<T> alloc958<T>(int count)
//             where T : unmanaged
//                 => new S958<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S958
//         {
//             public const int Size = 958;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S958.Size + 4, Pack=1)]
//         public struct S958<T>
//         {
//             public readonly uint Count;

//             S958 Data;

//             [MethodImpl(Inline)]
//             public S958(int count, S958 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S958(uint count, S958 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count959<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S959.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S959<T> alloc959<T>(int count)
//             where T : unmanaged
//                 => new S959<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S959
//         {
//             public const int Size = 959;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S959.Size + 4, Pack=1)]
//         public struct S959<T>
//         {
//             public readonly uint Count;

//             S959 Data;

//             [MethodImpl(Inline)]
//             public S959(int count, S959 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S959(uint count, S959 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count960<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S960.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S960<T> alloc960<T>(int count)
//             where T : unmanaged
//                 => new S960<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S960
//         {
//             public const int Size = 960;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S960.Size + 4, Pack=1)]
//         public struct S960<T>
//         {
//             public readonly uint Count;

//             S960 Data;

//             [MethodImpl(Inline)]
//             public S960(int count, S960 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S960(uint count, S960 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count961<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S961.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S961<T> alloc961<T>(int count)
//             where T : unmanaged
//                 => new S961<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S961
//         {
//             public const int Size = 961;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S961.Size + 4, Pack=1)]
//         public struct S961<T>
//         {
//             public readonly uint Count;

//             S961 Data;

//             [MethodImpl(Inline)]
//             public S961(int count, S961 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S961(uint count, S961 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count962<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S962.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S962<T> alloc962<T>(int count)
//             where T : unmanaged
//                 => new S962<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S962
//         {
//             public const int Size = 962;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S962.Size + 4, Pack=1)]
//         public struct S962<T>
//         {
//             public readonly uint Count;

//             S962 Data;

//             [MethodImpl(Inline)]
//             public S962(int count, S962 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S962(uint count, S962 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count963<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S963.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S963<T> alloc963<T>(int count)
//             where T : unmanaged
//                 => new S963<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S963
//         {
//             public const int Size = 963;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S963.Size + 4, Pack=1)]
//         public struct S963<T>
//         {
//             public readonly uint Count;

//             S963 Data;

//             [MethodImpl(Inline)]
//             public S963(int count, S963 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S963(uint count, S963 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count964<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S964.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S964<T> alloc964<T>(int count)
//             where T : unmanaged
//                 => new S964<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S964
//         {
//             public const int Size = 964;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S964.Size + 4, Pack=1)]
//         public struct S964<T>
//         {
//             public readonly uint Count;

//             S964 Data;

//             [MethodImpl(Inline)]
//             public S964(int count, S964 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S964(uint count, S964 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count965<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S965.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S965<T> alloc965<T>(int count)
//             where T : unmanaged
//                 => new S965<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S965
//         {
//             public const int Size = 965;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S965.Size + 4, Pack=1)]
//         public struct S965<T>
//         {
//             public readonly uint Count;

//             S965 Data;

//             [MethodImpl(Inline)]
//             public S965(int count, S965 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S965(uint count, S965 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count966<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S966.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S966<T> alloc966<T>(int count)
//             where T : unmanaged
//                 => new S966<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S966
//         {
//             public const int Size = 966;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S966.Size + 4, Pack=1)]
//         public struct S966<T>
//         {
//             public readonly uint Count;

//             S966 Data;

//             [MethodImpl(Inline)]
//             public S966(int count, S966 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S966(uint count, S966 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count967<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S967.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S967<T> alloc967<T>(int count)
//             where T : unmanaged
//                 => new S967<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S967
//         {
//             public const int Size = 967;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S967.Size + 4, Pack=1)]
//         public struct S967<T>
//         {
//             public readonly uint Count;

//             S967 Data;

//             [MethodImpl(Inline)]
//             public S967(int count, S967 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S967(uint count, S967 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count968<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S968.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S968<T> alloc968<T>(int count)
//             where T : unmanaged
//                 => new S968<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S968
//         {
//             public const int Size = 968;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S968.Size + 4, Pack=1)]
//         public struct S968<T>
//         {
//             public readonly uint Count;

//             S968 Data;

//             [MethodImpl(Inline)]
//             public S968(int count, S968 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S968(uint count, S968 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count969<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S969.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S969<T> alloc969<T>(int count)
//             where T : unmanaged
//                 => new S969<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S969
//         {
//             public const int Size = 969;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S969.Size + 4, Pack=1)]
//         public struct S969<T>
//         {
//             public readonly uint Count;

//             S969 Data;

//             [MethodImpl(Inline)]
//             public S969(int count, S969 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S969(uint count, S969 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count970<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S970.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S970<T> alloc970<T>(int count)
//             where T : unmanaged
//                 => new S970<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S970
//         {
//             public const int Size = 970;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S970.Size + 4, Pack=1)]
//         public struct S970<T>
//         {
//             public readonly uint Count;

//             S970 Data;

//             [MethodImpl(Inline)]
//             public S970(int count, S970 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S970(uint count, S970 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count971<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S971.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S971<T> alloc971<T>(int count)
//             where T : unmanaged
//                 => new S971<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S971
//         {
//             public const int Size = 971;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S971.Size + 4, Pack=1)]
//         public struct S971<T>
//         {
//             public readonly uint Count;

//             S971 Data;

//             [MethodImpl(Inline)]
//             public S971(int count, S971 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S971(uint count, S971 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count972<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S972.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S972<T> alloc972<T>(int count)
//             where T : unmanaged
//                 => new S972<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S972
//         {
//             public const int Size = 972;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S972.Size + 4, Pack=1)]
//         public struct S972<T>
//         {
//             public readonly uint Count;

//             S972 Data;

//             [MethodImpl(Inline)]
//             public S972(int count, S972 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S972(uint count, S972 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count973<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S973.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S973<T> alloc973<T>(int count)
//             where T : unmanaged
//                 => new S973<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S973
//         {
//             public const int Size = 973;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S973.Size + 4, Pack=1)]
//         public struct S973<T>
//         {
//             public readonly uint Count;

//             S973 Data;

//             [MethodImpl(Inline)]
//             public S973(int count, S973 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S973(uint count, S973 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count974<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S974.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S974<T> alloc974<T>(int count)
//             where T : unmanaged
//                 => new S974<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S974
//         {
//             public const int Size = 974;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S974.Size + 4, Pack=1)]
//         public struct S974<T>
//         {
//             public readonly uint Count;

//             S974 Data;

//             [MethodImpl(Inline)]
//             public S974(int count, S974 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S974(uint count, S974 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count975<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S975.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S975<T> alloc975<T>(int count)
//             where T : unmanaged
//                 => new S975<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S975
//         {
//             public const int Size = 975;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S975.Size + 4, Pack=1)]
//         public struct S975<T>
//         {
//             public readonly uint Count;

//             S975 Data;

//             [MethodImpl(Inline)]
//             public S975(int count, S975 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S975(uint count, S975 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count976<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S976.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S976<T> alloc976<T>(int count)
//             where T : unmanaged
//                 => new S976<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S976
//         {
//             public const int Size = 976;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S976.Size + 4, Pack=1)]
//         public struct S976<T>
//         {
//             public readonly uint Count;

//             S976 Data;

//             [MethodImpl(Inline)]
//             public S976(int count, S976 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S976(uint count, S976 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count977<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S977.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S977<T> alloc977<T>(int count)
//             where T : unmanaged
//                 => new S977<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S977
//         {
//             public const int Size = 977;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S977.Size + 4, Pack=1)]
//         public struct S977<T>
//         {
//             public readonly uint Count;

//             S977 Data;

//             [MethodImpl(Inline)]
//             public S977(int count, S977 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S977(uint count, S977 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count978<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S978.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S978<T> alloc978<T>(int count)
//             where T : unmanaged
//                 => new S978<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S978
//         {
//             public const int Size = 978;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S978.Size + 4, Pack=1)]
//         public struct S978<T>
//         {
//             public readonly uint Count;

//             S978 Data;

//             [MethodImpl(Inline)]
//             public S978(int count, S978 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S978(uint count, S978 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count979<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S979.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S979<T> alloc979<T>(int count)
//             where T : unmanaged
//                 => new S979<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S979
//         {
//             public const int Size = 979;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S979.Size + 4, Pack=1)]
//         public struct S979<T>
//         {
//             public readonly uint Count;

//             S979 Data;

//             [MethodImpl(Inline)]
//             public S979(int count, S979 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S979(uint count, S979 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count980<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S980.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S980<T> alloc980<T>(int count)
//             where T : unmanaged
//                 => new S980<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S980
//         {
//             public const int Size = 980;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S980.Size + 4, Pack=1)]
//         public struct S980<T>
//         {
//             public readonly uint Count;

//             S980 Data;

//             [MethodImpl(Inline)]
//             public S980(int count, S980 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S980(uint count, S980 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count981<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S981.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S981<T> alloc981<T>(int count)
//             where T : unmanaged
//                 => new S981<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S981
//         {
//             public const int Size = 981;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S981.Size + 4, Pack=1)]
//         public struct S981<T>
//         {
//             public readonly uint Count;

//             S981 Data;

//             [MethodImpl(Inline)]
//             public S981(int count, S981 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S981(uint count, S981 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count982<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S982.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S982<T> alloc982<T>(int count)
//             where T : unmanaged
//                 => new S982<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S982
//         {
//             public const int Size = 982;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S982.Size + 4, Pack=1)]
//         public struct S982<T>
//         {
//             public readonly uint Count;

//             S982 Data;

//             [MethodImpl(Inline)]
//             public S982(int count, S982 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S982(uint count, S982 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count983<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S983.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S983<T> alloc983<T>(int count)
//             where T : unmanaged
//                 => new S983<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S983
//         {
//             public const int Size = 983;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S983.Size + 4, Pack=1)]
//         public struct S983<T>
//         {
//             public readonly uint Count;

//             S983 Data;

//             [MethodImpl(Inline)]
//             public S983(int count, S983 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S983(uint count, S983 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count984<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S984.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S984<T> alloc984<T>(int count)
//             where T : unmanaged
//                 => new S984<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S984
//         {
//             public const int Size = 984;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S984.Size + 4, Pack=1)]
//         public struct S984<T>
//         {
//             public readonly uint Count;

//             S984 Data;

//             [MethodImpl(Inline)]
//             public S984(int count, S984 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S984(uint count, S984 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count985<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S985.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S985<T> alloc985<T>(int count)
//             where T : unmanaged
//                 => new S985<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S985
//         {
//             public const int Size = 985;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S985.Size + 4, Pack=1)]
//         public struct S985<T>
//         {
//             public readonly uint Count;

//             S985 Data;

//             [MethodImpl(Inline)]
//             public S985(int count, S985 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S985(uint count, S985 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count986<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S986.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S986<T> alloc986<T>(int count)
//             where T : unmanaged
//                 => new S986<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S986
//         {
//             public const int Size = 986;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S986.Size + 4, Pack=1)]
//         public struct S986<T>
//         {
//             public readonly uint Count;

//             S986 Data;

//             [MethodImpl(Inline)]
//             public S986(int count, S986 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S986(uint count, S986 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count987<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S987.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S987<T> alloc987<T>(int count)
//             where T : unmanaged
//                 => new S987<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S987
//         {
//             public const int Size = 987;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S987.Size + 4, Pack=1)]
//         public struct S987<T>
//         {
//             public readonly uint Count;

//             S987 Data;

//             [MethodImpl(Inline)]
//             public S987(int count, S987 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S987(uint count, S987 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count988<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S988.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S988<T> alloc988<T>(int count)
//             where T : unmanaged
//                 => new S988<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S988
//         {
//             public const int Size = 988;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S988.Size + 4, Pack=1)]
//         public struct S988<T>
//         {
//             public readonly uint Count;

//             S988 Data;

//             [MethodImpl(Inline)]
//             public S988(int count, S988 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S988(uint count, S988 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count989<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S989.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S989<T> alloc989<T>(int count)
//             where T : unmanaged
//                 => new S989<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S989
//         {
//             public const int Size = 989;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S989.Size + 4, Pack=1)]
//         public struct S989<T>
//         {
//             public readonly uint Count;

//             S989 Data;

//             [MethodImpl(Inline)]
//             public S989(int count, S989 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S989(uint count, S989 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count990<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S990.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S990<T> alloc990<T>(int count)
//             where T : unmanaged
//                 => new S990<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S990
//         {
//             public const int Size = 990;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S990.Size + 4, Pack=1)]
//         public struct S990<T>
//         {
//             public readonly uint Count;

//             S990 Data;

//             [MethodImpl(Inline)]
//             public S990(int count, S990 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S990(uint count, S990 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count991<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S991.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S991<T> alloc991<T>(int count)
//             where T : unmanaged
//                 => new S991<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S991
//         {
//             public const int Size = 991;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S991.Size + 4, Pack=1)]
//         public struct S991<T>
//         {
//             public readonly uint Count;

//             S991 Data;

//             [MethodImpl(Inline)]
//             public S991(int count, S991 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S991(uint count, S991 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count992<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S992.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S992<T> alloc992<T>(int count)
//             where T : unmanaged
//                 => new S992<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S992
//         {
//             public const int Size = 992;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S992.Size + 4, Pack=1)]
//         public struct S992<T>
//         {
//             public readonly uint Count;

//             S992 Data;

//             [MethodImpl(Inline)]
//             public S992(int count, S992 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S992(uint count, S992 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count993<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S993.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S993<T> alloc993<T>(int count)
//             where T : unmanaged
//                 => new S993<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S993
//         {
//             public const int Size = 993;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S993.Size + 4, Pack=1)]
//         public struct S993<T>
//         {
//             public readonly uint Count;

//             S993 Data;

//             [MethodImpl(Inline)]
//             public S993(int count, S993 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S993(uint count, S993 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count994<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S994.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S994<T> alloc994<T>(int count)
//             where T : unmanaged
//                 => new S994<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S994
//         {
//             public const int Size = 994;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S994.Size + 4, Pack=1)]
//         public struct S994<T>
//         {
//             public readonly uint Count;

//             S994 Data;

//             [MethodImpl(Inline)]
//             public S994(int count, S994 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S994(uint count, S994 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count995<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S995.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S995<T> alloc995<T>(int count)
//             where T : unmanaged
//                 => new S995<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S995
//         {
//             public const int Size = 995;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S995.Size + 4, Pack=1)]
//         public struct S995<T>
//         {
//             public readonly uint Count;

//             S995 Data;

//             [MethodImpl(Inline)]
//             public S995(int count, S995 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S995(uint count, S995 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count996<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S996.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S996<T> alloc996<T>(int count)
//             where T : unmanaged
//                 => new S996<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S996
//         {
//             public const int Size = 996;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S996.Size + 4, Pack=1)]
//         public struct S996<T>
//         {
//             public readonly uint Count;

//             S996 Data;

//             [MethodImpl(Inline)]
//             public S996(int count, S996 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S996(uint count, S996 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count997<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S997.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S997<T> alloc997<T>(int count)
//             where T : unmanaged
//                 => new S997<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S997
//         {
//             public const int Size = 997;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S997.Size + 4, Pack=1)]
//         public struct S997<T>
//         {
//             public readonly uint Count;

//             S997 Data;

//             [MethodImpl(Inline)]
//             public S997(int count, S997 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S997(uint count, S997 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count998<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S998.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S998<T> alloc998<T>(int count)
//             where T : unmanaged
//                 => new S998<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S998
//         {
//             public const int Size = 998;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S998.Size + 4, Pack=1)]
//         public struct S998<T>
//         {
//             public readonly uint Count;

//             S998 Data;

//             [MethodImpl(Inline)]
//             public S998(int count, S998 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S998(uint count, S998 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count999<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S999.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S999<T> alloc999<T>(int count)
//             where T : unmanaged
//                 => new S999<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S999
//         {
//             public const int Size = 999;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S999.Size + 4, Pack=1)]
//         public struct S999<T>
//         {
//             public readonly uint Count;

//             S999 Data;

//             [MethodImpl(Inline)]
//             public S999(int count, S999 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S999(uint count, S999 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1000<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1000.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1000<T> alloc1000<T>(int count)
//             where T : unmanaged
//                 => new S1000<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1000
//         {
//             public const int Size = 1000;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1000.Size + 4, Pack=1)]
//         public struct S1000<T>
//         {
//             public readonly uint Count;

//             S1000 Data;

//             [MethodImpl(Inline)]
//             public S1000(int count, S1000 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1000(uint count, S1000 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1001<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1001.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1001<T> alloc1001<T>(int count)
//             where T : unmanaged
//                 => new S1001<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1001
//         {
//             public const int Size = 1001;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1001.Size + 4, Pack=1)]
//         public struct S1001<T>
//         {
//             public readonly uint Count;

//             S1001 Data;

//             [MethodImpl(Inline)]
//             public S1001(int count, S1001 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1001(uint count, S1001 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1002<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1002.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1002<T> alloc1002<T>(int count)
//             where T : unmanaged
//                 => new S1002<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1002
//         {
//             public const int Size = 1002;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1002.Size + 4, Pack=1)]
//         public struct S1002<T>
//         {
//             public readonly uint Count;

//             S1002 Data;

//             [MethodImpl(Inline)]
//             public S1002(int count, S1002 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1002(uint count, S1002 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1003<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1003.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1003<T> alloc1003<T>(int count)
//             where T : unmanaged
//                 => new S1003<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1003
//         {
//             public const int Size = 1003;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1003.Size + 4, Pack=1)]
//         public struct S1003<T>
//         {
//             public readonly uint Count;

//             S1003 Data;

//             [MethodImpl(Inline)]
//             public S1003(int count, S1003 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1003(uint count, S1003 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1004<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1004.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1004<T> alloc1004<T>(int count)
//             where T : unmanaged
//                 => new S1004<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1004
//         {
//             public const int Size = 1004;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1004.Size + 4, Pack=1)]
//         public struct S1004<T>
//         {
//             public readonly uint Count;

//             S1004 Data;

//             [MethodImpl(Inline)]
//             public S1004(int count, S1004 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1004(uint count, S1004 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1005<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1005.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1005<T> alloc1005<T>(int count)
//             where T : unmanaged
//                 => new S1005<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1005
//         {
//             public const int Size = 1005;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1005.Size + 4, Pack=1)]
//         public struct S1005<T>
//         {
//             public readonly uint Count;

//             S1005 Data;

//             [MethodImpl(Inline)]
//             public S1005(int count, S1005 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1005(uint count, S1005 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1006<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1006.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1006<T> alloc1006<T>(int count)
//             where T : unmanaged
//                 => new S1006<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1006
//         {
//             public const int Size = 1006;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1006.Size + 4, Pack=1)]
//         public struct S1006<T>
//         {
//             public readonly uint Count;

//             S1006 Data;

//             [MethodImpl(Inline)]
//             public S1006(int count, S1006 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1006(uint count, S1006 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1007<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1007.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1007<T> alloc1007<T>(int count)
//             where T : unmanaged
//                 => new S1007<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1007
//         {
//             public const int Size = 1007;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1007.Size + 4, Pack=1)]
//         public struct S1007<T>
//         {
//             public readonly uint Count;

//             S1007 Data;

//             [MethodImpl(Inline)]
//             public S1007(int count, S1007 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1007(uint count, S1007 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1008<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1008.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1008<T> alloc1008<T>(int count)
//             where T : unmanaged
//                 => new S1008<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1008
//         {
//             public const int Size = 1008;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1008.Size + 4, Pack=1)]
//         public struct S1008<T>
//         {
//             public readonly uint Count;

//             S1008 Data;

//             [MethodImpl(Inline)]
//             public S1008(int count, S1008 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1008(uint count, S1008 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1009<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1009.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1009<T> alloc1009<T>(int count)
//             where T : unmanaged
//                 => new S1009<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1009
//         {
//             public const int Size = 1009;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1009.Size + 4, Pack=1)]
//         public struct S1009<T>
//         {
//             public readonly uint Count;

//             S1009 Data;

//             [MethodImpl(Inline)]
//             public S1009(int count, S1009 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1009(uint count, S1009 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1010<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1010.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1010<T> alloc1010<T>(int count)
//             where T : unmanaged
//                 => new S1010<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1010
//         {
//             public const int Size = 1010;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1010.Size + 4, Pack=1)]
//         public struct S1010<T>
//         {
//             public readonly uint Count;

//             S1010 Data;

//             [MethodImpl(Inline)]
//             public S1010(int count, S1010 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1010(uint count, S1010 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1011<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1011.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1011<T> alloc1011<T>(int count)
//             where T : unmanaged
//                 => new S1011<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1011
//         {
//             public const int Size = 1011;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1011.Size + 4, Pack=1)]
//         public struct S1011<T>
//         {
//             public readonly uint Count;

//             S1011 Data;

//             [MethodImpl(Inline)]
//             public S1011(int count, S1011 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1011(uint count, S1011 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1012<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1012.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1012<T> alloc1012<T>(int count)
//             where T : unmanaged
//                 => new S1012<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1012
//         {
//             public const int Size = 1012;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1012.Size + 4, Pack=1)]
//         public struct S1012<T>
//         {
//             public readonly uint Count;

//             S1012 Data;

//             [MethodImpl(Inline)]
//             public S1012(int count, S1012 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1012(uint count, S1012 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1013<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1013.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1013<T> alloc1013<T>(int count)
//             where T : unmanaged
//                 => new S1013<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1013
//         {
//             public const int Size = 1013;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1013.Size + 4, Pack=1)]
//         public struct S1013<T>
//         {
//             public readonly uint Count;

//             S1013 Data;

//             [MethodImpl(Inline)]
//             public S1013(int count, S1013 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1013(uint count, S1013 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1014<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1014.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1014<T> alloc1014<T>(int count)
//             where T : unmanaged
//                 => new S1014<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1014
//         {
//             public const int Size = 1014;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1014.Size + 4, Pack=1)]
//         public struct S1014<T>
//         {
//             public readonly uint Count;

//             S1014 Data;

//             [MethodImpl(Inline)]
//             public S1014(int count, S1014 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1014(uint count, S1014 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1015<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1015.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1015<T> alloc1015<T>(int count)
//             where T : unmanaged
//                 => new S1015<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1015
//         {
//             public const int Size = 1015;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1015.Size + 4, Pack=1)]
//         public struct S1015<T>
//         {
//             public readonly uint Count;

//             S1015 Data;

//             [MethodImpl(Inline)]
//             public S1015(int count, S1015 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1015(uint count, S1015 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1016<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1016.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1016<T> alloc1016<T>(int count)
//             where T : unmanaged
//                 => new S1016<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1016
//         {
//             public const int Size = 1016;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1016.Size + 4, Pack=1)]
//         public struct S1016<T>
//         {
//             public readonly uint Count;

//             S1016 Data;

//             [MethodImpl(Inline)]
//             public S1016(int count, S1016 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1016(uint count, S1016 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1017<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1017.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1017<T> alloc1017<T>(int count)
//             where T : unmanaged
//                 => new S1017<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1017
//         {
//             public const int Size = 1017;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1017.Size + 4, Pack=1)]
//         public struct S1017<T>
//         {
//             public readonly uint Count;

//             S1017 Data;

//             [MethodImpl(Inline)]
//             public S1017(int count, S1017 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1017(uint count, S1017 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1018<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1018.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1018<T> alloc1018<T>(int count)
//             where T : unmanaged
//                 => new S1018<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1018
//         {
//             public const int Size = 1018;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1018.Size + 4, Pack=1)]
//         public struct S1018<T>
//         {
//             public readonly uint Count;

//             S1018 Data;

//             [MethodImpl(Inline)]
//             public S1018(int count, S1018 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1018(uint count, S1018 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1019<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1019.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1019<T> alloc1019<T>(int count)
//             where T : unmanaged
//                 => new S1019<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1019
//         {
//             public const int Size = 1019;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1019.Size + 4, Pack=1)]
//         public struct S1019<T>
//         {
//             public readonly uint Count;

//             S1019 Data;

//             [MethodImpl(Inline)]
//             public S1019(int count, S1019 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1019(uint count, S1019 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1020<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1020.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1020<T> alloc1020<T>(int count)
//             where T : unmanaged
//                 => new S1020<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1020
//         {
//             public const int Size = 1020;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1020.Size + 4, Pack=1)]
//         public struct S1020<T>
//         {
//             public readonly uint Count;

//             S1020 Data;

//             [MethodImpl(Inline)]
//             public S1020(int count, S1020 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1020(uint count, S1020 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1021<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1021.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1021<T> alloc1021<T>(int count)
//             where T : unmanaged
//                 => new S1021<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1021
//         {
//             public const int Size = 1021;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1021.Size + 4, Pack=1)]
//         public struct S1021<T>
//         {
//             public readonly uint Count;

//             S1021 Data;

//             [MethodImpl(Inline)]
//             public S1021(int count, S1021 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1021(uint count, S1021 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1022<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1022.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1022<T> alloc1022<T>(int count)
//             where T : unmanaged
//                 => new S1022<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1022
//         {
//             public const int Size = 1022;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1022.Size + 4, Pack=1)]
//         public struct S1022<T>
//         {
//             public readonly uint Count;

//             S1022 Data;

//             [MethodImpl(Inline)]
//             public S1022(int count, S1022 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1022(uint count, S1022 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1023<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1023.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1023<T> alloc1023<T>(int count)
//             where T : unmanaged
//                 => new S1023<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1023
//         {
//             public const int Size = 1023;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1023.Size + 4, Pack=1)]
//         public struct S1023<T>
//         {
//             public readonly uint Count;

//             S1023 Data;

//             [MethodImpl(Inline)]
//             public S1023(int count, S1023 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1023(uint count, S1023 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

// namespace Z0
// {

//     partial struct DataStores
//     {
//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static uint count1024<T>()
//             where T : unmanaged
//                 => (uint)(sys.size<T>()/S1024.Size);

//         [MethodImpl(Inline), Op, Closures(Closure)]
//         public static S1024<T> alloc1024<T>(int count)
//             where T : unmanaged
//                 => new S1024<T>(count, default);

//         [StructLayout(LayoutKind.Sequential, Size=Size, Pack=1)]
//         public struct S1024
//         {
//             public const int Size = 1024;

//             public Span<byte> Data
//             {
//                 [MethodImpl(Inline)]
//                 get => sys.bytes(this);
//             }

//             public ref byte First
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.first(Data);
//             }

//             public ref byte this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }

//             public ref byte this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.seek(Data,i);
//             }
//         }

//         [StructLayout(LayoutKind.Sequential, Size=S1024.Size + 4, Pack=1)]
//         public struct S1024<T>
//         {
//             public readonly uint Count;

//             S1024 Data;

//             [MethodImpl(Inline)]
//             public S1024(int count, S1024 data)
//             {
//                 Count = (uint)count;
//                 Data = data;
//             }

//             [MethodImpl(Inline)]
//             public S1024(uint count, S1024 data)
//             {
//                 Count = count;
//                 Data = data;
//             }

//             public ref T this[int i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }

//             public ref T this[uint i]
//             {
//                 [MethodImpl(Inline)]
//                 get => ref sys.@as<T>(sys.seek(Data.First,i*sys.size<T>()));
//             }
//         }
//     }
// }

